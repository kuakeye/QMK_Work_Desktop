   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB4:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** 
  18:./tmk_core/common/keyboard.c **** #include <stdint.h>
  19:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:./tmk_core/common/keyboard.c **** #include "matrix.h"
  21:./tmk_core/common/keyboard.c **** #include "keymap.h"
  22:./tmk_core/common/keyboard.c **** #include "host.h"
  23:./tmk_core/common/keyboard.c **** #include "led.h"
  24:./tmk_core/common/keyboard.c **** #include "keycode.h"
  25:./tmk_core/common/keyboard.c **** #include "timer.h"
  26:./tmk_core/common/keyboard.c **** #include "print.h"
  27:./tmk_core/common/keyboard.c **** #include "debug.h"
  28:./tmk_core/common/keyboard.c **** #include "command.h"
  29:./tmk_core/common/keyboard.c **** #include "util.h"
  30:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:./tmk_core/common/keyboard.c **** #include "backlight.h"
  33:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  36:./tmk_core/common/keyboard.c **** #else
  37:./tmk_core/common/keyboard.c **** #   include "magic.h"
  38:./tmk_core/common/keyboard.c **** #endif
  39:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  41:./tmk_core/common/keyboard.c **** #endif
  42:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  44:./tmk_core/common/keyboard.c **** #endif
  45:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  47:./tmk_core/common/keyboard.c **** #endif
  48:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:./tmk_core/common/keyboard.c **** #   include "adb.h"
  50:./tmk_core/common/keyboard.c **** #endif
  51:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  53:./tmk_core/common/keyboard.c **** #endif
  54:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:./tmk_core/common/keyboard.c **** #   include "process_steno.h"
  56:./tmk_core/common/keyboard.c **** #endif
  57:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:./tmk_core/common/keyboard.c **** #   include "fauxclicky.h"
  59:./tmk_core/common/keyboard.c **** #endif
  60:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  62:./tmk_core/common/keyboard.c **** #endif
  63:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  65:./tmk_core/common/keyboard.c **** #endif
  66:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:./tmk_core/common/keyboard.c **** #   include "pointing_device.h"
  68:./tmk_core/common/keyboard.c **** #endif
  69:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:./tmk_core/common/keyboard.c **** #   include "process_midi.h"
  71:./tmk_core/common/keyboard.c **** #endif
  72:./tmk_core/common/keyboard.c **** 
  73:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  74:./tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  75:./tmk_core/common/keyboard.c **** static matrix_row_t get_real_keys(uint8_t row, matrix_row_t rowdata){
  76:./tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  77:./tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  78:./tmk_core/common/keyboard.c ****         //read each key in the row data and check if the keymap defines it as a real key
  79:./tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1<<col))){
  80:./tmk_core/common/keyboard.c ****             //this creates new row data, if a key is defined in the keymap, it will be set here
  81:./tmk_core/common/keyboard.c ****             out |= 1<<col;
  82:./tmk_core/common/keyboard.c ****         }
  83:./tmk_core/common/keyboard.c ****     }
  84:./tmk_core/common/keyboard.c ****     return out;
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata)
  88:./tmk_core/common/keyboard.c **** {
  89:./tmk_core/common/keyboard.c ****     rowdata &= rowdata-1; //if there are less than two bits (keys) set, rowdata will become zero
  90:./tmk_core/common/keyboard.c ****     return rowdata;
  91:./tmk_core/common/keyboard.c **** }
  92:./tmk_core/common/keyboard.c **** 
  93:./tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata)
  94:./tmk_core/common/keyboard.c **** {
  95:./tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
  96:./tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
  97:./tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
  98:./tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
  99:./tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 100:./tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0){
 101:./tmk_core/common/keyboard.c ****         return false;
 102:./tmk_core/common/keyboard.c ****     }
 103:./tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 104:./tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 105:./tmk_core/common/keyboard.c ****     so they are filtered out.
 106:./tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 107:./tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 108:./tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 109:./tmk_core/common/keyboard.c ****     */
 110:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 111:./tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)){
 112:./tmk_core/common/keyboard.c ****             return true;
 113:./tmk_core/common/keyboard.c ****         }
 114:./tmk_core/common/keyboard.c ****     }
 115:./tmk_core/common/keyboard.c ****     return false;
 116:./tmk_core/common/keyboard.c **** }
 117:./tmk_core/common/keyboard.c **** 
 118:./tmk_core/common/keyboard.c **** #endif
 119:./tmk_core/common/keyboard.c **** 
 120:./tmk_core/common/keyboard.c **** /** \brief matrix_setup
 121:./tmk_core/common/keyboard.c ****  *
 122:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 123:./tmk_core/common/keyboard.c ****  */
 124:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
 125:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 125 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE4:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB5:
 126:./tmk_core/common/keyboard.c **** }
 127:./tmk_core/common/keyboard.c **** 
 128:./tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 129:./tmk_core/common/keyboard.c ****  *
 130:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 131:./tmk_core/common/keyboard.c ****  */
 132:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 132 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
 133:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 133 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE5:
  43               		.section	.text.is_keyboard_master,"ax",@progbits
  44               		.weak	is_keyboard_master
  46               	is_keyboard_master:
  47               	.LFB6:
 134:./tmk_core/common/keyboard.c **** }
 135:./tmk_core/common/keyboard.c **** 
 136:./tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 137:./tmk_core/common/keyboard.c ****  *
 138:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 139:./tmk_core/common/keyboard.c ****  */
 140:./tmk_core/common/keyboard.c **** __attribute__((weak))
 141:./tmk_core/common/keyboard.c **** bool is_keyboard_master(void) {
  48               		.loc 1 141 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
 142:./tmk_core/common/keyboard.c ****     return true;
 143:./tmk_core/common/keyboard.c **** }
  54               		.loc 1 143 0
  55 0000 81E0      		ldi r24,lo8(1)
  56 0002 0895      		ret
  57               		.cfi_endproc
  58               	.LFE6:
  60               		.section	.text.keyboard_init,"ax",@progbits
  61               	.global	keyboard_init
  63               	keyboard_init:
  64               	.LFB7:
 144:./tmk_core/common/keyboard.c **** 
 145:./tmk_core/common/keyboard.c **** /** \brief keyboard_init
 146:./tmk_core/common/keyboard.c ****  *
 147:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 148:./tmk_core/common/keyboard.c ****  */
 149:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  65               		.loc 1 149 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
 150:./tmk_core/common/keyboard.c ****     timer_init();
  71               		.loc 1 150 0
  72 0000 0E94 0000 		call timer_init
  73               	.LVL1:
 151:./tmk_core/common/keyboard.c ****     matrix_init();
  74               		.loc 1 151 0
  75 0004 0E94 0000 		call matrix_init
  76               	.LVL2:
 152:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 153:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
 154:./tmk_core/common/keyboard.c **** #endif
 155:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 156:./tmk_core/common/keyboard.c ****     serial_mouse_init();
 157:./tmk_core/common/keyboard.c **** #endif
 158:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 159:./tmk_core/common/keyboard.c ****     adb_mouse_init();
 160:./tmk_core/common/keyboard.c **** #endif
 161:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 162:./tmk_core/common/keyboard.c ****     bootmagic();
 163:./tmk_core/common/keyboard.c **** #else
 164:./tmk_core/common/keyboard.c ****     magic();
  77               		.loc 1 164 0
  78 0008 0C94 0000 		jmp magic
  79               	.LVL3:
  80               		.cfi_endproc
  81               	.LFE7:
  83               		.section	.text.keyboard_set_leds,"ax",@progbits
  84               	.global	keyboard_set_leds
  86               	keyboard_set_leds:
  87               	.LFB9:
 165:./tmk_core/common/keyboard.c **** #endif
 166:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 167:./tmk_core/common/keyboard.c ****     backlight_init();
 168:./tmk_core/common/keyboard.c **** #endif
 169:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 170:./tmk_core/common/keyboard.c ****     rgblight_init();
 171:./tmk_core/common/keyboard.c **** #endif
 172:./tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 173:./tmk_core/common/keyboard.c ****     steno_init();
 174:./tmk_core/common/keyboard.c **** #endif
 175:./tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 176:./tmk_core/common/keyboard.c ****     fauxclicky_init();
 177:./tmk_core/common/keyboard.c **** #endif
 178:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 179:./tmk_core/common/keyboard.c ****     pointing_device_init();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 182:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 183:./tmk_core/common/keyboard.c **** #endif
 184:./tmk_core/common/keyboard.c **** }
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 187:./tmk_core/common/keyboard.c ****  *
 188:./tmk_core/common/keyboard.c ****  * Do routine keyboard jobs: 
 189:./tmk_core/common/keyboard.c ****  *
 190:./tmk_core/common/keyboard.c ****  * * scan matrix
 191:./tmk_core/common/keyboard.c ****  * * handle mouse movements
 192:./tmk_core/common/keyboard.c ****  * * run visualizer code
 193:./tmk_core/common/keyboard.c ****  * * handle midi commands
 194:./tmk_core/common/keyboard.c ****  * * light LEDs
 195:./tmk_core/common/keyboard.c ****  *
 196:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 197:./tmk_core/common/keyboard.c ****  */
 198:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 199:./tmk_core/common/keyboard.c **** {
 200:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 201:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 202:./tmk_core/common/keyboard.c ****   //  static matrix_row_t matrix_ghost[MATRIX_ROWS];
 203:./tmk_core/common/keyboard.c **** #endif
 204:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 205:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 206:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 207:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 208:./tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 209:./tmk_core/common/keyboard.c **** #endif
 210:./tmk_core/common/keyboard.c **** 
 211:./tmk_core/common/keyboard.c ****     matrix_scan();
 212:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 213:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 214:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 215:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 216:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 217:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 218:./tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 219:./tmk_core/common/keyboard.c ****                     /* Keep track of whether ghosted status has changed for
 220:./tmk_core/common/keyboard.c ****                     * debugging. But don't update matrix_prev until un-ghosted, or
 221:./tmk_core/common/keyboard.c ****                     * the last key would be lost.
 222:./tmk_core/common/keyboard.c ****                     */
 223:./tmk_core/common/keyboard.c ****                     //if (debug_matrix && matrix_ghost[r] != matrix_row) {
 224:./tmk_core/common/keyboard.c ****                     //    matrix_print();
 225:./tmk_core/common/keyboard.c ****                     //}
 226:./tmk_core/common/keyboard.c ****                     //matrix_ghost[r] = matrix_row;
 227:./tmk_core/common/keyboard.c ****                     continue;
 228:./tmk_core/common/keyboard.c ****                 }
 229:./tmk_core/common/keyboard.c ****                 //matrix_ghost[r] = matrix_row;
 230:./tmk_core/common/keyboard.c **** #endif
 231:./tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 232:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 233:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 234:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 235:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 236:./tmk_core/common/keyboard.c ****                             .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 237:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 238:./tmk_core/common/keyboard.c ****                         });
 239:./tmk_core/common/keyboard.c ****                         // record a processed key
 240:./tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1<<c);
 241:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 242:./tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 243:./tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 244:./tmk_core/common/keyboard.c **** #endif
 245:./tmk_core/common/keyboard.c ****                         // process a key per task call
 246:./tmk_core/common/keyboard.c ****                         goto MATRIX_LOOP_END;
 247:./tmk_core/common/keyboard.c ****                     }
 248:./tmk_core/common/keyboard.c ****                 }
 249:./tmk_core/common/keyboard.c ****             }
 250:./tmk_core/common/keyboard.c ****         }
 251:./tmk_core/common/keyboard.c ****     }
 252:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 253:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 254:./tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 255:./tmk_core/common/keyboard.c ****     if (!keys_processed)
 256:./tmk_core/common/keyboard.c **** #endif
 257:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 258:./tmk_core/common/keyboard.c **** 
 259:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 260:./tmk_core/common/keyboard.c **** 
 261:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 262:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 263:./tmk_core/common/keyboard.c ****     mousekey_task();
 264:./tmk_core/common/keyboard.c **** #endif
 265:./tmk_core/common/keyboard.c **** 
 266:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 267:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 268:./tmk_core/common/keyboard.c **** #endif
 269:./tmk_core/common/keyboard.c **** 
 270:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 271:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 272:./tmk_core/common/keyboard.c **** #endif
 273:./tmk_core/common/keyboard.c **** 
 274:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 275:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 276:./tmk_core/common/keyboard.c **** #endif
 277:./tmk_core/common/keyboard.c **** 
 278:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 279:./tmk_core/common/keyboard.c **** 	serial_link_update();
 280:./tmk_core/common/keyboard.c **** #endif
 281:./tmk_core/common/keyboard.c **** 
 282:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 283:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 284:./tmk_core/common/keyboard.c **** #endif
 285:./tmk_core/common/keyboard.c **** 
 286:./tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 287:./tmk_core/common/keyboard.c ****     pointing_device_task();
 288:./tmk_core/common/keyboard.c **** #endif
 289:./tmk_core/common/keyboard.c **** 
 290:./tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 291:./tmk_core/common/keyboard.c ****     midi_task();
 292:./tmk_core/common/keyboard.c **** #endif
 293:./tmk_core/common/keyboard.c **** 
 294:./tmk_core/common/keyboard.c ****     // update LED
 295:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 296:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 297:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 298:./tmk_core/common/keyboard.c ****     }
 299:./tmk_core/common/keyboard.c **** }
 300:./tmk_core/common/keyboard.c **** 
 301:./tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 302:./tmk_core/common/keyboard.c ****  *
 303:./tmk_core/common/keyboard.c ****  * FIXME: needs doc
 304:./tmk_core/common/keyboard.c ****  */
 305:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 306:./tmk_core/common/keyboard.c **** {
  88               		.loc 1 306 0
  89               		.cfi_startproc
  90               	.LVL4:
  91 0000 CF93      		push r28
  92               	.LCFI0:
  93               		.cfi_def_cfa_offset 3
  94               		.cfi_offset 28, -2
  95               	/* prologue: function */
  96               	/* frame size = 0 */
  97               	/* stack size = 1 */
  98               	.L__stack_usage = 1
  99 0002 C82F      		mov r28,r24
 307:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 100               		.loc 1 307 0
 101 0004 8091 0000 		lds r24,debug_config
 102               	.LVL5:
 103 0008 82FF      		sbrs r24,2
 104 000a 00C0      		rjmp .L7
 105               		.loc 1 307 0 is_stmt 0 discriminator 1
 106 000c 80FF      		sbrs r24,0
 107 000e 00C0      		rjmp .L8
 108               		.loc 1 307 0 discriminator 2
 109 0010 80E0      		ldi r24,lo8(__c.2755)
 110 0012 90E0      		ldi r25,hi8(__c.2755)
 111 0014 0E94 0000 		call xputs
 112               	.LVL6:
 113               	.L8:
 114               		.loc 1 307 0 discriminator 4
 115 0018 8091 0000 		lds r24,debug_config
 116 001c 80FF      		sbrs r24,0
 117 001e 00C0      		rjmp .L9
 118               		.loc 1 307 0 discriminator 5
 119 0020 1F92      		push __zero_reg__
 120               	.LCFI1:
 121               		.cfi_def_cfa_offset 4
 122 0022 CF93      		push r28
 123               	.LCFI2:
 124               		.cfi_def_cfa_offset 5
 125 0024 80E0      		ldi r24,lo8(__c.2757)
 126 0026 90E0      		ldi r25,hi8(__c.2757)
 127 0028 9F93      		push r25
 128               	.LCFI3:
 129               		.cfi_def_cfa_offset 6
 130 002a 8F93      		push r24
 131               	.LCFI4:
 132               		.cfi_def_cfa_offset 7
 133 002c 0E94 0000 		call __xprintf
 134               	.LVL7:
 135 0030 0F90      		pop __tmp_reg__
 136 0032 0F90      		pop __tmp_reg__
 137 0034 0F90      		pop __tmp_reg__
 138 0036 0F90      		pop __tmp_reg__
 139               	.LCFI5:
 140               		.cfi_def_cfa_offset 3
 141               	.L9:
 142               		.loc 1 307 0 discriminator 7
 143 0038 8091 0000 		lds r24,debug_config
 144 003c 80FF      		sbrs r24,0
 145 003e 00C0      		rjmp .L7
 146               		.loc 1 307 0 discriminator 8
 147 0040 80E0      		ldi r24,lo8(__c.2759)
 148 0042 90E0      		ldi r25,hi8(__c.2759)
 149 0044 0E94 0000 		call xputs
 150               	.LVL8:
 151               	.L7:
 308:./tmk_core/common/keyboard.c ****     led_set(leds);
 152               		.loc 1 308 0 is_stmt 1
 153 0048 8C2F      		mov r24,r28
 154               	/* epilogue start */
 309:./tmk_core/common/keyboard.c **** }
 155               		.loc 1 309 0
 156 004a CF91      		pop r28
 157               	.LVL9:
 308:./tmk_core/common/keyboard.c ****     led_set(leds);
 158               		.loc 1 308 0
 159 004c 0C94 0000 		jmp led_set
 160               	.LVL10:
 161               		.cfi_endproc
 162               	.LFE9:
 164               		.section	.text.keyboard_task,"ax",@progbits
 165               	.global	keyboard_task
 167               	keyboard_task:
 168               	.LFB8:
 199:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 169               		.loc 1 199 0
 170               		.cfi_startproc
 171 0000 CF92      		push r12
 172               	.LCFI6:
 173               		.cfi_def_cfa_offset 3
 174               		.cfi_offset 12, -2
 175 0002 DF92      		push r13
 176               	.LCFI7:
 177               		.cfi_def_cfa_offset 4
 178               		.cfi_offset 13, -3
 179 0004 EF92      		push r14
 180               	.LCFI8:
 181               		.cfi_def_cfa_offset 5
 182               		.cfi_offset 14, -4
 183 0006 FF92      		push r15
 184               	.LCFI9:
 185               		.cfi_def_cfa_offset 6
 186               		.cfi_offset 15, -5
 187 0008 0F93      		push r16
 188               	.LCFI10:
 189               		.cfi_def_cfa_offset 7
 190               		.cfi_offset 16, -6
 191 000a 1F93      		push r17
 192               	.LCFI11:
 193               		.cfi_def_cfa_offset 8
 194               		.cfi_offset 17, -7
 195 000c CF93      		push r28
 196               	.LCFI12:
 197               		.cfi_def_cfa_offset 9
 198               		.cfi_offset 28, -8
 199 000e DF93      		push r29
 200               	.LCFI13:
 201               		.cfi_def_cfa_offset 10
 202               		.cfi_offset 29, -9
 203 0010 CDB7      		in r28,__SP_L__
 204 0012 DEB7      		in r29,__SP_H__
 205               	.LCFI14:
 206               		.cfi_def_cfa_register 28
 207 0014 2B97      		sbiw r28,11
 208               	.LCFI15:
 209               		.cfi_def_cfa_offset 21
 210 0016 0FB6      		in __tmp_reg__,__SREG__
 211 0018 F894      		cli
 212 001a DEBF      		out __SP_H__,r29
 213 001c 0FBE      		out __SREG__,__tmp_reg__
 214 001e CDBF      		out __SP_L__,r28
 215               	/* prologue: function */
 216               	/* frame size = 11 */
 217               	/* stack size = 19 */
 218               	.L__stack_usage = 19
 219               	.LVL11:
 211:./tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 220               		.loc 1 211 0
 221 0020 0E94 0000 		call matrix_scan
 222               	.LVL12:
 212:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 223               		.loc 1 212 0
 224 0024 0E94 0000 		call is_keyboard_master
 225               	.LVL13:
 226 0028 8111      		cpse r24,__zero_reg__
 227 002a 00C0      		rjmp .L22
 228               	.LVL14:
 229               	.L26:
 257:./tmk_core/common/keyboard.c **** 
 230               		.loc 1 257 0
 231 002c 8FEF      		ldi r24,lo8(-1)
 232 002e 8983      		std Y+1,r24
 233 0030 8A83      		std Y+2,r24
 234 0032 1B82      		std Y+3,__zero_reg__
 235 0034 0E94 0000 		call timer_read
 236               	.LVL15:
 237 0038 8160      		ori r24,1
 238 003a 782F      		mov r23,r24
 239 003c 9D83      		std Y+5,r25
 240 003e 8C83      		std Y+4,r24
 241 0040 4981      		ldd r20,Y+1
 242 0042 5A81      		ldd r21,Y+2
 243 0044 6B81      		ldd r22,Y+3
 244 0046 8D81      		ldd r24,Y+5
 245 0048 0E94 0000 		call action_exec
 246               	.LVL16:
 247 004c 00C0      		rjmp .L23
 248               	.LVL17:
 249               	.L22:
 250 004e 80E0      		ldi r24,lo8(matrix_prev.2735)
 251 0050 C82E      		mov r12,r24
 252 0052 80E0      		ldi r24,hi8(matrix_prev.2735)
 253 0054 D82E      		mov r13,r24
 212:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 254               		.loc 1 212 0
 255 0056 00E0      		ldi r16,0
 256 0058 10E0      		ldi r17,0
 257               	.LVL18:
 258               	.L25:
 259 005a E02E      		mov r14,r16
 260               	.LVL19:
 261               	.LBB2:
 214:./tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 262               		.loc 1 214 0
 263 005c 802F      		mov r24,r16
 264 005e 0E94 0000 		call matrix_get_row
 265               	.LVL20:
 215:./tmk_core/common/keyboard.c ****             if (matrix_change) {
 266               		.loc 1 215 0
 267 0062 F601      		movw r30,r12
 268 0064 4191      		ld r20,Z+
 269 0066 6F01      		movw r12,r30
 270 0068 F42E      		mov r15,r20
 271 006a F826      		eor r15,r24
 272               	.LVL21:
 216:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 273               		.loc 1 216 0
 274 006c 01F4      		brne .L24
 275               	.LVL22:
 276               	.L31:
 277 006e 0F5F      		subi r16,-1
 278 0070 1F4F      		sbci r17,-1
 279               	.LVL23:
 213:./tmk_core/common/keyboard.c ****             matrix_row = matrix_get_row(r);
 280               		.loc 1 213 0
 281 0072 0E30      		cpi r16,14
 282 0074 1105      		cpc r17,__zero_reg__
 283 0076 01F4      		brne .L25
 284 0078 00C0      		rjmp .L26
 285               	.LVL24:
 286               	.L24:
 231:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 287               		.loc 1 231 0
 288 007a 9091 0000 		lds r25,debug_config
 289 007e 91FF      		sbrs r25,1
 290 0080 00C0      		rjmp .L27
 231:./tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 291               		.loc 1 231 0 is_stmt 0 discriminator 1
 292 0082 8B87      		std Y+11,r24
 293 0084 0E94 0000 		call matrix_print
 294               	.LVL25:
 295 0088 8B85      		ldd r24,Y+11
 296               	.L27:
 297               	.LVL26:
 298               	.LBE2:
 212:./tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 299               		.loc 1 212 0 is_stmt 1
 300 008a 20E0      		ldi r18,0
 301 008c 30E0      		ldi r19,0
 302               	.LBB4:
 303               	.LBB3:
 233:./tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 304               		.loc 1 233 0
 305 008e 4F2D      		mov r20,r15
 306 0090 50E0      		ldi r21,0
 307               	.LVL27:
 308               	.L30:
 309 0092 922F      		mov r25,r18
 310               	.LVL28:
 311 0094 BA01      		movw r22,r20
 312 0096 022E      		mov r0,r18
 313 0098 00C0      		rjmp 2f
 314               		1:
 315 009a 7595      		asr r23
 316 009c 6795      		ror r22
 317               		2:
 318 009e 0A94      		dec r0
 319 00a0 02F4      		brpl 1b
 320 00a2 60FF      		sbrs r22,0
 321 00a4 00C0      		rjmp .L28
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 322               		.loc 1 234 0
 323 00a6 2E83      		std Y+6,r18
 324 00a8 EF82      		std Y+7,r14
 236:./tmk_core/common/keyboard.c ****                             .time = (timer_read() | 1) /* time should not be 0 */
 325               		.loc 1 236 0
 326 00aa 21E0      		ldi r18,lo8(1)
 327 00ac 30E0      		ldi r19,0
 328               	.LVL29:
 329 00ae 6901      		movw r12,r18
 330 00b0 00C0      		rjmp 2f
 331               		1:
 332 00b2 CC0C      		lsl r12
 333 00b4 DD1C      		rol r13
 334               		2:
 335 00b6 9A95      		dec r25
 336 00b8 02F4      		brpl 1b
 337 00ba 90E0      		ldi r25,0
 338 00bc 8C21      		and r24,r12
 339 00be 9D21      		and r25,r13
 340 00c0 892B      		or r24,r25
 341 00c2 01F4      		brne .L29
 342 00c4 20E0      		ldi r18,0
 343               	.L29:
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 344               		.loc 1 234 0
 345 00c6 2887      		std Y+8,r18
 237:./tmk_core/common/keyboard.c ****                         });
 346               		.loc 1 237 0
 347 00c8 0E94 0000 		call timer_read
 348               	.LVL30:
 349 00cc 8160      		ori r24,1
 234:./tmk_core/common/keyboard.c ****                             .key = (keypos_t){ .row = r, .col = c },
 350               		.loc 1 234 0
 351 00ce 782F      		mov r23,r24
 352 00d0 9A87      		std Y+10,r25
 353 00d2 8987      		std Y+9,r24
 354 00d4 4E81      		ldd r20,Y+6
 355 00d6 5F81      		ldd r21,Y+7
 356 00d8 6885      		ldd r22,Y+8
 357 00da 8A85      		ldd r24,Y+10
 358 00dc 0E94 0000 		call action_exec
 359               	.LVL31:
 240:./tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 360               		.loc 1 240 0
 361 00e0 F801      		movw r30,r16
 362 00e2 E050      		subi r30,lo8(-(matrix_prev.2735))
 363 00e4 F040      		sbci r31,hi8(-(matrix_prev.2735))
 364 00e6 8081      		ld r24,Z
 365 00e8 C826      		eor r12,r24
 366 00ea C082      		st Z,r12
 246:./tmk_core/common/keyboard.c ****                     }
 367               		.loc 1 246 0
 368 00ec 00C0      		rjmp .L23
 369               	.LVL32:
 370               	.L28:
 371 00ee 2F5F      		subi r18,-1
 372 00f0 3F4F      		sbci r19,-1
 373               	.LVL33:
 232:./tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1<<c)) {
 374               		.loc 1 232 0 discriminator 2
 375 00f2 2630      		cpi r18,6
 376 00f4 3105      		cpc r19,__zero_reg__
 377 00f6 01F4      		brne .L30
 378 00f8 00C0      		rjmp .L31
 379               	.LVL34:
 380               	.L23:
 381               	.LBE3:
 382               	.LBE4:
 263:./tmk_core/common/keyboard.c **** #endif
 383               		.loc 1 263 0
 384 00fa 0E94 0000 		call mousekey_task
 385               	.LVL35:
 295:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 386               		.loc 1 295 0
 387 00fe 1091 0000 		lds r17,led_status.2736
 388 0102 0E94 0000 		call host_keyboard_leds
 389               	.LVL36:
 390 0106 1817      		cp r17,r24
 391 0108 01F0      		breq .L21
 296:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 392               		.loc 1 296 0
 393 010a 0E94 0000 		call host_keyboard_leds
 394               	.LVL37:
 395 010e 8093 0000 		sts led_status.2736,r24
 396               	/* epilogue start */
 299:./tmk_core/common/keyboard.c **** 
 397               		.loc 1 299 0
 398 0112 2B96      		adiw r28,11
 399 0114 0FB6      		in __tmp_reg__,__SREG__
 400 0116 F894      		cli
 401 0118 DEBF      		out __SP_H__,r29
 402 011a 0FBE      		out __SREG__,__tmp_reg__
 403 011c CDBF      		out __SP_L__,r28
 404 011e DF91      		pop r29
 405 0120 CF91      		pop r28
 406 0122 1F91      		pop r17
 407 0124 0F91      		pop r16
 408 0126 FF90      		pop r15
 409 0128 EF90      		pop r14
 410 012a DF90      		pop r13
 411 012c CF90      		pop r12
 297:./tmk_core/common/keyboard.c ****     }
 412               		.loc 1 297 0
 413 012e 0C94 0000 		jmp keyboard_set_leds
 414               	.LVL38:
 415               	.L21:
 416               	/* epilogue start */
 299:./tmk_core/common/keyboard.c **** 
 417               		.loc 1 299 0
 418 0132 2B96      		adiw r28,11
 419 0134 0FB6      		in __tmp_reg__,__SREG__
 420 0136 F894      		cli
 421 0138 DEBF      		out __SP_H__,r29
 422 013a 0FBE      		out __SREG__,__tmp_reg__
 423 013c CDBF      		out __SP_L__,r28
 424 013e DF91      		pop r29
 425 0140 CF91      		pop r28
 426 0142 1F91      		pop r17
 427 0144 0F91      		pop r16
 428 0146 FF90      		pop r15
 429 0148 EF90      		pop r14
 430 014a DF90      		pop r13
 431 014c CF90      		pop r12
 432 014e 0895      		ret
 433               		.cfi_endproc
 434               	.LFE8:
 436               		.section	.progmem.data.__c.2759,"a",@progbits
 439               	__c.2759:
 440 0000 0A00      		.string	"\n"
 441               		.section	.progmem.data.__c.2757,"a",@progbits
 444               	__c.2757:
 445 0000 2530 3258 		.string	"%02X"
 445      00
 446               		.section	.progmem.data.__c.2755,"a",@progbits
 449               	__c.2755:
 450 0000 6B65 7962 		.string	"keyboard_set_led: "
 450      6F61 7264 
 450      5F73 6574 
 450      5F6C 6564 
 450      3A20 00
 451               		.section	.bss.led_status.2736,"aw",@nobits
 454               	led_status.2736:
 455 0000 00        		.zero	1
 456               		.section	.bss.matrix_prev.2735,"aw",@nobits
 459               	matrix_prev.2735:
 460 0000 0000 0000 		.zero	14
 460      0000 0000 
 460      0000 0000 
 460      0000 
 461               		.text
 462               	.Letext0:
 463               		.file 2 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 464               		.file 3 "./tmk_core/common/keyboard.h"
 465               		.file 4 "./tmk_core/common/matrix.h"
 466               		.file 5 "./tmk_core/common/debug.h"
 467               		.file 6 "./tmk_core/common/timer.h"
 468               		.file 7 "./tmk_core/common/magic.h"
 469               		.file 8 "./tmk_core/common/avr/xprintf.h"
 470               		.file 9 "./tmk_core/common/led.h"
 471               		.file 10 "./tmk_core/common/action.h"
 472               		.file 11 "./tmk_core/common/mousekey.h"
 473               		.file 12 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\msys32\tmp\cchohsD7.s:2      *ABS*:0000003e __SP_H__
C:\msys32\tmp\cchohsD7.s:3      *ABS*:0000003d __SP_L__
C:\msys32\tmp\cchohsD7.s:4      *ABS*:0000003f __SREG__
C:\msys32\tmp\cchohsD7.s:5      *ABS*:00000000 __tmp_reg__
C:\msys32\tmp\cchohsD7.s:6      *ABS*:00000001 __zero_reg__
C:\msys32\tmp\cchohsD7.s:13     .text.matrix_setup:00000000 matrix_setup
C:\msys32\tmp\cchohsD7.s:29     .text.keyboard_setup:00000000 keyboard_setup
C:\msys32\tmp\cchohsD7.s:46     .text.is_keyboard_master:00000000 is_keyboard_master
C:\msys32\tmp\cchohsD7.s:63     .text.keyboard_init:00000000 keyboard_init
C:\msys32\tmp\cchohsD7.s:86     .text.keyboard_set_leds:00000000 keyboard_set_leds
C:\msys32\tmp\cchohsD7.s:449    .progmem.data.__c.2755:00000000 __c.2755
C:\msys32\tmp\cchohsD7.s:444    .progmem.data.__c.2757:00000000 __c.2757
C:\msys32\tmp\cchohsD7.s:439    .progmem.data.__c.2759:00000000 __c.2759
C:\msys32\tmp\cchohsD7.s:167    .text.keyboard_task:00000000 keyboard_task
C:\msys32\tmp\cchohsD7.s:459    .bss.matrix_prev.2735:00000000 matrix_prev.2735
C:\msys32\tmp\cchohsD7.s:454    .bss.led_status.2736:00000000 led_status.2736

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
debug_config
xputs
__xprintf
led_set
matrix_scan
timer_read
action_exec
matrix_get_row
matrix_print
mousekey_task
host_keyboard_leds
__do_clear_bss
