   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.mousekey_console_help,"ax",@progbits
  12               	mousekey_console_help:
  13               	.LFB40:
  14               		.file 1 "./tmk_core/common/command.c"
   1:./tmk_core/common/command.c **** /*
   2:./tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/command.c **** 
   4:./tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/command.c **** (at your option) any later version.
   8:./tmk_core/common/command.c **** 
   9:./tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/command.c **** GNU General Public License for more details.
  13:./tmk_core/common/command.c **** 
  14:./tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/command.c **** */
  17:./tmk_core/common/command.c **** #include <stdint.h>
  18:./tmk_core/common/command.c **** #include <stdbool.h>
  19:./tmk_core/common/command.c **** #include "wait.h"
  20:./tmk_core/common/command.c **** #include "keycode.h"
  21:./tmk_core/common/command.c **** #include "host.h"
  22:./tmk_core/common/command.c **** #include "keymap.h"
  23:./tmk_core/common/command.c **** #include "print.h"
  24:./tmk_core/common/command.c **** #include "debug.h"
  25:./tmk_core/common/command.c **** #include "util.h"
  26:./tmk_core/common/command.c **** #include "timer.h"
  27:./tmk_core/common/command.c **** #include "keyboard.h"
  28:./tmk_core/common/command.c **** #include "bootloader.h"
  29:./tmk_core/common/command.c **** #include "action_layer.h"
  30:./tmk_core/common/command.c **** #include "action_util.h"
  31:./tmk_core/common/command.c **** #include "eeconfig.h"
  32:./tmk_core/common/command.c **** #include "sleep_led.h"
  33:./tmk_core/common/command.c **** #include "led.h"
  34:./tmk_core/common/command.c **** #include "command.h"
  35:./tmk_core/common/command.c **** #include "backlight.h"
  36:./tmk_core/common/command.c **** #include "quantum.h"
  37:./tmk_core/common/command.c **** #include "version.h"
  38:./tmk_core/common/command.c **** 
  39:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:./tmk_core/common/command.c **** #include "mousekey.h"
  41:./tmk_core/common/command.c **** #endif
  42:./tmk_core/common/command.c **** 
  43:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:./tmk_core/common/command.c **** 	#include "usb_keyboard.h"
  45:./tmk_core/common/command.c **** 		#ifdef EXTRAKEY_ENABLE
  46:./tmk_core/common/command.c **** 		#include "usb_extra.h"
  47:./tmk_core/common/command.c **** 	#endif
  48:./tmk_core/common/command.c **** #endif
  49:./tmk_core/common/command.c **** 
  50:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:./tmk_core/common/command.c **** 	#include "usbdrv.h"
  52:./tmk_core/common/command.c **** #endif
  53:./tmk_core/common/command.c **** 
  54:./tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:./tmk_core/common/command.c ****     #include "audio.h"
  56:./tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:./tmk_core/common/command.c **** 
  58:./tmk_core/common/command.c **** 
  59:./tmk_core/common/command.c **** static bool command_common(uint8_t code);
  60:./tmk_core/common/command.c **** static void command_common_help(void);
  61:./tmk_core/common/command.c **** static void print_version(void);
  62:./tmk_core/common/command.c **** static void print_status(void);
  63:./tmk_core/common/command.c **** static bool command_console(uint8_t code);
  64:./tmk_core/common/command.c **** static void command_console_help(void);
  65:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  66:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  67:./tmk_core/common/command.c **** static void mousekey_console_help(void);
  68:./tmk_core/common/command.c **** #endif
  69:./tmk_core/common/command.c **** 
  70:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  71:./tmk_core/common/command.c **** 
  72:./tmk_core/common/command.c **** 
  73:./tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  74:./tmk_core/common/command.c **** 
  75:./tmk_core/common/command.c **** 
  76:./tmk_core/common/command.c **** bool command_proc(uint8_t code)
  77:./tmk_core/common/command.c **** {
  78:./tmk_core/common/command.c ****     switch (command_state) {
  79:./tmk_core/common/command.c ****         case ONESHOT:
  80:./tmk_core/common/command.c ****             if (!IS_COMMAND())
  81:./tmk_core/common/command.c ****                 return false;
  82:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  83:./tmk_core/common/command.c ****             break;
  84:./tmk_core/common/command.c ****         case CONSOLE:
  85:./tmk_core/common/command.c ****             if (IS_COMMAND())
  86:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  87:./tmk_core/common/command.c ****             else
  88:./tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  89:./tmk_core/common/command.c ****             break;
  90:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  91:./tmk_core/common/command.c ****         case MOUSEKEY:
  92:./tmk_core/common/command.c ****             mousekey_console(code);
  93:./tmk_core/common/command.c ****             break;
  94:./tmk_core/common/command.c **** #endif
  95:./tmk_core/common/command.c ****         default:
  96:./tmk_core/common/command.c ****             command_state = ONESHOT;
  97:./tmk_core/common/command.c ****             return false;
  98:./tmk_core/common/command.c ****     }
  99:./tmk_core/common/command.c ****     return true;
 100:./tmk_core/common/command.c **** }
 101:./tmk_core/common/command.c **** 
 102:./tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
 103:./tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
 104:./tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
 105:./tmk_core/common/command.c **** bool command_extra(uint8_t code)
 106:./tmk_core/common/command.c **** {
 107:./tmk_core/common/command.c ****     (void)code;
 108:./tmk_core/common/command.c ****     return false;
 109:./tmk_core/common/command.c **** }
 110:./tmk_core/common/command.c **** 
 111:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 112:./tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 113:./tmk_core/common/command.c **** {
 114:./tmk_core/common/command.c ****     (void)code;
 115:./tmk_core/common/command.c ****     return false;
 116:./tmk_core/common/command.c **** }
 117:./tmk_core/common/command.c **** 
 118:./tmk_core/common/command.c **** 
 119:./tmk_core/common/command.c **** /***********************************************************
 120:./tmk_core/common/command.c ****  * Command common
 121:./tmk_core/common/command.c ****  ***********************************************************/
 122:./tmk_core/common/command.c **** static void command_common_help(void)
 123:./tmk_core/common/command.c **** {
 124:./tmk_core/common/command.c **** 	print(                            "\n\t- Magic -\n"
 125:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 126:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MATRIX) ":	Matrix Debug Mode Toggle - Show keypresses in matrix grid\n"
 127:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_KBD   ) ":	Keyboard Debug Toggle - Show keypress report\n"
 128:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG_MOUSE ) ":	Debug Mouse Toggle\n"
 129:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_VERSION     ) ":	Version\n"
 130:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_STATUS      ) ":	Status\n"
 131:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_CONSOLE     ) ":	Activate Console Mode\n"
 132:./tmk_core/common/command.c **** 
 133:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 134:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0      ) ":	Switch to Layer 0\n"
 135:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER1      ) ":	Switch to Layer 1\n"
 136:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER2      ) ":	Switch to Layer 2\n"
 137:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER3      ) ":	Switch to Layer 3\n"
 138:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER4      ) ":	Switch to Layer 4\n"
 139:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER5      ) ":	Switch to Layer 5\n"
 140:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER6      ) ":	Switch to Layer 6\n"
 141:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER7      ) ":	Switch to Layer 7\n"
 142:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER8      ) ":	Switch to Layer 8\n"
 143:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER9      ) ":	Switch to Layer 9\n"
 144:./tmk_core/common/command.c **** #endif
 145:./tmk_core/common/command.c **** 
 146:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 147:./tmk_core/common/command.c **** 		                            "F1-F10:	Switch to Layer 0-9 (F10 = L0)\n"
 148:./tmk_core/common/command.c **** #endif
 149:./tmk_core/common/command.c **** 
 150:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 151:./tmk_core/common/command.c **** 		                            "0-9:	Switch to Layer 0-9\n"
 152:./tmk_core/common/command.c **** #endif
 153:./tmk_core/common/command.c **** 
 154:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT1 ) ":	Switch to Layer 0 (alternate key 1)\n"
 155:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LAYER0_ALT2 ) ":	Switch to Layer 0 (alternate key 2)\n"
 156:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_BOOTLOADER  ) ":	Jump to Bootloader (Reset)\n"
 157:./tmk_core/common/command.c **** 
 158:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 159:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_LOCK        ) ":	Lock\n"
 160:./tmk_core/common/command.c **** #endif
 161:./tmk_core/common/command.c **** 
 162:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 163:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_EEPROM      ) ":	Print EEPROM Settings\n"
 164:./tmk_core/common/command.c **** #endif
 165:./tmk_core/common/command.c **** 
 166:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 167:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_NKRO        ) ":	NKRO Toggle\n"
 168:./tmk_core/common/command.c **** #endif
 169:./tmk_core/common/command.c **** 
 170:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 171:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_SLEEP_LED   ) ":	Sleep LED Test\n"
 172:./tmk_core/common/command.c **** #endif
 173:./tmk_core/common/command.c ****     );
 174:./tmk_core/common/command.c **** }
 175:./tmk_core/common/command.c **** 
 176:./tmk_core/common/command.c **** static void print_version(void)
 177:./tmk_core/common/command.c **** {
 178:./tmk_core/common/command.c **** 	// print version & information
 179:./tmk_core/common/command.c ****     print("\n\t- Version -\n");
 180:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 181:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 182:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 183:./tmk_core/common/command.c ****           "VER: " STR(DEVICE_VER) "\n");
 184:./tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 185:./tmk_core/common/command.c **** 
 186:./tmk_core/common/command.c ****     /* build options */
 187:./tmk_core/common/command.c ****     print("OPTIONS:"
 188:./tmk_core/common/command.c **** 
 189:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 190:./tmk_core/common/command.c **** 	    " PJRC"
 191:./tmk_core/common/command.c **** #endif
 192:./tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 193:./tmk_core/common/command.c **** 	    " LUFA"
 194:./tmk_core/common/command.c **** #endif
 195:./tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 196:./tmk_core/common/command.c **** 	    " VUSB"
 197:./tmk_core/common/command.c **** #endif
 198:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 199:./tmk_core/common/command.c **** 	    " BOOTMAGIC"
 200:./tmk_core/common/command.c **** #endif
 201:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 202:./tmk_core/common/command.c **** 	    " MOUSEKEY"
 203:./tmk_core/common/command.c **** #endif
 204:./tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 205:./tmk_core/common/command.c **** 	    " EXTRAKEY"
 206:./tmk_core/common/command.c **** #endif
 207:./tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 208:./tmk_core/common/command.c **** 	    " CONSOLE"
 209:./tmk_core/common/command.c **** #endif
 210:./tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 211:./tmk_core/common/command.c **** 	    " COMMAND"
 212:./tmk_core/common/command.c **** #endif
 213:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 214:./tmk_core/common/command.c **** 	    " NKRO"
 215:./tmk_core/common/command.c **** #endif
 216:./tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 217:./tmk_core/common/command.c **** 	    " KEYMAP_SECTION"
 218:./tmk_core/common/command.c **** #endif
 219:./tmk_core/common/command.c **** 
 220:./tmk_core/common/command.c **** 	    " " STR(BOOTLOADER_SIZE) "\n");
 221:./tmk_core/common/command.c **** 
 222:./tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 223:./tmk_core/common/command.c **** #if defined(__AVR__)
 224:./tmk_core/common/command.c ****           " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 225:./tmk_core/common/command.c ****           " AVR_ARCH: avr" STR(__AVR_ARCH__)
 226:./tmk_core/common/command.c **** #endif
 227:./tmk_core/common/command.c **** 		  "\n");
 228:./tmk_core/common/command.c **** 
 229:./tmk_core/common/command.c **** 	return;
 230:./tmk_core/common/command.c **** }
 231:./tmk_core/common/command.c **** 
 232:./tmk_core/common/command.c **** static void print_status(void)
 233:./tmk_core/common/command.c **** {
 234:./tmk_core/common/command.c **** 
 235:./tmk_core/common/command.c ****     print("\n\t- Status -\n");
 236:./tmk_core/common/command.c **** 
 237:./tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 238:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 239:./tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 241:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 242:./tmk_core/common/command.c **** #endif
 243:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 244:./tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 245:./tmk_core/common/command.c **** #endif
 246:./tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 247:./tmk_core/common/command.c **** 
 248:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 249:./tmk_core/common/command.c ****     print_val_hex8(UDCON);
 250:./tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 251:./tmk_core/common/command.c ****     print_val_hex8(UDINT);
 252:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 253:./tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 254:./tmk_core/common/command.c **** #endif
 255:./tmk_core/common/command.c **** 
 256:./tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 257:./tmk_core/common/command.c **** #   if USB_COUNT_SOF
 258:./tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 259:./tmk_core/common/command.c **** #   endif
 260:./tmk_core/common/command.c **** #endif
 261:./tmk_core/common/command.c **** 	return;
 262:./tmk_core/common/command.c **** }
 263:./tmk_core/common/command.c **** 
 264:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 265:./tmk_core/common/command.c **** static void print_eeconfig(void)
 266:./tmk_core/common/command.c **** {
 267:./tmk_core/common/command.c **** 
 268:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 269:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 270:./tmk_core/common/command.c **** 
 271:./tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 272:./tmk_core/common/command.c **** 
 273:./tmk_core/common/command.c ****     debug_config_t dc;
 274:./tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 275:./tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 276:./tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 277:./tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 278:./tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 279:./tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 280:./tmk_core/common/command.c **** 
 281:./tmk_core/common/command.c ****     keymap_config_t kc;
 282:./tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 283:./tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 284:./tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 285:./tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 286:./tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 287:./tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 288:./tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 289:./tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 290:./tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 291:./tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 292:./tmk_core/common/command.c **** 
 293:./tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 294:./tmk_core/common/command.c ****     backlight_config_t bc;
 295:./tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 296:./tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 297:./tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 298:./tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 299:./tmk_core/common/command.c **** #endif /* BACKLIGHT_ENABLE */
 300:./tmk_core/common/command.c **** 
 301:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 302:./tmk_core/common/command.c **** 
 303:./tmk_core/common/command.c **** }
 304:./tmk_core/common/command.c **** #endif /* BOOTMAGIC_ENABLE */
 305:./tmk_core/common/command.c **** 
 306:./tmk_core/common/command.c **** static bool command_common(uint8_t code)
 307:./tmk_core/common/command.c **** {
 308:./tmk_core/common/command.c **** 
 309:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 310:./tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 311:./tmk_core/common/command.c **** #endif
 312:./tmk_core/common/command.c **** 
 313:./tmk_core/common/command.c ****     switch (code) {
 314:./tmk_core/common/command.c **** 
 315:./tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 316:./tmk_core/common/command.c **** 
 317:./tmk_core/common/command.c **** 		// test breathing sleep LED
 318:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 319:./tmk_core/common/command.c ****             print("Sleep LED Test\n");
 320:./tmk_core/common/command.c ****             sleep_led_toggle();
 321:./tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 322:./tmk_core/common/command.c ****             break;
 323:./tmk_core/common/command.c **** #endif
 324:./tmk_core/common/command.c **** 
 325:./tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 326:./tmk_core/common/command.c **** 
 327:./tmk_core/common/command.c **** 		// print stored eeprom config
 328:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 329:./tmk_core/common/command.c ****             print("eeconfig:\n");
 330:./tmk_core/common/command.c ****             print_eeconfig();
 331:./tmk_core/common/command.c ****             break;
 332:./tmk_core/common/command.c **** #endif
 333:./tmk_core/common/command.c **** 
 334:./tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 335:./tmk_core/common/command.c **** 
 336:./tmk_core/common/command.c **** 		// lock/unlock keyboard
 337:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 338:./tmk_core/common/command.c ****             if (host_get_driver()) {
 339:./tmk_core/common/command.c ****                 host_driver = host_get_driver();
 340:./tmk_core/common/command.c ****                 clear_keyboard();
 341:./tmk_core/common/command.c ****                 host_set_driver(0);
 342:./tmk_core/common/command.c ****                 print("Locked.\n");
 343:./tmk_core/common/command.c ****             } else {
 344:./tmk_core/common/command.c ****                 host_set_driver(host_driver);
 345:./tmk_core/common/command.c ****                 print("Unlocked.\n");
 346:./tmk_core/common/command.c ****             }
 347:./tmk_core/common/command.c ****             break;
 348:./tmk_core/common/command.c **** #endif
 349:./tmk_core/common/command.c **** 
 350:./tmk_core/common/command.c **** 		// print help
 351:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP1):
 352:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP2):
 353:./tmk_core/common/command.c ****             command_common_help();
 354:./tmk_core/common/command.c ****             break;
 355:./tmk_core/common/command.c **** 
 356:./tmk_core/common/command.c **** 		// activate console
 357:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 358:./tmk_core/common/command.c ****             debug_matrix   = false;
 359:./tmk_core/common/command.c ****             debug_keyboard = false;
 360:./tmk_core/common/command.c ****             debug_mouse    = false;
 361:./tmk_core/common/command.c ****             debug_enable   = false;
 362:./tmk_core/common/command.c ****             command_console_help();
 363:./tmk_core/common/command.c ****             print("C> ");
 364:./tmk_core/common/command.c ****             command_state = CONSOLE;
 365:./tmk_core/common/command.c ****             break;
 366:./tmk_core/common/command.c **** 
 367:./tmk_core/common/command.c ****         // jump to bootloader
 368:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 369:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 370:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 371:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 372:./tmk_core/common/command.c **** 	            stop_all_notes();
 373:./tmk_core/common/command.c ****                 shutdown_user();
 374:./tmk_core/common/command.c ****             #else
 375:./tmk_core/common/command.c **** 	            wait_ms(1000);
 376:./tmk_core/common/command.c ****             #endif
 377:./tmk_core/common/command.c ****             bootloader_jump(); // not return
 378:./tmk_core/common/command.c ****             break;
 379:./tmk_core/common/command.c **** 
 380:./tmk_core/common/command.c ****         // debug toggle
 381:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 382:./tmk_core/common/command.c ****             debug_enable = !debug_enable;
 383:./tmk_core/common/command.c ****             if (debug_enable) {
 384:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 385:./tmk_core/common/command.c ****             } else {
 386:./tmk_core/common/command.c ****                 print("\ndebug: off\n");
 387:./tmk_core/common/command.c ****                 debug_matrix   = false;
 388:./tmk_core/common/command.c ****                 debug_keyboard = false;
 389:./tmk_core/common/command.c ****                 debug_mouse    = false;
 390:./tmk_core/common/command.c ****             }
 391:./tmk_core/common/command.c ****             break;
 392:./tmk_core/common/command.c **** 
 393:./tmk_core/common/command.c ****         // debug matrix toggle
 394:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 395:./tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 396:./tmk_core/common/command.c ****             if (debug_matrix) {
 397:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 398:./tmk_core/common/command.c ****                 debug_enable = true;
 399:./tmk_core/common/command.c ****             } else {
 400:./tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 401:./tmk_core/common/command.c ****             }
 402:./tmk_core/common/command.c ****             break;
 403:./tmk_core/common/command.c **** 
 404:./tmk_core/common/command.c ****         // debug keyboard toggle
 405:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 406:./tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 407:./tmk_core/common/command.c ****             if (debug_keyboard) {
 408:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 409:./tmk_core/common/command.c ****                 debug_enable = true;
 410:./tmk_core/common/command.c ****             } else {
 411:./tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 412:./tmk_core/common/command.c ****             }
 413:./tmk_core/common/command.c ****             break;
 414:./tmk_core/common/command.c **** 
 415:./tmk_core/common/command.c ****         // debug mouse toggle
 416:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 417:./tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 418:./tmk_core/common/command.c ****             if (debug_mouse) {
 419:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 420:./tmk_core/common/command.c ****                 debug_enable = true;
 421:./tmk_core/common/command.c ****             } else {
 422:./tmk_core/common/command.c **** 				print("\nmouse: off\n");
 423:./tmk_core/common/command.c ****             }
 424:./tmk_core/common/command.c ****             break;
 425:./tmk_core/common/command.c **** 
 426:./tmk_core/common/command.c **** 		// print version
 427:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 428:./tmk_core/common/command.c ****         	print_version();
 429:./tmk_core/common/command.c **** 		    break;
 430:./tmk_core/common/command.c **** 
 431:./tmk_core/common/command.c **** 		// print status
 432:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_STATUS):
 433:./tmk_core/common/command.c **** 			print_status();
 434:./tmk_core/common/command.c ****             break;
 435:./tmk_core/common/command.c **** 
 436:./tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 437:./tmk_core/common/command.c **** 
 438:./tmk_core/common/command.c **** 		// NKRO toggle
 439:./tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 440:./tmk_core/common/command.c ****             clear_keyboard(); // clear to prevent stuck keys
 441:./tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 442:./tmk_core/common/command.c ****             if (keymap_config.nkro) {
 443:./tmk_core/common/command.c ****                 print("NKRO: on\n");
 444:./tmk_core/common/command.c ****             } else {
 445:./tmk_core/common/command.c ****                 print("NKRO: off\n");
 446:./tmk_core/common/command.c ****             }
 447:./tmk_core/common/command.c ****             break;
 448:./tmk_core/common/command.c **** #endif
 449:./tmk_core/common/command.c **** 
 450:./tmk_core/common/command.c **** 		// switch layers
 451:./tmk_core/common/command.c **** 
 452:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT1):
 453:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0_ALT2):
 454:./tmk_core/common/command.c ****             switch_default_layer(0);
 455:./tmk_core/common/command.c ****             break;
 456:./tmk_core/common/command.c **** 
 457:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 458:./tmk_core/common/command.c **** 
 459:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER0):
 460:./tmk_core/common/command.c ****             switch_default_layer(0);
 461:./tmk_core/common/command.c ****             break;
 462:./tmk_core/common/command.c **** 
 463:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER1):
 464:./tmk_core/common/command.c ****             switch_default_layer(1);
 465:./tmk_core/common/command.c ****             break;
 466:./tmk_core/common/command.c **** 
 467:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER2):
 468:./tmk_core/common/command.c ****             switch_default_layer(2);
 469:./tmk_core/common/command.c ****             break;
 470:./tmk_core/common/command.c **** 
 471:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER3):
 472:./tmk_core/common/command.c ****             switch_default_layer(3);
 473:./tmk_core/common/command.c ****             break;
 474:./tmk_core/common/command.c **** 
 475:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER4):
 476:./tmk_core/common/command.c ****             switch_default_layer(4);
 477:./tmk_core/common/command.c ****             break;
 478:./tmk_core/common/command.c **** 
 479:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER5):
 480:./tmk_core/common/command.c ****             switch_default_layer(5);
 481:./tmk_core/common/command.c ****             break;
 482:./tmk_core/common/command.c **** 
 483:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER6):
 484:./tmk_core/common/command.c ****             switch_default_layer(6);
 485:./tmk_core/common/command.c ****             break;
 486:./tmk_core/common/command.c **** 
 487:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER7):
 488:./tmk_core/common/command.c ****             switch_default_layer(7);
 489:./tmk_core/common/command.c ****             break;
 490:./tmk_core/common/command.c **** 
 491:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER8):
 492:./tmk_core/common/command.c ****             switch_default_layer(8);
 493:./tmk_core/common/command.c ****             break;
 494:./tmk_core/common/command.c **** 
 495:./tmk_core/common/command.c **** 		case MAGIC_KC(MAGIC_KEY_LAYER9):
 496:./tmk_core/common/command.c ****             switch_default_layer(9);
 497:./tmk_core/common/command.c ****             break;
 498:./tmk_core/common/command.c **** #endif
 499:./tmk_core/common/command.c **** 
 500:./tmk_core/common/command.c **** 
 501:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 502:./tmk_core/common/command.c **** 
 503:./tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 504:./tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 505:./tmk_core/common/command.c ****             break;
 506:./tmk_core/common/command.c ****         case KC_F10:
 507:./tmk_core/common/command.c ****             switch_default_layer(0);
 508:./tmk_core/common/command.c ****             break;
 509:./tmk_core/common/command.c **** #endif
 510:./tmk_core/common/command.c **** 
 511:./tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 512:./tmk_core/common/command.c **** 
 513:./tmk_core/common/command.c ****         case KC_1 ... KC_9:
 514:./tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 515:./tmk_core/common/command.c ****             break;
 516:./tmk_core/common/command.c ****         case KC_0:
 517:./tmk_core/common/command.c ****             switch_default_layer(0);
 518:./tmk_core/common/command.c ****             break;
 519:./tmk_core/common/command.c **** #endif
 520:./tmk_core/common/command.c **** 
 521:./tmk_core/common/command.c ****         default:
 522:./tmk_core/common/command.c ****             print("?");
 523:./tmk_core/common/command.c ****             return false;
 524:./tmk_core/common/command.c ****     }
 525:./tmk_core/common/command.c ****     return true;
 526:./tmk_core/common/command.c **** }
 527:./tmk_core/common/command.c **** 
 528:./tmk_core/common/command.c **** 
 529:./tmk_core/common/command.c **** /***********************************************************
 530:./tmk_core/common/command.c ****  * Command console
 531:./tmk_core/common/command.c ****  ***********************************************************/
 532:./tmk_core/common/command.c **** static void command_console_help(void)
 533:./tmk_core/common/command.c **** {
 534:./tmk_core/common/command.c ****     print("\n\t- Console -\n"
 535:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 536:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 537:./tmk_core/common/command.c ****           "m:	mousekey\n"
 538:./tmk_core/common/command.c **** #endif
 539:./tmk_core/common/command.c ****     );
 540:./tmk_core/common/command.c **** }
 541:./tmk_core/common/command.c **** 
 542:./tmk_core/common/command.c **** static bool command_console(uint8_t code)
 543:./tmk_core/common/command.c **** {
 544:./tmk_core/common/command.c ****     switch (code) {
 545:./tmk_core/common/command.c ****         case KC_H:
 546:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 547:./tmk_core/common/command.c ****             command_console_help();
 548:./tmk_core/common/command.c ****             break;
 549:./tmk_core/common/command.c ****         case KC_Q:
 550:./tmk_core/common/command.c ****         case KC_ESC:
 551:./tmk_core/common/command.c ****             command_state = ONESHOT;
 552:./tmk_core/common/command.c ****             return false;
 553:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 554:./tmk_core/common/command.c ****         case KC_M:
 555:./tmk_core/common/command.c ****             mousekey_console_help();
 556:./tmk_core/common/command.c ****             print("M> ");
 557:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 558:./tmk_core/common/command.c ****             return true;
 559:./tmk_core/common/command.c **** #endif
 560:./tmk_core/common/command.c ****         default:
 561:./tmk_core/common/command.c ****             print("?");
 562:./tmk_core/common/command.c ****             return false;
 563:./tmk_core/common/command.c ****     }
 564:./tmk_core/common/command.c ****     print("C> ");
 565:./tmk_core/common/command.c ****     return true;
 566:./tmk_core/common/command.c **** }
 567:./tmk_core/common/command.c **** 
 568:./tmk_core/common/command.c **** 
 569:./tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 570:./tmk_core/common/command.c **** /***********************************************************
 571:./tmk_core/common/command.c ****  * Mousekey console
 572:./tmk_core/common/command.c ****  ***********************************************************/
 573:./tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 574:./tmk_core/common/command.c **** 
 575:./tmk_core/common/command.c **** static void mousekey_param_print(void)
 576:./tmk_core/common/command.c **** {
 577:./tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 578:./tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 579:./tmk_core/common/command.c ****     print("\n\t- Values -\n");
 580:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 581:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 582:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 583:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 584:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 585:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 586:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 587:./tmk_core/common/command.c **** 
 588:./tmk_core/common/command.c **** }
 589:./tmk_core/common/command.c **** 
 590:./tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 591:./tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 592:./tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 593:./tmk_core/common/command.c **** {
 594:./tmk_core/common/command.c ****     switch (param) {
 595:./tmk_core/common/command.c ****         case 1:
 596:./tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 597:./tmk_core/common/command.c ****                 mk_delay += inc;
 598:./tmk_core/common/command.c ****             else
 599:./tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 600:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 601:./tmk_core/common/command.c ****             break;
 602:./tmk_core/common/command.c ****         case 2:
 603:./tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 604:./tmk_core/common/command.c ****                 mk_interval += inc;
 605:./tmk_core/common/command.c ****             else
 606:./tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 607:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 608:./tmk_core/common/command.c ****             break;
 609:./tmk_core/common/command.c ****         case 3:
 610:./tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 611:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 612:./tmk_core/common/command.c ****             else
 613:./tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 614:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 615:./tmk_core/common/command.c ****             break;
 616:./tmk_core/common/command.c ****         case 4:
 617:./tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 618:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 619:./tmk_core/common/command.c ****             else
 620:./tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 621:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 622:./tmk_core/common/command.c ****             break;
 623:./tmk_core/common/command.c ****         case 5:
 624:./tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 625:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 626:./tmk_core/common/command.c ****             else
 627:./tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 628:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 629:./tmk_core/common/command.c ****             break;
 630:./tmk_core/common/command.c ****         case 6:
 631:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 632:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 633:./tmk_core/common/command.c ****             else
 634:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 635:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 636:./tmk_core/common/command.c ****             break;
 637:./tmk_core/common/command.c ****     }
 638:./tmk_core/common/command.c **** }
 639:./tmk_core/common/command.c **** 
 640:./tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 641:./tmk_core/common/command.c **** {
 642:./tmk_core/common/command.c ****     switch (param) {
 643:./tmk_core/common/command.c ****         case 1:
 644:./tmk_core/common/command.c ****             if (mk_delay > dec)
 645:./tmk_core/common/command.c ****                 mk_delay -= dec;
 646:./tmk_core/common/command.c ****             else
 647:./tmk_core/common/command.c ****                 mk_delay = 0;
 648:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 649:./tmk_core/common/command.c ****             break;
 650:./tmk_core/common/command.c ****         case 2:
 651:./tmk_core/common/command.c ****             if (mk_interval > dec)
 652:./tmk_core/common/command.c ****                 mk_interval -= dec;
 653:./tmk_core/common/command.c ****             else
 654:./tmk_core/common/command.c ****                 mk_interval = 0;
 655:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 656:./tmk_core/common/command.c ****             break;
 657:./tmk_core/common/command.c ****         case 3:
 658:./tmk_core/common/command.c ****             if (mk_max_speed > dec)
 659:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 660:./tmk_core/common/command.c ****             else
 661:./tmk_core/common/command.c ****                 mk_max_speed = 0;
 662:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 663:./tmk_core/common/command.c ****             break;
 664:./tmk_core/common/command.c ****         case 4:
 665:./tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 666:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 667:./tmk_core/common/command.c ****             else
 668:./tmk_core/common/command.c ****                 mk_time_to_max = 0;
 669:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 670:./tmk_core/common/command.c ****             break;
 671:./tmk_core/common/command.c ****         case 5:
 672:./tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 673:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 674:./tmk_core/common/command.c ****             else
 675:./tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 676:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 677:./tmk_core/common/command.c ****             break;
 678:./tmk_core/common/command.c ****         case 6:
 679:./tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 680:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 681:./tmk_core/common/command.c ****             else
 682:./tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 683:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 684:./tmk_core/common/command.c ****             break;
 685:./tmk_core/common/command.c ****     }
 686:./tmk_core/common/command.c **** }
 687:./tmk_core/common/command.c **** 
 688:./tmk_core/common/command.c **** static void mousekey_console_help(void)
 689:./tmk_core/common/command.c **** {
  15               		.loc 1 689 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 690:./tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  21               		.loc 1 690 0
  22 0000 80E0      		ldi r24,lo8(__c.3485)
  23 0002 90E0      		ldi r25,hi8(__c.3485)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 691:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 692:./tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 693:./tmk_core/common/command.c ****           "2:	interval(ms)\n"
 694:./tmk_core/common/command.c ****           "3:	max_speed\n"
 695:./tmk_core/common/command.c ****           "4:	time_to_max\n"
 696:./tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 697:./tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 698:./tmk_core/common/command.c ****           "\n"
 699:./tmk_core/common/command.c ****           "p:	print values\n"
 700:./tmk_core/common/command.c ****           "d:	set defaults\n"
 701:./tmk_core/common/command.c ****           "up:	+1\n"
 702:./tmk_core/common/command.c ****           "down:	-1\n"
 703:./tmk_core/common/command.c ****           "pgup:	+10\n"
 704:./tmk_core/common/command.c ****           "pgdown:	-10\n"
 705:./tmk_core/common/command.c ****           "\n"
 706:./tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 707:./tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
  26               		.loc 1 707 0
  27 0008 1F92      		push __zero_reg__
  28               	.LCFI0:
  29               		.cfi_def_cfa_offset 3
  30 000a 81E0      		ldi r24,lo8(1)
  31 000c 8F93      		push r24
  32               	.LCFI1:
  33               		.cfi_def_cfa_offset 4
  34 000e 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 5
  37 0010 85E0      		ldi r24,lo8(5)
  38 0012 8F93      		push r24
  39               	.LCFI3:
  40               		.cfi_def_cfa_offset 6
  41 0014 80E0      		ldi r24,lo8(__c.3487)
  42 0016 90E0      		ldi r25,hi8(__c.3487)
  43 0018 9F93      		push r25
  44               	.LCFI4:
  45               		.cfi_def_cfa_offset 7
  46 001a 8F93      		push r24
  47               	.LCFI5:
  48               		.cfi_def_cfa_offset 8
  49 001c 0E94 0000 		call __xprintf
  50               	.LVL1:
  51 0020 0F90      		pop __tmp_reg__
  52 0022 0F90      		pop __tmp_reg__
  53 0024 0F90      		pop __tmp_reg__
  54 0026 0F90      		pop __tmp_reg__
  55 0028 0F90      		pop __tmp_reg__
  56 002a 0F90      		pop __tmp_reg__
  57               	.LCFI6:
  58               		.cfi_def_cfa_offset 2
  59 002c 0895      		ret
  60               		.cfi_endproc
  61               	.LFE40:
  63               		.section	.text.mousekey_param_inc,"ax",@progbits
  65               	mousekey_param_inc:
  66               	.LFB38:
 593:./tmk_core/common/command.c ****     switch (param) {
  67               		.loc 1 593 0
  68               		.cfi_startproc
  69               	.LVL2:
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
 594:./tmk_core/common/command.c ****         case 1:
  74               		.loc 1 594 0
  75 0000 8330      		cpi r24,lo8(3)
  76 0002 01F0      		breq .L4
  77 0004 00F4      		brsh .L5
  78 0006 8130      		cpi r24,lo8(1)
  79 0008 01F0      		breq .L6
  80 000a 8230      		cpi r24,lo8(2)
  81 000c 01F0      		breq .L7
  82 000e 0895      		ret
  83               	.L5:
  84 0010 8530      		cpi r24,lo8(5)
  85 0012 01F4      		brne .+2
  86 0014 00C0      		rjmp .L8
  87 0016 00F4      		brsh .+2
  88 0018 00C0      		rjmp .L9
  89 001a 8630      		cpi r24,lo8(6)
  90 001c 01F4      		brne .+2
  91 001e 00C0      		rjmp .L10
  92 0020 0895      		ret
  93               	.L6:
 596:./tmk_core/common/command.c ****                 mk_delay += inc;
  94               		.loc 1 596 0
  95 0022 8091 0000 		lds r24,mk_delay
  96               	.LVL3:
  97 0026 262F      		mov r18,r22
  98 0028 30E0      		ldi r19,0
  99 002a 280F      		add r18,r24
 100 002c 311D      		adc r19,__zero_reg__
 101 002e 2F3F      		cpi r18,-1
 102 0030 3105      		cpc r19,__zero_reg__
 103 0032 04F4      		brge .L11
 597:./tmk_core/common/command.c ****             else
 104               		.loc 1 597 0
 105 0034 680F      		add r22,r24
 106               	.LVL4:
 107 0036 6093 0000 		sts mk_delay,r22
 108 003a 00C0      		rjmp .L12
 109               	.LVL5:
 110               	.L11:
 599:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 111               		.loc 1 599 0
 112 003c 8FEF      		ldi r24,lo8(-1)
 113 003e 8093 0000 		sts mk_delay,r24
 114               	.LVL6:
 115               	.L12:
 600:./tmk_core/common/command.c ****             break;
 116               		.loc 1 600 0
 117 0042 8091 0000 		lds r24,mk_delay
 118 0046 1F92      		push __zero_reg__
 119               	.LCFI7:
 120               		.cfi_remember_state
 121               		.cfi_def_cfa_offset 3
 122 0048 8F93      		push r24
 123               	.LCFI8:
 124               		.cfi_def_cfa_offset 4
 125 004a 80E0      		ldi r24,lo8(__c.3441)
 126 004c 90E0      		ldi r25,hi8(__c.3441)
 127 004e 00C0      		rjmp .L23
 128               	.LVL7:
 129               	.L7:
 130               	.LCFI9:
 131               		.cfi_restore_state
 603:./tmk_core/common/command.c ****                 mk_interval += inc;
 132               		.loc 1 603 0
 133 0050 8091 0000 		lds r24,mk_interval
 134               	.LVL8:
 135 0054 262F      		mov r18,r22
 136 0056 30E0      		ldi r19,0
 137 0058 280F      		add r18,r24
 138 005a 311D      		adc r19,__zero_reg__
 139 005c 2F3F      		cpi r18,-1
 140 005e 3105      		cpc r19,__zero_reg__
 141 0060 04F4      		brge .L13
 604:./tmk_core/common/command.c ****             else
 142               		.loc 1 604 0
 143 0062 680F      		add r22,r24
 144               	.LVL9:
 145 0064 6093 0000 		sts mk_interval,r22
 146 0068 00C0      		rjmp .L14
 147               	.LVL10:
 148               	.L13:
 606:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 149               		.loc 1 606 0
 150 006a 8FEF      		ldi r24,lo8(-1)
 151 006c 8093 0000 		sts mk_interval,r24
 152               	.LVL11:
 153               	.L14:
 607:./tmk_core/common/command.c ****             break;
 154               		.loc 1 607 0
 155 0070 8091 0000 		lds r24,mk_interval
 156 0074 1F92      		push __zero_reg__
 157               	.LCFI10:
 158               		.cfi_remember_state
 159               		.cfi_def_cfa_offset 3
 160 0076 8F93      		push r24
 161               	.LCFI11:
 162               		.cfi_def_cfa_offset 4
 163 0078 80E0      		ldi r24,lo8(__c.3445)
 164 007a 90E0      		ldi r25,hi8(__c.3445)
 165 007c 00C0      		rjmp .L23
 166               	.LVL12:
 167               	.L4:
 168               	.LCFI12:
 169               		.cfi_restore_state
 610:./tmk_core/common/command.c ****                 mk_max_speed += inc;
 170               		.loc 1 610 0
 171 007e 8091 0000 		lds r24,mk_max_speed
 172               	.LVL13:
 173 0082 262F      		mov r18,r22
 174 0084 30E0      		ldi r19,0
 175 0086 280F      		add r18,r24
 176 0088 311D      		adc r19,__zero_reg__
 177 008a 2F3F      		cpi r18,-1
 178 008c 3105      		cpc r19,__zero_reg__
 179 008e 04F4      		brge .L15
 611:./tmk_core/common/command.c ****             else
 180               		.loc 1 611 0
 181 0090 680F      		add r22,r24
 182               	.LVL14:
 183 0092 6093 0000 		sts mk_max_speed,r22
 184 0096 00C0      		rjmp .L16
 185               	.LVL15:
 186               	.L15:
 613:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 187               		.loc 1 613 0
 188 0098 8FEF      		ldi r24,lo8(-1)
 189 009a 8093 0000 		sts mk_max_speed,r24
 190               	.LVL16:
 191               	.L16:
 614:./tmk_core/common/command.c ****             break;
 192               		.loc 1 614 0
 193 009e 8091 0000 		lds r24,mk_max_speed
 194 00a2 1F92      		push __zero_reg__
 195               	.LCFI13:
 196               		.cfi_remember_state
 197               		.cfi_def_cfa_offset 3
 198 00a4 8F93      		push r24
 199               	.LCFI14:
 200               		.cfi_def_cfa_offset 4
 201 00a6 80E0      		ldi r24,lo8(__c.3448)
 202 00a8 90E0      		ldi r25,hi8(__c.3448)
 203 00aa 00C0      		rjmp .L23
 204               	.LVL17:
 205               	.L9:
 206               	.LCFI15:
 207               		.cfi_restore_state
 617:./tmk_core/common/command.c ****                 mk_time_to_max += inc;
 208               		.loc 1 617 0
 209 00ac 8091 0000 		lds r24,mk_time_to_max
 210               	.LVL18:
 211 00b0 262F      		mov r18,r22
 212 00b2 30E0      		ldi r19,0
 213 00b4 280F      		add r18,r24
 214 00b6 311D      		adc r19,__zero_reg__
 215 00b8 2F3F      		cpi r18,-1
 216 00ba 3105      		cpc r19,__zero_reg__
 217 00bc 04F4      		brge .L17
 618:./tmk_core/common/command.c ****             else
 218               		.loc 1 618 0
 219 00be 680F      		add r22,r24
 220               	.LVL19:
 221 00c0 6093 0000 		sts mk_time_to_max,r22
 222 00c4 00C0      		rjmp .L18
 223               	.LVL20:
 224               	.L17:
 620:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 225               		.loc 1 620 0
 226 00c6 8FEF      		ldi r24,lo8(-1)
 227 00c8 8093 0000 		sts mk_time_to_max,r24
 228               	.LVL21:
 229               	.L18:
 621:./tmk_core/common/command.c ****             break;
 230               		.loc 1 621 0
 231 00cc 8091 0000 		lds r24,mk_time_to_max
 232 00d0 1F92      		push __zero_reg__
 233               	.LCFI16:
 234               		.cfi_remember_state
 235               		.cfi_def_cfa_offset 3
 236 00d2 8F93      		push r24
 237               	.LCFI17:
 238               		.cfi_def_cfa_offset 4
 239 00d4 80E0      		ldi r24,lo8(__c.3451)
 240 00d6 90E0      		ldi r25,hi8(__c.3451)
 241 00d8 00C0      		rjmp .L23
 242               	.LVL22:
 243               	.L8:
 244               	.LCFI18:
 245               		.cfi_restore_state
 624:./tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 246               		.loc 1 624 0
 247 00da 8091 0000 		lds r24,mk_wheel_max_speed
 248               	.LVL23:
 249 00de 262F      		mov r18,r22
 250 00e0 30E0      		ldi r19,0
 251 00e2 280F      		add r18,r24
 252 00e4 311D      		adc r19,__zero_reg__
 253 00e6 2F3F      		cpi r18,-1
 254 00e8 3105      		cpc r19,__zero_reg__
 255 00ea 04F4      		brge .L19
 625:./tmk_core/common/command.c ****             else
 256               		.loc 1 625 0
 257 00ec 680F      		add r22,r24
 258               	.LVL24:
 259 00ee 6093 0000 		sts mk_wheel_max_speed,r22
 260 00f2 00C0      		rjmp .L20
 261               	.LVL25:
 262               	.L19:
 627:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 263               		.loc 1 627 0
 264 00f4 8FEF      		ldi r24,lo8(-1)
 265 00f6 8093 0000 		sts mk_wheel_max_speed,r24
 266               	.LVL26:
 267               	.L20:
 628:./tmk_core/common/command.c ****             break;
 268               		.loc 1 628 0
 269 00fa 8091 0000 		lds r24,mk_wheel_max_speed
 270 00fe 1F92      		push __zero_reg__
 271               	.LCFI19:
 272               		.cfi_remember_state
 273               		.cfi_def_cfa_offset 3
 274 0100 8F93      		push r24
 275               	.LCFI20:
 276               		.cfi_def_cfa_offset 4
 277 0102 80E0      		ldi r24,lo8(__c.3454)
 278 0104 90E0      		ldi r25,hi8(__c.3454)
 279 0106 00C0      		rjmp .L23
 280               	.LVL27:
 281               	.L10:
 282               	.LCFI21:
 283               		.cfi_restore_state
 631:./tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 284               		.loc 1 631 0
 285 0108 8091 0000 		lds r24,mk_wheel_time_to_max
 286               	.LVL28:
 287 010c 262F      		mov r18,r22
 288 010e 30E0      		ldi r19,0
 289 0110 280F      		add r18,r24
 290 0112 311D      		adc r19,__zero_reg__
 291 0114 2F3F      		cpi r18,-1
 292 0116 3105      		cpc r19,__zero_reg__
 293 0118 04F4      		brge .L21
 632:./tmk_core/common/command.c ****             else
 294               		.loc 1 632 0
 295 011a 680F      		add r22,r24
 296               	.LVL29:
 297 011c 6093 0000 		sts mk_wheel_time_to_max,r22
 298 0120 00C0      		rjmp .L22
 299               	.LVL30:
 300               	.L21:
 634:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 301               		.loc 1 634 0
 302 0122 8FEF      		ldi r24,lo8(-1)
 303 0124 8093 0000 		sts mk_wheel_time_to_max,r24
 304               	.LVL31:
 305               	.L22:
 635:./tmk_core/common/command.c ****             break;
 306               		.loc 1 635 0
 307 0128 8091 0000 		lds r24,mk_wheel_time_to_max
 308 012c 1F92      		push __zero_reg__
 309               	.LCFI22:
 310               		.cfi_def_cfa_offset 3
 311 012e 8F93      		push r24
 312               	.LCFI23:
 313               		.cfi_def_cfa_offset 4
 314 0130 80E0      		ldi r24,lo8(__c.3457)
 315 0132 90E0      		ldi r25,hi8(__c.3457)
 316               	.L23:
 317 0134 9F93      		push r25
 318               	.LCFI24:
 319               		.cfi_def_cfa_offset 5
 320 0136 8F93      		push r24
 321               	.LCFI25:
 322               		.cfi_def_cfa_offset 6
 323 0138 0E94 0000 		call __xprintf
 324               	.LVL32:
 636:./tmk_core/common/command.c ****     }
 325               		.loc 1 636 0
 326 013c 0F90      		pop __tmp_reg__
 327 013e 0F90      		pop __tmp_reg__
 328 0140 0F90      		pop __tmp_reg__
 329 0142 0F90      		pop __tmp_reg__
 330               	.LCFI26:
 331               		.cfi_def_cfa_offset 2
 332 0144 0895      		ret
 333               		.cfi_endproc
 334               	.LFE38:
 336               		.section	.text.mousekey_param_dec,"ax",@progbits
 338               	mousekey_param_dec:
 339               	.LFB39:
 641:./tmk_core/common/command.c ****     switch (param) {
 340               		.loc 1 641 0
 341               		.cfi_startproc
 342               	.LVL33:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 642:./tmk_core/common/command.c ****         case 1:
 347               		.loc 1 642 0
 348 0000 8330      		cpi r24,lo8(3)
 349 0002 01F0      		breq .L27
 350 0004 00F4      		brsh .L28
 351 0006 8130      		cpi r24,lo8(1)
 352 0008 01F0      		breq .L29
 353 000a 8230      		cpi r24,lo8(2)
 354 000c 01F0      		breq .L30
 355 000e 0895      		ret
 356               	.L28:
 357 0010 8530      		cpi r24,lo8(5)
 358 0012 01F4      		brne .+2
 359 0014 00C0      		rjmp .L31
 360 0016 00F0      		brlo .L32
 361 0018 8630      		cpi r24,lo8(6)
 362 001a 01F4      		brne .+2
 363 001c 00C0      		rjmp .L33
 364 001e 0895      		ret
 365               	.L29:
 644:./tmk_core/common/command.c ****                 mk_delay -= dec;
 366               		.loc 1 644 0
 367 0020 8091 0000 		lds r24,mk_delay
 368               	.LVL34:
 369 0024 6817      		cp r22,r24
 370 0026 00F4      		brsh .L34
 645:./tmk_core/common/command.c ****             else
 371               		.loc 1 645 0
 372 0028 861B      		sub r24,r22
 373 002a 8093 0000 		sts mk_delay,r24
 374 002e 00C0      		rjmp .L35
 375               	.L34:
 647:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 376               		.loc 1 647 0
 377 0030 1092 0000 		sts mk_delay,__zero_reg__
 378               	.L35:
 648:./tmk_core/common/command.c ****             break;
 379               		.loc 1 648 0
 380 0034 8091 0000 		lds r24,mk_delay
 381 0038 1F92      		push __zero_reg__
 382               	.LCFI27:
 383               		.cfi_remember_state
 384               		.cfi_def_cfa_offset 3
 385 003a 8F93      		push r24
 386               	.LCFI28:
 387               		.cfi_def_cfa_offset 4
 388 003c 80E0      		ldi r24,lo8(__c.3464)
 389 003e 90E0      		ldi r25,hi8(__c.3464)
 390 0040 00C0      		rjmp .L46
 391               	.LVL35:
 392               	.L30:
 393               	.LCFI29:
 394               		.cfi_restore_state
 651:./tmk_core/common/command.c ****                 mk_interval -= dec;
 395               		.loc 1 651 0
 396 0042 8091 0000 		lds r24,mk_interval
 397               	.LVL36:
 398 0046 6817      		cp r22,r24
 399 0048 00F4      		brsh .L36
 652:./tmk_core/common/command.c ****             else
 400               		.loc 1 652 0
 401 004a 861B      		sub r24,r22
 402 004c 8093 0000 		sts mk_interval,r24
 403 0050 00C0      		rjmp .L37
 404               	.L36:
 654:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 405               		.loc 1 654 0
 406 0052 1092 0000 		sts mk_interval,__zero_reg__
 407               	.L37:
 655:./tmk_core/common/command.c ****             break;
 408               		.loc 1 655 0
 409 0056 8091 0000 		lds r24,mk_interval
 410 005a 1F92      		push __zero_reg__
 411               	.LCFI30:
 412               		.cfi_remember_state
 413               		.cfi_def_cfa_offset 3
 414 005c 8F93      		push r24
 415               	.LCFI31:
 416               		.cfi_def_cfa_offset 4
 417 005e 80E0      		ldi r24,lo8(__c.3468)
 418 0060 90E0      		ldi r25,hi8(__c.3468)
 419 0062 00C0      		rjmp .L46
 420               	.LVL37:
 421               	.L27:
 422               	.LCFI32:
 423               		.cfi_restore_state
 658:./tmk_core/common/command.c ****                 mk_max_speed -= dec;
 424               		.loc 1 658 0
 425 0064 8091 0000 		lds r24,mk_max_speed
 426               	.LVL38:
 427 0068 6817      		cp r22,r24
 428 006a 00F4      		brsh .L38
 659:./tmk_core/common/command.c ****             else
 429               		.loc 1 659 0
 430 006c 861B      		sub r24,r22
 431 006e 8093 0000 		sts mk_max_speed,r24
 432 0072 00C0      		rjmp .L39
 433               	.L38:
 661:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 434               		.loc 1 661 0
 435 0074 1092 0000 		sts mk_max_speed,__zero_reg__
 436               	.L39:
 662:./tmk_core/common/command.c ****             break;
 437               		.loc 1 662 0
 438 0078 8091 0000 		lds r24,mk_max_speed
 439 007c 1F92      		push __zero_reg__
 440               	.LCFI33:
 441               		.cfi_remember_state
 442               		.cfi_def_cfa_offset 3
 443 007e 8F93      		push r24
 444               	.LCFI34:
 445               		.cfi_def_cfa_offset 4
 446 0080 80E0      		ldi r24,lo8(__c.3471)
 447 0082 90E0      		ldi r25,hi8(__c.3471)
 448 0084 00C0      		rjmp .L46
 449               	.LVL39:
 450               	.L32:
 451               	.LCFI35:
 452               		.cfi_restore_state
 665:./tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 453               		.loc 1 665 0
 454 0086 8091 0000 		lds r24,mk_time_to_max
 455               	.LVL40:
 456 008a 6817      		cp r22,r24
 457 008c 00F4      		brsh .L40
 666:./tmk_core/common/command.c ****             else
 458               		.loc 1 666 0
 459 008e 861B      		sub r24,r22
 460 0090 8093 0000 		sts mk_time_to_max,r24
 461 0094 00C0      		rjmp .L41
 462               	.L40:
 668:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 463               		.loc 1 668 0
 464 0096 1092 0000 		sts mk_time_to_max,__zero_reg__
 465               	.L41:
 669:./tmk_core/common/command.c ****             break;
 466               		.loc 1 669 0
 467 009a 8091 0000 		lds r24,mk_time_to_max
 468 009e 1F92      		push __zero_reg__
 469               	.LCFI36:
 470               		.cfi_remember_state
 471               		.cfi_def_cfa_offset 3
 472 00a0 8F93      		push r24
 473               	.LCFI37:
 474               		.cfi_def_cfa_offset 4
 475 00a2 80E0      		ldi r24,lo8(__c.3474)
 476 00a4 90E0      		ldi r25,hi8(__c.3474)
 477 00a6 00C0      		rjmp .L46
 478               	.LVL41:
 479               	.L31:
 480               	.LCFI38:
 481               		.cfi_restore_state
 672:./tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 482               		.loc 1 672 0
 483 00a8 8091 0000 		lds r24,mk_wheel_max_speed
 484               	.LVL42:
 485 00ac 6817      		cp r22,r24
 486 00ae 00F4      		brsh .L42
 673:./tmk_core/common/command.c ****             else
 487               		.loc 1 673 0
 488 00b0 861B      		sub r24,r22
 489 00b2 8093 0000 		sts mk_wheel_max_speed,r24
 490 00b6 00C0      		rjmp .L43
 491               	.L42:
 675:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 492               		.loc 1 675 0
 493 00b8 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 494               	.L43:
 676:./tmk_core/common/command.c ****             break;
 495               		.loc 1 676 0
 496 00bc 8091 0000 		lds r24,mk_wheel_max_speed
 497 00c0 1F92      		push __zero_reg__
 498               	.LCFI39:
 499               		.cfi_remember_state
 500               		.cfi_def_cfa_offset 3
 501 00c2 8F93      		push r24
 502               	.LCFI40:
 503               		.cfi_def_cfa_offset 4
 504 00c4 80E0      		ldi r24,lo8(__c.3477)
 505 00c6 90E0      		ldi r25,hi8(__c.3477)
 506 00c8 00C0      		rjmp .L46
 507               	.LVL43:
 508               	.L33:
 509               	.LCFI41:
 510               		.cfi_restore_state
 679:./tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 511               		.loc 1 679 0
 512 00ca 8091 0000 		lds r24,mk_wheel_time_to_max
 513               	.LVL44:
 514 00ce 6817      		cp r22,r24
 515 00d0 00F4      		brsh .L44
 680:./tmk_core/common/command.c ****             else
 516               		.loc 1 680 0
 517 00d2 861B      		sub r24,r22
 518 00d4 8093 0000 		sts mk_wheel_time_to_max,r24
 519 00d8 00C0      		rjmp .L45
 520               	.L44:
 682:./tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 521               		.loc 1 682 0
 522 00da 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 523               	.L45:
 683:./tmk_core/common/command.c ****             break;
 524               		.loc 1 683 0
 525 00de 8091 0000 		lds r24,mk_wheel_time_to_max
 526 00e2 1F92      		push __zero_reg__
 527               	.LCFI42:
 528               		.cfi_def_cfa_offset 3
 529 00e4 8F93      		push r24
 530               	.LCFI43:
 531               		.cfi_def_cfa_offset 4
 532 00e6 80E0      		ldi r24,lo8(__c.3480)
 533 00e8 90E0      		ldi r25,hi8(__c.3480)
 534               	.L46:
 535 00ea 9F93      		push r25
 536               	.LCFI44:
 537               		.cfi_def_cfa_offset 5
 538 00ec 8F93      		push r24
 539               	.LCFI45:
 540               		.cfi_def_cfa_offset 6
 541 00ee 0E94 0000 		call __xprintf
 542               	.LVL45:
 684:./tmk_core/common/command.c ****     }
 543               		.loc 1 684 0
 544 00f2 0F90      		pop __tmp_reg__
 545 00f4 0F90      		pop __tmp_reg__
 546 00f6 0F90      		pop __tmp_reg__
 547 00f8 0F90      		pop __tmp_reg__
 548               	.LCFI46:
 549               		.cfi_def_cfa_offset 2
 550 00fa 0895      		ret
 551               		.cfi_endproc
 552               	.LFE39:
 554               		.section	.text.switch_default_layer,"ax",@progbits
 556               	switch_default_layer:
 557               	.LFB43:
 708:./tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 709:./tmk_core/common/command.c **** }
 710:./tmk_core/common/command.c **** 
 711:./tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 712:./tmk_core/common/command.c **** {
 713:./tmk_core/common/command.c ****     switch (code) {
 714:./tmk_core/common/command.c ****         case KC_H:
 715:./tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 716:./tmk_core/common/command.c ****             mousekey_console_help();
 717:./tmk_core/common/command.c ****             break;
 718:./tmk_core/common/command.c ****         case KC_Q:
 719:./tmk_core/common/command.c ****         case KC_ESC:
 720:./tmk_core/common/command.c ****             if (mousekey_param) {
 721:./tmk_core/common/command.c ****                 mousekey_param = 0;
 722:./tmk_core/common/command.c ****             } else {
 723:./tmk_core/common/command.c ****                 print("C> ");
 724:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 725:./tmk_core/common/command.c ****                 return false;
 726:./tmk_core/common/command.c ****             }
 727:./tmk_core/common/command.c ****             break;
 728:./tmk_core/common/command.c ****         case KC_P:
 729:./tmk_core/common/command.c ****             mousekey_param_print();
 730:./tmk_core/common/command.c ****             break;
 731:./tmk_core/common/command.c ****         case KC_1:
 732:./tmk_core/common/command.c ****         case KC_2:
 733:./tmk_core/common/command.c ****         case KC_3:
 734:./tmk_core/common/command.c ****         case KC_4:
 735:./tmk_core/common/command.c ****         case KC_5:
 736:./tmk_core/common/command.c ****         case KC_6:
 737:./tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 738:./tmk_core/common/command.c ****             break;
 739:./tmk_core/common/command.c ****         case KC_UP:
 740:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 741:./tmk_core/common/command.c ****             break;
 742:./tmk_core/common/command.c ****         case KC_DOWN:
 743:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 744:./tmk_core/common/command.c ****             break;
 745:./tmk_core/common/command.c ****         case KC_PGUP:
 746:./tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 747:./tmk_core/common/command.c ****             break;
 748:./tmk_core/common/command.c ****         case KC_PGDN:
 749:./tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 750:./tmk_core/common/command.c ****             break;
 751:./tmk_core/common/command.c ****         case KC_D:
 752:./tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 753:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 754:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 755:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 756:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 757:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 758:./tmk_core/common/command.c ****             print("set default\n");
 759:./tmk_core/common/command.c ****             break;
 760:./tmk_core/common/command.c ****         default:
 761:./tmk_core/common/command.c ****             print("?");
 762:./tmk_core/common/command.c ****             return false;
 763:./tmk_core/common/command.c ****     }
 764:./tmk_core/common/command.c ****     if (mousekey_param) {
 765:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 766:./tmk_core/common/command.c ****     } else {
 767:./tmk_core/common/command.c ****         print("M>" );
 768:./tmk_core/common/command.c ****     }
 769:./tmk_core/common/command.c ****     return true;
 770:./tmk_core/common/command.c **** }
 771:./tmk_core/common/command.c **** #endif
 772:./tmk_core/common/command.c **** 
 773:./tmk_core/common/command.c **** 
 774:./tmk_core/common/command.c **** /***********************************************************
 775:./tmk_core/common/command.c ****  * Utilities
 776:./tmk_core/common/command.c ****  ***********************************************************/
 777:./tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code)
 778:./tmk_core/common/command.c **** {
 779:./tmk_core/common/command.c ****     switch (code) {
 780:./tmk_core/common/command.c ****         case KC_1: return 1;
 781:./tmk_core/common/command.c ****         case KC_2: return 2;
 782:./tmk_core/common/command.c ****         case KC_3: return 3;
 783:./tmk_core/common/command.c ****         case KC_4: return 4;
 784:./tmk_core/common/command.c ****         case KC_5: return 5;
 785:./tmk_core/common/command.c ****         case KC_6: return 6;
 786:./tmk_core/common/command.c ****         case KC_7: return 7;
 787:./tmk_core/common/command.c ****         case KC_8: return 8;
 788:./tmk_core/common/command.c ****         case KC_9: return 9;
 789:./tmk_core/common/command.c ****         case KC_0: return 0;
 790:./tmk_core/common/command.c ****     }
 791:./tmk_core/common/command.c ****     return 0;
 792:./tmk_core/common/command.c **** }
 793:./tmk_core/common/command.c **** 
 794:./tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 795:./tmk_core/common/command.c **** {
 558               		.loc 1 795 0
 559               		.cfi_startproc
 560               	.LVL46:
 561 0000 CF93      		push r28
 562               	.LCFI47:
 563               		.cfi_def_cfa_offset 3
 564               		.cfi_offset 28, -2
 565               	/* prologue: function */
 566               	/* frame size = 0 */
 567               	/* stack size = 1 */
 568               	.L__stack_usage = 1
 569 0002 C82F      		mov r28,r24
 796:./tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 570               		.loc 1 796 0
 571 0004 1F92      		push __zero_reg__
 572               	.LCFI48:
 573               		.cfi_def_cfa_offset 4
 574 0006 8F93      		push r24
 575               	.LCFI49:
 576               		.cfi_def_cfa_offset 5
 577 0008 80E0      		ldi r24,lo8(__c.3536)
 578 000a 90E0      		ldi r25,hi8(__c.3536)
 579               	.LVL47:
 580 000c 9F93      		push r25
 581               	.LCFI50:
 582               		.cfi_def_cfa_offset 6
 583 000e 8F93      		push r24
 584               	.LCFI51:
 585               		.cfi_def_cfa_offset 7
 586 0010 0E94 0000 		call __xprintf
 587               	.LVL48:
 797:./tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 588               		.loc 1 797 0
 589 0014 81E0      		ldi r24,lo8(1)
 590 0016 90E0      		ldi r25,0
 591 0018 A0E0      		ldi r26,0
 592 001a B0E0      		ldi r27,0
 593 001c BC01      		movw r22,r24
 594 001e CD01      		movw r24,r26
 595 0020 00C0      		rjmp 2f
 596               		1:
 597 0022 660F      		lsl r22
 598 0024 771F      		rol r23
 599 0026 881F      		rol r24
 600 0028 991F      		rol r25
 601               		2:
 602 002a CA95      		dec r28
 603 002c 02F4      		brpl 1b
 604 002e 0E94 0000 		call default_layer_set
 605               	.LVL49:
 798:./tmk_core/common/command.c ****     clear_keyboard();
 606               		.loc 1 798 0
 607 0032 0F90      		pop __tmp_reg__
 608 0034 0F90      		pop __tmp_reg__
 609 0036 0F90      		pop __tmp_reg__
 610 0038 0F90      		pop __tmp_reg__
 611               	.LCFI52:
 612               		.cfi_def_cfa_offset 3
 613               	/* epilogue start */
 799:./tmk_core/common/command.c **** }
 614               		.loc 1 799 0
 615 003a CF91      		pop r28
 616               	.LVL50:
 798:./tmk_core/common/command.c ****     clear_keyboard();
 617               		.loc 1 798 0
 618 003c 0C94 0000 		jmp clear_keyboard
 619               	.LVL51:
 620               		.cfi_endproc
 621               	.LFE43:
 623               		.section	.text.command_common,"ax",@progbits
 625               	command_common:
 626               	.LFB34:
 307:./tmk_core/common/command.c **** 
 627               		.loc 1 307 0
 628               		.cfi_startproc
 629 0000 CF93      		push r28
 630               	.LCFI53:
 631               		.cfi_def_cfa_offset 3
 632               		.cfi_offset 28, -2
 633               	/* prologue: function */
 634               	/* frame size = 0 */
 635               	/* stack size = 1 */
 636               	.L__stack_usage = 1
 313:./tmk_core/common/command.c **** 
 637               		.loc 1 313 0
 638 0002 8732      		cpi r24,lo8(39)
 639 0004 00F4      		brsh .L50
 640 0006 8E31      		cpi r24,lo8(30)
 641 0008 00F0      		brlo .+2
 642 000a 00C0      		rjmp .L51
 643 000c 8E30      		cpi r24,lo8(14)
 644 000e 01F4      		brne .+2
 645 0010 00C0      		rjmp .L52
 646 0012 00F4      		brsh .L53
 647 0014 8730      		cpi r24,lo8(7)
 648 0016 01F4      		brne .+2
 649 0018 00C0      		rjmp .L54
 650 001a 8B30      		cpi r24,lo8(11)
 651 001c 01F4      		brne .+2
 652 001e 00C0      		rjmp .L55
 653 0020 8630      		cpi r24,lo8(6)
 654 0022 01F0      		breq .+2
 655 0024 00C0      		rjmp .L49
 358:./tmk_core/common/command.c ****             debug_keyboard = false;
 656               		.loc 1 358 0
 657 0026 8091 0000 		lds r24,debug_config
 361:./tmk_core/common/command.c ****             command_console_help();
 658               		.loc 1 361 0
 659 002a 817F      		andi r24,lo8(-15)
 660 002c 8E7F      		andi r24,lo8(~(1<<0))
 661 002e 8093 0000 		sts debug_config,r24
 662               	.LBB49:
 663               	.LBB50:
 534:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 664               		.loc 1 534 0
 665 0032 80E0      		ldi r24,lo8(__c.3376)
 666 0034 90E0      		ldi r25,hi8(__c.3376)
 667 0036 0E94 0000 		call xputs
 668               	.LBE50:
 669               	.LBE49:
 363:./tmk_core/common/command.c ****             command_state = CONSOLE;
 670               		.loc 1 363 0
 671 003a 80E0      		ldi r24,lo8(__c.3337)
 672 003c 90E0      		ldi r25,hi8(__c.3337)
 673 003e 0E94 0000 		call xputs
 364:./tmk_core/common/command.c ****             break;
 674               		.loc 1 364 0
 675 0042 81E0      		ldi r24,lo8(1)
 676 0044 8093 0000 		sts command_state,r24
 677 0048 00C0      		rjmp .L87
 678               	.L53:
 313:./tmk_core/common/command.c **** 
 679               		.loc 1 313 0
 680 004a 8631      		cpi r24,lo8(22)
 681 004c 01F4      		brne .+2
 682 004e 00C0      		rjmp .L57
 683 0050 00F4      		brsh .L58
 684 0052 8031      		cpi r24,lo8(16)
 685 0054 01F4      		brne .+2
 686 0056 00C0      		rjmp .L59
 687 0058 00C0      		rjmp .L49
 688               	.L58:
 689 005a 8931      		cpi r24,lo8(25)
 690 005c 01F4      		brne .+2
 691 005e 00C0      		rjmp .L60
 692 0060 8B31      		cpi r24,lo8(27)
 693 0062 01F4      		brne .+2
 694 0064 00C0      		rjmp .L61
 695 0066 00C0      		rjmp .L49
 696               	.L50:
 697 0068 8833      		cpi r24,lo8(56)
 698 006a 01F0      		breq .L55
 699 006c 00F4      		brsh .L62
 700 006e 8932      		cpi r24,lo8(41)
 701 0070 01F4      		brne .+2
 702 0072 00C0      		rjmp .L64
 703 0074 8533      		cpi r24,lo8(53)
 704 0076 01F4      		brne .+2
 705 0078 00C0      		rjmp .L64
 706 007a 8732      		cpi r24,lo8(39)
 707 007c 01F4      		brne .+2
 708 007e 00C0      		rjmp .L64
 709 0080 00C0      		rjmp .L49
 710               	.L62:
 711 0082 8334      		cpi r24,lo8(67)
 712 0084 01F4      		brne .+2
 713 0086 00C0      		rjmp .L64
 714 0088 00F4      		brsh .L66
 715 008a 8A33      		cpi r24,lo8(58)
 716 008c 00F4      		brsh .+2
 717 008e 00C0      		rjmp .L49
 504:./tmk_core/common/command.c ****             break;
 718               		.loc 1 504 0
 719 0090 8953      		subi r24,lo8(-(-57))
 720 0092 00C0      		rjmp .L90
 721               	.L66:
 313:./tmk_core/common/command.c **** 
 722               		.loc 1 313 0
 723 0094 8834      		cpi r24,lo8(72)
 724 0096 01F0      		breq .+2
 725 0098 00C0      		rjmp .L49
 369:./tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 726               		.loc 1 369 0
 727 009a 0E94 0000 		call clear_keyboard
 370:./tmk_core/common/command.c ****             #ifdef AUDIO_ENABLE
 728               		.loc 1 370 0
 729 009e 80E0      		ldi r24,lo8(__c.3340)
 730 00a0 90E0      		ldi r25,hi8(__c.3340)
 731 00a2 0E94 0000 		call xputs
 732               	.LBB51:
 733               	.LBB52:
 734               		.file 2 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 735               		.loc 2 187 0
 736 00a6 2FEF      		ldi r18,lo8(3199999)
 737 00a8 83ED      		ldi r24,hi8(3199999)
 738 00aa 90E3      		ldi r25,hlo8(3199999)
 739 00ac 2150      	1:	subi r18,1
 740 00ae 8040      		sbci r24,0
 741 00b0 9040      		sbci r25,0
 742 00b2 01F4      		brne 1b
 743 00b4 00C0      		rjmp .
 744 00b6 0000      		nop
 745               	.LBE52:
 746               	.LBE51:
 377:./tmk_core/common/command.c ****             break;
 747               		.loc 1 377 0
 748 00b8 0E94 0000 		call bootloader_jump
 749 00bc 00C0      		rjmp .L87
 750               	.L55:
 751               	.LBB53:
 752               	.LBB54:
 124:./tmk_core/common/command.c **** 		STR(MAGIC_KEY_DEBUG       ) ":	Debug Message Toggle\n"
 753               		.loc 1 124 0
 754 00be 80E0      		ldi r24,lo8(__c.3300)
 755 00c0 90E0      		ldi r25,hi8(__c.3300)
 756 00c2 00C0      		rjmp .L89
 757               	.L70:
 758               	.LBE54:
 759               	.LBE53:
 386:./tmk_core/common/command.c ****                 debug_matrix   = false;
 760               		.loc 1 386 0
 761 00c4 80E0      		ldi r24,lo8(__c.3345)
 762 00c6 90E0      		ldi r25,hi8(__c.3345)
 763 00c8 0E94 0000 		call xputs
 387:./tmk_core/common/command.c ****                 debug_keyboard = false;
 764               		.loc 1 387 0
 765 00cc 8091 0000 		lds r24,debug_config
 389:./tmk_core/common/command.c ****             }
 766               		.loc 1 389 0
 767 00d0 897F      		andi r24,lo8(-7)
 768 00d2 877F      		andi r24,lo8(~(1<<3))
 769 00d4 8093 0000 		sts debug_config,r24
 770               	.L87:
 525:./tmk_core/common/command.c **** }
 771               		.loc 1 525 0
 772 00d8 C1E0      		ldi r28,lo8(1)
 365:./tmk_core/common/command.c **** 
 773               		.loc 1 365 0
 774 00da 00C0      		rjmp .L69
 775               	.L54:
 382:./tmk_core/common/command.c ****             if (debug_enable) {
 776               		.loc 1 382 0
 777 00dc 8091 0000 		lds r24,debug_config
 778 00e0 C82F      		mov r28,r24
 779 00e2 C095      		com r28
 780 00e4 C170      		andi r28,lo8(1)
 781 00e6 C0FB      		bst r28,0
 782 00e8 80F9      		bld r24,0
 783 00ea 8093 0000 		sts debug_config,r24
 383:./tmk_core/common/command.c ****                 print("\ndebug: on\n");
 784               		.loc 1 383 0
 785 00ee CC23      		tst r28
 786 00f0 01F0      		breq .L70
 384:./tmk_core/common/command.c ****             } else {
 787               		.loc 1 384 0
 788 00f2 80E0      		ldi r24,lo8(__c.3343)
 789 00f4 90E0      		ldi r25,hi8(__c.3343)
 790 00f6 0E94 0000 		call xputs
 791 00fa 00C0      		rjmp .L69
 792               	.L61:
 395:./tmk_core/common/command.c ****             if (debug_matrix) {
 793               		.loc 1 395 0
 794 00fc 9091 0000 		lds r25,debug_config
 795 0100 91FB      		bst r25,1
 796 0102 CC27      		clr r28
 797 0104 C0F9      		bld r28,0
 798 0106 81E0      		ldi r24,lo8(1)
 799 0108 C827      		eor r28,r24
 800 010a 892F      		mov r24,r25
 801 010c C0FB      		bst r28,0
 802 010e 81F9      		bld r24,1
 803 0110 8093 0000 		sts debug_config,r24
 396:./tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 804               		.loc 1 396 0
 805 0114 CC23      		tst r28
 806 0116 01F0      		breq .L71
 397:./tmk_core/common/command.c ****                 debug_enable = true;
 807               		.loc 1 397 0
 808 0118 80E0      		ldi r24,lo8(__c.3348)
 809 011a 90E0      		ldi r25,hi8(__c.3348)
 810 011c 00C0      		rjmp .L88
 811               	.L71:
 400:./tmk_core/common/command.c ****             }
 812               		.loc 1 400 0
 813 011e 80E0      		ldi r24,lo8(__c.3350)
 814 0120 90E0      		ldi r25,hi8(__c.3350)
 815 0122 00C0      		rjmp .L89
 816               	.L52:
 406:./tmk_core/common/command.c ****             if (debug_keyboard) {
 817               		.loc 1 406 0
 818 0124 9091 0000 		lds r25,debug_config
 819 0128 92FB      		bst r25,2
 820 012a CC27      		clr r28
 821 012c C0F9      		bld r28,0
 822 012e 81E0      		ldi r24,lo8(1)
 823 0130 C827      		eor r28,r24
 824 0132 892F      		mov r24,r25
 825 0134 C0FB      		bst r28,0
 826 0136 82F9      		bld r24,2
 827 0138 8093 0000 		sts debug_config,r24
 407:./tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 828               		.loc 1 407 0
 829 013c CC23      		tst r28
 830 013e 01F0      		breq .L72
 408:./tmk_core/common/command.c ****                 debug_enable = true;
 831               		.loc 1 408 0
 832 0140 80E0      		ldi r24,lo8(__c.3353)
 833 0142 90E0      		ldi r25,hi8(__c.3353)
 834 0144 00C0      		rjmp .L88
 835               	.L72:
 411:./tmk_core/common/command.c ****             }
 836               		.loc 1 411 0
 837 0146 80E0      		ldi r24,lo8(__c.3355)
 838 0148 90E0      		ldi r25,hi8(__c.3355)
 839               	.L89:
 840 014a 0E94 0000 		call xputs
 841 014e 00C0      		rjmp .L87
 842               	.L59:
 417:./tmk_core/common/command.c ****             if (debug_mouse) {
 843               		.loc 1 417 0
 844 0150 9091 0000 		lds r25,debug_config
 845 0154 93FB      		bst r25,3
 846 0156 CC27      		clr r28
 847 0158 C0F9      		bld r28,0
 848 015a 81E0      		ldi r24,lo8(1)
 849 015c C827      		eor r28,r24
 850 015e 892F      		mov r24,r25
 851 0160 C0FB      		bst r28,0
 852 0162 83F9      		bld r24,3
 853 0164 8093 0000 		sts debug_config,r24
 418:./tmk_core/common/command.c ****                 print("\nmouse: on\n");
 854               		.loc 1 418 0
 855 0168 CC23      		tst r28
 856 016a 01F0      		breq .L73
 419:./tmk_core/common/command.c ****                 debug_enable = true;
 857               		.loc 1 419 0
 858 016c 80E0      		ldi r24,lo8(__c.3358)
 859 016e 90E0      		ldi r25,hi8(__c.3358)
 860               	.L88:
 861 0170 0E94 0000 		call xputs
 420:./tmk_core/common/command.c ****             } else {
 862               		.loc 1 420 0
 863 0174 8091 0000 		lds r24,debug_config
 864 0178 8160      		ori r24,lo8(1<<0)
 865 017a 8093 0000 		sts debug_config,r24
 866 017e 00C0      		rjmp .L69
 867               	.L73:
 422:./tmk_core/common/command.c ****             }
 868               		.loc 1 422 0
 869 0180 80E0      		ldi r24,lo8(__c.3360)
 870 0182 90E0      		ldi r25,hi8(__c.3360)
 871 0184 00C0      		rjmp .L89
 872               	.L60:
 873               	.LBB55:
 874               	.LBB56:
 179:./tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 875               		.loc 1 179 0
 876 0186 80E0      		ldi r24,lo8(__c.3305)
 877 0188 90E0      		ldi r25,hi8(__c.3305)
 878 018a 0E94 0000 		call xputs
 180:./tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 879               		.loc 1 180 0
 880 018e 80E0      		ldi r24,lo8(__c.3307)
 881 0190 90E0      		ldi r25,hi8(__c.3307)
 882 0192 0E94 0000 		call xputs
 181:./tmk_core/common/command.c ****           "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 883               		.loc 1 181 0
 884 0196 80E0      		ldi r24,lo8(__c.3309)
 885 0198 90E0      		ldi r25,hi8(__c.3309)
 886 019a 0E94 0000 		call xputs
 184:./tmk_core/common/command.c **** 
 887               		.loc 1 184 0
 888 019e 80E0      		ldi r24,lo8(__c.3311)
 889 01a0 90E0      		ldi r25,hi8(__c.3311)
 890 01a2 0E94 0000 		call xputs
 187:./tmk_core/common/command.c **** 
 891               		.loc 1 187 0
 892 01a6 80E0      		ldi r24,lo8(__c.3313)
 893 01a8 90E0      		ldi r25,hi8(__c.3313)
 894 01aa 0E94 0000 		call xputs
 222:./tmk_core/common/command.c **** #if defined(__AVR__)
 895               		.loc 1 222 0
 896 01ae 80E0      		ldi r24,lo8(__c.3315)
 897 01b0 90E0      		ldi r25,hi8(__c.3315)
 898 01b2 00C0      		rjmp .L89
 899               	.L57:
 900               	.LBE56:
 901               	.LBE55:
 902               	.LBB57:
 903               	.LBB58:
 235:./tmk_core/common/command.c **** 
 904               		.loc 1 235 0
 905 01b4 80E0      		ldi r24,lo8(__c.3320)
 906 01b6 90E0      		ldi r25,hi8(__c.3320)
 907 01b8 0E94 0000 		call xputs
 237:./tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 908               		.loc 1 237 0
 909 01bc 0E94 0000 		call host_keyboard_leds
 910 01c0 1F92      		push __zero_reg__
 911               	.LCFI54:
 912               		.cfi_def_cfa_offset 4
 913 01c2 8F93      		push r24
 914               	.LCFI55:
 915               		.cfi_def_cfa_offset 5
 916 01c4 80E0      		ldi r24,lo8(__c.3322)
 917 01c6 90E0      		ldi r25,hi8(__c.3322)
 918 01c8 9F93      		push r25
 919               	.LCFI56:
 920               		.cfi_def_cfa_offset 6
 921 01ca 8F93      		push r24
 922               	.LCFI57:
 923               		.cfi_def_cfa_offset 7
 924 01cc 0E94 0000 		call __xprintf
 240:./tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 925               		.loc 1 240 0
 926 01d0 8091 0000 		lds r24,keyboard_protocol
 927 01d4 1F92      		push __zero_reg__
 928               	.LCFI58:
 929               		.cfi_def_cfa_offset 8
 930 01d6 8F93      		push r24
 931               	.LCFI59:
 932               		.cfi_def_cfa_offset 9
 933 01d8 80E0      		ldi r24,lo8(__c.3324)
 934 01da 90E0      		ldi r25,hi8(__c.3324)
 935 01dc 9F93      		push r25
 936               	.LCFI60:
 937               		.cfi_def_cfa_offset 10
 938 01de 8F93      		push r24
 939               	.LCFI61:
 940               		.cfi_def_cfa_offset 11
 941 01e0 0E94 0000 		call __xprintf
 241:./tmk_core/common/command.c **** #endif
 942               		.loc 1 241 0
 943 01e4 8091 0000 		lds r24,keyboard_idle
 944 01e8 1F92      		push __zero_reg__
 945               	.LCFI62:
 946               		.cfi_def_cfa_offset 12
 947 01ea 8F93      		push r24
 948               	.LCFI63:
 949               		.cfi_def_cfa_offset 13
 950 01ec 80E0      		ldi r24,lo8(__c.3326)
 951 01ee 90E0      		ldi r25,hi8(__c.3326)
 952 01f0 9F93      		push r25
 953               	.LCFI64:
 954               		.cfi_def_cfa_offset 14
 955 01f2 8F93      		push r24
 956               	.LCFI65:
 957               		.cfi_def_cfa_offset 15
 958 01f4 0E94 0000 		call __xprintf
 246:./tmk_core/common/command.c **** 
 959               		.loc 1 246 0
 960 01f8 0E94 0000 		call timer_read32
 961 01fc 9F93      		push r25
 962               	.LCFI66:
 963               		.cfi_def_cfa_offset 16
 964 01fe 8F93      		push r24
 965               	.LCFI67:
 966               		.cfi_def_cfa_offset 17
 967 0200 7F93      		push r23
 968               	.LCFI68:
 969               		.cfi_def_cfa_offset 18
 970 0202 6F93      		push r22
 971               	.LCFI69:
 972               		.cfi_def_cfa_offset 19
 973 0204 80E0      		ldi r24,lo8(__c.3328)
 974 0206 90E0      		ldi r25,hi8(__c.3328)
 975 0208 9F93      		push r25
 976               	.LCFI70:
 977               		.cfi_def_cfa_offset 20
 978 020a 8F93      		push r24
 979               	.LCFI71:
 980               		.cfi_def_cfa_offset 21
 981 020c 0E94 0000 		call __xprintf
 982 0210 8DB7      		in r24,__SP_L__
 983 0212 9EB7      		in r25,__SP_H__
 984 0214 4296      		adiw r24,18
 985 0216 0FB6      		in __tmp_reg__,__SREG__
 986 0218 F894      		cli
 987 021a 9EBF      		out __SP_H__,r25
 988 021c 0FBE      		out __SREG__,__tmp_reg__
 989 021e 8DBF      		out __SP_L__,r24
 990               	.LCFI72:
 991               		.cfi_def_cfa_offset 3
 992 0220 00C0      		rjmp .L87
 993               	.L51:
 994               	.LBE58:
 995               	.LBE57:
 514:./tmk_core/common/command.c ****             break;
 996               		.loc 1 514 0
 997 0222 8D51      		subi r24,lo8(-(-29))
 998 0224 00C0      		rjmp .L90
 999               	.L64:
 517:./tmk_core/common/command.c ****             break;
 1000               		.loc 1 517 0
 1001 0226 80E0      		ldi r24,0
 1002               	.L90:
 1003 0228 0E94 0000 		call switch_default_layer
 1004 022c 00C0      		rjmp .L87
 1005               	.L49:
 522:./tmk_core/common/command.c ****             return false;
 1006               		.loc 1 522 0
 1007 022e 80E0      		ldi r24,lo8(__c.3371)
 1008 0230 90E0      		ldi r25,hi8(__c.3371)
 1009 0232 0E94 0000 		call xputs
 523:./tmk_core/common/command.c ****     }
 1010               		.loc 1 523 0
 1011 0236 C0E0      		ldi r28,0
 1012               	.L69:
 526:./tmk_core/common/command.c **** 
 1013               		.loc 1 526 0
 1014 0238 8C2F      		mov r24,r28
 1015               	/* epilogue start */
 1016 023a CF91      		pop r28
 1017 023c 0895      		ret
 1018               		.cfi_endproc
 1019               	.LFE34:
 1021               		.section	.text.rgblight_toggle,"ax",@progbits
 1022               		.weak	rgblight_toggle
 1024               	rgblight_toggle:
 1025               	.LFB13:
 1026               		.file 3 "./quantum/rgb.h"
   1:./quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:./quantum/rgb.h ****  *
   3:./quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:./quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:./quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:./quantum/rgb.h ****  * (at your option) any later version.
   7:./quantum/rgb.h ****  *
   8:./quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:./quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:./quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:./quantum/rgb.h ****  * GNU General Public License for more details.
  12:./quantum/rgb.h ****  *
  13:./quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:./quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:./quantum/rgb.h ****  */
  16:./quantum/rgb.h **** 
  17:./quantum/rgb.h **** #ifndef RGB_H
  18:./quantum/rgb.h **** #define RGB_H
  19:./quantum/rgb.h **** 
  20:./quantum/rgb.h **** __attribute__((weak))
  21:./quantum/rgb.h **** void rgblight_toggle(void) {};
 1027               		.loc 3 21 0
 1028               		.cfi_startproc
 1029               	/* prologue: function */
 1030               	/* frame size = 0 */
 1031               	/* stack size = 0 */
 1032               	.L__stack_usage = 0
 1033 0000 0895      		ret
 1034               		.cfi_endproc
 1035               	.LFE13:
 1037               		.section	.text.rgblight_step,"ax",@progbits
 1038               		.weak	rgblight_step
 1040               	rgblight_step:
 1041               	.LFB14:
  22:./quantum/rgb.h **** 
  23:./quantum/rgb.h **** __attribute__((weak))
  24:./quantum/rgb.h **** void rgblight_step(void) {};
 1042               		.loc 3 24 0
 1043               		.cfi_startproc
 1044               	/* prologue: function */
 1045               	/* frame size = 0 */
 1046               	/* stack size = 0 */
 1047               	.L__stack_usage = 0
 1048 0000 0895      		ret
 1049               		.cfi_endproc
 1050               	.LFE14:
 1052               		.section	.text.rgblight_step_reverse,"ax",@progbits
 1053               		.weak	rgblight_step_reverse
 1055               	rgblight_step_reverse:
 1056               	.LFB15:
  25:./quantum/rgb.h **** 
  26:./quantum/rgb.h **** __attribute__((weak))
  27:./quantum/rgb.h **** void rgblight_step_reverse(void) {};
 1057               		.loc 3 27 0
 1058               		.cfi_startproc
 1059               	/* prologue: function */
 1060               	/* frame size = 0 */
 1061               	/* stack size = 0 */
 1062               	.L__stack_usage = 0
 1063 0000 0895      		ret
 1064               		.cfi_endproc
 1065               	.LFE15:
 1067               		.section	.text.rgblight_increase_hue,"ax",@progbits
 1068               		.weak	rgblight_increase_hue
 1070               	rgblight_increase_hue:
 1071               	.LFB16:
  28:./quantum/rgb.h **** 
  29:./quantum/rgb.h **** __attribute__((weak))
  30:./quantum/rgb.h **** void rgblight_increase_hue(void) {};
 1072               		.loc 3 30 0
 1073               		.cfi_startproc
 1074               	/* prologue: function */
 1075               	/* frame size = 0 */
 1076               	/* stack size = 0 */
 1077               	.L__stack_usage = 0
 1078 0000 0895      		ret
 1079               		.cfi_endproc
 1080               	.LFE16:
 1082               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 1083               		.weak	rgblight_decrease_hue
 1085               	rgblight_decrease_hue:
 1086               	.LFB17:
  31:./quantum/rgb.h **** 
  32:./quantum/rgb.h **** __attribute__((weak))
  33:./quantum/rgb.h **** void rgblight_decrease_hue(void) {};
 1087               		.loc 3 33 0
 1088               		.cfi_startproc
 1089               	/* prologue: function */
 1090               	/* frame size = 0 */
 1091               	/* stack size = 0 */
 1092               	.L__stack_usage = 0
 1093 0000 0895      		ret
 1094               		.cfi_endproc
 1095               	.LFE17:
 1097               		.section	.text.rgblight_increase_sat,"ax",@progbits
 1098               		.weak	rgblight_increase_sat
 1100               	rgblight_increase_sat:
 1101               	.LFB18:
  34:./quantum/rgb.h **** 
  35:./quantum/rgb.h **** __attribute__((weak))
  36:./quantum/rgb.h **** void rgblight_increase_sat(void) {};
 1102               		.loc 3 36 0
 1103               		.cfi_startproc
 1104               	/* prologue: function */
 1105               	/* frame size = 0 */
 1106               	/* stack size = 0 */
 1107               	.L__stack_usage = 0
 1108 0000 0895      		ret
 1109               		.cfi_endproc
 1110               	.LFE18:
 1112               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 1113               		.weak	rgblight_decrease_sat
 1115               	rgblight_decrease_sat:
 1116               	.LFB19:
  37:./quantum/rgb.h **** 
  38:./quantum/rgb.h **** __attribute__((weak))
  39:./quantum/rgb.h **** void rgblight_decrease_sat(void) {};
 1117               		.loc 3 39 0
 1118               		.cfi_startproc
 1119               	/* prologue: function */
 1120               	/* frame size = 0 */
 1121               	/* stack size = 0 */
 1122               	.L__stack_usage = 0
 1123 0000 0895      		ret
 1124               		.cfi_endproc
 1125               	.LFE19:
 1127               		.section	.text.rgblight_increase_val,"ax",@progbits
 1128               		.weak	rgblight_increase_val
 1130               	rgblight_increase_val:
 1131               	.LFB20:
  40:./quantum/rgb.h **** 
  41:./quantum/rgb.h **** __attribute__((weak))
  42:./quantum/rgb.h **** void rgblight_increase_val(void) {};
 1132               		.loc 3 42 0
 1133               		.cfi_startproc
 1134               	/* prologue: function */
 1135               	/* frame size = 0 */
 1136               	/* stack size = 0 */
 1137               	.L__stack_usage = 0
 1138 0000 0895      		ret
 1139               		.cfi_endproc
 1140               	.LFE20:
 1142               		.section	.text.rgblight_decrease_val,"ax",@progbits
 1143               		.weak	rgblight_decrease_val
 1145               	rgblight_decrease_val:
 1146               	.LFB21:
  43:./quantum/rgb.h **** 
  44:./quantum/rgb.h **** __attribute__((weak))
  45:./quantum/rgb.h **** void rgblight_decrease_val(void) {};
 1147               		.loc 3 45 0
 1148               		.cfi_startproc
 1149               	/* prologue: function */
 1150               	/* frame size = 0 */
 1151               	/* stack size = 0 */
 1152               	.L__stack_usage = 0
 1153 0000 0895      		ret
 1154               		.cfi_endproc
 1155               	.LFE21:
 1157               		.section	.text.rgblight_increase_speed,"ax",@progbits
 1158               		.weak	rgblight_increase_speed
 1160               	rgblight_increase_speed:
 1161               	.LFB22:
  46:./quantum/rgb.h **** 
  47:./quantum/rgb.h **** __attribute__((weak))
  48:./quantum/rgb.h **** void rgblight_increase_speed(void) {};
 1162               		.loc 3 48 0
 1163               		.cfi_startproc
 1164               	/* prologue: function */
 1165               	/* frame size = 0 */
 1166               	/* stack size = 0 */
 1167               	.L__stack_usage = 0
 1168 0000 0895      		ret
 1169               		.cfi_endproc
 1170               	.LFE22:
 1172               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 1173               		.weak	rgblight_decrease_speed
 1175               	rgblight_decrease_speed:
 1176               	.LFB23:
  49:./quantum/rgb.h **** 
  50:./quantum/rgb.h **** __attribute__((weak))
  51:./quantum/rgb.h **** void rgblight_decrease_speed(void) {};
 1177               		.loc 3 51 0
 1178               		.cfi_startproc
 1179               	/* prologue: function */
 1180               	/* frame size = 0 */
 1181               	/* stack size = 0 */
 1182               	.L__stack_usage = 0
 1183 0000 0895      		ret
 1184               		.cfi_endproc
 1185               	.LFE23:
 1187               		.section	.text.command_extra,"ax",@progbits
 1188               		.weak	command_extra
 1190               	command_extra:
 1191               	.LFB29:
 106:./tmk_core/common/command.c ****     (void)code;
 1192               		.loc 1 106 0
 1193               		.cfi_startproc
 1194               	.LVL52:
 1195               	/* prologue: function */
 1196               	/* frame size = 0 */
 1197               	/* stack size = 0 */
 1198               	.L__stack_usage = 0
 109:./tmk_core/common/command.c **** 
 1199               		.loc 1 109 0
 1200 0000 80E0      		ldi r24,0
 1201               	.LVL53:
 1202 0002 0895      		ret
 1203               		.cfi_endproc
 1204               	.LFE29:
 1206               		.section	.text.command_console_extra,"ax",@progbits
 1207               		.weak	command_console_extra
 1209               	command_console_extra:
 1210               	.LFB30:
 113:./tmk_core/common/command.c ****     (void)code;
 1211               		.loc 1 113 0
 1212               		.cfi_startproc
 1213               	.LVL54:
 1214               	/* prologue: function */
 1215               	/* frame size = 0 */
 1216               	/* stack size = 0 */
 1217               	.L__stack_usage = 0
 116:./tmk_core/common/command.c **** 
 1218               		.loc 1 116 0
 1219 0000 80E0      		ldi r24,0
 1220               	.LVL55:
 1221 0002 0895      		ret
 1222               		.cfi_endproc
 1223               	.LFE30:
 1225               		.section	.text.numkey2num,"ax",@progbits
 1226               	.global	numkey2num
 1228               	numkey2num:
 1229               	.LFB42:
 778:./tmk_core/common/command.c ****     switch (code) {
 1230               		.loc 1 778 0
 1231               		.cfi_startproc
 1232               	.LVL56:
 1233               	/* prologue: function */
 1234               	/* frame size = 0 */
 1235               	/* stack size = 0 */
 1236               	.L__stack_usage = 0
 1237 0000 8E51      		subi r24,lo8(-(-30))
 1238               	.LVL57:
 1239 0002 8A30      		cpi r24,lo8(10)
 1240 0004 00F4      		brsh .L106
 1241 0006 E82F      		mov r30,r24
 1242 0008 F0E0      		ldi r31,0
 1243 000a E050      		subi r30,lo8(-(CSWTCH.65))
 1244 000c F040      		sbci r31,hi8(-(CSWTCH.65))
 1245 000e 8081      		ld r24,Z
 1246               	.LVL58:
 1247 0010 0895      		ret
 1248               	.L106:
 778:./tmk_core/common/command.c ****     switch (code) {
 1249               		.loc 1 778 0
 1250 0012 80E0      		ldi r24,0
 792:./tmk_core/common/command.c **** 
 1251               		.loc 1 792 0
 1252 0014 0895      		ret
 1253               		.cfi_endproc
 1254               	.LFE42:
 1256               		.section	.text.command_proc,"ax",@progbits
 1257               	.global	command_proc
 1259               	command_proc:
 1260               	.LFB28:
  77:./tmk_core/common/command.c ****     switch (command_state) {
 1261               		.loc 1 77 0
 1262               		.cfi_startproc
 1263 0000 CF93      		push r28
 1264               	.LCFI73:
 1265               		.cfi_def_cfa_offset 3
 1266               		.cfi_offset 28, -2
 1267               	/* prologue: function */
 1268               	/* frame size = 0 */
 1269               	/* stack size = 1 */
 1270               	.L__stack_usage = 1
 1271 0002 C82F      		mov r28,r24
  78:./tmk_core/common/command.c ****         case ONESHOT:
 1272               		.loc 1 78 0
 1273 0004 8091 0000 		lds r24,command_state
 1274 0008 8130      		cpi r24,lo8(1)
 1275 000a 01F0      		breq .L109
 1276 000c 00F0      		brlo .L110
 1277 000e 8230      		cpi r24,lo8(2)
 1278 0010 01F4      		brne .+2
 1279 0012 00C0      		rjmp .L111
 1280 0014 00C0      		rjmp .L177
 1281               	.L110:
  80:./tmk_core/common/command.c ****                 return false;
 1282               		.loc 1 80 0
 1283 0016 E091 0000 		lds r30,keyboard_report
 1284 001a F091 0000 		lds r31,keyboard_report+1
 1285 001e 8081      		ld r24,Z
 1286 0020 8232      		cpi r24,lo8(34)
 1287 0022 01F0      		breq .+2
 1288 0024 00C0      		rjmp .L140
 1289 0026 00C0      		rjmp .L176
 1290               	.L109:
  85:./tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1291               		.loc 1 85 0
 1292 0028 E091 0000 		lds r30,keyboard_report
 1293 002c F091 0000 		lds r31,keyboard_report+1
 1294 0030 8081      		ld r24,Z
 1295 0032 8232      		cpi r24,lo8(34)
 1296 0034 01F4      		brne .L114
 1297               	.L176:
  86:./tmk_core/common/command.c ****             else
 1298               		.loc 1 86 0
 1299 0036 8C2F      		mov r24,r28
 1300 0038 0E94 0000 		call command_extra
 1301 003c 8111      		cpse r24,__zero_reg__
 1302 003e 00C0      		rjmp .L142
  86:./tmk_core/common/command.c ****             else
 1303               		.loc 1 86 0 is_stmt 0 discriminator 2
 1304 0040 8C2F      		mov r24,r28
 1305 0042 0E94 0000 		call command_common
 1306 0046 00C0      		rjmp .L116
 1307               	.L142:
  86:./tmk_core/common/command.c ****             else
 1308               		.loc 1 86 0
 1309 0048 81E0      		ldi r24,lo8(1)
 1310 004a 90E0      		ldi r25,0
 1311 004c 00C0      		rjmp .L116
 1312               	.L114:
  88:./tmk_core/common/command.c ****             break;
 1313               		.loc 1 88 0 is_stmt 1
 1314 004e 8C2F      		mov r24,r28
 1315 0050 0E94 0000 		call command_console_extra
 1316 0054 8111      		cpse r24,__zero_reg__
 1317 0056 00C0      		rjmp .L143
 1318               	.LBB95:
 1319               	.LBB96:
 544:./tmk_core/common/command.c ****         case KC_H:
 1320               		.loc 1 544 0
 1321 0058 C431      		cpi r28,lo8(20)
 1322 005a 01F0      		breq .L118
 1323 005c 00F4      		brsh .L119
 1324 005e CB30      		cpi r28,lo8(11)
 1325 0060 01F0      		breq .L120
 1326 0062 C031      		cpi r28,lo8(16)
 1327 0064 01F4      		brne .L117
 555:./tmk_core/common/command.c ****             print("M> ");
 1328               		.loc 1 555 0
 1329 0066 0E94 0000 		call mousekey_console_help
 556:./tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1330               		.loc 1 556 0
 1331 006a 80E0      		ldi r24,lo8(__c.3387)
 1332 006c 90E0      		ldi r25,hi8(__c.3387)
 1333 006e 0E94 0000 		call xputs
 557:./tmk_core/common/command.c ****             return true;
 1334               		.loc 1 557 0
 1335 0072 82E0      		ldi r24,lo8(2)
 1336 0074 8093 0000 		sts command_state,r24
 1337 0078 00C0      		rjmp .L143
 1338               	.L119:
 544:./tmk_core/common/command.c ****         case KC_H:
 1339               		.loc 1 544 0
 1340 007a C932      		cpi r28,lo8(41)
 1341 007c 01F0      		breq .L118
 1342 007e C833      		cpi r28,lo8(56)
 1343 0080 01F4      		brne .L117
 1344               	.L120:
 1345               	.LBB97:
 1346               	.LBB98:
 534:./tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1347               		.loc 1 534 0
 1348 0082 80E0      		ldi r24,lo8(__c.3376)
 1349 0084 90E0      		ldi r25,hi8(__c.3376)
 1350 0086 0E94 0000 		call xputs
 1351               	.LBE98:
 1352               	.LBE97:
 564:./tmk_core/common/command.c ****     return true;
 1353               		.loc 1 564 0
 1354 008a 80E0      		ldi r24,lo8(__c.3392)
 1355 008c 90E0      		ldi r25,hi8(__c.3392)
 1356 008e 0E94 0000 		call xputs
 1357 0092 00C0      		rjmp .L143
 1358               	.L118:
 551:./tmk_core/common/command.c ****             return false;
 1359               		.loc 1 551 0
 1360 0094 1092 0000 		sts command_state,__zero_reg__
 1361 0098 00C0      		rjmp .L123
 1362               	.L117:
 561:./tmk_core/common/command.c ****             return false;
 1363               		.loc 1 561 0
 1364 009a 80E0      		ldi r24,lo8(__c.3390)
 1365 009c 90E0      		ldi r25,hi8(__c.3390)
 1366 009e 0E94 0000 		call xputs
 1367 00a2 00C0      		rjmp .L123
 1368               	.L143:
 1369               	.LBE96:
 1370               	.LBE95:
  88:./tmk_core/common/command.c ****             break;
 1371               		.loc 1 88 0
 1372 00a4 81E0      		ldi r24,lo8(1)
 1373               	.L116:
  88:./tmk_core/common/command.c ****             break;
 1374               		.loc 1 88 0 is_stmt 0 discriminator 6
 1375 00a6 8170      		andi r24,lo8(1)
 1376 00a8 00C0      		rjmp .L169
 1377               	.L111:
 1378               	.LBB99:
 1379               	.LBB100:
 713:./tmk_core/common/command.c ****         case KC_H:
 1380               		.loc 1 713 0 is_stmt 1
 1381 00aa C432      		cpi r28,lo8(36)
 1382 00ac 00F4      		brsh .L125
 1383 00ae CE31      		cpi r28,lo8(30)
 1384 00b0 00F0      		brlo .+2
 1385 00b2 00C0      		rjmp .L126
 1386 00b4 CB30      		cpi r28,lo8(11)
 1387 00b6 01F0      		breq .L127
 1388 00b8 00F4      		brsh .L128
 1389 00ba C730      		cpi r28,lo8(7)
 1390 00bc 01F0      		breq .+2
 1391 00be 00C0      		rjmp .L124
 752:./tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1392               		.loc 1 752 0
 1393 00c0 1092 0000 		sts mk_delay,__zero_reg__
 753:./tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1394               		.loc 1 753 0
 1395 00c4 80E1      		ldi r24,lo8(16)
 1396 00c6 8093 0000 		sts mk_interval,r24
 754:./tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1397               		.loc 1 754 0
 1398 00ca C093 0000 		sts mk_max_speed,r28
 755:./tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1399               		.loc 1 755 0
 1400 00ce 8CE3      		ldi r24,lo8(60)
 1401 00d0 8093 0000 		sts mk_time_to_max,r24
 756:./tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1402               		.loc 1 756 0
 1403 00d4 88E0      		ldi r24,lo8(8)
 1404 00d6 8093 0000 		sts mk_wheel_max_speed,r24
 757:./tmk_core/common/command.c ****             print("set default\n");
 1405               		.loc 1 757 0
 1406 00da 88E2      		ldi r24,lo8(40)
 1407 00dc 8093 0000 		sts mk_wheel_time_to_max,r24
 758:./tmk_core/common/command.c ****             break;
 1408               		.loc 1 758 0
 1409 00e0 80E0      		ldi r24,lo8(__c.3511)
 1410 00e2 90E0      		ldi r25,hi8(__c.3511)
 1411 00e4 0E94 0000 		call xputs
 1412 00e8 00C0      		rjmp .L137
 1413               	.L128:
 713:./tmk_core/common/command.c ****         case KC_H:
 1414               		.loc 1 713 0
 1415 00ea C331      		cpi r28,lo8(19)
 1416 00ec 01F0      		breq .L130
 1417 00ee C431      		cpi r28,lo8(20)
 1418 00f0 01F0      		breq .L131
 1419 00f2 00C0      		rjmp .L124
 1420               	.L125:
 1421 00f4 CB34      		cpi r28,lo8(75)
 1422 00f6 01F4      		brne .+2
 1423 00f8 00C0      		rjmp .L132
 1424 00fa 00F4      		brsh .L133
 1425 00fc C932      		cpi r28,lo8(41)
 1426 00fe 01F0      		breq .L131
 1427 0100 C833      		cpi r28,lo8(56)
 1428 0102 01F0      		breq .L127
 1429 0104 00C0      		rjmp .L124
 1430               	.L133:
 1431 0106 C135      		cpi r28,lo8(81)
 1432 0108 01F4      		brne .+2
 1433 010a 00C0      		rjmp .L134
 1434 010c C235      		cpi r28,lo8(82)
 1435 010e 01F4      		brne .+2
 1436 0110 00C0      		rjmp .L135
 1437 0112 CE34      		cpi r28,lo8(78)
 1438 0114 01F0      		breq .+2
 1439 0116 00C0      		rjmp .L124
 749:./tmk_core/common/command.c ****             break;
 1440               		.loc 1 749 0
 1441 0118 6AE0      		ldi r22,lo8(10)
 1442 011a 00C0      		rjmp .L171
 1443               	.L127:
 716:./tmk_core/common/command.c ****             break;
 1444               		.loc 1 716 0
 1445 011c 0E94 0000 		call mousekey_console_help
 1446 0120 00C0      		rjmp .L137
 1447               	.L131:
 720:./tmk_core/common/command.c ****                 mousekey_param = 0;
 1448               		.loc 1 720 0
 1449 0122 8091 0000 		lds r24,mousekey_param
 1450 0126 8823      		tst r24
 1451 0128 01F0      		breq .L138
 721:./tmk_core/common/command.c ****             } else {
 1452               		.loc 1 721 0
 1453 012a 1092 0000 		sts mousekey_param,__zero_reg__
 1454 012e 00C0      		rjmp .L137
 1455               	.L138:
 723:./tmk_core/common/command.c ****                 command_state = CONSOLE;
 1456               		.loc 1 723 0
 1457 0130 80E0      		ldi r24,lo8(__c.3497)
 1458 0132 90E0      		ldi r25,hi8(__c.3497)
 1459 0134 0E94 0000 		call xputs
 724:./tmk_core/common/command.c ****                 return false;
 1460               		.loc 1 724 0
 1461 0138 81E0      		ldi r24,lo8(1)
 1462 013a 8093 0000 		sts command_state,r24
 1463 013e 00C0      		rjmp .L169
 1464               	.L130:
 1465               	.LBB101:
 1466               	.LBB102:
 579:./tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1467               		.loc 1 579 0
 1468 0140 80E0      		ldi r24,lo8(__c.3398)
 1469 0142 90E0      		ldi r25,hi8(__c.3398)
 1470 0144 0E94 0000 		call xputs
 580:./tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1471               		.loc 1 580 0
 1472 0148 80E0      		ldi r24,lo8(__c.3400)
 1473 014a 90E0      		ldi r25,hi8(__c.3400)
 1474 014c 0E94 0000 		call xputs
 1475 0150 8091 0000 		lds r24,mk_delay
 1476 0154 1F92      		push __zero_reg__
 1477               	.LCFI74:
 1478               		.cfi_def_cfa_offset 4
 1479 0156 8F93      		push r24
 1480               	.LCFI75:
 1481               		.cfi_def_cfa_offset 5
 1482 0158 80E0      		ldi r24,lo8(__c.3402)
 1483 015a 90E0      		ldi r25,hi8(__c.3402)
 1484 015c 9F93      		push r25
 1485               	.LCFI76:
 1486               		.cfi_def_cfa_offset 6
 1487 015e 8F93      		push r24
 1488               	.LCFI77:
 1489               		.cfi_def_cfa_offset 7
 1490 0160 0E94 0000 		call __xprintf
 1491 0164 80E0      		ldi r24,lo8(__c.3404)
 1492 0166 90E0      		ldi r25,hi8(__c.3404)
 1493 0168 0E94 0000 		call xputs
 581:./tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1494               		.loc 1 581 0
 1495 016c 80E0      		ldi r24,lo8(__c.3406)
 1496 016e 90E0      		ldi r25,hi8(__c.3406)
 1497 0170 0E94 0000 		call xputs
 1498 0174 8091 0000 		lds r24,mk_interval
 1499 0178 1F92      		push __zero_reg__
 1500               	.LCFI78:
 1501               		.cfi_def_cfa_offset 8
 1502 017a 8F93      		push r24
 1503               	.LCFI79:
 1504               		.cfi_def_cfa_offset 9
 1505 017c 80E0      		ldi r24,lo8(__c.3408)
 1506 017e 90E0      		ldi r25,hi8(__c.3408)
 1507 0180 9F93      		push r25
 1508               	.LCFI80:
 1509               		.cfi_def_cfa_offset 10
 1510 0182 8F93      		push r24
 1511               	.LCFI81:
 1512               		.cfi_def_cfa_offset 11
 1513 0184 0E94 0000 		call __xprintf
 1514 0188 80E0      		ldi r24,lo8(__c.3410)
 1515 018a 90E0      		ldi r25,hi8(__c.3410)
 1516 018c 0E94 0000 		call xputs
 582:./tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1517               		.loc 1 582 0
 1518 0190 80E0      		ldi r24,lo8(__c.3412)
 1519 0192 90E0      		ldi r25,hi8(__c.3412)
 1520 0194 0E94 0000 		call xputs
 1521 0198 8091 0000 		lds r24,mk_max_speed
 1522 019c 1F92      		push __zero_reg__
 1523               	.LCFI82:
 1524               		.cfi_def_cfa_offset 12
 1525 019e 8F93      		push r24
 1526               	.LCFI83:
 1527               		.cfi_def_cfa_offset 13
 1528 01a0 80E0      		ldi r24,lo8(__c.3414)
 1529 01a2 90E0      		ldi r25,hi8(__c.3414)
 1530 01a4 9F93      		push r25
 1531               	.LCFI84:
 1532               		.cfi_def_cfa_offset 14
 1533 01a6 8F93      		push r24
 1534               	.LCFI85:
 1535               		.cfi_def_cfa_offset 15
 1536 01a8 0E94 0000 		call __xprintf
 1537 01ac 80E0      		ldi r24,lo8(__c.3416)
 1538 01ae 90E0      		ldi r25,hi8(__c.3416)
 1539 01b0 0E94 0000 		call xputs
 583:./tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1540               		.loc 1 583 0
 1541 01b4 80E0      		ldi r24,lo8(__c.3418)
 1542 01b6 90E0      		ldi r25,hi8(__c.3418)
 1543 01b8 0E94 0000 		call xputs
 1544 01bc 8091 0000 		lds r24,mk_time_to_max
 1545 01c0 1F92      		push __zero_reg__
 1546               	.LCFI86:
 1547               		.cfi_def_cfa_offset 16
 1548 01c2 8F93      		push r24
 1549               	.LCFI87:
 1550               		.cfi_def_cfa_offset 17
 1551 01c4 80E0      		ldi r24,lo8(__c.3420)
 1552 01c6 90E0      		ldi r25,hi8(__c.3420)
 1553 01c8 9F93      		push r25
 1554               	.LCFI88:
 1555               		.cfi_def_cfa_offset 18
 1556 01ca 8F93      		push r24
 1557               	.LCFI89:
 1558               		.cfi_def_cfa_offset 19
 1559 01cc 0E94 0000 		call __xprintf
 1560 01d0 80E0      		ldi r24,lo8(__c.3422)
 1561 01d2 90E0      		ldi r25,hi8(__c.3422)
 1562 01d4 0E94 0000 		call xputs
 584:./tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1563               		.loc 1 584 0
 1564 01d8 80E0      		ldi r24,lo8(__c.3424)
 1565 01da 90E0      		ldi r25,hi8(__c.3424)
 1566 01dc 0E94 0000 		call xputs
 1567 01e0 8091 0000 		lds r24,mk_wheel_max_speed
 1568 01e4 1F92      		push __zero_reg__
 1569               	.LCFI90:
 1570               		.cfi_def_cfa_offset 20
 1571 01e6 8F93      		push r24
 1572               	.LCFI91:
 1573               		.cfi_def_cfa_offset 21
 1574 01e8 80E0      		ldi r24,lo8(__c.3426)
 1575 01ea 90E0      		ldi r25,hi8(__c.3426)
 1576 01ec 9F93      		push r25
 1577               	.LCFI92:
 1578               		.cfi_def_cfa_offset 22
 1579 01ee 8F93      		push r24
 1580               	.LCFI93:
 1581               		.cfi_def_cfa_offset 23
 1582 01f0 0E94 0000 		call __xprintf
 1583 01f4 80E0      		ldi r24,lo8(__c.3428)
 1584 01f6 90E0      		ldi r25,hi8(__c.3428)
 1585 01f8 0E94 0000 		call xputs
 585:./tmk_core/common/command.c **** #endif /* !NO_PRINT */
 1586               		.loc 1 585 0
 1587 01fc 80E0      		ldi r24,lo8(__c.3430)
 1588 01fe 90E0      		ldi r25,hi8(__c.3430)
 1589 0200 0E94 0000 		call xputs
 1590 0204 8091 0000 		lds r24,mk_wheel_time_to_max
 1591 0208 1F92      		push __zero_reg__
 1592               	.LCFI94:
 1593               		.cfi_def_cfa_offset 24
 1594 020a 8F93      		push r24
 1595               	.LCFI95:
 1596               		.cfi_def_cfa_offset 25
 1597 020c 80E0      		ldi r24,lo8(__c.3432)
 1598 020e 90E0      		ldi r25,hi8(__c.3432)
 1599 0210 9F93      		push r25
 1600               	.LCFI96:
 1601               		.cfi_def_cfa_offset 26
 1602 0212 8F93      		push r24
 1603               	.LCFI97:
 1604               		.cfi_def_cfa_offset 27
 1605 0214 0E94 0000 		call __xprintf
 1606 0218 80E0      		ldi r24,lo8(__c.3434)
 1607 021a 90E0      		ldi r25,hi8(__c.3434)
 1608 021c 0E94 0000 		call xputs
 1609 0220 8DB7      		in r24,__SP_L__
 1610 0222 9EB7      		in r25,__SP_H__
 1611 0224 4896      		adiw r24,24
 1612 0226 0FB6      		in __tmp_reg__,__SREG__
 1613 0228 F894      		cli
 1614 022a 9EBF      		out __SP_H__,r25
 1615 022c 0FBE      		out __SREG__,__tmp_reg__
 1616 022e 8DBF      		out __SP_L__,r24
 1617               	.LCFI98:
 1618               		.cfi_def_cfa_offset 3
 1619 0230 00C0      		rjmp .L137
 1620               	.L126:
 1621               	.LBE102:
 1622               	.LBE101:
 737:./tmk_core/common/command.c ****             break;
 1623               		.loc 1 737 0
 1624 0232 8C2F      		mov r24,r28
 1625 0234 0E94 0000 		call numkey2num
 1626 0238 8093 0000 		sts mousekey_param,r24
 1627 023c 00C0      		rjmp .L137
 1628               	.L135:
 740:./tmk_core/common/command.c ****             break;
 1629               		.loc 1 740 0
 1630 023e 61E0      		ldi r22,lo8(1)
 1631 0240 00C0      		rjmp .L170
 1632               	.L134:
 743:./tmk_core/common/command.c ****             break;
 1633               		.loc 1 743 0
 1634 0242 61E0      		ldi r22,lo8(1)
 1635 0244 00C0      		rjmp .L171
 1636               	.L132:
 746:./tmk_core/common/command.c ****             break;
 1637               		.loc 1 746 0
 1638 0246 6AE0      		ldi r22,lo8(10)
 1639               	.L170:
 1640 0248 8091 0000 		lds r24,mousekey_param
 1641 024c 0E94 0000 		call mousekey_param_inc
 1642 0250 00C0      		rjmp .L137
 1643               	.L171:
 749:./tmk_core/common/command.c ****             break;
 1644               		.loc 1 749 0
 1645 0252 8091 0000 		lds r24,mousekey_param
 1646 0256 0E94 0000 		call mousekey_param_dec
 1647 025a 00C0      		rjmp .L137
 1648               	.L124:
 761:./tmk_core/common/command.c ****             return false;
 1649               		.loc 1 761 0
 1650 025c 80E0      		ldi r24,lo8(__c.3514)
 1651 025e 90E0      		ldi r25,hi8(__c.3514)
 1652 0260 00C0      		rjmp .L173
 1653               	.L137:
 764:./tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1654               		.loc 1 764 0
 1655 0262 8091 0000 		lds r24,mousekey_param
 1656 0266 8823      		tst r24
 1657 0268 01F0      		breq .L139
 765:./tmk_core/common/command.c ****     } else {
 1658               		.loc 1 765 0
 1659 026a 1F92      		push __zero_reg__
 1660               	.LCFI99:
 1661               		.cfi_def_cfa_offset 4
 1662 026c 8F93      		push r24
 1663               	.LCFI100:
 1664               		.cfi_def_cfa_offset 5
 1665 026e 80E0      		ldi r24,lo8(__c.3516)
 1666 0270 90E0      		ldi r25,hi8(__c.3516)
 1667 0272 9F93      		push r25
 1668               	.LCFI101:
 1669               		.cfi_def_cfa_offset 6
 1670 0274 8F93      		push r24
 1671               	.LCFI102:
 1672               		.cfi_def_cfa_offset 7
 1673 0276 0E94 0000 		call __xprintf
 1674 027a 0F90      		pop __tmp_reg__
 1675 027c 0F90      		pop __tmp_reg__
 1676 027e 0F90      		pop __tmp_reg__
 1677 0280 0F90      		pop __tmp_reg__
 1678               	.LCFI103:
 1679               		.cfi_def_cfa_offset 3
 1680 0282 00C0      		rjmp .L172
 1681               	.L139:
 767:./tmk_core/common/command.c ****     }
 1682               		.loc 1 767 0
 1683 0284 80E0      		ldi r24,lo8(__c.3518)
 1684 0286 90E0      		ldi r25,hi8(__c.3518)
 1685               	.L173:
 1686 0288 0E94 0000 		call xputs
 1687               	.L172:
 1688               	.LBE100:
 1689               	.LBE99:
  99:./tmk_core/common/command.c **** }
 1690               		.loc 1 99 0
 1691 028c 81E0      		ldi r24,lo8(1)
 1692 028e 00C0      		rjmp .L169
 1693               	.L177:
  96:./tmk_core/common/command.c ****             return false;
 1694               		.loc 1 96 0
 1695 0290 1092 0000 		sts command_state,__zero_reg__
 1696               	.L140:
  81:./tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1697               		.loc 1 81 0
 1698 0294 80E0      		ldi r24,0
 1699 0296 00C0      		rjmp .L169
 1700               	.L123:
  88:./tmk_core/common/command.c ****             break;
 1701               		.loc 1 88 0
 1702 0298 80E0      		ldi r24,0
 1703 029a 00C0      		rjmp .L116
 1704               	.L169:
 1705               	/* epilogue start */
 100:./tmk_core/common/command.c **** 
 1706               		.loc 1 100 0
 1707 029c CF91      		pop r28
 1708 029e 0895      		ret
 1709               		.cfi_endproc
 1710               	.LFE28:
 1712               		.section	.rodata.CSWTCH.65,"a",@progbits
 1715               	CSWTCH.65:
 1716 0000 01        		.byte	1
 1717 0001 02        		.byte	2
 1718 0002 03        		.byte	3
 1719 0003 04        		.byte	4
 1720 0004 05        		.byte	5
 1721 0005 06        		.byte	6
 1722 0006 07        		.byte	7
 1723 0007 08        		.byte	8
 1724 0008 09        		.byte	9
 1725 0009 00        		.byte	0
 1726               		.section	.progmem.data.__c.3480,"a",@progbits
 1729               	__c.3480:
 1730 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1730      6865 656C 
 1730      5F74 696D 
 1730      655F 746F 
 1730      5F6D 6178 
 1731               		.section	.progmem.data.__c.3477,"a",@progbits
 1734               	__c.3477:
 1735 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1735      6865 656C 
 1735      5F6D 6178 
 1735      5F73 7065 
 1735      6564 203D 
 1736               		.section	.progmem.data.__c.3474,"a",@progbits
 1739               	__c.3474:
 1740 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1740      696D 655F 
 1740      746F 5F6D 
 1740      6178 203D 
 1740      2025 640A 
 1741               		.section	.progmem.data.__c.3471,"a",@progbits
 1744               	__c.3471:
 1745 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1745      6178 5F73 
 1745      7065 6564 
 1745      203D 2025 
 1745      640A 00
 1746               		.section	.progmem.data.__c.3468,"a",@progbits
 1749               	__c.3468:
 1750 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1750      6E74 6572 
 1750      7661 6C20 
 1750      3D20 2564 
 1750      0A00 
 1751               		.section	.progmem.data.__c.3464,"a",@progbits
 1754               	__c.3464:
 1755 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1755      656C 6179 
 1755      203D 2025 
 1755      640A 00
 1756               		.section	.progmem.data.__c.3457,"a",@progbits
 1759               	__c.3457:
 1760 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 1760      6865 656C 
 1760      5F74 696D 
 1760      655F 746F 
 1760      5F6D 6178 
 1761               		.section	.progmem.data.__c.3454,"a",@progbits
 1764               	__c.3454:
 1765 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 1765      6865 656C 
 1765      5F6D 6178 
 1765      5F73 7065 
 1765      6564 203D 
 1766               		.section	.progmem.data.__c.3451,"a",@progbits
 1769               	__c.3451:
 1770 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 1770      696D 655F 
 1770      746F 5F6D 
 1770      6178 203D 
 1770      2025 640A 
 1771               		.section	.progmem.data.__c.3448,"a",@progbits
 1774               	__c.3448:
 1775 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 1775      6178 5F73 
 1775      7065 6564 
 1775      203D 2025 
 1775      640A 00
 1776               		.section	.progmem.data.__c.3445,"a",@progbits
 1779               	__c.3445:
 1780 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 1780      6E74 6572 
 1780      7661 6C20 
 1780      3D20 2564 
 1780      0A00 
 1781               		.section	.progmem.data.__c.3441,"a",@progbits
 1784               	__c.3441:
 1785 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 1785      656C 6179 
 1785      203D 2025 
 1785      640A 00
 1786               		.section	.progmem.data.__c.3434,"a",@progbits
 1789               	__c.3434:
 1790 0000 0A00      		.string	"\n"
 1791               		.section	.progmem.data.__c.3432,"a",@progbits
 1794               	__c.3432:
 1795 0000 2575 00   		.string	"%u"
 1796               		.section	.progmem.data.__c.3430,"a",@progbits
 1799               	__c.3430:
 1800 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 1800      6865 656C 
 1800      5F74 696D 
 1800      655F 746F 
 1800      5F6D 6178 
 1801               		.section	.progmem.data.__c.3428,"a",@progbits
 1804               	__c.3428:
 1805 0000 0A00      		.string	"\n"
 1806               		.section	.progmem.data.__c.3426,"a",@progbits
 1809               	__c.3426:
 1810 0000 2575 00   		.string	"%u"
 1811               		.section	.progmem.data.__c.3424,"a",@progbits
 1814               	__c.3424:
 1815 0000 353A 2077 		.string	"5: wheel_max_speed: "
 1815      6865 656C 
 1815      5F6D 6178 
 1815      5F73 7065 
 1815      6564 3A20 
 1816               		.section	.progmem.data.__c.3422,"a",@progbits
 1819               	__c.3422:
 1820 0000 0A00      		.string	"\n"
 1821               		.section	.progmem.data.__c.3420,"a",@progbits
 1824               	__c.3420:
 1825 0000 2575 00   		.string	"%u"
 1826               		.section	.progmem.data.__c.3418,"a",@progbits
 1829               	__c.3418:
 1830 0000 343A 2074 		.string	"4: time_to_max: "
 1830      696D 655F 
 1830      746F 5F6D 
 1830      6178 3A20 
 1830      00
 1831               		.section	.progmem.data.__c.3416,"a",@progbits
 1834               	__c.3416:
 1835 0000 0A00      		.string	"\n"
 1836               		.section	.progmem.data.__c.3414,"a",@progbits
 1839               	__c.3414:
 1840 0000 2575 00   		.string	"%u"
 1841               		.section	.progmem.data.__c.3412,"a",@progbits
 1844               	__c.3412:
 1845 0000 333A 206D 		.string	"3: max_speed: "
 1845      6178 5F73 
 1845      7065 6564 
 1845      3A20 00
 1846               		.section	.progmem.data.__c.3410,"a",@progbits
 1849               	__c.3410:
 1850 0000 0A00      		.string	"\n"
 1851               		.section	.progmem.data.__c.3408,"a",@progbits
 1854               	__c.3408:
 1855 0000 2575 00   		.string	"%u"
 1856               		.section	.progmem.data.__c.3406,"a",@progbits
 1859               	__c.3406:
 1860 0000 323A 2069 		.string	"2: interval(ms): "
 1860      6E74 6572 
 1860      7661 6C28 
 1860      6D73 293A 
 1860      2000 
 1861               		.section	.progmem.data.__c.3404,"a",@progbits
 1864               	__c.3404:
 1865 0000 0A00      		.string	"\n"
 1866               		.section	.progmem.data.__c.3402,"a",@progbits
 1869               	__c.3402:
 1870 0000 2575 00   		.string	"%u"
 1871               		.section	.progmem.data.__c.3400,"a",@progbits
 1874               	__c.3400:
 1875 0000 313A 2064 		.string	"1: delay(*10ms): "
 1875      656C 6179 
 1875      282A 3130 
 1875      6D73 293A 
 1875      2000 
 1876               		.section	.progmem.data.__c.3398,"a",@progbits
 1879               	__c.3398:
 1880 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 1880      5661 6C75 
 1880      6573 202D 
 1880      0A00 
 1881               		.section	.progmem.data.__c.3518,"a",@progbits
 1884               	__c.3518:
 1885 0000 4D3E 00   		.string	"M>"
 1886               		.section	.progmem.data.__c.3516,"a",@progbits
 1889               	__c.3516:
 1890 0000 4D25 643E 		.string	"M%d> "
 1890      2000 
 1891               		.section	.progmem.data.__c.3514,"a",@progbits
 1894               	__c.3514:
 1895 0000 3F00      		.string	"?"
 1896               		.section	.progmem.data.__c.3511,"a",@progbits
 1899               	__c.3511:
 1900 0000 7365 7420 		.string	"set default\n"
 1900      6465 6661 
 1900      756C 740A 
 1900      00
 1901               		.section	.progmem.data.__c.3497,"a",@progbits
 1904               	__c.3497:
 1905 0000 433E 2000 		.string	"C> "
 1906               		.section	.progmem.data.__c.3487,"a",@progbits
 1909               	__c.3487:
 1910 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 1910      6520 6465 
 1910      6C74 613A 
 1910      2063 7572 
 1910      736F 723D 
 1911               		.section	.progmem.data.__c.3485,"a",@progbits
 1914               	__c.3485:
 1915 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 1915      4D6F 7573 
 1915      656B 6579 
 1915      202D 0A45 
 1915      5343 2F71 
 1916               		.section	.progmem.data.__c.3390,"a",@progbits
 1919               	__c.3390:
 1920 0000 3F00      		.string	"?"
 1921               		.section	.progmem.data.__c.3387,"a",@progbits
 1924               	__c.3387:
 1925 0000 4D3E 2000 		.string	"M> "
 1926               		.section	.progmem.data.__c.3392,"a",@progbits
 1929               	__c.3392:
 1930 0000 433E 2000 		.string	"C> "
 1931               		.section	.progmem.data.__c.3536,"a",@progbits
 1934               	__c.3536:
 1935 0000 4C25 640A 		.string	"L%d\n"
 1935      00
 1936               		.section	.progmem.data.__c.3328,"a",@progbits
 1939               	__c.3328:
 1940 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 1940      725F 7265 
 1940      6164 3332 
 1940      2829 3A20 
 1940      2530 346C 
 1941               		.section	.progmem.data.__c.3326,"a",@progbits
 1944               	__c.3326:
 1945 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 1945      6F61 7264 
 1945      5F69 646C 
 1945      653A 2025 
 1945      580A 00
 1946               		.section	.progmem.data.__c.3324,"a",@progbits
 1949               	__c.3324:
 1950 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 1950      6F61 7264 
 1950      5F70 726F 
 1950      746F 636F 
 1950      6C3A 2025 
 1951               		.section	.progmem.data.__c.3322,"a",@progbits
 1954               	__c.3322:
 1955 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 1955      5F6B 6579 
 1955      626F 6172 
 1955      645F 6C65 
 1955      6473 2829 
 1956               		.section	.progmem.data.__c.3320,"a",@progbits
 1959               	__c.3320:
 1960 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 1960      5374 6174 
 1960      7573 202D 
 1960      0A00 
 1961               		.section	.progmem.data.__c.3315,"a",@progbits
 1964               	__c.3315:
 1965 0000 4743 433A 		.string	"GCC: 4.9.2 AVR-LIBC: 2.0.0 AVR_ARCH: avr5\n"
 1965      2034 2E39 
 1965      2E32 2041 
 1965      5652 2D4C 
 1965      4942 433A 
 1966               		.section	.progmem.data.__c.3313,"a",@progbits
 1969               	__c.3313:
 1970 0000 4F50 5449 		.string	"OPTIONS: LUFA MOUSEKEY EXTRAKEY CONSOLE COMMAND 4096\n"
 1970      4F4E 533A 
 1970      204C 5546 
 1970      4120 4D4F 
 1970      5553 454B 
 1971               		.section	.progmem.data.__c.3311,"a",@progbits
 1974               	__c.3311:
 1975 0000 4255 494C 		.string	"BUILD: \"2020-02-13-09:01:54\" (09:02:02 Feb 13 2020)\n"
 1975      443A 2022 
 1975      3230 3230 
 1975      2D30 322D 
 1975      3133 2D30 
 1976               		.section	.progmem.data.__c.3309,"a",@progbits
 1979               	__c.3309:
 1980 0000 5649 443A 		.string	"VID: 0xFEED(CH boxMods) PID: 0x3060(Dactyl) VER: 0x0001\n"
 1980      2030 7846 
 1980      4545 4428 
 1980      4348 2062 
 1980      6F78 4D6F 
 1981               		.section	.progmem.data.__c.3307,"a",@progbits
 1984               	__c.3307:
 1985 0000 4445 5343 		.string	"DESC: A split ergonomic keyboard for the adventerous makers\n"
 1985      3A20 4120 
 1985      7370 6C69 
 1985      7420 6572 
 1985      676F 6E6F 
 1986               		.section	.progmem.data.__c.3305,"a",@progbits
 1989               	__c.3305:
 1990 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 1990      5665 7273 
 1990      696F 6E20 
 1990      2D0A 00
 1991               		.section	.progmem.data.__c.3376,"a",@progbits
 1994               	__c.3376:
 1995 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 1995      436F 6E73 
 1995      6F6C 6520 
 1995      2D0A 4553 
 1995      432F 713A 
 1996               		.section	.progmem.data.__c.3300,"a",@progbits
 1999               	__c.3300:
 2000 0000 0A09 2D20 		.ascii	"\n\t- Magic -\nD:\tDebug Message Toggle\nX:\tMatrix Debug Mo"
 2000      4D61 6769 
 2000      6320 2D0A 
 2000      443A 0944 
 2000      6562 7567 
 2001 0036 6465 2054 		.ascii	"de Toggle - Show keypresses in matrix grid\nK:\tKeyboard Deb"
 2001      6F67 676C 
 2001      6520 2D20 
 2001      5368 6F77 
 2001      206B 6579 
 2002 0070 7567 2054 		.ascii	"ug Toggle - Show keypress r"
 2002      6F67 676C 
 2002      6520 2D20 
 2002      5368 6F77 
 2002      206B 6579 
 2003 008b 6570 6F72 		.string	"eport\nM:\tDebug Mouse Toggle\nV:\tVersion\nS:\tStatus\nC:\tActivate Console Mode\nF1-F10
 2003      740A 4D3A 
 2003      0944 6562 
 2003      7567 204D 
 2003      6F75 7365 
 2004               		.section	.progmem.data.__c.3371,"a",@progbits
 2007               	__c.3371:
 2008 0000 3F00      		.string	"?"
 2009               		.section	.progmem.data.__c.3360,"a",@progbits
 2012               	__c.3360:
 2013 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 2013      7365 3A20 
 2013      6F66 660A 
 2013      00
 2014               		.section	.progmem.data.__c.3358,"a",@progbits
 2017               	__c.3358:
 2018 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 2018      7365 3A20 
 2018      6F6E 0A00 
 2019               		.section	.progmem.data.__c.3355,"a",@progbits
 2022               	__c.3355:
 2023 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 2023      626F 6172 
 2023      643A 206F 
 2023      6666 0A00 
 2024               		.section	.progmem.data.__c.3353,"a",@progbits
 2027               	__c.3353:
 2028 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 2028      626F 6172 
 2028      643A 206F 
 2028      6E0A 00
 2029               		.section	.progmem.data.__c.3350,"a",@progbits
 2032               	__c.3350:
 2033 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 2033      7269 783A 
 2033      206F 6666 
 2033      0A00 
 2034               		.section	.progmem.data.__c.3348,"a",@progbits
 2037               	__c.3348:
 2038 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 2038      7269 783A 
 2038      206F 6E0A 
 2038      00
 2039               		.section	.progmem.data.__c.3345,"a",@progbits
 2042               	__c.3345:
 2043 0000 0A64 6562 		.string	"\ndebug: off\n"
 2043      7567 3A20 
 2043      6F66 660A 
 2043      00
 2044               		.section	.progmem.data.__c.3343,"a",@progbits
 2047               	__c.3343:
 2048 0000 0A64 6562 		.string	"\ndebug: on\n"
 2048      7567 3A20 
 2048      6F6E 0A00 
 2049               		.section	.progmem.data.__c.3340,"a",@progbits
 2052               	__c.3340:
 2053 0000 0A0A 4A75 		.string	"\n\nJumping to bootloader... "
 2053      6D70 696E 
 2053      6720 746F 
 2053      2062 6F6F 
 2053      746C 6F61 
 2054               		.section	.progmem.data.__c.3337,"a",@progbits
 2057               	__c.3337:
 2058 0000 433E 2000 		.string	"C> "
 2059               		.section	.bss.mousekey_param,"aw",@nobits
 2062               	mousekey_param:
 2063 0000 00        		.zero	1
 2064               	.global	command_state
 2065               		.section	.bss.command_state,"aw",@nobits
 2068               	command_state:
 2069 0000 00        		.zero	1
 2070               		.text
 2071               	.Letext0:
 2072               		.file 4 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 2073               		.file 5 "./tmk_core/common/report.h"
 2074               		.file 6 "./tmk_core/common/debug.h"
 2075               		.file 7 "./tmk_core/common/command.h"
 2076               		.file 8 "./tmk_core/common/host.h"
 2077               		.file 9 "./tmk_core/common/action_util.h"
 2078               		.file 10 "./tmk_core/common/mousekey.h"
 2079               		.file 11 "./tmk_core/common/avr/xprintf.h"
 2080               		.file 12 "./tmk_core/common/action_layer.h"
 2081               		.file 13 "./tmk_core/common/action.h"
 2082               		.file 14 "./tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:00000000 command.c
C:\msys32\tmp\ccJxpaLb.s:2      *ABS*:0000003e __SP_H__
C:\msys32\tmp\ccJxpaLb.s:3      *ABS*:0000003d __SP_L__
C:\msys32\tmp\ccJxpaLb.s:4      *ABS*:0000003f __SREG__
C:\msys32\tmp\ccJxpaLb.s:5      *ABS*:00000000 __tmp_reg__
C:\msys32\tmp\ccJxpaLb.s:6      *ABS*:00000001 __zero_reg__
C:\msys32\tmp\ccJxpaLb.s:12     .text.mousekey_console_help:00000000 mousekey_console_help
C:\msys32\tmp\ccJxpaLb.s:1914   .progmem.data.__c.3485:00000000 __c.3485
C:\msys32\tmp\ccJxpaLb.s:1909   .progmem.data.__c.3487:00000000 __c.3487
C:\msys32\tmp\ccJxpaLb.s:65     .text.mousekey_param_inc:00000000 mousekey_param_inc
C:\msys32\tmp\ccJxpaLb.s:1784   .progmem.data.__c.3441:00000000 __c.3441
C:\msys32\tmp\ccJxpaLb.s:1779   .progmem.data.__c.3445:00000000 __c.3445
C:\msys32\tmp\ccJxpaLb.s:1774   .progmem.data.__c.3448:00000000 __c.3448
C:\msys32\tmp\ccJxpaLb.s:1769   .progmem.data.__c.3451:00000000 __c.3451
C:\msys32\tmp\ccJxpaLb.s:1764   .progmem.data.__c.3454:00000000 __c.3454
C:\msys32\tmp\ccJxpaLb.s:1759   .progmem.data.__c.3457:00000000 __c.3457
C:\msys32\tmp\ccJxpaLb.s:338    .text.mousekey_param_dec:00000000 mousekey_param_dec
C:\msys32\tmp\ccJxpaLb.s:1754   .progmem.data.__c.3464:00000000 __c.3464
C:\msys32\tmp\ccJxpaLb.s:1749   .progmem.data.__c.3468:00000000 __c.3468
C:\msys32\tmp\ccJxpaLb.s:1744   .progmem.data.__c.3471:00000000 __c.3471
C:\msys32\tmp\ccJxpaLb.s:1739   .progmem.data.__c.3474:00000000 __c.3474
C:\msys32\tmp\ccJxpaLb.s:1734   .progmem.data.__c.3477:00000000 __c.3477
C:\msys32\tmp\ccJxpaLb.s:1729   .progmem.data.__c.3480:00000000 __c.3480
C:\msys32\tmp\ccJxpaLb.s:556    .text.switch_default_layer:00000000 switch_default_layer
C:\msys32\tmp\ccJxpaLb.s:1934   .progmem.data.__c.3536:00000000 __c.3536
C:\msys32\tmp\ccJxpaLb.s:625    .text.command_common:00000000 command_common
C:\msys32\tmp\ccJxpaLb.s:1994   .progmem.data.__c.3376:00000000 __c.3376
C:\msys32\tmp\ccJxpaLb.s:2057   .progmem.data.__c.3337:00000000 __c.3337
C:\msys32\tmp\ccJxpaLb.s:2068   .bss.command_state:00000000 command_state
C:\msys32\tmp\ccJxpaLb.s:2052   .progmem.data.__c.3340:00000000 __c.3340
C:\msys32\tmp\ccJxpaLb.s:1999   .progmem.data.__c.3300:00000000 __c.3300
C:\msys32\tmp\ccJxpaLb.s:2042   .progmem.data.__c.3345:00000000 __c.3345
C:\msys32\tmp\ccJxpaLb.s:2047   .progmem.data.__c.3343:00000000 __c.3343
C:\msys32\tmp\ccJxpaLb.s:2037   .progmem.data.__c.3348:00000000 __c.3348
C:\msys32\tmp\ccJxpaLb.s:2032   .progmem.data.__c.3350:00000000 __c.3350
C:\msys32\tmp\ccJxpaLb.s:2027   .progmem.data.__c.3353:00000000 __c.3353
C:\msys32\tmp\ccJxpaLb.s:2022   .progmem.data.__c.3355:00000000 __c.3355
C:\msys32\tmp\ccJxpaLb.s:2017   .progmem.data.__c.3358:00000000 __c.3358
C:\msys32\tmp\ccJxpaLb.s:2012   .progmem.data.__c.3360:00000000 __c.3360
C:\msys32\tmp\ccJxpaLb.s:1989   .progmem.data.__c.3305:00000000 __c.3305
C:\msys32\tmp\ccJxpaLb.s:1984   .progmem.data.__c.3307:00000000 __c.3307
C:\msys32\tmp\ccJxpaLb.s:1979   .progmem.data.__c.3309:00000000 __c.3309
C:\msys32\tmp\ccJxpaLb.s:1974   .progmem.data.__c.3311:00000000 __c.3311
C:\msys32\tmp\ccJxpaLb.s:1969   .progmem.data.__c.3313:00000000 __c.3313
C:\msys32\tmp\ccJxpaLb.s:1964   .progmem.data.__c.3315:00000000 __c.3315
C:\msys32\tmp\ccJxpaLb.s:1959   .progmem.data.__c.3320:00000000 __c.3320
C:\msys32\tmp\ccJxpaLb.s:1954   .progmem.data.__c.3322:00000000 __c.3322
C:\msys32\tmp\ccJxpaLb.s:1949   .progmem.data.__c.3324:00000000 __c.3324
C:\msys32\tmp\ccJxpaLb.s:1944   .progmem.data.__c.3326:00000000 __c.3326
C:\msys32\tmp\ccJxpaLb.s:1939   .progmem.data.__c.3328:00000000 __c.3328
C:\msys32\tmp\ccJxpaLb.s:2007   .progmem.data.__c.3371:00000000 __c.3371
C:\msys32\tmp\ccJxpaLb.s:1024   .text.rgblight_toggle:00000000 rgblight_toggle
C:\msys32\tmp\ccJxpaLb.s:1040   .text.rgblight_step:00000000 rgblight_step
C:\msys32\tmp\ccJxpaLb.s:1055   .text.rgblight_step_reverse:00000000 rgblight_step_reverse
C:\msys32\tmp\ccJxpaLb.s:1070   .text.rgblight_increase_hue:00000000 rgblight_increase_hue
C:\msys32\tmp\ccJxpaLb.s:1085   .text.rgblight_decrease_hue:00000000 rgblight_decrease_hue
C:\msys32\tmp\ccJxpaLb.s:1100   .text.rgblight_increase_sat:00000000 rgblight_increase_sat
C:\msys32\tmp\ccJxpaLb.s:1115   .text.rgblight_decrease_sat:00000000 rgblight_decrease_sat
C:\msys32\tmp\ccJxpaLb.s:1130   .text.rgblight_increase_val:00000000 rgblight_increase_val
C:\msys32\tmp\ccJxpaLb.s:1145   .text.rgblight_decrease_val:00000000 rgblight_decrease_val
C:\msys32\tmp\ccJxpaLb.s:1160   .text.rgblight_increase_speed:00000000 rgblight_increase_speed
C:\msys32\tmp\ccJxpaLb.s:1175   .text.rgblight_decrease_speed:00000000 rgblight_decrease_speed
C:\msys32\tmp\ccJxpaLb.s:1190   .text.command_extra:00000000 command_extra
C:\msys32\tmp\ccJxpaLb.s:1209   .text.command_console_extra:00000000 command_console_extra
C:\msys32\tmp\ccJxpaLb.s:1228   .text.numkey2num:00000000 numkey2num
C:\msys32\tmp\ccJxpaLb.s:1715   .rodata.CSWTCH.65:00000000 CSWTCH.65
C:\msys32\tmp\ccJxpaLb.s:1259   .text.command_proc:00000000 command_proc
C:\msys32\tmp\ccJxpaLb.s:1924   .progmem.data.__c.3387:00000000 __c.3387
C:\msys32\tmp\ccJxpaLb.s:1929   .progmem.data.__c.3392:00000000 __c.3392
C:\msys32\tmp\ccJxpaLb.s:1919   .progmem.data.__c.3390:00000000 __c.3390
C:\msys32\tmp\ccJxpaLb.s:1899   .progmem.data.__c.3511:00000000 __c.3511
C:\msys32\tmp\ccJxpaLb.s:2062   .bss.mousekey_param:00000000 mousekey_param
C:\msys32\tmp\ccJxpaLb.s:1904   .progmem.data.__c.3497:00000000 __c.3497
C:\msys32\tmp\ccJxpaLb.s:1879   .progmem.data.__c.3398:00000000 __c.3398
C:\msys32\tmp\ccJxpaLb.s:1874   .progmem.data.__c.3400:00000000 __c.3400
C:\msys32\tmp\ccJxpaLb.s:1869   .progmem.data.__c.3402:00000000 __c.3402
C:\msys32\tmp\ccJxpaLb.s:1864   .progmem.data.__c.3404:00000000 __c.3404
C:\msys32\tmp\ccJxpaLb.s:1859   .progmem.data.__c.3406:00000000 __c.3406
C:\msys32\tmp\ccJxpaLb.s:1854   .progmem.data.__c.3408:00000000 __c.3408
C:\msys32\tmp\ccJxpaLb.s:1849   .progmem.data.__c.3410:00000000 __c.3410
C:\msys32\tmp\ccJxpaLb.s:1844   .progmem.data.__c.3412:00000000 __c.3412
C:\msys32\tmp\ccJxpaLb.s:1839   .progmem.data.__c.3414:00000000 __c.3414
C:\msys32\tmp\ccJxpaLb.s:1834   .progmem.data.__c.3416:00000000 __c.3416
C:\msys32\tmp\ccJxpaLb.s:1829   .progmem.data.__c.3418:00000000 __c.3418
C:\msys32\tmp\ccJxpaLb.s:1824   .progmem.data.__c.3420:00000000 __c.3420
C:\msys32\tmp\ccJxpaLb.s:1819   .progmem.data.__c.3422:00000000 __c.3422
C:\msys32\tmp\ccJxpaLb.s:1814   .progmem.data.__c.3424:00000000 __c.3424
C:\msys32\tmp\ccJxpaLb.s:1809   .progmem.data.__c.3426:00000000 __c.3426
C:\msys32\tmp\ccJxpaLb.s:1804   .progmem.data.__c.3428:00000000 __c.3428
C:\msys32\tmp\ccJxpaLb.s:1799   .progmem.data.__c.3430:00000000 __c.3430
C:\msys32\tmp\ccJxpaLb.s:1794   .progmem.data.__c.3432:00000000 __c.3432
C:\msys32\tmp\ccJxpaLb.s:1789   .progmem.data.__c.3434:00000000 __c.3434
C:\msys32\tmp\ccJxpaLb.s:1894   .progmem.data.__c.3514:00000000 __c.3514
C:\msys32\tmp\ccJxpaLb.s:1889   .progmem.data.__c.3516:00000000 __c.3516
C:\msys32\tmp\ccJxpaLb.s:1884   .progmem.data.__c.3518:00000000 __c.3518

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
debug_config
bootloader_jump
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
