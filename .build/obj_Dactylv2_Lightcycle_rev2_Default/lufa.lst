   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB140:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:./tmk_core/protocol/lufa/lufa.c ****   #else
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:./tmk_core/protocol/lufa/lufa.c ****   #endif
  75:./tmk_core/protocol/lufa/lufa.c **** #endif
  76:./tmk_core/protocol/lufa/lufa.c **** 
  77:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:./tmk_core/protocol/lufa/lufa.c **** #endif
  80:./tmk_core/protocol/lufa/lufa.c **** 
  81:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:./tmk_core/protocol/lufa/lufa.c **** #endif
  84:./tmk_core/protocol/lufa/lufa.c **** 
  85:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:./tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  87:./tmk_core/protocol/lufa/lufa.c **** #endif
  88:./tmk_core/protocol/lufa/lufa.c **** 
  89:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:./tmk_core/protocol/lufa/lufa.c **** #endif
  92:./tmk_core/protocol/lufa/lufa.c **** 
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:./tmk_core/protocol/lufa/lufa.c **** 
 100:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 103:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 104:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 105:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 106:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 107:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 108:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 109:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 110:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 111:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 112:./tmk_core/protocol/lufa/lufa.c **** };
 113:./tmk_core/protocol/lufa/lufa.c **** 
 114:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 115:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 116:./tmk_core/protocol/lufa/lufa.c **** {
 117:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 118:./tmk_core/protocol/lufa/lufa.c ****   {
 119:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 120:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 121:./tmk_core/protocol/lufa/lufa.c ****     {
 122:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 123:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 124:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 125:./tmk_core/protocol/lufa/lufa.c ****     },
 126:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 127:./tmk_core/protocol/lufa/lufa.c ****     {
 128:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 129:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 130:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 131:./tmk_core/protocol/lufa/lufa.c ****     },
 132:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 133:./tmk_core/protocol/lufa/lufa.c ****     {
 134:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 135:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 137:./tmk_core/protocol/lufa/lufa.c ****     },
 138:./tmk_core/protocol/lufa/lufa.c ****   },
 139:./tmk_core/protocol/lufa/lufa.c **** };
 140:./tmk_core/protocol/lufa/lufa.c **** #endif
 141:./tmk_core/protocol/lufa/lufa.c **** 
 142:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 143:./tmk_core/protocol/lufa/lufa.c **** 
 144:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 145:./tmk_core/protocol/lufa/lufa.c ****  *
 146:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 147:./tmk_core/protocol/lufa/lufa.c ****  */
 148:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 149:./tmk_core/protocol/lufa/lufa.c **** {
 150:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 151:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 152:./tmk_core/protocol/lufa/lufa.c **** 	{
 153:./tmk_core/protocol/lufa/lufa.c **** 		return;
 154:./tmk_core/protocol/lufa/lufa.c **** 	}
 155:./tmk_core/protocol/lufa/lufa.c **** 
 156:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:./tmk_core/protocol/lufa/lufa.c **** 	{
 158:./tmk_core/protocol/lufa/lufa.c **** 		return;
 159:./tmk_core/protocol/lufa/lufa.c **** 	}
 160:./tmk_core/protocol/lufa/lufa.c **** 
 161:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 162:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 163:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 164:./tmk_core/protocol/lufa/lufa.c **** 
 165:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 166:./tmk_core/protocol/lufa/lufa.c **** 
 167:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 168:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 169:./tmk_core/protocol/lufa/lufa.c **** 	{
 170:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 171:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 172:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 173:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 174:./tmk_core/protocol/lufa/lufa.c **** 	}
 175:./tmk_core/protocol/lufa/lufa.c **** 
 176:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 177:./tmk_core/protocol/lufa/lufa.c **** }
 178:./tmk_core/protocol/lufa/lufa.c **** 
 179:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 180:./tmk_core/protocol/lufa/lufa.c ****  *
 181:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 182:./tmk_core/protocol/lufa/lufa.c ****  */
 183:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 184:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 185:./tmk_core/protocol/lufa/lufa.c **** {
 186:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 187:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 188:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 189:./tmk_core/protocol/lufa/lufa.c **** }
 190:./tmk_core/protocol/lufa/lufa.c **** 
 191:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 192:./tmk_core/protocol/lufa/lufa.c ****  *
 193:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 194:./tmk_core/protocol/lufa/lufa.c ****  */
 195:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 196:./tmk_core/protocol/lufa/lufa.c **** {
 197:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 198:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 199:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 202:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 203:./tmk_core/protocol/lufa/lufa.c **** 	return;
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 211:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 212:./tmk_core/protocol/lufa/lufa.c **** 		{
 213:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 214:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 215:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 216:./tmk_core/protocol/lufa/lufa.c **** 		}
 217:./tmk_core/protocol/lufa/lufa.c **** 
 218:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 219:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 220:./tmk_core/protocol/lufa/lufa.c **** 
 221:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 222:./tmk_core/protocol/lufa/lufa.c **** 		{
 223:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 224:./tmk_core/protocol/lufa/lufa.c **** 		}
 225:./tmk_core/protocol/lufa/lufa.c **** 	}
 226:./tmk_core/protocol/lufa/lufa.c **** }
 227:./tmk_core/protocol/lufa/lufa.c **** #endif
 228:./tmk_core/protocol/lufa/lufa.c **** 
 229:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 230:./tmk_core/protocol/lufa/lufa.c ****  * Console
 231:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 232:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 233:./tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 234:./tmk_core/protocol/lufa/lufa.c ****  *
 235:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 236:./tmk_core/protocol/lufa/lufa.c ****  */
 237:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 238:./tmk_core/protocol/lufa/lufa.c **** {
 239:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 240:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 241:./tmk_core/protocol/lufa/lufa.c ****         return;
 242:./tmk_core/protocol/lufa/lufa.c **** 
 243:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 244:./tmk_core/protocol/lufa/lufa.c **** 
 245:./tmk_core/protocol/lufa/lufa.c **** #if 0
 246:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 247:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 248:./tmk_core/protocol/lufa/lufa.c **** 
 249:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 250:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 251:./tmk_core/protocol/lufa/lufa.c ****     {
 252:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 253:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 254:./tmk_core/protocol/lufa/lufa.c ****         {
 255:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 256:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 257:./tmk_core/protocol/lufa/lufa.c **** 
 258:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 259:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 262:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 263:./tmk_core/protocol/lufa/lufa.c ****         }
 264:./tmk_core/protocol/lufa/lufa.c **** 
 265:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 266:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 267:./tmk_core/protocol/lufa/lufa.c ****     }
 268:./tmk_core/protocol/lufa/lufa.c **** #endif
 269:./tmk_core/protocol/lufa/lufa.c **** 
 270:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 271:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 272:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 273:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 274:./tmk_core/protocol/lufa/lufa.c ****         return;
 275:./tmk_core/protocol/lufa/lufa.c ****     }
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 278:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 279:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 280:./tmk_core/protocol/lufa/lufa.c **** 
 281:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 282:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 283:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 284:./tmk_core/protocol/lufa/lufa.c ****     }
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 287:./tmk_core/protocol/lufa/lufa.c **** }
 288:./tmk_core/protocol/lufa/lufa.c **** #endif
 289:./tmk_core/protocol/lufa/lufa.c **** 
 290:./tmk_core/protocol/lufa/lufa.c **** 
 291:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 292:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 293:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 294:./tmk_core/protocol/lufa/lufa.c **** /*
 295:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 296:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 297:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 298:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 299:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 300:./tmk_core/protocol/lufa/lufa.c **** */
 301:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 302:./tmk_core/protocol/lufa/lufa.c ****  *
 303:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 304:./tmk_core/protocol/lufa/lufa.c ****  */
 305:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 306:./tmk_core/protocol/lufa/lufa.c **** {
 307:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 308:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 309:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 312:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 313:./tmk_core/protocol/lufa/lufa.c ****     }
 314:./tmk_core/protocol/lufa/lufa.c **** }
 315:./tmk_core/protocol/lufa/lufa.c **** 
 316:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 317:./tmk_core/protocol/lufa/lufa.c ****  *
 318:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 319:./tmk_core/protocol/lufa/lufa.c ****  */
 320:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 321:./tmk_core/protocol/lufa/lufa.c **** {
 322:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 323:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 324:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 325:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 326:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 327:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 328:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 329:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 330:./tmk_core/protocol/lufa/lufa.c ****     }
 331:./tmk_core/protocol/lufa/lufa.c **** */
 332:./tmk_core/protocol/lufa/lufa.c **** }
 333:./tmk_core/protocol/lufa/lufa.c **** 
 334:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 335:./tmk_core/protocol/lufa/lufa.c ****  *
 336:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 337:./tmk_core/protocol/lufa/lufa.c ****  */
 338:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 339:./tmk_core/protocol/lufa/lufa.c **** {
 340:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 341:./tmk_core/protocol/lufa/lufa.c **** }
 342:./tmk_core/protocol/lufa/lufa.c **** 
 343:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 344:./tmk_core/protocol/lufa/lufa.c ****  *
 345:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 346:./tmk_core/protocol/lufa/lufa.c ****  */
 347:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 348:./tmk_core/protocol/lufa/lufa.c **** {
 349:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 350:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 351:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 352:./tmk_core/protocol/lufa/lufa.c **** #endif
 353:./tmk_core/protocol/lufa/lufa.c **** }
 354:./tmk_core/protocol/lufa/lufa.c **** 
 355:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 356:./tmk_core/protocol/lufa/lufa.c ****  *
 357:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 358:./tmk_core/protocol/lufa/lufa.c ****  */
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 362:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 363:./tmk_core/protocol/lufa/lufa.c **** 
 364:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 366:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 367:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 368:./tmk_core/protocol/lufa/lufa.c **** #endif
 369:./tmk_core/protocol/lufa/lufa.c **** }
 370:./tmk_core/protocol/lufa/lufa.c **** 
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** 
 373:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 374:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 375:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 376:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 377:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 378:./tmk_core/protocol/lufa/lufa.c ****   } \
 379:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 382:./tmk_core/protocol/lufa/lufa.c ****  *
 383:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 384:./tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 385:./tmk_core/protocol/lufa/lufa.c ****  */
 386:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 387:./tmk_core/protocol/lufa/lufa.c **** {
 388:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 389:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 390:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 391:./tmk_core/protocol/lufa/lufa.c **** 
 392:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 393:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 394:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 395:./tmk_core/protocol/lufa/lufa.c **** }
 396:./tmk_core/protocol/lufa/lufa.c **** 
 397:./tmk_core/protocol/lufa/lufa.c **** #endif
 398:./tmk_core/protocol/lufa/lufa.c **** 
 399:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 400:./tmk_core/protocol/lufa/lufa.c ****  *
 401:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 402:./tmk_core/protocol/lufa/lufa.c ****  *
 403:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 404:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 405:./tmk_core/protocol/lufa/lufa.c ****  */
 406:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 407:./tmk_core/protocol/lufa/lufa.c **** {
 408:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 409:./tmk_core/protocol/lufa/lufa.c **** 
 410:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 411:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 412:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 413:./tmk_core/protocol/lufa/lufa.c **** 
 414:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 415:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 416:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:./tmk_core/protocol/lufa/lufa.c **** #endif
 419:./tmk_core/protocol/lufa/lufa.c **** 
 420:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 421:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 422:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 423:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 424:./tmk_core/protocol/lufa/lufa.c **** #endif
 425:./tmk_core/protocol/lufa/lufa.c **** 
 426:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 427:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 428:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 429:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 430:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 431:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 432:./tmk_core/protocol/lufa/lufa.c **** #endif
 433:./tmk_core/protocol/lufa/lufa.c **** 
 434:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 435:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 436:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 437:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 438:./tmk_core/protocol/lufa/lufa.c **** #if 0
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #endif
 442:./tmk_core/protocol/lufa/lufa.c **** #endif
 443:./tmk_core/protocol/lufa/lufa.c **** 
 444:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 445:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 446:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 447:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 448:./tmk_core/protocol/lufa/lufa.c **** #endif
 449:./tmk_core/protocol/lufa/lufa.c **** 
 450:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 451:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 452:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 453:./tmk_core/protocol/lufa/lufa.c **** #endif
 454:./tmk_core/protocol/lufa/lufa.c **** 
 455:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 457:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 458:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 459:./tmk_core/protocol/lufa/lufa.c **** #endif
 460:./tmk_core/protocol/lufa/lufa.c **** }
 461:./tmk_core/protocol/lufa/lufa.c **** 
 462:./tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 463:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 466:./tmk_core/protocol/lufa/lufa.c **** 
 467:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 468:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 469:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 470:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 471:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 472:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 473:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** */
 475:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 476:./tmk_core/protocol/lufa/lufa.c ****  *
 477:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 478:./tmk_core/protocol/lufa/lufa.c ****  */
 479:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 480:./tmk_core/protocol/lufa/lufa.c **** {
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 483:./tmk_core/protocol/lufa/lufa.c **** 
 484:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 485:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 486:./tmk_core/protocol/lufa/lufa.c ****     {
 487:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 488:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 489:./tmk_core/protocol/lufa/lufa.c ****             {
 490:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 491:./tmk_core/protocol/lufa/lufa.c **** 
 492:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 493:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 494:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 495:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 497:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 498:./tmk_core/protocol/lufa/lufa.c ****                     break;
 499:./tmk_core/protocol/lufa/lufa.c ****                 }
 500:./tmk_core/protocol/lufa/lufa.c **** 
 501:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 503:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 504:./tmk_core/protocol/lufa/lufa.c ****             }
 505:./tmk_core/protocol/lufa/lufa.c **** 
 506:./tmk_core/protocol/lufa/lufa.c ****             break;
 507:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 508:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:./tmk_core/protocol/lufa/lufa.c ****             {
 510:./tmk_core/protocol/lufa/lufa.c **** 
 511:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 512:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 513:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 514:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 515:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #endif
 517:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 518:./tmk_core/protocol/lufa/lufa.c **** 
 519:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 520:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 521:./tmk_core/protocol/lufa/lufa.c ****                           return;
 522:./tmk_core/protocol/lufa/lufa.c ****                     }
 523:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 524:./tmk_core/protocol/lufa/lufa.c **** 
 525:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 526:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 527:./tmk_core/protocol/lufa/lufa.c ****                     break;
 528:./tmk_core/protocol/lufa/lufa.c ****                 }
 529:./tmk_core/protocol/lufa/lufa.c **** 
 530:./tmk_core/protocol/lufa/lufa.c ****             }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             break;
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 535:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 536:./tmk_core/protocol/lufa/lufa.c ****             {
 537:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 538:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 539:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 543:./tmk_core/protocol/lufa/lufa.c ****                 }
 544:./tmk_core/protocol/lufa/lufa.c ****             }
 545:./tmk_core/protocol/lufa/lufa.c **** 
 546:./tmk_core/protocol/lufa/lufa.c ****             break;
 547:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 548:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 549:./tmk_core/protocol/lufa/lufa.c ****             {
 550:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 551:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 553:./tmk_core/protocol/lufa/lufa.c **** 
 554:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 555:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 556:./tmk_core/protocol/lufa/lufa.c ****                 }
 557:./tmk_core/protocol/lufa/lufa.c ****             }
 558:./tmk_core/protocol/lufa/lufa.c **** 
 559:./tmk_core/protocol/lufa/lufa.c ****             break;
 560:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 561:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 562:./tmk_core/protocol/lufa/lufa.c ****             {
 563:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 564:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 565:./tmk_core/protocol/lufa/lufa.c **** 
 566:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 567:./tmk_core/protocol/lufa/lufa.c ****             }
 568:./tmk_core/protocol/lufa/lufa.c **** 
 569:./tmk_core/protocol/lufa/lufa.c ****             break;
 570:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 571:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 572:./tmk_core/protocol/lufa/lufa.c ****             {
 573:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 578:./tmk_core/protocol/lufa/lufa.c ****             }
 579:./tmk_core/protocol/lufa/lufa.c **** 
 580:./tmk_core/protocol/lufa/lufa.c ****             break;
 581:./tmk_core/protocol/lufa/lufa.c ****     }
 582:./tmk_core/protocol/lufa/lufa.c **** 
 583:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 584:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 585:./tmk_core/protocol/lufa/lufa.c **** #endif
 586:./tmk_core/protocol/lufa/lufa.c **** }
 587:./tmk_core/protocol/lufa/lufa.c **** 
 588:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 589:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 590:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 591:./tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 592:./tmk_core/protocol/lufa/lufa.c ****  *
 593:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 594:./tmk_core/protocol/lufa/lufa.c ****  */
 595:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
 598:./tmk_core/protocol/lufa/lufa.c **** }
  21               		.loc 1 598 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23 0004 0895      		ret
  24               		.cfi_endproc
  25               	.LFE140:
  27               		.section	.text.sendchar,"ax",@progbits
  28               	.global	sendchar
  30               	sendchar:
  31               	.LFB145:
 599:./tmk_core/protocol/lufa/lufa.c **** 
 600:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 601:./tmk_core/protocol/lufa/lufa.c ****  *
 602:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 603:./tmk_core/protocol/lufa/lufa.c ****  */
 604:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 605:./tmk_core/protocol/lufa/lufa.c **** {
 606:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 607:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 608:./tmk_core/protocol/lufa/lufa.c **** 
 609:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 610:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 611:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 612:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 613:./tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 614:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 615:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 616:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 617:./tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 618:./tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 619:./tmk_core/protocol/lufa/lufa.c ****        }
 620:./tmk_core/protocol/lufa/lufa.c ****     #else
 621:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 622:./tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 623:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 624:./tmk_core/protocol/lufa/lufa.c ****       }
 625:./tmk_core/protocol/lufa/lufa.c ****     #endif
 626:./tmk_core/protocol/lufa/lufa.c ****   }
 627:./tmk_core/protocol/lufa/lufa.c **** #endif
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 630:./tmk_core/protocol/lufa/lufa.c ****       return;
 631:./tmk_core/protocol/lufa/lufa.c ****     }
 632:./tmk_core/protocol/lufa/lufa.c **** 
 633:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 634:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 636:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 637:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 638:./tmk_core/protocol/lufa/lufa.c **** 
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 641:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642:./tmk_core/protocol/lufa/lufa.c **** 
 643:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 644:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 645:./tmk_core/protocol/lufa/lufa.c ****     }
 646:./tmk_core/protocol/lufa/lufa.c ****     else
 647:./tmk_core/protocol/lufa/lufa.c **** #endif
 648:./tmk_core/protocol/lufa/lufa.c ****     {
 649:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 650:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 651:./tmk_core/protocol/lufa/lufa.c **** 
 652:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 654:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 657:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 658:./tmk_core/protocol/lufa/lufa.c ****     }
 659:./tmk_core/protocol/lufa/lufa.c **** 
 660:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:./tmk_core/protocol/lufa/lufa.c **** 
 663:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 664:./tmk_core/protocol/lufa/lufa.c **** }
 665:./tmk_core/protocol/lufa/lufa.c ****  
 666:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 667:./tmk_core/protocol/lufa/lufa.c ****  *
 668:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 669:./tmk_core/protocol/lufa/lufa.c ****  */
 670:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 671:./tmk_core/protocol/lufa/lufa.c **** {
 672:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 673:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 674:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 675:./tmk_core/protocol/lufa/lufa.c **** 
 676:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 677:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 678:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 679:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 680:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 681:./tmk_core/protocol/lufa/lufa.c ****     #else
 682:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 683:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 684:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 685:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 686:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 687:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 688:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 689:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 690:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 691:./tmk_core/protocol/lufa/lufa.c ****     #endif
 692:./tmk_core/protocol/lufa/lufa.c ****   }
 693:./tmk_core/protocol/lufa/lufa.c **** #endif
 694:./tmk_core/protocol/lufa/lufa.c **** 
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 696:./tmk_core/protocol/lufa/lufa.c ****       return;
 697:./tmk_core/protocol/lufa/lufa.c ****     }
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 700:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 701:./tmk_core/protocol/lufa/lufa.c **** 
 702:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 704:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 707:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 708:./tmk_core/protocol/lufa/lufa.c **** 
 709:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 710:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 711:./tmk_core/protocol/lufa/lufa.c **** #endif
 712:./tmk_core/protocol/lufa/lufa.c **** }
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 715:./tmk_core/protocol/lufa/lufa.c ****  *
 716:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 717:./tmk_core/protocol/lufa/lufa.c ****  */
 718:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 719:./tmk_core/protocol/lufa/lufa.c **** {
 720:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 721:./tmk_core/protocol/lufa/lufa.c **** 
 722:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 723:./tmk_core/protocol/lufa/lufa.c ****         return;
 724:./tmk_core/protocol/lufa/lufa.c **** 
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 726:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 727:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 728:./tmk_core/protocol/lufa/lufa.c ****     };
 729:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 730:./tmk_core/protocol/lufa/lufa.c **** 
 731:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 733:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 734:./tmk_core/protocol/lufa/lufa.c **** 
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 736:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 737:./tmk_core/protocol/lufa/lufa.c **** }
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 740:./tmk_core/protocol/lufa/lufa.c ****  *
 741:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 742:./tmk_core/protocol/lufa/lufa.c ****  */
 743:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 744:./tmk_core/protocol/lufa/lufa.c **** {
 745:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 746:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 747:./tmk_core/protocol/lufa/lufa.c **** 
 748:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 749:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 750:./tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 751:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 752:./tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 753:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 754:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 755:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 756:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 757:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 758:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 759:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 760:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 761:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 762:./tmk_core/protocol/lufa/lufa.c ****       #else
 763:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 764:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 765:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 766:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 767:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 768:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 769:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 770:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 771:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 772:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 773:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 774:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 775:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:./tmk_core/protocol/lufa/lufa.c ****       #endif
 777:./tmk_core/protocol/lufa/lufa.c ****     }
 778:./tmk_core/protocol/lufa/lufa.c **** #endif
 779:./tmk_core/protocol/lufa/lufa.c **** 
 780:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 781:./tmk_core/protocol/lufa/lufa.c ****       return;
 782:./tmk_core/protocol/lufa/lufa.c ****     }
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 785:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 786:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 787:./tmk_core/protocol/lufa/lufa.c ****     };
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 789:./tmk_core/protocol/lufa/lufa.c **** 
 790:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 791:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 792:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 793:./tmk_core/protocol/lufa/lufa.c **** 
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 795:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 796:./tmk_core/protocol/lufa/lufa.c **** }
 797:./tmk_core/protocol/lufa/lufa.c **** 
 798:./tmk_core/protocol/lufa/lufa.c **** 
 799:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 800:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 801:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 802:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 803:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 804:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 805:./tmk_core/protocol/lufa/lufa.c ****  *
 806:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 807:./tmk_core/protocol/lufa/lufa.c ****  */
 808:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 809:./tmk_core/protocol/lufa/lufa.c **** {
  32               		.loc 1 809 0
  33               		.cfi_startproc
  34               	.LVL0:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               	.LBB170:
 810:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 811:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 812:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 813:./tmk_core/protocol/lufa/lufa.c **** 
 814:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 815:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 816:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
  40               		.loc 1 816 0
  41 0000 9FB7      		in r25,__SREG__
  42               	.LVL1:
  43               	.LBB171:
  44               	.LBB172:
  45               		.file 2 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\atomic.h"
   1:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    All rights reserved.
   3:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   4:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
   7:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions of source code must retain the above copyright
   8:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  10:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      the documentation and/or other materials provided with the
  13:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      distribution.
  14:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  15:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      contributors may be used to endorse or promote products derived
  17:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****      from this software without specific prior written permission.
  18:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  19:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** */
  31:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  32:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* $Id$ */
  33:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  34:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  37:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/io.h>
  38:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #include <avr/interrupt.h>
  39:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  40:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** #if !defined(__DOXYGEN__)
  41:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** /* Internal helper functions. */
  42:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  44:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  45:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  46:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  47:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  48:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  50:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  46               		.loc 2 50 0
  47               	/* #APP */
  48               	 ;  50 "c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h" 1
  49 0002 F894      		cli
  50               	 ;  0 "" 2
  51               	.LVL2:
  52               	/* #NOAPP */
  53               	.LBE172:
  54               	.LBE171:
  55               		.loc 1 816 0
  56 0004 1092 0000 		sts console_flush,__zero_reg__
  57               	.LVL3:
  58               	.LBB173:
  59               	.LBB174:
  51:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
  52:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  53:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  54:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  56:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     sei();
  57:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  59:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  60:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  61:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  63:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     cli();
  64:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     (void)__s;
  66:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** }
  67:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** 
  68:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h **** {
  70:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     SREG = *__s;
  60               		.loc 2 70 0
  61 0008 9FBF      		out __SREG__,r25
  71:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  62               		.loc 2 71 0
  63               	.LBE174:
  64               	.LBE173:
  65               	.LBE170:
 817:./tmk_core/protocol/lufa/lufa.c **** 
 818:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
  66               		.loc 1 818 0
  67 000a 9091 0000 		lds r25,USB_DeviceState
  68               	.LVL4:
  69 000e 9430      		cpi r25,lo8(4)
  70 0010 01F0      		breq .+2
  71 0012 00C0      		rjmp .L14
  72               	.LBB175:
  73               	.LBB176:
  74               		.file 3 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
  75               		.loc 3 253 0
  76 0014 9091 E900 		lds r25,233
  77 0018 9F70      		andi r25,lo8(15)
  78               	.LBB177:
  79               	.LBB178:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  80               		.loc 3 240 0
  81 001a 3091 EC00 		lds r19,236
  82 001e 232F      		mov r18,r19
  83 0020 2170      		andi r18,lo8(1)
  84 0022 30FD      		sbrc r19,0
  85 0024 20E8      		ldi r18,lo8(-128)
  86               	.L4:
  87               	.LBE178:
  88               	.LBE177:
  89               		.loc 3 253 0
  90 0026 922B      		or r25,r18
  91               	.LVL5:
  92               	.LBE176:
  93               	.LBE175:
  94               	.LBB179:
  95               	.LBB180:
 254:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  96               		.loc 3 270 0
  97 0028 24E0      		ldi r18,lo8(4)
  98 002a 2093 E900 		sts 233,r18
  99               	.LVL6:
 100               	.LBE180:
 101               	.LBE179:
 102               	.LBB181:
 103               	.LBB182:
 271:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 104               		.loc 3 313 0
 105 002e 2091 EB00 		lds r18,235
 106               	.LBE182:
 107               	.LBE181:
 819:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 822:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 823:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 108               		.loc 1 823 0
 109 0032 20FF      		sbrs r18,0
 110 0034 00C0      		rjmp .L9
 111               	.LBB183:
 112               	.LBB184:
 314:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 361:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 113               		.loc 3 370 0
 114 0036 2091 EE00 		lds r18,238
 115               	.LBE184:
 116               	.LBE183:
 117               		.loc 1 823 0
 118 003a 27FF      		sbrs r18,7
 119 003c 00C0      		rjmp .L9
 824:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 825:./tmk_core/protocol/lufa/lufa.c ****     }
 826:./tmk_core/protocol/lufa/lufa.c **** 
 827:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 120               		.loc 1 827 0
 121 003e 2091 0000 		lds r18,timeouted.5724
 122 0042 2223      		tst r18
 123 0044 01F0      		breq .L6
 124               	.LBB185:
 125               	.LBB186:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 126               		.loc 3 360 0
 127 0046 2091 E800 		lds r18,232
 128               	.LBE186:
 129               	.LBE185:
 130               		.loc 1 827 0
 131 004a 25FF      		sbrs r18,5
 132 004c 00C0      		rjmp .L9
 133               	.L6:
 828:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 829:./tmk_core/protocol/lufa/lufa.c ****     }
 830:./tmk_core/protocol/lufa/lufa.c **** 
 831:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 134               		.loc 1 831 0
 135 004e 1092 0000 		sts timeouted.5724,__zero_reg__
 136               	.LVL7:
 832:./tmk_core/protocol/lufa/lufa.c **** 
 833:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 834:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 137               		.loc 1 834 0
 138 0052 26E0      		ldi r18,lo8(6)
 139               	.LVL8:
 140               	.L7:
 141               	.LBB187:
 142               	.LBB188:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 143               		.loc 3 360 0
 144 0054 3091 E800 		lds r19,232
 145               	.LBE188:
 146               	.LBE187:
 147               		.loc 1 834 0
 148 0058 35FD      		sbrc r19,5
 149 005a 00C0      		rjmp .L28
 835:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 150               		.loc 1 835 0
 151 005c 3091 0000 		lds r19,USB_DeviceState
 152 0060 3430      		cpi r19,lo8(4)
 153 0062 01F4      		brne .L9
 154               	.LBB189:
 155               	.LBB190:
 371:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 457:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 156               		.loc 3 513 0
 157 0064 3091 EB00 		lds r19,235
 158               	.LBE190:
 159               	.LBE189:
 836:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 837:./tmk_core/protocol/lufa/lufa.c ****         }
 838:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 160               		.loc 1 838 0
 161 0068 35FD      		sbrc r19,5
 162 006a 00C0      		rjmp .L9
 163               	.LVL9:
 164 006c 2150      		subi r18,lo8(-(-1))
 165               	.LVL10:
 839:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 840:./tmk_core/protocol/lufa/lufa.c ****         }
 841:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 166               		.loc 1 841 0
 167 006e 01F4      		brne .L8
 842:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 168               		.loc 1 842 0
 169 0070 81E0      		ldi r24,lo8(1)
 170               	.LVL11:
 171 0072 8093 0000 		sts timeouted.5724,r24
 843:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 172               		.loc 1 843 0
 173 0076 00C0      		rjmp .L9
 174               	.LVL12:
 175               	.L8:
 176               	.LBB191:
 177               	.LBB192:
 178               		.file 4 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\util\\delay.h"
   1:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    All rights reserved.
   5:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   6:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
   9:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  12:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      distribution.
  16:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  17:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  21:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  33:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* $Id$ */
  34:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  35:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  38:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __DOXYGEN__
  39:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  endif
  42:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif  /* __DOXYGEN__ */
  43:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  44:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <inttypes.h>
  45:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <util/delay_basic.h>
  46:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #include <math.h>
  47:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  48:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \file */
  49:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \code
  51:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  53:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     #include <util/delay.h>
  54:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \endcode
  55:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  56:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  57:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     used.
  60:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  61:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  62:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  64:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  66:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  67:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  69:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  70:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  71:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  73:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  75:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  76:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  77:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     routines linked into the application.
  78:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  79:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  80:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  81:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  83:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** */
  84:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  85:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  86:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
  89:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  90:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef F_CPU
  91:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  92:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /** \ingroup util_delay
  94:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \def F_CPU
  95:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     \brief CPU frequency in Hz
  96:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
  97:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     the delay macros.  This macro is normally supplied by the
  99:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     environment (e.g. from within a project header, or the project's
 100:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     fallback if no such user-provided definition could be found.
 102:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 103:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****     integer value.
 107:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 108:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # define F_CPU 1000000UL
 109:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 110:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 111:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
 112:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 114:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 115:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 118:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #  include <math.h>
 119:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 120:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 121:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 122:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 123:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 124:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 126:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 127:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 129:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 131:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 132:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 136:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 137:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 140:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0ms.
 141:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 142:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 146:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 147:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 151:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 152:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 153:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 154:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 155:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 157:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 159:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 160:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 163:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 164:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 165:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 166:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_ms(double __ms)
 167:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 168:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 169:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 172:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 173:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 176:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 179:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 182:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 183:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 184:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 186:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 187:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 179               		.loc 4 187 0
 180 0078 EFE9      		ldi r30,lo8(3999)
 181 007a FFE0      		ldi r31,hi8(3999)
 182 007c 3197      	1:	sbiw r30,1
 183 007e 01F4      		brne 1b
 184 0080 00C0      		rjmp .
 185 0082 0000      		nop
 186 0084 00C0      		rjmp .L7
 187               	.LVL13:
 188               	.L28:
 189               	.LBE192:
 190               	.LBE191:
 191               	.LBB193:
 192               	.LBB194:
 514:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 543:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 193               		.loc 3 554 0
 194 0086 8093 F100 		sts 241,r24
 195               	.LBE194:
 196               	.LBE193:
 197               	.LBB195:
 198               	.LBB196:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 199               		.loc 3 360 0
 200 008a 8091 E800 		lds r24,232
 201               	.LVL14:
 202               	.LBE196:
 203               	.LBE195:
 844:./tmk_core/protocol/lufa/lufa.c ****         }
 845:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 849:./tmk_core/protocol/lufa/lufa.c **** 
 850:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 851:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 204               		.loc 1 851 0
 205 008e 85FD      		sbrc r24,5
 206 0090 00C0      		rjmp .L11
 207               	.L12:
 208               	.LBB197:
 209               	.LBB198:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 210               		.loc 3 407 0 discriminator 1
 211 0092 8091 E800 		lds r24,232
 212               	.LBE198:
 213               	.LBE197:
 852:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 214               		.loc 1 852 0 discriminator 1
 215 0096 80FF      		sbrs r24,0
 216 0098 00C0      		rjmp .L12
 217               	.LBB199:
 218               	.LBB200:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 219               		.loc 3 456 0
 220 009a 8091 E800 		lds r24,232
 221 009e 8E77      		andi r24,lo8(126)
 222 00a0 8093 E800 		sts 232,r24
 223               	.LVL15:
 224 00a4 00C0      		rjmp .L13
 225               	.LVL16:
 226               	.L11:
 227               	.LBE200:
 228               	.LBE199:
 229               	.LBB201:
 853:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 854:./tmk_core/protocol/lufa/lufa.c ****     } else {
 855:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 230               		.loc 1 855 0
 231 00a6 8FB7      		in r24,__SREG__
 232               	.LVL17:
 233               	.LBB202:
 234               	.LBB203:
  50:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     return 1;
 235               		.loc 2 50 0
 236               	/* #APP */
 237               	 ;  50 "c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h" 1
 238 00a8 F894      		cli
 239               	 ;  0 "" 2
 240               	.LVL18:
 241               	/* #NOAPP */
 242               	.LBE203:
 243               	.LBE202:
 244               		.loc 1 855 0
 245 00aa 21E0      		ldi r18,lo8(1)
 246               	.LVL19:
 247 00ac 2093 0000 		sts console_flush,r18
 248               	.LVL20:
 249               	.LBB204:
 250               	.LBB205:
  70:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 251               		.loc 2 70 0
 252 00b0 8FBF      		out __SREG__,r24
 253               		.loc 2 71 0
 254               	.LVL21:
 255               	.L13:
 256               	.LBE205:
 257               	.LBE204:
 258               	.LBE201:
 259               	.LBB206:
 260               	.LBB207:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 261               		.loc 3 270 0
 262 00b2 9F70      		andi r25,lo8(15)
 263               	.LVL22:
 264 00b4 9093 E900 		sts 233,r25
 265               	.LBE207:
 266               	.LBE206:
 856:./tmk_core/protocol/lufa/lufa.c ****     }
 857:./tmk_core/protocol/lufa/lufa.c **** 
 858:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 859:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 267               		.loc 1 859 0
 268 00b8 80E0      		ldi r24,0
 269 00ba 0895      		ret
 270               	.LVL23:
 271               	.L9:
 272               	.LBB208:
 273               	.LBB209:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 274               		.loc 3 270 0
 275 00bc 9F70      		andi r25,lo8(15)
 276               	.LVL24:
 277 00be 9093 E900 		sts 233,r25
 278               	.LVL25:
 279               	.L14:
 280               	.LBE209:
 281               	.LBE208:
 819:./tmk_core/protocol/lufa/lufa.c **** 
 282               		.loc 1 819 0
 283 00c2 8FEF      		ldi r24,lo8(-1)
 860:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 861:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 862:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 863:./tmk_core/protocol/lufa/lufa.c **** }
 284               		.loc 1 863 0
 285 00c4 0895      		ret
 286               		.cfi_endproc
 287               	.LFE145:
 289               		.section	.text.send_consumer,"ax",@progbits
 291               	send_consumer:
 292               	.LFB144:
 744:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 293               		.loc 1 744 0
 294               		.cfi_startproc
 295               	.LVL26:
 296 0000 0F93      		push r16
 297               	.LCFI0:
 298               		.cfi_def_cfa_offset 3
 299               		.cfi_offset 16, -2
 300 0002 1F93      		push r17
 301               	.LCFI1:
 302               		.cfi_def_cfa_offset 4
 303               		.cfi_offset 17, -3
 304 0004 CF93      		push r28
 305               	.LCFI2:
 306               		.cfi_def_cfa_offset 5
 307               		.cfi_offset 28, -4
 308 0006 DF93      		push r29
 309               	.LCFI3:
 310               		.cfi_def_cfa_offset 6
 311               		.cfi_offset 29, -5
 312 0008 00D0      		rcall .
 313 000a 1F92      		push __zero_reg__
 314               	.LCFI4:
 315               		.cfi_def_cfa_offset 9
 316 000c CDB7      		in r28,__SP_L__
 317 000e DEB7      		in r29,__SP_H__
 318               	.LCFI5:
 319               		.cfi_def_cfa_register 28
 320               	/* prologue: function */
 321               	/* frame size = 3 */
 322               	/* stack size = 7 */
 323               	.L__stack_usage = 7
 324 0010 8C01      		movw r16,r24
 325               	.LVL27:
 746:./tmk_core/protocol/lufa/lufa.c **** 
 326               		.loc 1 746 0
 327 0012 0E94 0000 		call where_to_send
 328               	.LVL28:
 780:./tmk_core/protocol/lufa/lufa.c ****       return;
 329               		.loc 1 780 0
 330 0016 8230      		cpi r24,lo8(2)
 331 0018 01F0      		breq .L30
 780:./tmk_core/protocol/lufa/lufa.c ****       return;
 332               		.loc 1 780 0 is_stmt 0 discriminator 1
 333 001a 8430      		cpi r24,lo8(4)
 334 001c 01F4      		brne .L29
 335               	.L30:
 784:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 336               		.loc 1 784 0 is_stmt 1
 337 001e 93E0      		ldi r25,lo8(3)
 338 0020 9983      		std Y+1,r25
 339 0022 1B83      		std Y+3,r17
 340 0024 0A83      		std Y+2,r16
 341               	.LVL29:
 342               	.LBB210:
 343               	.LBB211:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 344               		.loc 3 270 0
 345 0026 9093 E900 		sts 233,r25
 346               	.LVL30:
 347 002a 8FEF      		ldi r24,lo8(-1)
 348               	.LVL31:
 349               	.L32:
 350               	.LBE211:
 351               	.LBE210:
 352               	.LBB212:
 353               	.LBB213:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 354               		.loc 3 360 0
 355 002c 9091 E800 		lds r25,232
 356 0030 8150      		subi r24,lo8(-(-1))
 357               	.LVL32:
 358               	.LBE213:
 359               	.LBE212:
 791:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 360               		.loc 1 791 0
 361 0032 95FD      		sbrc r25,5
 362 0034 00C0      		rjmp .L33
 363               	.LVL33:
 364               	.LBB214:
 365               	.LBB215:
 188:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 189:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #else
 190:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint16_t __ticks;
 191:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 193:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = 1;
 194:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 195:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	{
 196:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		while(__ticks)
 199:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		{
 200:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			// wait 1/10 ms
 201:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 			__ticks --;
 203:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		}
 204:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		return;
 205:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	}
 206:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	else
 207:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 208:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 209:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #endif
 210:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** }
 211:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 212:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** /**
 213:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \ingroup util_delay
 214:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 215:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 217:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 218:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 220:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 222:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    will not be informed about this case.
 225:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 226:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 229:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    no delay i.e., 0us.
 230:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 231:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    integer. This ensures that the user gets at least \c __us
 234:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    microseconds of delay.
 235:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 236:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    respectively.
 240:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 241:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \note
 242:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 243:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    The implementation of _delay_ms() based on
 244:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    implementations.  In order to get functionality backward compatible
 246:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    must be defined before including this header file. Also, the
 248:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    backward compatible algorithm will be chosen if the code is
 249:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****    not available to the compiler then.
 252:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 253:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****  */
 254:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** void
 255:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** _delay_us(double __us)
 256:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** {
 257:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	double __tmp ;
 258:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h ****   __STDC_HOSTED__
 261:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 262:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 265:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 268:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 271:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#else
 272:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		//round up by default
 273:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	#endif
 275:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 
 276:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 366               		.loc 4 276 0
 367 0036 95ED      		ldi r25,lo8(-43)
 368 0038 9A95      	1:	dec r25
 369 003a 01F4      		brne 1b
 370 003c 0000      		nop
 371               	.LVL34:
 372               	.LBE215:
 373               	.LBE214:
 791:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 374               		.loc 1 791 0
 375 003e 8111      		cpse r24,__zero_reg__
 376 0040 00C0      		rjmp .L32
 377               	.LVL35:
 378               	.L33:
 379               	.LBB216:
 380               	.LBB217:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 381               		.loc 3 360 0
 382 0042 8091 E800 		lds r24,232
 383               	.LBE217:
 384               	.LBE216:
 792:./tmk_core/protocol/lufa/lufa.c **** 
 385               		.loc 1 792 0
 386 0046 85FF      		sbrs r24,5
 387 0048 00C0      		rjmp .L29
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 388               		.loc 1 794 0
 389 004a 40E0      		ldi r20,0
 390 004c 50E0      		ldi r21,0
 391 004e 63E0      		ldi r22,lo8(3)
 392 0050 70E0      		ldi r23,0
 393 0052 CE01      		movw r24,r28
 394 0054 0196      		adiw r24,1
 395 0056 0E94 0000 		call Endpoint_Write_Stream_LE
 396               	.LVL36:
 397               	.LBB218:
 398               	.LBB219:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 399               		.loc 3 456 0
 400 005a 8091 E800 		lds r24,232
 401 005e 8E77      		andi r24,lo8(126)
 402 0060 8093 E800 		sts 232,r24
 403               	.LVL37:
 404               	.L29:
 405               	/* epilogue start */
 406               	.LBE219:
 407               	.LBE218:
 796:./tmk_core/protocol/lufa/lufa.c **** 
 408               		.loc 1 796 0
 409 0064 0F90      		pop __tmp_reg__
 410 0066 0F90      		pop __tmp_reg__
 411 0068 0F90      		pop __tmp_reg__
 412 006a DF91      		pop r29
 413 006c CF91      		pop r28
 414 006e 1F91      		pop r17
 415 0070 0F91      		pop r16
 416               	.LVL38:
 417 0072 0895      		ret
 418               		.cfi_endproc
 419               	.LFE144:
 421               		.section	.text.send_system,"ax",@progbits
 423               	send_system:
 424               	.LFB143:
 719:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 425               		.loc 1 719 0
 426               		.cfi_startproc
 427               	.LVL39:
 428 0000 CF93      		push r28
 429               	.LCFI6:
 430               		.cfi_def_cfa_offset 3
 431               		.cfi_offset 28, -2
 432 0002 DF93      		push r29
 433               	.LCFI7:
 434               		.cfi_def_cfa_offset 4
 435               		.cfi_offset 29, -3
 436 0004 00D0      		rcall .
 437 0006 1F92      		push __zero_reg__
 438               	.LCFI8:
 439               		.cfi_def_cfa_offset 7
 440 0008 CDB7      		in r28,__SP_L__
 441 000a DEB7      		in r29,__SP_H__
 442               	.LCFI9:
 443               		.cfi_def_cfa_register 28
 444               	/* prologue: function */
 445               	/* frame size = 3 */
 446               	/* stack size = 5 */
 447               	.L__stack_usage = 5
 448               	.LVL40:
 722:./tmk_core/protocol/lufa/lufa.c ****         return;
 449               		.loc 1 722 0
 450 000c 2091 0000 		lds r18,USB_DeviceState
 451 0010 2430      		cpi r18,lo8(4)
 452 0012 01F4      		brne .L45
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 453               		.loc 1 725 0
 454 0014 22E0      		ldi r18,lo8(2)
 455 0016 2983      		std Y+1,r18
 727:./tmk_core/protocol/lufa/lufa.c ****     };
 456               		.loc 1 727 0
 457 0018 8058      		subi r24,-128
 458 001a 9109      		sbc r25,__zero_reg__
 459               	.LVL41:
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 460               		.loc 1 725 0
 461 001c 9B83      		std Y+3,r25
 462 001e 8A83      		std Y+2,r24
 463               	.LVL42:
 464               	.LBB220:
 465               	.LBB221:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 466               		.loc 3 270 0
 467 0020 83E0      		ldi r24,lo8(3)
 468               	.LVL43:
 469 0022 8093 E900 		sts 233,r24
 470               	.LVL44:
 471 0026 8FEF      		ldi r24,lo8(-1)
 472               	.LVL45:
 473               	.L47:
 474               	.LBE221:
 475               	.LBE220:
 476               	.LBB222:
 477               	.LBB223:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 478               		.loc 3 360 0
 479 0028 9091 E800 		lds r25,232
 480 002c 8150      		subi r24,lo8(-(-1))
 481               	.LVL46:
 482               	.LBE223:
 483               	.LBE222:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 484               		.loc 1 732 0
 485 002e 95FD      		sbrc r25,5
 486 0030 00C0      		rjmp .L48
 487               	.LVL47:
 488               	.LBB224:
 489               	.LBB225:
 490               		.loc 4 276 0
 491 0032 95ED      		ldi r25,lo8(-43)
 492 0034 9A95      	1:	dec r25
 493 0036 01F4      		brne 1b
 494 0038 0000      		nop
 495               	.LVL48:
 496               	.LBE225:
 497               	.LBE224:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 498               		.loc 1 732 0
 499 003a 8111      		cpse r24,__zero_reg__
 500 003c 00C0      		rjmp .L47
 501               	.LVL49:
 502               	.L48:
 503               	.LBB226:
 504               	.LBB227:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 505               		.loc 3 360 0
 506 003e 8091 E800 		lds r24,232
 507               	.LBE227:
 508               	.LBE226:
 733:./tmk_core/protocol/lufa/lufa.c **** 
 509               		.loc 1 733 0
 510 0042 85FF      		sbrs r24,5
 511 0044 00C0      		rjmp .L45
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 512               		.loc 1 735 0
 513 0046 40E0      		ldi r20,0
 514 0048 50E0      		ldi r21,0
 515 004a 63E0      		ldi r22,lo8(3)
 516 004c 70E0      		ldi r23,0
 517 004e CE01      		movw r24,r28
 518 0050 0196      		adiw r24,1
 519 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 520               	.LVL50:
 521               	.LBB228:
 522               	.LBB229:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 523               		.loc 3 456 0
 524 0056 8091 E800 		lds r24,232
 525 005a 8E77      		andi r24,lo8(126)
 526 005c 8093 E800 		sts 232,r24
 527               	.LVL51:
 528               	.L45:
 529               	/* epilogue start */
 530               	.LBE229:
 531               	.LBE228:
 737:./tmk_core/protocol/lufa/lufa.c **** 
 532               		.loc 1 737 0
 533 0060 0F90      		pop __tmp_reg__
 534 0062 0F90      		pop __tmp_reg__
 535 0064 0F90      		pop __tmp_reg__
 536 0066 DF91      		pop r29
 537 0068 CF91      		pop r28
 538 006a 0895      		ret
 539               		.cfi_endproc
 540               	.LFE143:
 542               		.section	.text.send_mouse,"ax",@progbits
 544               	send_mouse:
 545               	.LFB142:
 671:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 546               		.loc 1 671 0
 547               		.cfi_startproc
 548               	.LVL52:
 549 0000 CF93      		push r28
 550               	.LCFI10:
 551               		.cfi_def_cfa_offset 3
 552               		.cfi_offset 28, -2
 553 0002 DF93      		push r29
 554               	.LCFI11:
 555               		.cfi_def_cfa_offset 4
 556               		.cfi_offset 29, -3
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 2 */
 560               	.L__stack_usage = 2
 561 0004 EC01      		movw r28,r24
 562               	.LVL53:
 674:./tmk_core/protocol/lufa/lufa.c **** 
 563               		.loc 1 674 0
 564 0006 0E94 0000 		call where_to_send
 565               	.LVL54:
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 566               		.loc 1 695 0
 567 000a 8230      		cpi r24,lo8(2)
 568 000c 01F0      		breq .L58
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 569               		.loc 1 695 0 is_stmt 0 discriminator 1
 570 000e 8430      		cpi r24,lo8(4)
 571 0010 01F4      		brne .L57
 572               	.L58:
 573               	.LVL55:
 574               	.LBB230:
 575               	.LBB231:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 576               		.loc 3 270 0 is_stmt 1
 577 0012 82E0      		ldi r24,lo8(2)
 578               	.LVL56:
 579 0014 8093 E900 		sts 233,r24
 580               	.LVL57:
 581 0018 9FEF      		ldi r25,lo8(-1)
 582               	.LVL58:
 583               	.L60:
 584               	.LBE231:
 585               	.LBE230:
 586               	.LBB232:
 587               	.LBB233:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 588               		.loc 3 360 0
 589 001a 8091 E800 		lds r24,232
 590 001e 9150      		subi r25,lo8(-(-1))
 591               	.LVL59:
 592               	.LBE233:
 593               	.LBE232:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 594               		.loc 1 703 0
 595 0020 85FD      		sbrc r24,5
 596 0022 00C0      		rjmp .L61
 597               	.LVL60:
 598               	.LBB234:
 599               	.LBB235:
 600               		.loc 4 276 0
 601 0024 85ED      		ldi r24,lo8(-43)
 602 0026 8A95      	1:	dec r24
 603 0028 01F4      		brne 1b
 604 002a 0000      		nop
 605               	.LVL61:
 606               	.LBE235:
 607               	.LBE234:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 608               		.loc 1 703 0
 609 002c 9111      		cpse r25,__zero_reg__
 610 002e 00C0      		rjmp .L60
 611               	.LVL62:
 612               	.L61:
 613               	.LBB236:
 614               	.LBB237:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 615               		.loc 3 360 0
 616 0030 8091 E800 		lds r24,232
 617               	.LBE237:
 618               	.LBE236:
 704:./tmk_core/protocol/lufa/lufa.c **** 
 619               		.loc 1 704 0
 620 0034 85FF      		sbrs r24,5
 621 0036 00C0      		rjmp .L57
 707:./tmk_core/protocol/lufa/lufa.c **** 
 622               		.loc 1 707 0
 623 0038 40E0      		ldi r20,0
 624 003a 50E0      		ldi r21,0
 625 003c 65E0      		ldi r22,lo8(5)
 626 003e 70E0      		ldi r23,0
 627 0040 CE01      		movw r24,r28
 628 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 629               	.LVL63:
 630               	.LBB238:
 631               	.LBB239:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 632               		.loc 3 456 0
 633 0046 8091 E800 		lds r24,232
 634 004a 8E77      		andi r24,lo8(126)
 635 004c 8093 E800 		sts 232,r24
 636               	.LVL64:
 637               	.L57:
 638               	/* epilogue start */
 639               	.LBE239:
 640               	.LBE238:
 712:./tmk_core/protocol/lufa/lufa.c **** 
 641               		.loc 1 712 0
 642 0050 DF91      		pop r29
 643 0052 CF91      		pop r28
 644               	.LVL65:
 645 0054 0895      		ret
 646               		.cfi_endproc
 647               	.LFE142:
 649               		.section	.text.send_keyboard,"ax",@progbits
 651               	send_keyboard:
 652               	.LFB141:
 605:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 653               		.loc 1 605 0
 654               		.cfi_startproc
 655               	.LVL66:
 656 0000 CF93      		push r28
 657               	.LCFI12:
 658               		.cfi_def_cfa_offset 3
 659               		.cfi_offset 28, -2
 660 0002 DF93      		push r29
 661               	.LCFI13:
 662               		.cfi_def_cfa_offset 4
 663               		.cfi_offset 29, -3
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 2 */
 667               	.L__stack_usage = 2
 668 0004 EC01      		movw r28,r24
 669               	.LVL67:
 607:./tmk_core/protocol/lufa/lufa.c **** 
 670               		.loc 1 607 0
 671 0006 0E94 0000 		call where_to_send
 672               	.LVL68:
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 673               		.loc 1 629 0
 674 000a 8230      		cpi r24,lo8(2)
 675 000c 01F0      		breq .L77
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 676               		.loc 1 629 0 is_stmt 0 discriminator 1
 677 000e 8430      		cpi r24,lo8(4)
 678 0010 01F4      		brne .L76
 679               	.L77:
 680               	.LVL69:
 681               	.LBB240:
 682               	.LBB241:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 683               		.loc 3 270 0 is_stmt 1
 684 0012 81E0      		ldi r24,lo8(1)
 685               	.LVL70:
 686 0014 8093 E900 		sts 233,r24
 687               	.LVL71:
 688 0018 9FEF      		ldi r25,lo8(-1)
 689               	.LVL72:
 690               	.L79:
 691               	.LBE241:
 692               	.LBE240:
 693               	.LBB242:
 694               	.LBB243:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 695               		.loc 3 360 0
 696 001a 8091 E800 		lds r24,232
 697 001e 9150      		subi r25,lo8(-(-1))
 698               	.LVL73:
 699               	.LBE243:
 700               	.LBE242:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 701               		.loc 1 653 0
 702 0020 85FD      		sbrc r24,5
 703 0022 00C0      		rjmp .L80
 704               	.LVL74:
 705               	.LBB244:
 706               	.LBB245:
 707               		.loc 4 276 0
 708 0024 85ED      		ldi r24,lo8(-43)
 709 0026 8A95      	1:	dec r24
 710 0028 01F4      		brne 1b
 711 002a 0000      		nop
 712               	.LVL75:
 713               	.LBE245:
 714               	.LBE244:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 715               		.loc 1 653 0
 716 002c 9111      		cpse r25,__zero_reg__
 717 002e 00C0      		rjmp .L79
 718               	.LVL76:
 719               	.L80:
 720               	.LBB246:
 721               	.LBB247:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 722               		.loc 3 360 0
 723 0030 8091 E800 		lds r24,232
 724               	.LBE247:
 725               	.LBE246:
 654:./tmk_core/protocol/lufa/lufa.c **** 
 726               		.loc 1 654 0
 727 0034 85FF      		sbrs r24,5
 728 0036 00C0      		rjmp .L76
 657:./tmk_core/protocol/lufa/lufa.c ****     }
 729               		.loc 1 657 0
 730 0038 40E0      		ldi r20,0
 731 003a 50E0      		ldi r21,0
 732 003c 68E0      		ldi r22,lo8(8)
 733 003e 70E0      		ldi r23,0
 734 0040 CE01      		movw r24,r28
 735 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 736               	.LVL77:
 737               	.LBB248:
 738               	.LBB249:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 739               		.loc 3 456 0
 740 0046 9091 E800 		lds r25,232
 741 004a 9E77      		andi r25,lo8(126)
 742 004c 9093 E800 		sts 232,r25
 743               	.LBE249:
 744               	.LBE248:
 663:./tmk_core/protocol/lufa/lufa.c **** }
 745               		.loc 1 663 0
 746 0050 98E0      		ldi r25,lo8(8)
 747 0052 FE01      		movw r30,r28
 748 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 749 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 750               		0:
 751 0058 0190      		ld r0,Z+
 752 005a 0D92      		st X+,r0
 753 005c 9A95      		dec r25
 754 005e 01F4      		brne 0b
 755               	.LVL78:
 756               	.L76:
 757               	/* epilogue start */
 664:./tmk_core/protocol/lufa/lufa.c ****  
 758               		.loc 1 664 0
 759 0060 DF91      		pop r29
 760 0062 CF91      		pop r28
 761               	.LVL79:
 762 0064 0895      		ret
 763               		.cfi_endproc
 764               	.LFE141:
 766               		.section	.text.rgblight_toggle,"ax",@progbits
 767               		.weak	rgblight_toggle
 769               	rgblight_toggle:
 770               	.LFB108:
 771               		.file 5 "./quantum/rgb.h"
   1:./quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:./quantum/rgb.h ****  *
   3:./quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:./quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:./quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:./quantum/rgb.h ****  * (at your option) any later version.
   7:./quantum/rgb.h ****  *
   8:./quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:./quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:./quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:./quantum/rgb.h ****  * GNU General Public License for more details.
  12:./quantum/rgb.h ****  *
  13:./quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:./quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:./quantum/rgb.h ****  */
  16:./quantum/rgb.h **** 
  17:./quantum/rgb.h **** #ifndef RGB_H
  18:./quantum/rgb.h **** #define RGB_H
  19:./quantum/rgb.h **** 
  20:./quantum/rgb.h **** __attribute__((weak))
  21:./quantum/rgb.h **** void rgblight_toggle(void) {};
 772               		.loc 5 21 0
 773               		.cfi_startproc
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 776               	/* stack size = 0 */
 777               	.L__stack_usage = 0
 778 0000 0895      		ret
 779               		.cfi_endproc
 780               	.LFE108:
 782               		.section	.text.rgblight_step,"ax",@progbits
 783               		.weak	rgblight_step
 785               	rgblight_step:
 786               	.LFB109:
  22:./quantum/rgb.h **** 
  23:./quantum/rgb.h **** __attribute__((weak))
  24:./quantum/rgb.h **** void rgblight_step(void) {};
 787               		.loc 5 24 0
 788               		.cfi_startproc
 789               	/* prologue: function */
 790               	/* frame size = 0 */
 791               	/* stack size = 0 */
 792               	.L__stack_usage = 0
 793 0000 0895      		ret
 794               		.cfi_endproc
 795               	.LFE109:
 797               		.section	.text.rgblight_step_reverse,"ax",@progbits
 798               		.weak	rgblight_step_reverse
 800               	rgblight_step_reverse:
 801               	.LFB110:
  25:./quantum/rgb.h **** 
  26:./quantum/rgb.h **** __attribute__((weak))
  27:./quantum/rgb.h **** void rgblight_step_reverse(void) {};
 802               		.loc 5 27 0
 803               		.cfi_startproc
 804               	/* prologue: function */
 805               	/* frame size = 0 */
 806               	/* stack size = 0 */
 807               	.L__stack_usage = 0
 808 0000 0895      		ret
 809               		.cfi_endproc
 810               	.LFE110:
 812               		.section	.text.rgblight_increase_hue,"ax",@progbits
 813               		.weak	rgblight_increase_hue
 815               	rgblight_increase_hue:
 816               	.LFB111:
  28:./quantum/rgb.h **** 
  29:./quantum/rgb.h **** __attribute__((weak))
  30:./quantum/rgb.h **** void rgblight_increase_hue(void) {};
 817               		.loc 5 30 0
 818               		.cfi_startproc
 819               	/* prologue: function */
 820               	/* frame size = 0 */
 821               	/* stack size = 0 */
 822               	.L__stack_usage = 0
 823 0000 0895      		ret
 824               		.cfi_endproc
 825               	.LFE111:
 827               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 828               		.weak	rgblight_decrease_hue
 830               	rgblight_decrease_hue:
 831               	.LFB112:
  31:./quantum/rgb.h **** 
  32:./quantum/rgb.h **** __attribute__((weak))
  33:./quantum/rgb.h **** void rgblight_decrease_hue(void) {};
 832               		.loc 5 33 0
 833               		.cfi_startproc
 834               	/* prologue: function */
 835               	/* frame size = 0 */
 836               	/* stack size = 0 */
 837               	.L__stack_usage = 0
 838 0000 0895      		ret
 839               		.cfi_endproc
 840               	.LFE112:
 842               		.section	.text.rgblight_increase_sat,"ax",@progbits
 843               		.weak	rgblight_increase_sat
 845               	rgblight_increase_sat:
 846               	.LFB113:
  34:./quantum/rgb.h **** 
  35:./quantum/rgb.h **** __attribute__((weak))
  36:./quantum/rgb.h **** void rgblight_increase_sat(void) {};
 847               		.loc 5 36 0
 848               		.cfi_startproc
 849               	/* prologue: function */
 850               	/* frame size = 0 */
 851               	/* stack size = 0 */
 852               	.L__stack_usage = 0
 853 0000 0895      		ret
 854               		.cfi_endproc
 855               	.LFE113:
 857               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 858               		.weak	rgblight_decrease_sat
 860               	rgblight_decrease_sat:
 861               	.LFB114:
  37:./quantum/rgb.h **** 
  38:./quantum/rgb.h **** __attribute__((weak))
  39:./quantum/rgb.h **** void rgblight_decrease_sat(void) {};
 862               		.loc 5 39 0
 863               		.cfi_startproc
 864               	/* prologue: function */
 865               	/* frame size = 0 */
 866               	/* stack size = 0 */
 867               	.L__stack_usage = 0
 868 0000 0895      		ret
 869               		.cfi_endproc
 870               	.LFE114:
 872               		.section	.text.rgblight_increase_val,"ax",@progbits
 873               		.weak	rgblight_increase_val
 875               	rgblight_increase_val:
 876               	.LFB115:
  40:./quantum/rgb.h **** 
  41:./quantum/rgb.h **** __attribute__((weak))
  42:./quantum/rgb.h **** void rgblight_increase_val(void) {};
 877               		.loc 5 42 0
 878               		.cfi_startproc
 879               	/* prologue: function */
 880               	/* frame size = 0 */
 881               	/* stack size = 0 */
 882               	.L__stack_usage = 0
 883 0000 0895      		ret
 884               		.cfi_endproc
 885               	.LFE115:
 887               		.section	.text.rgblight_decrease_val,"ax",@progbits
 888               		.weak	rgblight_decrease_val
 890               	rgblight_decrease_val:
 891               	.LFB116:
  43:./quantum/rgb.h **** 
  44:./quantum/rgb.h **** __attribute__((weak))
  45:./quantum/rgb.h **** void rgblight_decrease_val(void) {};
 892               		.loc 5 45 0
 893               		.cfi_startproc
 894               	/* prologue: function */
 895               	/* frame size = 0 */
 896               	/* stack size = 0 */
 897               	.L__stack_usage = 0
 898 0000 0895      		ret
 899               		.cfi_endproc
 900               	.LFE116:
 902               		.section	.text.rgblight_increase_speed,"ax",@progbits
 903               		.weak	rgblight_increase_speed
 905               	rgblight_increase_speed:
 906               	.LFB117:
  46:./quantum/rgb.h **** 
  47:./quantum/rgb.h **** __attribute__((weak))
  48:./quantum/rgb.h **** void rgblight_increase_speed(void) {};
 907               		.loc 5 48 0
 908               		.cfi_startproc
 909               	/* prologue: function */
 910               	/* frame size = 0 */
 911               	/* stack size = 0 */
 912               	.L__stack_usage = 0
 913 0000 0895      		ret
 914               		.cfi_endproc
 915               	.LFE117:
 917               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 918               		.weak	rgblight_decrease_speed
 920               	rgblight_decrease_speed:
 921               	.LFB118:
  49:./quantum/rgb.h **** 
  50:./quantum/rgb.h **** __attribute__((weak))
  51:./quantum/rgb.h **** void rgblight_decrease_speed(void) {};
 922               		.loc 5 51 0
 923               		.cfi_startproc
 924               	/* prologue: function */
 925               	/* frame size = 0 */
 926               	/* stack size = 0 */
 927               	.L__stack_usage = 0
 928 0000 0895      		ret
 929               		.cfi_endproc
 930               	.LFE118:
 932               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 933               	.global	EVENT_USB_Device_Connect
 935               	EVENT_USB_Device_Connect:
 936               	.LFB132:
 306:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 937               		.loc 1 306 0
 938               		.cfi_startproc
 939               	/* prologue: function */
 940               	/* frame size = 0 */
 941               	/* stack size = 0 */
 942               	.L__stack_usage = 0
 307:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 943               		.loc 1 307 0
 944 0000 80E0      		ldi r24,lo8(__c.5631)
 945 0002 90E0      		ldi r25,hi8(__c.5631)
 946 0004 0E94 0000 		call xputs
 947               	.LVL80:
 309:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 948               		.loc 1 309 0
 949 0008 8091 0000 		lds r24,USB_IsInitialized
 950 000c 8111      		cpse r24,__zero_reg__
 951 000e 00C0      		rjmp .L106
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 952               		.loc 1 310 0
 953 0010 0E94 0000 		call USB_Disable
 954               	.LVL81:
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 955               		.loc 1 311 0
 956 0014 0E94 0000 		call USB_Init
 957               	.LVL82:
 958               	.LBB250:
 959               	.LBB251:
 960               	.LBB252:
 961               		.file 6 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 962               		.loc 6 113 0
 963 0018 8091 E200 		lds r24,226
 964 001c 8460      		ori r24,lo8(4)
 965 001e 8093 E200 		sts 226,r24
 966               	.LVL83:
 967               	.L106:
 968 0022 0895      		ret
 969               	.LBE252:
 970               	.LBE251:
 971               	.LBE250:
 972               		.cfi_endproc
 973               	.LFE132:
 975               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 976               	.global	EVENT_USB_Device_Disconnect
 978               	EVENT_USB_Device_Disconnect:
 979               	.LFB133:
 321:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 980               		.loc 1 321 0
 981               		.cfi_startproc
 982               	/* prologue: function */
 983               	/* frame size = 0 */
 984               	/* stack size = 0 */
 985               	.L__stack_usage = 0
 322:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 986               		.loc 1 322 0
 987 0000 80E0      		ldi r24,lo8(__c.5636)
 988 0002 90E0      		ldi r25,hi8(__c.5636)
 989 0004 0E94 0000 		call xputs
 990               	.LVL84:
 324:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 991               		.loc 1 324 0
 992 0008 1092 0000 		sts USB_IsInitialized,__zero_reg__
 993 000c 0895      		ret
 994               		.cfi_endproc
 995               	.LFE133:
 997               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 998               	.global	EVENT_USB_Device_Reset
 1000               	EVENT_USB_Device_Reset:
 1001               	.LFB134:
 339:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 1002               		.loc 1 339 0
 1003               		.cfi_startproc
 1004               	/* prologue: function */
 1005               	/* frame size = 0 */
 1006               	/* stack size = 0 */
 1007               	.L__stack_usage = 0
 340:./tmk_core/protocol/lufa/lufa.c **** }
 1008               		.loc 1 340 0
 1009 0000 80E0      		ldi r24,lo8(__c.5641)
 1010 0002 90E0      		ldi r25,hi8(__c.5641)
 1011 0004 0C94 0000 		jmp xputs
 1012               	.LVL85:
 1013               		.cfi_endproc
 1014               	.LFE134:
 1016               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 1017               	.global	EVENT_USB_Device_Suspend
 1019               	EVENT_USB_Device_Suspend:
 1020               	.LFB135:
 348:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 1021               		.loc 1 348 0
 1022               		.cfi_startproc
 1023               	/* prologue: function */
 1024               	/* frame size = 0 */
 1025               	/* stack size = 0 */
 1026               	.L__stack_usage = 0
 349:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 1027               		.loc 1 349 0
 1028 0000 80E0      		ldi r24,lo8(__c.5645)
 1029 0002 90E0      		ldi r25,hi8(__c.5645)
 1030 0004 0C94 0000 		jmp xputs
 1031               	.LVL86:
 1032               		.cfi_endproc
 1033               	.LFE135:
 1035               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 1036               	.global	EVENT_USB_Device_WakeUp
 1038               	EVENT_USB_Device_WakeUp:
 1039               	.LFB136:
 360:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 1040               		.loc 1 360 0
 1041               		.cfi_startproc
 1042               	/* prologue: function */
 1043               	/* frame size = 0 */
 1044               	/* stack size = 0 */
 1045               	.L__stack_usage = 0
 361:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 1046               		.loc 1 361 0
 1047 0000 80E0      		ldi r24,lo8(__c.5649)
 1048 0002 90E0      		ldi r25,hi8(__c.5649)
 1049 0004 0E94 0000 		call xputs
 1050               	.LVL87:
 362:./tmk_core/protocol/lufa/lufa.c **** 
 1051               		.loc 1 362 0
 1052 0008 0C94 0000 		jmp suspend_wakeup_init
 1053               	.LVL88:
 1054               		.cfi_endproc
 1055               	.LFE136:
 1057               		.section	.text.EVENT_USB_Device_StartOfFrame,"ax",@progbits
 1058               	.global	EVENT_USB_Device_StartOfFrame
 1060               	EVENT_USB_Device_StartOfFrame:
 1061               	.LFB137:
 387:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 1062               		.loc 1 387 0
 1063               		.cfi_startproc
 1064               	/* prologue: function */
 1065               	/* frame size = 0 */
 1066               	/* stack size = 0 */
 1067               	.L__stack_usage = 0
 389:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 1068               		.loc 1 389 0
 1069 0000 2091 0000 		lds r18,count.5655
 1070 0004 2F5F      		subi r18,lo8(-(1))
 1071 0006 822F      		mov r24,r18
 1072 0008 62E3      		ldi r22,lo8(50)
 1073 000a 0E94 0000 		call __udivmodqi4
 1074 000e 9923      		tst r25
 1075 0010 01F0      		breq .L113
 1076 0012 2093 0000 		sts count.5655,r18
 1077 0016 0895      		ret
 1078               	.L113:
 390:./tmk_core/protocol/lufa/lufa.c **** 
 1079               		.loc 1 390 0
 1080 0018 1092 0000 		sts count.5655,__zero_reg__
 392:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 1081               		.loc 1 392 0
 1082 001c 8091 0000 		lds r24,console_flush
 1083 0020 8823      		tst r24
 1084 0022 01F0      		breq .L112
 1085               	.LBB277:
 1086               	.LBB278:
 240:./tmk_core/protocol/lufa/lufa.c ****         return;
 1087               		.loc 1 240 0
 1088 0024 8091 0000 		lds r24,USB_DeviceState
 1089 0028 8430      		cpi r24,lo8(4)
 1090 002a 01F4      		brne .L116
 1091               	.LBB279:
 1092               	.LBB280:
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1093               		.loc 3 253 0
 1094 002c 8091 E900 		lds r24,233
 1095 0030 8F70      		andi r24,lo8(15)
 1096               	.LBB281:
 1097               	.LBB282:
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1098               		.loc 3 240 0
 1099 0032 2091 EC00 		lds r18,236
 1100 0036 922F      		mov r25,r18
 1101 0038 9170      		andi r25,lo8(1)
 1102 003a 20FD      		sbrc r18,0
 1103 003c 90E8      		ldi r25,lo8(-128)
 1104               	.L117:
 1105               	.LBE282:
 1106               	.LBE281:
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1107               		.loc 3 253 0
 1108 003e 892B      		or r24,r25
 1109               	.LVL89:
 1110               	.LBE280:
 1111               	.LBE279:
 1112               	.LBB283:
 1113               	.LBB284:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1114               		.loc 3 270 0
 1115 0040 94E0      		ldi r25,lo8(4)
 1116 0042 9093 E900 		sts 233,r25
 1117               	.LBE284:
 1118               	.LBE283:
 1119               	.LBB285:
 1120               	.LBB286:
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1121               		.loc 3 313 0
 1122 0046 9091 EB00 		lds r25,235
 1123               	.LBE286:
 1124               	.LBE285:
 272:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 1125               		.loc 1 272 0
 1126 004a 90FF      		sbrs r25,0
 1127 004c 00C0      		rjmp .L121
 1128               	.LBB287:
 1129               	.LBB288:
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1130               		.loc 3 370 0
 1131 004e 9091 EE00 		lds r25,238
 1132               	.LBE288:
 1133               	.LBE287:
 272:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 1134               		.loc 1 272 0
 1135 0052 97FF      		sbrs r25,7
 1136 0054 00C0      		rjmp .L121
 1137               	.L129:
 1138               	.LBB289:
 1139               	.LBB290:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1140               		.loc 3 360 0
 1141 0056 9091 E800 		lds r25,232
 1142               	.LBE290:
 1143               	.LBE289:
 278:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 1144               		.loc 1 278 0
 1145 005a 95FF      		sbrs r25,5
 1146 005c 00C0      		rjmp .L133
 1147               	.LVL90:
 1148               	.LBB291:
 1149               	.LBB292:
 1150               		.loc 3 554 0
 1151 005e 1092 F100 		sts 241,__zero_reg__
 1152 0062 00C0      		rjmp .L129
 1153               	.LVL91:
 1154               	.L133:
 1155               	.LBE292:
 1156               	.LBE291:
 1157               	.LBB293:
 1158               	.LBB294:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1159               		.loc 3 407 0
 1160 0064 9091 E800 		lds r25,232
 1161               	.LBE294:
 1162               	.LBE293:
 282:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 1163               		.loc 1 282 0
 1164 0068 90FF      		sbrs r25,0
 1165 006a 00C0      		rjmp .L121
 1166               	.LBB295:
 1167               	.LBB296:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1168               		.loc 3 456 0
 1169 006c 9091 E800 		lds r25,232
 1170 0070 9E77      		andi r25,lo8(126)
 1171 0072 9093 E800 		sts 232,r25
 1172               	.L121:
 1173               	.LVL92:
 1174               	.LBE296:
 1175               	.LBE295:
 1176               	.LBB297:
 1177               	.LBB298:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 1178               		.loc 3 270 0
 1179 0076 8F70      		andi r24,lo8(15)
 1180               	.LVL93:
 1181 0078 8093 E900 		sts 233,r24
 1182               	.LVL94:
 1183               	.L116:
 1184               	.LBE298:
 1185               	.LBE297:
 1186               	.LBE278:
 1187               	.LBE277:
 394:./tmk_core/protocol/lufa/lufa.c **** }
 1188               		.loc 1 394 0
 1189 007c 1092 0000 		sts console_flush,__zero_reg__
 1190               	.L112:
 1191 0080 0895      		ret
 1192               		.cfi_endproc
 1193               	.LFE137:
 1195               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 1196               	.global	EVENT_USB_Device_ConfigurationChanged
 1198               	EVENT_USB_Device_ConfigurationChanged:
 1199               	.LFB138:
 407:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 1200               		.loc 1 407 0
 1201               		.cfi_startproc
 1202               	/* prologue: function */
 1203               	/* frame size = 0 */
 1204               	/* stack size = 0 */
 1205               	.L__stack_usage = 0
 1206               	.LVL95:
 1207               	.LBB299:
 1208               	.LBB300:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 1209               		.loc 3 210 0
 1210 0000 42E0      		ldi r20,lo8(2)
 1211 0002 61EC      		ldi r22,lo8(-63)
 1212 0004 81E0      		ldi r24,lo8(1)
 1213 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1214               	.LVL96:
 1215               	.LBE300:
 1216               	.LBE299:
 1217               	.LBB301:
 1218               	.LBB302:
 1219 000a 42E0      		ldi r20,lo8(2)
 1220 000c 61EC      		ldi r22,lo8(-63)
 1221 000e 82E0      		ldi r24,lo8(2)
 1222 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1223               	.LVL97:
 1224               	.LBE302:
 1225               	.LBE301:
 1226               	.LBB303:
 1227               	.LBB304:
 1228 0014 42E0      		ldi r20,lo8(2)
 1229 0016 61EC      		ldi r22,lo8(-63)
 1230 0018 83E0      		ldi r24,lo8(3)
 1231 001a 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1232               	.LVL98:
 1233               	.LBE304:
 1234               	.LBE303:
 1235               	.LBB305:
 1236               	.LBB306:
 1237 001e 42E2      		ldi r20,lo8(34)
 1238 0020 61EC      		ldi r22,lo8(-63)
 1239 0022 84E0      		ldi r24,lo8(4)
 1240 0024 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 1241               	.LVL99:
 1242               	.LBE306:
 1243               	.LBE305:
 1244               		.cfi_endproc
 1245               	.LFE138:
 1247               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 1248               	.global	EVENT_USB_Device_ControlRequest
 1250               	EVENT_USB_Device_ControlRequest:
 1251               	.LFB139:
 480:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 1252               		.loc 1 480 0
 1253               		.cfi_startproc
 1254               	/* prologue: function */
 1255               	/* frame size = 0 */
 1256               	/* stack size = 0 */
 1257               	.L__stack_usage = 0
 1258               	.LVL100:
 485:./tmk_core/protocol/lufa/lufa.c ****     {
 1259               		.loc 1 485 0
 1260 0000 8091 0000 		lds r24,USB_ControlRequest+1
 1261 0004 8330      		cpi r24,lo8(3)
 1262 0006 01F4      		brne .+2
 1263 0008 00C0      		rjmp .L137
 1264 000a 00F4      		brsh .L138
 1265 000c 8130      		cpi r24,lo8(1)
 1266 000e 01F0      		breq .L139
 1267 0010 8230      		cpi r24,lo8(2)
 1268 0012 01F4      		brne .+2
 1269 0014 00C0      		rjmp .L140
 1270 0016 0895      		ret
 1271               	.L138:
 1272 0018 8A30      		cpi r24,lo8(10)
 1273 001a 01F4      		brne .+2
 1274 001c 00C0      		rjmp .L141
 1275 001e 8B30      		cpi r24,lo8(11)
 1276 0020 01F4      		brne .+2
 1277 0022 00C0      		rjmp .L142
 1278 0024 8930      		cpi r24,lo8(9)
 1279 0026 01F0      		breq .+2
 1280 0028 00C0      		rjmp .L135
 1281 002a 00C0      		rjmp .L164
 1282               	.L139:
 488:./tmk_core/protocol/lufa/lufa.c ****             {
 1283               		.loc 1 488 0
 1284 002c 8091 0000 		lds r24,USB_ControlRequest
 1285 0030 813A      		cpi r24,lo8(-95)
 1286 0032 01F0      		breq .+2
 1287 0034 00C0      		rjmp .L135
 1288               	.LBB307:
 1289               	.LBB308:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1290               		.loc 3 444 0
 1291 0036 8091 E800 		lds r24,232
 1292 003a 877F      		andi r24,lo8(-9)
 1293 003c 8093 E800 		sts 232,r24
 1294               	.LBE308:
 1295               	.LBE307:
 493:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1296               		.loc 1 493 0
 1297 0040 8091 0000 		lds r24,USB_ControlRequest+4
 1298 0044 9091 0000 		lds r25,USB_ControlRequest+4+1
 1299 0048 892B      		or r24,r25
 1300 004a 01F4      		brne .L161
 497:./tmk_core/protocol/lufa/lufa.c ****                     break;
 1301               		.loc 1 497 0
 1302 004c 68E0      		ldi r22,lo8(8)
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 1303               		.loc 1 496 0
 1304 004e 80E0      		ldi r24,lo8(keyboard_report_sent)
 1305 0050 90E0      		ldi r25,hi8(keyboard_report_sent)
 1306 0052 00C0      		rjmp .L145
 1307               	.L161:
 482:./tmk_core/protocol/lufa/lufa.c **** 
 1308               		.loc 1 482 0
 1309 0054 60E0      		ldi r22,0
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1310               		.loc 1 481 0
 1311 0056 80E0      		ldi r24,0
 1312 0058 90E0      		ldi r25,0
 1313               	.L145:
 1314               	.LVL101:
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1315               		.loc 1 502 0
 1316 005a 70E0      		ldi r23,0
 1317 005c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1318               	.LVL102:
 1319               	.LBB309:
 1320               	.LBB310:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1321               		.loc 3 471 0
 1322 0060 8091 E800 		lds r24,232
 1323 0064 8B77      		andi r24,lo8(123)
 1324 0066 8093 E800 		sts 232,r24
 1325 006a 0895      		ret
 1326               	.LVL103:
 1327               	.L164:
 1328               	.LBE310:
 1329               	.LBE309:
 508:./tmk_core/protocol/lufa/lufa.c ****             {
 1330               		.loc 1 508 0
 1331 006c 8091 0000 		lds r24,USB_ControlRequest
 1332 0070 8132      		cpi r24,lo8(33)
 1333 0072 01F0      		breq .+2
 1334 0074 00C0      		rjmp .L135
 512:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 1335               		.loc 1 512 0
 1336 0076 8091 0000 		lds r24,USB_ControlRequest+4
 1337 007a 9091 0000 		lds r25,USB_ControlRequest+4+1
 1338 007e 892B      		or r24,r25
 1339 0080 01F0      		breq .+2
 1340 0082 00C0      		rjmp .L135
 1341               	.LBB311:
 1342               	.LBB312:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1343               		.loc 3 444 0
 1344 0084 8091 E800 		lds r24,232
 1345 0088 877F      		andi r24,lo8(-9)
 1346 008a 8093 E800 		sts 232,r24
 1347               	.L149:
 1348               	.LBE312:
 1349               	.LBE311:
 1350               	.LBB313:
 1351               	.LBB314:
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1352               		.loc 3 419 0
 1353 008e 8091 E800 		lds r24,232
 1354               	.LBE314:
 1355               	.LBE313:
 519:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 1356               		.loc 1 519 0
 1357 0092 82FD      		sbrc r24,2
 1358 0094 00C0      		rjmp .L165
 520:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1359               		.loc 1 520 0
 1360 0096 8091 0000 		lds r24,USB_DeviceState
 1361 009a 8111      		cpse r24,__zero_reg__
 1362 009c 00C0      		rjmp .L149
 1363 009e 00C0      		rjmp .L135
 1364               	.L165:
 1365               	.LBB315:
 1366               	.LBB316:
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1367               		.loc 3 542 0
 1368 00a0 8091 F100 		lds r24,241
 1369               	.LBE316:
 1370               	.LBE315:
 523:./tmk_core/protocol/lufa/lufa.c **** 
 1371               		.loc 1 523 0
 1372 00a4 8093 0000 		sts keyboard_led_stats,r24
 1373               	.LBB317:
 1374               	.LBB318:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1375               		.loc 3 471 0
 1376 00a8 8091 E800 		lds r24,232
 1377 00ac 8B77      		andi r24,lo8(123)
 1378 00ae 00C0      		rjmp .L162
 1379               	.L137:
 1380               	.LBE318:
 1381               	.LBE317:
 535:./tmk_core/protocol/lufa/lufa.c ****             {
 1382               		.loc 1 535 0
 1383 00b0 8091 0000 		lds r24,USB_ControlRequest
 1384 00b4 813A      		cpi r24,lo8(-95)
 1385 00b6 01F0      		breq .+2
 1386 00b8 00C0      		rjmp .L135
 537:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1387               		.loc 1 537 0
 1388 00ba 8091 0000 		lds r24,USB_ControlRequest+4
 1389 00be 9091 0000 		lds r25,USB_ControlRequest+4+1
 1390 00c2 892B      		or r24,r25
 1391 00c4 01F0      		breq .+2
 1392 00c6 00C0      		rjmp .L135
 1393               	.LBB319:
 1394               	.LBB320:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1395               		.loc 3 444 0
 1396 00c8 8091 E800 		lds r24,232
 1397 00cc 877F      		andi r24,lo8(-9)
 1398 00ce 8093 E800 		sts 232,r24
 1399               	.L151:
 1400               	.LBE320:
 1401               	.LBE319:
 1402               	.LBB321:
 1403               	.LBB322:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1404               		.loc 3 407 0 discriminator 1
 1405 00d2 8091 E800 		lds r24,232
 1406               	.LBE322:
 1407               	.LBE321:
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1408               		.loc 1 539 0 discriminator 1
 1409 00d6 80FF      		sbrs r24,0
 1410 00d8 00C0      		rjmp .L151
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1411               		.loc 1 540 0
 1412 00da 8091 0000 		lds r24,keyboard_protocol
 1413               	.LVL104:
 1414 00de 00C0      		rjmp .L163
 1415               	.LVL105:
 1416               	.L142:
 548:./tmk_core/protocol/lufa/lufa.c ****             {
 1417               		.loc 1 548 0
 1418 00e0 8091 0000 		lds r24,USB_ControlRequest
 1419 00e4 8132      		cpi r24,lo8(33)
 1420 00e6 01F4      		brne .L135
 550:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1421               		.loc 1 550 0
 1422 00e8 8091 0000 		lds r24,USB_ControlRequest+4
 1423 00ec 9091 0000 		lds r25,USB_ControlRequest+4+1
 1424 00f0 892B      		or r24,r25
 1425 00f2 01F4      		brne .L135
 1426               	.LBB323:
 1427               	.LBB324:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1428               		.loc 3 444 0
 1429 00f4 8091 E800 		lds r24,232
 1430 00f8 877F      		andi r24,lo8(-9)
 1431 00fa 8093 E800 		sts 232,r24
 1432               	.LBE324:
 1433               	.LBE323:
 552:./tmk_core/protocol/lufa/lufa.c **** 
 1434               		.loc 1 552 0
 1435 00fe 0E94 0000 		call Endpoint_ClearStatusStage
 1436               	.LVL106:
 554:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1437               		.loc 1 554 0
 1438 0102 8091 0000 		lds r24,USB_ControlRequest+2
 1439 0106 8093 0000 		sts keyboard_protocol,r24
 555:./tmk_core/protocol/lufa/lufa.c ****                 }
 1440               		.loc 1 555 0
 1441 010a 0C94 0000 		jmp clear_keyboard
 1442               	.LVL107:
 1443               	.L141:
 561:./tmk_core/protocol/lufa/lufa.c ****             {
 1444               		.loc 1 561 0
 1445 010e 8091 0000 		lds r24,USB_ControlRequest
 1446 0112 8132      		cpi r24,lo8(33)
 1447 0114 01F4      		brne .L135
 1448               	.LBB325:
 1449               	.LBB326:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1450               		.loc 3 444 0
 1451 0116 8091 E800 		lds r24,232
 1452 011a 877F      		andi r24,lo8(-9)
 1453 011c 8093 E800 		sts 232,r24
 1454               	.LBE326:
 1455               	.LBE325:
 564:./tmk_core/protocol/lufa/lufa.c **** 
 1456               		.loc 1 564 0
 1457 0120 0E94 0000 		call Endpoint_ClearStatusStage
 1458               	.LVL108:
 566:./tmk_core/protocol/lufa/lufa.c ****             }
 1459               		.loc 1 566 0
 1460 0124 8091 0000 		lds r24,USB_ControlRequest+3
 1461 0128 8093 0000 		sts keyboard_idle,r24
 1462 012c 0895      		ret
 1463               	.L140:
 571:./tmk_core/protocol/lufa/lufa.c ****             {
 1464               		.loc 1 571 0
 1465 012e 8091 0000 		lds r24,USB_ControlRequest
 1466 0132 813A      		cpi r24,lo8(-95)
 1467 0134 01F4      		brne .L135
 1468               	.LBB327:
 1469               	.LBB328:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1470               		.loc 3 444 0
 1471 0136 8091 E800 		lds r24,232
 1472 013a 877F      		andi r24,lo8(-9)
 1473 013c 8093 E800 		sts 232,r24
 1474               	.L152:
 1475               	.LBE328:
 1476               	.LBE327:
 1477               	.LBB329:
 1478               	.LBB330:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1479               		.loc 3 407 0 discriminator 1
 1480 0140 8091 E800 		lds r24,232
 1481               	.LBE330:
 1482               	.LBE329:
 574:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1483               		.loc 1 574 0 discriminator 1
 1484 0144 80FF      		sbrs r24,0
 1485 0146 00C0      		rjmp .L152
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1486               		.loc 1 575 0
 1487 0148 8091 0000 		lds r24,keyboard_idle
 1488               	.L163:
 1489               	.LVL109:
 1490               	.LBB331:
 1491               	.LBB332:
 1492               		.loc 3 554 0
 1493 014c 8093 F100 		sts 241,r24
 1494               	.LBE332:
 1495               	.LBE331:
 1496               	.LBB333:
 1497               	.LBB334:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1498               		.loc 3 456 0
 1499 0150 8091 E800 		lds r24,232
 1500               	.LVL110:
 1501 0154 8E77      		andi r24,lo8(126)
 1502               	.LVL111:
 1503               	.L162:
 1504 0156 8093 E800 		sts 232,r24
 1505               	.LBE334:
 1506               	.LBE333:
 577:./tmk_core/protocol/lufa/lufa.c ****             }
 1507               		.loc 1 577 0
 1508 015a 0C94 0000 		jmp Endpoint_ClearStatusStage
 1509               	.LVL112:
 1510               	.L135:
 1511 015e 0895      		ret
 1512               		.cfi_endproc
 1513               	.LFE139:
 1515               		.section	.text.startup.main,"ax",@progbits
 1516               		.weak	main
 1518               	main:
 1519               	.LFB148:
 864:./tmk_core/protocol/lufa/lufa.c **** #else
 865:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 866:./tmk_core/protocol/lufa/lufa.c **** {
 867:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 868:./tmk_core/protocol/lufa/lufa.c **** }
 869:./tmk_core/protocol/lufa/lufa.c **** #endif
 870:./tmk_core/protocol/lufa/lufa.c **** 
 871:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 872:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 873:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 874:./tmk_core/protocol/lufa/lufa.c **** 
 875:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 876:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 877:./tmk_core/protocol/lufa/lufa.c **** {
 878:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 879:./tmk_core/protocol/lufa/lufa.c ****   {
 880:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 881:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 882:./tmk_core/protocol/lufa/lufa.c ****     {
 883:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 884:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 885:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 886:./tmk_core/protocol/lufa/lufa.c ****     },
 887:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 888:./tmk_core/protocol/lufa/lufa.c ****     {
 889:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 890:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 891:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 892:./tmk_core/protocol/lufa/lufa.c ****     },
 893:./tmk_core/protocol/lufa/lufa.c ****   },
 894:./tmk_core/protocol/lufa/lufa.c **** };
 895:./tmk_core/protocol/lufa/lufa.c **** 
 896:./tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 897:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 898:./tmk_core/protocol/lufa/lufa.c **** }
 899:./tmk_core/protocol/lufa/lufa.c **** 
 900:./tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 901:./tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 902:./tmk_core/protocol/lufa/lufa.c **** }
 903:./tmk_core/protocol/lufa/lufa.c **** 
 904:./tmk_core/protocol/lufa/lufa.c **** #endif
 905:./tmk_core/protocol/lufa/lufa.c **** 
 906:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 907:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 908:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 909:./tmk_core/protocol/lufa/lufa.c **** 
 910:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 911:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 912:./tmk_core/protocol/lufa/lufa.c ****  *
 913:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:./tmk_core/protocol/lufa/lufa.c ****  */
 915:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 916:./tmk_core/protocol/lufa/lufa.c **** {
 917:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 918:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 919:./tmk_core/protocol/lufa/lufa.c **** }
 920:./tmk_core/protocol/lufa/lufa.c **** 
 921:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 922:./tmk_core/protocol/lufa/lufa.c ****  *
 923:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 924:./tmk_core/protocol/lufa/lufa.c ****  */
 925:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 926:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 927:./tmk_core/protocol/lufa/lufa.c **** {
 928:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 929:./tmk_core/protocol/lufa/lufa.c **** }
 930:./tmk_core/protocol/lufa/lufa.c **** 
 931:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 932:./tmk_core/protocol/lufa/lufa.c ****  *
 933:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 934:./tmk_core/protocol/lufa/lufa.c ****  */
 935:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 936:./tmk_core/protocol/lufa/lufa.c **** {
 937:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 938:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 939:./tmk_core/protocol/lufa/lufa.c ****   if (count)
 940:./tmk_core/protocol/lufa/lufa.c ****   {
 941:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 942:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 943:./tmk_core/protocol/lufa/lufa.c ****   }
 944:./tmk_core/protocol/lufa/lufa.c **** }
 945:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 946:./tmk_core/protocol/lufa/lufa.c ****  *
 947:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 948:./tmk_core/protocol/lufa/lufa.c ****  */
 949:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 950:./tmk_core/protocol/lufa/lufa.c **** {
 951:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 952:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 953:./tmk_core/protocol/lufa/lufa.c **** 
 954:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 955:./tmk_core/protocol/lufa/lufa.c ****   {
 956:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 957:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 958:./tmk_core/protocol/lufa/lufa.c **** 
 959:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 960:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961:./tmk_core/protocol/lufa/lufa.c ****         return;
 962:./tmk_core/protocol/lufa/lufa.c ****     }
 963:./tmk_core/protocol/lufa/lufa.c **** 
 964:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 965:./tmk_core/protocol/lufa/lufa.c **** 
 966:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 967:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 968:./tmk_core/protocol/lufa/lufa.c **** 
 969:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 970:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 971:./tmk_core/protocol/lufa/lufa.c ****     }
 972:./tmk_core/protocol/lufa/lufa.c **** 
 973:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 974:./tmk_core/protocol/lufa/lufa.c ****   }
 975:./tmk_core/protocol/lufa/lufa.c **** }
 976:./tmk_core/protocol/lufa/lufa.c **** #endif
 977:./tmk_core/protocol/lufa/lufa.c **** 
 978:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 979:./tmk_core/protocol/lufa/lufa.c ****  * main
 980:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 981:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 982:./tmk_core/protocol/lufa/lufa.c ****  *
 983:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 984:./tmk_core/protocol/lufa/lufa.c ****  */
 985:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 986:./tmk_core/protocol/lufa/lufa.c **** {
 987:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 988:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 989:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 990:./tmk_core/protocol/lufa/lufa.c **** 
 991:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 992:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 993:./tmk_core/protocol/lufa/lufa.c **** 
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 995:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 996:./tmk_core/protocol/lufa/lufa.c **** }
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 999:./tmk_core/protocol/lufa/lufa.c ****  *
1000:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1001:./tmk_core/protocol/lufa/lufa.c ****  */
1002:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1003:./tmk_core/protocol/lufa/lufa.c **** {
1004:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1005:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1006:./tmk_core/protocol/lufa/lufa.c **** 
1007:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1008:./tmk_core/protocol/lufa/lufa.c **** 
1009:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1010:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1011:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1012:./tmk_core/protocol/lufa/lufa.c **** }
1013:./tmk_core/protocol/lufa/lufa.c **** 
1014:./tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1015:./tmk_core/protocol/lufa/lufa.c ****  *
1016:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1017:./tmk_core/protocol/lufa/lufa.c ****  */
1018:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1019:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1020:./tmk_core/protocol/lufa/lufa.c **** {
 1520               		.loc 1 1020 0
 1521               		.cfi_startproc
 1522               	/* prologue: function */
 1523               	/* frame size = 0 */
 1524               	/* stack size = 0 */
 1525               	.L__stack_usage = 0
 1526               	.LBB346:
 1527               	.LBB347:
 988:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1528               		.loc 1 988 0
 1529 0000 84B7      		in r24,0x34
 1530 0002 877F      		andi r24,lo8(-9)
 1531 0004 84BF      		out 0x34,r24
 1532               	.LBB348:
 1533               	.LBB349:
 1534               		.file 7 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\avr\\wdt.h"
   1:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    All rights reserved.
   4:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   5:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
   8:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions of source code must retain the above copyright
   9:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  11:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      the documentation and/or other materials provided with the
  14:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      distribution.
  15:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  16:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      contributors may be used to endorse or promote products derived
  18:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****      from this software without specific prior written permission.
  19:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  20:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  32:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /* $Id$ */
  33:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  34:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
  35:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  */
  37:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  38:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef _AVR_WDT_H_
  39:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _AVR_WDT_H_
  40:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  41:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <avr/io.h>
  42:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #include <stdint.h>
  43:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  44:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \file */
  45:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  48:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     This header file declares the interface to some inline macros
  49:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     to prevent the watchdog timer configuration from being
  51:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     accidentally altered by a crashing application, a special timed
  52:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     sequence is required in order to change it.  The macros within
  53:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     this header file handle the required sequence automatically
  54:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the manipulation.
  56:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  57:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \note Depending on the fuse configuration of the particular
  58:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     device, further restrictions might apply, in particular it might
  59:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     be disallowed to turn off the watchdog timer.
  60:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  61:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     timer remains active even after a system reset (except a power-on
  64:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     the following:
  68:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  69:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \code
  70:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <stdint.h>
  71:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     #include <avr/wdt.h>
  72:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  73:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  75:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void) \
  76:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((naked)) \
  77:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       __attribute__((section(".init3")));
  78:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     void get_mcusr(void)
  79:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     {
  80:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       mcusr_mirror = MCUSR;
  81:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       MCUSR = 0;
  82:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       wdt_disable();
  83:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     }
  84:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     \endcode
  85:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  86:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     clearing the watchdog reset flag before disabling the
  89:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     watchdog is required, according to the datasheet.
  90:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  91:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  92:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
  93:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
  94:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    a call to this instruction is required before the timer expires,
  96:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
  98:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
  99:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 101:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #ifndef __DOXYGEN__
 102:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 103:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDP3)
 104:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 106:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** # define _WD_PS3_MASK       0x00
 107:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 108:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 109:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTCSR)
 110:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(WDTCR)
 112:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 114:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 116:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 117:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(WDTOE)
 118:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 120:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif
 122:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 123:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif	/* !__DOXYGEN__ */
 124:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 125:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 126:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /**
 127:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \ingroup avr_watchdog
 128:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    through \c WDP3 bits).
 133:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 134:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 136:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 137:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 138:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined(__AVR_XMEGA__)
 139:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 140:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #if defined (WDT_CTRLA) && !defined(RAMPD)
 141:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 142:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 143:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 144:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 145:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 146:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"									"\n\t" \
 147:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]"		"\n\t" \
 148:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"				"\n\t" \
 149:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbr %[tmp], %[wdt_enable_timeout]"		"\n\t" \
 150:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"				"\n\t" \
 151:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"1:lds %[tmp], %[wdt_status_reg]"		"\n\t" \
 152:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sbrc %[tmp], %[wdt_syncbusy_bit]"		"\n\t" \
 153:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"rjmp 1b"								"\n\t" \
 154:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [tmp]					"=r" (temp) \
 155:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	: [ccp_reg]				"I"  (_SFR_IO_ADDR(CCP)), \
 156:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [ioreg_cen_mask]		"r"  ((uint8_t)CCP_IOREG_gc), \
 157:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_reg]				"n"  (_SFR_MEM_ADDR(WDT_CTRLA)), \
 158:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_enable_timeout]	"M"  (timeout), \
 159:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_status_reg]		"n"  (_SFR_MEM_ADDR(WDT_STATUS)), \
 160:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	  [wdt_syncbusy_bit]	"I"  (WDT_SYNCBUSY_bm) \
 161:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 162:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 163:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 164:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 165:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 166:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 167:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 168:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"wdr"								"\n\t" \
 169:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 170:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"lds %[tmp], %[wdt_reg]"			"\n\t" \
 171:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"cbr %[tmp], %[timeout_mask]"       "\n\t" \
 172:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	"sts %[wdt_reg], %[tmp]"			"\n\t" \
 173:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]            "=r" (temp) \
 174:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [ccp_reg]        "I" (_SFR_IO_ADDR(CCP)),       \
 175:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask] "r" ((uint8_t)CCP_IOREG_gc),   \
 176:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]        "n" (_SFR_MEM_ADDR(WDT_CTRLA)),\
 177:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [timeout_mask]   "I" (WDT_PERIOD_gm) \
 178:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 179:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 180:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 181:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else // defined (WDT_CTRLA) && !defined(RAMPD)
 182:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 183:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** /*
 184:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    wdt_enable(timeout) for xmega devices
 185:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 186:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    registers to the CCP register
 187:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** At the same time,
 188:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 189:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 190:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    3) set timeout (timeout)
 191:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 192:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 193:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****    sync is finished).
 194:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** */
 195:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(timeout) \
 196:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 197:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp; \
 198:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (         \
 199:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 200:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 201:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 202:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 203:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 204:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 205:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "rjmp 1b"                               "\n\t" \
 206:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 207:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [tmp]                "=r" (temp) \
 208:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 209:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 210:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 211:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 212:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 213:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 214:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 215:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 216:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 217:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** } while(0)
 218:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 219:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 220:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ (  \
 221:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 222:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 223:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 224:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 225:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 226:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : \
 227:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 228:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 229:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 230:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 231:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 232:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r0" \
 233:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** );
 234:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 235:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #endif // defined (WDT_CTRLA) && !defined(RAMPD)
 236:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 237:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(__AVR_TINY__)
 238:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 239:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_enable(value) \
 240:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 241:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 242:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 243:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 244:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 245:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 246:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 247:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /* no outputs */  \
 248:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 249:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 250:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 251:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 252:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 253:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 254:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** )
 255:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 256:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #define wdt_disable() \
 257:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** do { \
 258:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** uint8_t temp_wd; \
 259:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __asm__ __volatile__ ( \
 260:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 261:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cli" "\n\t"  \
 262:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "wdr" "\n\t"  \
 263:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 264:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 265:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 266:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 267:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 268:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : /*no output */ \
 269:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 270:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 271:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 272:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 273:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 274:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****     : "r16" \
 275:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** ); \
 276:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }while(0)
 277:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 278:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #elif defined(CCP)
 279:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 280:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 281:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 282:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 283:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 284:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 285:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 286:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 287:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 288:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 289:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 290:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 291:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 292:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 293:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 294:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 295:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 296:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 297:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 298:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 299:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 300:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 301:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 302:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 303:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 304:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 305:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 306:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 307:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 308:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 309:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 310:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 311:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 312:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 313:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 314:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 315:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 316:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 317:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 318:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 319:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 320:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 321:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 322:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 323:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 324:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 325:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 326:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 327:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 328:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 329:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 330:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 331:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 332:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 334:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 335:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 336:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 337:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 338:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 339:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****  	{
 340:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 341:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 342:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"cli" "\n\t"
 343:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"wdr" "\n\t"
 344:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 345:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 346:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 347:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: /* no outputs */
 348:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 349:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 350:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 351:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 352:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 353:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			: "r0"
 354:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 			);
 355:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 356:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 357:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 358:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 359:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 360:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 361:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 362:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 363:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 364:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 365:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 366:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 367:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 368:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 369:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 370:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 371:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 372:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 373:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 374:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 375:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 376:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 377:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 378:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 379:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 380:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 381:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 382:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 383:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 384:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 385:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 386:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 387:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 388:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 389:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 390:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 391:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 392:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 393:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 394:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 395:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 396:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 397:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 398:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 399:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 400:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 401:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 402:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 403:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 404:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 405:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 406:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 407:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 408:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 409:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 410:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 411:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 412:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 413:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 414:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 415:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 416:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 417:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 418:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 419:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 420:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 421:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 422:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 423:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 424:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 425:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 426:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 427:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t temp_wd;
 428:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         __asm__ __volatile__ (
 429:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 431:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 432:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 433:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 434:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 435:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 436:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 437:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /*no output */
 438:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 439:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 440:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 441:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 442:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 443:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 444:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				);
 445:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 446:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 447:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 448:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** #else
 449:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 450:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 451:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 452:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_enable (const uint8_t value)
 453:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 454:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 455:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 456:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 457:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 458:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 459:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 460:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %1" "\n\t"
 461:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 462:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %0, %2" "\n \t"
 463:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 464:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 465:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 466:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 467:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 468:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 469:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 470:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 471:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 472:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 473:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 474:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 475:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli" "\n\t"
 476:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr" "\n\t"
 477:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %1" "\n\t"
 478:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 479:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"sts %0, %2" "\n \t"
 480:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: /* no outputs */
 481:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 482:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 483:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 484:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 485:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 486:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 487:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 488:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** }
 489:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 
 490:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** static __inline__
 491:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** __attribute__ ((__always_inline__))
 492:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** void wdt_disable (void)
 493:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** {
 494:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 495:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 496:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 497:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 498:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 499:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"cli"                        "\n\t"
 500:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"wdr"                        "\n\t"
 501:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 502:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 503:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 504:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 505:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 506:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 507:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 508:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 509:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 				: "r0"
 510:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		);
 511:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	}
 512:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	else
 513:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 	{
 514:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h ****         uint8_t register temp_reg;
 515:c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h **** 		__asm__ __volatile__ (
 1535               		.loc 7 515 0
 1536               	/* #APP */
 1537               	 ;  515 "c:\msys32\home\683654\qmk_utils\avr8-gnu-toolchain\avr\include\avr\wdt.h" 1
 1538 0006 0FB6      		in __tmp_reg__,__SREG__
 1539 0008 F894      		cli
 1540 000a A895      		wdr
 1541 000c 8091 6000 		lds r24,96
 1542 0010 8861      		ori r24,24
 1543 0012 8093 6000 		sts 96,r24
 1544 0016 1092 6000 		sts 96,__zero_reg__
 1545 001a 0FBE      		out __SREG__,__tmp_reg__
 1546               		
 1547               	 ;  0 "" 2
 1548               	.LVL113:
 1549               	/* #NOAPP */
 1550               	.LBE349:
 1551               	.LBE348:
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1552               		.loc 1 994 0
 1553 001c 80E8      		ldi r24,lo8(-128)
 1554 001e 8093 6100 		sts 97,r24
 995:./tmk_core/protocol/lufa/lufa.c **** }
 1555               		.loc 1 995 0
 1556 0022 1092 6100 		sts 97,__zero_reg__
 1557               	.LBE347:
 1558               	.LBE346:
1021:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1022:./tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1023:./tmk_core/protocol/lufa/lufa.c **** #endif
1024:./tmk_core/protocol/lufa/lufa.c **** 
1025:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
1026:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1559               		.loc 1 1026 0
 1560 0026 0E94 0000 		call keyboard_setup
 1561               	.LVL114:
 1562               	.LBB350:
 1563               	.LBB351:
1005:./tmk_core/protocol/lufa/lufa.c **** 
 1564               		.loc 1 1005 0
 1565 002a 0E94 0000 		call USB_Disable
 1566               	.LVL115:
1007:./tmk_core/protocol/lufa/lufa.c **** 
 1567               		.loc 1 1007 0
 1568 002e 0E94 0000 		call USB_Init
 1569               	.LVL116:
 1570               	.LBB352:
 1571               	.LBB353:
 1572               	.LBB354:
 1573               		.loc 6 113 0
 1574 0032 8091 E200 		lds r24,226
 1575 0036 8460      		ori r24,lo8(4)
 1576 0038 8093 E200 		sts 226,r24
 1577               	.LBE354:
 1578               	.LBE353:
 1579               	.LBE352:
1011:./tmk_core/protocol/lufa/lufa.c **** }
 1580               		.loc 1 1011 0
 1581 003c 80E0      		ldi r24,lo8(gs(sendchar))
 1582 003e 90E0      		ldi r25,hi8(gs(sendchar))
 1583 0040 0E94 0000 		call print_set_sendchar
 1584               	.LVL117:
 1585               	.LBE351:
 1586               	.LBE350:
1027:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
1028:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1587               		.loc 1 1028 0
 1588               	/* #APP */
 1589               	 ;  1028 "./tmk_core/protocol/lufa/lufa.c" 1
 1590 0044 7894      		sei
 1591               	 ;  0 "" 2
1029:./tmk_core/protocol/lufa/lufa.c **** 
1030:./tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1031:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1035:./tmk_core/protocol/lufa/lufa.c **** 
1036:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1037:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1038:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1039:./tmk_core/protocol/lufa/lufa.c ****             ;
1040:./tmk_core/protocol/lufa/lufa.c ****     #else
1041:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1042:./tmk_core/protocol/lufa/lufa.c ****     #endif
1043:./tmk_core/protocol/lufa/lufa.c ****     }
1044:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1045:./tmk_core/protocol/lufa/lufa.c **** #else
1046:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1592               		.loc 1 1046 0
 1593               	/* #NOAPP */
 1594 0046 0E94 0000 		call USB_USBTask
 1595               	.LVL118:
1047:./tmk_core/protocol/lufa/lufa.c **** #endif
1048:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1049:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1596               		.loc 1 1049 0
 1597 004a 0E94 0000 		call keyboard_init
 1598               	.LVL119:
1050:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1599               		.loc 1 1050 0
 1600 004e 80E0      		ldi r24,lo8(lufa_driver)
 1601 0050 90E0      		ldi r25,hi8(lufa_driver)
 1602 0052 0E94 0000 		call host_set_driver
 1603               	.LVL120:
1051:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1052:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1053:./tmk_core/protocol/lufa/lufa.c **** #endif
1054:./tmk_core/protocol/lufa/lufa.c **** 
1055:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1056:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1057:./tmk_core/protocol/lufa/lufa.c **** #endif
1058:./tmk_core/protocol/lufa/lufa.c **** 
1059:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 1604               		.loc 1 1059 0
 1605 0056 80E0      		ldi r24,lo8(__c.5755)
 1606 0058 90E0      		ldi r25,hi8(__c.5755)
 1607 005a 0E94 0000 		call xputs
 1608               	.LVL121:
 1609               	.L167:
1060:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1061:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1062:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1610               		.loc 1 1062 0
 1611 005e 8091 0000 		lds r24,USB_DeviceState
 1612 0062 8530      		cpi r24,lo8(5)
 1613 0064 01F4      		brne .L175
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1614               		.loc 1 1063 0
 1615 0066 80E0      		ldi r24,lo8(__c.5757)
 1616 0068 90E0      		ldi r25,hi8(__c.5757)
 1617 006a 0E94 0000 		call xputs
 1618               	.LVL122:
1064:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 1619               		.loc 1 1064 0
 1620 006e 0E94 0000 		call suspend_power_down
 1621               	.LVL123:
1065:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1622               		.loc 1 1065 0
 1623 0072 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1624 0076 8823      		tst r24
 1625 0078 01F0      		breq .L167
 1626               		.loc 1 1065 0 is_stmt 0 discriminator 1
 1627 007a 0E94 0000 		call suspend_wakeup_condition
 1628               	.LVL124:
 1629 007e 8823      		tst r24
 1630 0080 01F0      		breq .L167
1066:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1631               		.loc 1 1066 0 is_stmt 1
 1632 0082 0E94 0000 		call USB_Device_SendRemoteWakeup
 1633               	.LVL125:
 1634 0086 00C0      		rjmp .L167
 1635               	.L175:
1067:./tmk_core/protocol/lufa/lufa.c ****             }
1068:./tmk_core/protocol/lufa/lufa.c ****         }
1069:./tmk_core/protocol/lufa/lufa.c ****         #endif
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1636               		.loc 1 1071 0
 1637 0088 0E94 0000 		call keyboard_task
 1638               	.LVL126:
1072:./tmk_core/protocol/lufa/lufa.c **** 
1073:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1074:./tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1075:./tmk_core/protocol/lufa/lufa.c **** #endif
1076:./tmk_core/protocol/lufa/lufa.c **** 
1077:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1078:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
1079:./tmk_core/protocol/lufa/lufa.c **** #endif
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1082:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1083:./tmk_core/protocol/lufa/lufa.c **** #endif
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1086:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1087:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1091:./tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1092:./tmk_core/protocol/lufa/lufa.c **** #endif
1093:./tmk_core/protocol/lufa/lufa.c **** 
1094:./tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1095:./tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1096:./tmk_core/protocol/lufa/lufa.c **** #endif
1097:./tmk_core/protocol/lufa/lufa.c **** 
1098:./tmk_core/protocol/lufa/lufa.c ****     }
 1639               		.loc 1 1098 0
 1640 008c 00C0      		rjmp .L167
 1641               		.cfi_endproc
 1642               	.LFE148:
 1644               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1645               	.global	CALLBACK_USB_GetDescriptor
 1647               	CALLBACK_USB_GetDescriptor:
 1648               	.LFB149:
1099:./tmk_core/protocol/lufa/lufa.c **** }
1100:./tmk_core/protocol/lufa/lufa.c **** 
1101:./tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1102:./tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1103:./tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1104:./tmk_core/protocol/lufa/lufa.c **** {
 1649               		.loc 1 1104 0
 1650               		.cfi_startproc
 1651               	.LVL127:
 1652               	/* prologue: function */
 1653               	/* frame size = 0 */
 1654               	/* stack size = 0 */
 1655               	.L__stack_usage = 0
1105:./tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1656               		.loc 1 1105 0
 1657 0000 0C94 0000 		jmp get_usb_descriptor
 1658               	.LVL128:
 1659               		.cfi_endproc
 1660               	.LFE149:
 1662               		.section	.progmem.data.__c.5757,"a",@progbits
 1665               	__c.5757:
 1666 0000 5B73 5D00 		.string	"[s]"
 1667               		.section	.progmem.data.__c.5755,"a",@progbits
 1670               	__c.5755:
 1671 0000 4B65 7962 		.string	"Keyboard start.\n"
 1671      6F61 7264 
 1671      2073 7461 
 1671      7274 2E0A 
 1671      00
 1672               		.section	.bss.timeouted.5724,"aw",@nobits
 1675               	timeouted.5724:
 1676 0000 00        		.zero	1
 1677               		.section	.bss.count.5655,"aw",@nobits
 1680               	count.5655:
 1681 0000 00        		.zero	1
 1682               		.section	.progmem.data.__c.5649,"a",@progbits
 1685               	__c.5649:
 1686 0000 5B57 5D00 		.string	"[W]"
 1687               		.section	.progmem.data.__c.5645,"a",@progbits
 1690               	__c.5645:
 1691 0000 5B53 5D00 		.string	"[S]"
 1692               		.section	.progmem.data.__c.5641,"a",@progbits
 1695               	__c.5641:
 1696 0000 5B52 5D00 		.string	"[R]"
 1697               		.section	.progmem.data.__c.5636,"a",@progbits
 1700               	__c.5636:
 1701 0000 5B44 5D00 		.string	"[D]"
 1702               		.section	.progmem.data.__c.5631,"a",@progbits
 1705               	__c.5631:
 1706 0000 5B43 5D00 		.string	"[C]"
 1707               		.section	.bss.console_flush,"aw",@nobits
 1710               	console_flush:
 1711 0000 00        		.zero	1
 1712               	.global	lufa_driver
 1713               		.section	.data.lufa_driver,"aw",@progbits
 1716               	lufa_driver:
 1717 0000 0000      		.word	gs(keyboard_leds)
 1718 0002 0000      		.word	gs(send_keyboard)
 1719 0004 0000      		.word	gs(send_mouse)
 1720 0006 0000      		.word	gs(send_system)
 1721 0008 0000      		.word	gs(send_consumer)
 1722               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1725               	keyboard_report_sent:
 1726 0000 0000 0000 		.zero	8
 1726      0000 0000 
 1727               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1730               	keyboard_led_stats:
 1731 0000 00        		.zero	1
 1732               	.global	keyboard_protocol
 1733               		.section	.data.keyboard_protocol,"aw",@progbits
 1736               	keyboard_protocol:
 1737 0000 01        		.byte	1
 1738               	.global	keyboard_idle
 1739               		.section	.bss.keyboard_idle,"aw",@nobits
 1742               	keyboard_idle:
 1743 0000 00        		.zero	1
 1744               		.text
 1745               	.Letext0:
 1746               		.file 8 "c:\\msys32\\home\\683654\\qmk_utils\\avr8-gnu-toolchain\\avr\\include\\stdint.h"
 1747               		.file 9 "./tmk_core/common/report.h"
 1748               		.file 10 "./tmk_core/common/host_driver.h"
 1749               		.file 11 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1750               		.file 12 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1751               		.file 13 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1752               		.file 14 "./tmk_core/protocol/lufa/lufa.h"
 1753               		.file 15 "./tmk_core/protocol/lufa/outputselect.h"
 1754               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 1755               		.file 17 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1756               		.file 18 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1757               		.file 19 "./tmk_core/common/action_util.h"
 1758               		.file 20 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1759               		.file 21 "./tmk_core/common/suspend.h"
 1760               		.file 22 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1761               		.file 23 "./tmk_core/common/action.h"
 1762               		.file 24 "./tmk_core/common/avr/xprintf.h"
 1763               		.file 25 "./tmk_core/common/print.h"
 1764               		.file 26 "./tmk_core/common/keyboard.h"
 1765               		.file 27 "./tmk_core/common/host.h"
 1766               		.file 28 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:00000000 lufa.c
C:\msys32\tmp\cc3F17Xi.s:2      *ABS*:0000003e __SP_H__
C:\msys32\tmp\cc3F17Xi.s:3      *ABS*:0000003d __SP_L__
C:\msys32\tmp\cc3F17Xi.s:4      *ABS*:0000003f __SREG__
C:\msys32\tmp\cc3F17Xi.s:5      *ABS*:00000000 __tmp_reg__
C:\msys32\tmp\cc3F17Xi.s:6      *ABS*:00000001 __zero_reg__
C:\msys32\tmp\cc3F17Xi.s:12     .text.keyboard_leds:00000000 keyboard_leds
C:\msys32\tmp\cc3F17Xi.s:1730   .bss.keyboard_led_stats:00000000 keyboard_led_stats
C:\msys32\tmp\cc3F17Xi.s:30     .text.sendchar:00000000 sendchar
C:\msys32\tmp\cc3F17Xi.s:1710   .bss.console_flush:00000000 console_flush
C:\msys32\tmp\cc3F17Xi.s:1675   .bss.timeouted.5724:00000000 timeouted.5724
C:\msys32\tmp\cc3F17Xi.s:291    .text.send_consumer:00000000 send_consumer
C:\msys32\tmp\cc3F17Xi.s:423    .text.send_system:00000000 send_system
C:\msys32\tmp\cc3F17Xi.s:544    .text.send_mouse:00000000 send_mouse
C:\msys32\tmp\cc3F17Xi.s:651    .text.send_keyboard:00000000 send_keyboard
C:\msys32\tmp\cc3F17Xi.s:1725   .bss.keyboard_report_sent:00000000 keyboard_report_sent
C:\msys32\tmp\cc3F17Xi.s:769    .text.rgblight_toggle:00000000 rgblight_toggle
C:\msys32\tmp\cc3F17Xi.s:785    .text.rgblight_step:00000000 rgblight_step
C:\msys32\tmp\cc3F17Xi.s:800    .text.rgblight_step_reverse:00000000 rgblight_step_reverse
C:\msys32\tmp\cc3F17Xi.s:815    .text.rgblight_increase_hue:00000000 rgblight_increase_hue
C:\msys32\tmp\cc3F17Xi.s:830    .text.rgblight_decrease_hue:00000000 rgblight_decrease_hue
C:\msys32\tmp\cc3F17Xi.s:845    .text.rgblight_increase_sat:00000000 rgblight_increase_sat
C:\msys32\tmp\cc3F17Xi.s:860    .text.rgblight_decrease_sat:00000000 rgblight_decrease_sat
C:\msys32\tmp\cc3F17Xi.s:875    .text.rgblight_increase_val:00000000 rgblight_increase_val
C:\msys32\tmp\cc3F17Xi.s:890    .text.rgblight_decrease_val:00000000 rgblight_decrease_val
C:\msys32\tmp\cc3F17Xi.s:905    .text.rgblight_increase_speed:00000000 rgblight_increase_speed
C:\msys32\tmp\cc3F17Xi.s:920    .text.rgblight_decrease_speed:00000000 rgblight_decrease_speed
C:\msys32\tmp\cc3F17Xi.s:935    .text.EVENT_USB_Device_Connect:00000000 EVENT_USB_Device_Connect
C:\msys32\tmp\cc3F17Xi.s:1705   .progmem.data.__c.5631:00000000 __c.5631
C:\msys32\tmp\cc3F17Xi.s:978    .text.EVENT_USB_Device_Disconnect:00000000 EVENT_USB_Device_Disconnect
C:\msys32\tmp\cc3F17Xi.s:1700   .progmem.data.__c.5636:00000000 __c.5636
C:\msys32\tmp\cc3F17Xi.s:1000   .text.EVENT_USB_Device_Reset:00000000 EVENT_USB_Device_Reset
C:\msys32\tmp\cc3F17Xi.s:1695   .progmem.data.__c.5641:00000000 __c.5641
C:\msys32\tmp\cc3F17Xi.s:1019   .text.EVENT_USB_Device_Suspend:00000000 EVENT_USB_Device_Suspend
C:\msys32\tmp\cc3F17Xi.s:1690   .progmem.data.__c.5645:00000000 __c.5645
C:\msys32\tmp\cc3F17Xi.s:1038   .text.EVENT_USB_Device_WakeUp:00000000 EVENT_USB_Device_WakeUp
C:\msys32\tmp\cc3F17Xi.s:1685   .progmem.data.__c.5649:00000000 __c.5649
C:\msys32\tmp\cc3F17Xi.s:1060   .text.EVENT_USB_Device_StartOfFrame:00000000 EVENT_USB_Device_StartOfFrame
C:\msys32\tmp\cc3F17Xi.s:1680   .bss.count.5655:00000000 count.5655
C:\msys32\tmp\cc3F17Xi.s:1198   .text.EVENT_USB_Device_ConfigurationChanged:00000000 EVENT_USB_Device_ConfigurationChanged
C:\msys32\tmp\cc3F17Xi.s:1250   .text.EVENT_USB_Device_ControlRequest:00000000 EVENT_USB_Device_ControlRequest
C:\msys32\tmp\cc3F17Xi.s:1736   .data.keyboard_protocol:00000000 keyboard_protocol
C:\msys32\tmp\cc3F17Xi.s:1742   .bss.keyboard_idle:00000000 keyboard_idle
C:\msys32\tmp\cc3F17Xi.s:1518   .text.startup.main:00000000 main
C:\msys32\tmp\cc3F17Xi.s:1716   .data.lufa_driver:00000000 lufa_driver
C:\msys32\tmp\cc3F17Xi.s:1670   .progmem.data.__c.5755:00000000 __c.5755
C:\msys32\tmp\cc3F17Xi.s:1665   .progmem.data.__c.5757:00000000 __c.5757
C:\msys32\tmp\cc3F17Xi.s:1647   .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
USB_DeviceState
where_to_send
Endpoint_Write_Stream_LE
xputs
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
__udivmodqi4
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_Write_Control_Stream_LE
Endpoint_ClearStatusStage
clear_keyboard
keyboard_setup
print_set_sendchar
USB_USBTask
keyboard_init
host_set_driver
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
keyboard_task
get_usb_descriptor
__do_copy_data
__do_clear_bss
