   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB28:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  19:quantum/quantum.c **** #include "outputselect.h"
  20:quantum/quantum.c **** #endif
  21:quantum/quantum.c **** 
  22:quantum/quantum.c **** #ifndef TAPPING_TERM
  23:quantum/quantum.c **** #define TAPPING_TERM 200
  24:quantum/quantum.c **** #endif
  25:quantum/quantum.c **** 
  26:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  27:quantum/quantum.c **** #define BREATHING_PERIOD 6
  28:quantum/quantum.c **** #endif
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** #include "backlight.h"
  31:quantum/quantum.c **** extern backlight_config_t backlight_config;
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  34:quantum/quantum.c **** #include "fauxclicky.h"
  35:quantum/quantum.c **** #endif
  36:quantum/quantum.c **** 
  37:quantum/quantum.c **** #ifdef API_ENABLE
  38:quantum/quantum.c **** #include "api.h"
  39:quantum/quantum.c **** #endif
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** #ifdef MIDI_ENABLE
  42:quantum/quantum.c **** #include "process_midi.h"
  43:quantum/quantum.c **** #endif
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  46:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  47:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  48:quantum/quantum.c ****   #endif
  49:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  50:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  51:quantum/quantum.c ****   #endif
  52:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  53:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  54:quantum/quantum.c ****   #endif
  55:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  56:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  57:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  58:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  59:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  60:quantum/quantum.c ****   #endif
  61:quantum/quantum.c **** #endif
  62:quantum/quantum.c **** 
  63:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 63 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 63 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  64:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 64 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 64 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  65:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  66:quantum/quantum.c ****     break;
  48               		.loc 1 66 5 is_stmt 1 view .LVU4
  67:quantum/quantum.c ****   default:
  68:quantum/quantum.c ****     return;
  69:quantum/quantum.c ****   }
  70:quantum/quantum.c **** 
  71:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 71 3 view .LVU5
  50               		.loc 1 71 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  72:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 72 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  73:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 73 3 view .LVU8
  60               		.loc 1 73 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  74:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 74 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  75:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 75 3 view .LVU11
  70               		.loc 1 75 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  76:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 76 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  77:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 77 3 view .LVU14
  80               		.loc 1 77 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  78:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 78 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  79:quantum/quantum.c **** 
  80:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 80 3 view .LVU17
  90               		.loc 1 80 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  81:quantum/quantum.c **** 
  82:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 82 3 is_stmt 1 view .LVU19
  83:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 83 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  84:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 84 3 view .LVU21
  85:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 85 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  86:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 86 3 view .LVU23
  87:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 87 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  88:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 88 3 view .LVU25
  89:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 89 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  90:quantum/quantum.c **** }
 117               		.loc 1 90 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 90 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  89:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 89 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 90 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 90 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 90 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE28:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB29:
  91:quantum/quantum.c **** 
  92:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 92 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  93:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 93 5 view .LVU34
 155               		.loc 1 93 19 is_stmt 0 view .LVU35
 156 0000 8770      		andi r24,lo8(7)
 157               	.LVL15:
 158               		.loc 1 93 5 view .LVU36
 159 0002 91E0      		ldi r25,lo8(1)
 160 0004 00C0      		rjmp 2f
 161               		1:
 162 0006 990F      		lsl r25
 163               		2:
 164 0008 8A95      		dec r24
 165 000a 02F4      		brpl 1b
 166 000c 892F      		mov r24,r25
 167 000e 0E94 0000 		call add_weak_mods
 168               	.LVL16:
  94:quantum/quantum.c ****     send_keyboard_report();
 169               		.loc 1 94 5 is_stmt 1 view .LVU37
 170 0012 0C94 0000 		jmp send_keyboard_report
 171               	.LVL17:
 172               		.cfi_endproc
 173               	.LFE29:
 175               		.section	.text.qk_register_mods,"ax",@progbits
 177               	qk_register_mods:
 178               	.LFB96:
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184 0000 0C94 0000 		jmp qk_register_weak_mods
 185               		.cfi_endproc
 186               	.LFE96:
 188               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 190               	qk_unregister_weak_mods:
 191               	.LVL18:
 192               	.LFB30:
  95:quantum/quantum.c **** }
  96:quantum/quantum.c **** 
  97:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 193               		.loc 1 97 56 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
  98:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 199               		.loc 1 98 5 view .LVU39
 200               		.loc 1 98 19 is_stmt 0 view .LVU40
 201 0000 8770      		andi r24,lo8(7)
 202               	.LVL19:
 203               		.loc 1 98 5 view .LVU41
 204 0002 91E0      		ldi r25,lo8(1)
 205 0004 00C0      		rjmp 2f
 206               		1:
 207 0006 990F      		lsl r25
 208               		2:
 209 0008 8A95      		dec r24
 210 000a 02F4      		brpl 1b
 211 000c 892F      		mov r24,r25
 212 000e 0E94 0000 		call del_weak_mods
 213               	.LVL20:
  99:quantum/quantum.c ****     send_keyboard_report();
 214               		.loc 1 99 5 is_stmt 1 view .LVU42
 215 0012 0C94 0000 		jmp send_keyboard_report
 216               	.LVL21:
 217               		.cfi_endproc
 218               	.LFE30:
 220               		.section	.text.qk_unregister_mods,"ax",@progbits
 222               	qk_unregister_mods:
 223               	.LFB98:
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229 0000 0C94 0000 		jmp qk_unregister_weak_mods
 230               		.cfi_endproc
 231               	.LFE98:
 233               		.section	.text.rgblight_toggle,"ax",@progbits
 234               		.weak	rgblight_toggle
 236               	rgblight_toggle:
 237               	.LFB10:
 238               		.file 2 "quantum/rgb.h"
   1:quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:quantum/rgb.h ****  *
   3:quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgb.h ****  * (at your option) any later version.
   7:quantum/rgb.h ****  *
   8:quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgb.h ****  * GNU General Public License for more details.
  12:quantum/rgb.h ****  *
  13:quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgb.h ****  */
  16:quantum/rgb.h **** 
  17:quantum/rgb.h **** #ifndef RGB_H
  18:quantum/rgb.h **** #define RGB_H
  19:quantum/rgb.h **** 
  20:quantum/rgb.h **** __attribute__((weak))
  21:quantum/rgb.h **** void rgblight_toggle(void) {};
 239               		.loc 2 21 28 view -0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
 245               		.loc 2 21 29 view .LVU44
 246               	/* epilogue start */
 247               		.loc 2 21 1 is_stmt 0 view .LVU45
 248 0000 0895      		ret
 249               		.cfi_endproc
 250               	.LFE10:
 252               		.section	.text.rgblight_step,"ax",@progbits
 253               		.weak	rgblight_step
 255               	rgblight_step:
 256               	.LFB66:
 257               		.cfi_startproc
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 262               	/* epilogue start */
 263 0000 0895      		ret
 264               		.cfi_endproc
 265               	.LFE66:
 267               		.section	.text.rgblight_step_reverse,"ax",@progbits
 268               		.weak	rgblight_step_reverse
 270               	rgblight_step_reverse:
 271               	.LFB68:
 272               		.cfi_startproc
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 277               	/* epilogue start */
 278 0000 0895      		ret
 279               		.cfi_endproc
 280               	.LFE68:
 282               		.section	.text.rgblight_increase_hue,"ax",@progbits
 283               		.weak	rgblight_increase_hue
 285               	rgblight_increase_hue:
 286               	.LFB70:
 287               		.cfi_startproc
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 0 */
 291               	.L__stack_usage = 0
 292               	/* epilogue start */
 293 0000 0895      		ret
 294               		.cfi_endproc
 295               	.LFE70:
 297               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 298               		.weak	rgblight_decrease_hue
 300               	rgblight_decrease_hue:
 301               	.LFB72:
 302               		.cfi_startproc
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 0 */
 306               	.L__stack_usage = 0
 307               	/* epilogue start */
 308 0000 0895      		ret
 309               		.cfi_endproc
 310               	.LFE72:
 312               		.section	.text.rgblight_increase_sat,"ax",@progbits
 313               		.weak	rgblight_increase_sat
 315               	rgblight_increase_sat:
 316               	.LFB74:
 317               		.cfi_startproc
 318               	/* prologue: function */
 319               	/* frame size = 0 */
 320               	/* stack size = 0 */
 321               	.L__stack_usage = 0
 322               	/* epilogue start */
 323 0000 0895      		ret
 324               		.cfi_endproc
 325               	.LFE74:
 327               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 328               		.weak	rgblight_decrease_sat
 330               	rgblight_decrease_sat:
 331               	.LFB76:
 332               		.cfi_startproc
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 0 */
 336               	.L__stack_usage = 0
 337               	/* epilogue start */
 338 0000 0895      		ret
 339               		.cfi_endproc
 340               	.LFE76:
 342               		.section	.text.rgblight_increase_val,"ax",@progbits
 343               		.weak	rgblight_increase_val
 345               	rgblight_increase_val:
 346               	.LFB78:
 347               		.cfi_startproc
 348               	/* prologue: function */
 349               	/* frame size = 0 */
 350               	/* stack size = 0 */
 351               	.L__stack_usage = 0
 352               	/* epilogue start */
 353 0000 0895      		ret
 354               		.cfi_endproc
 355               	.LFE78:
 357               		.section	.text.rgblight_decrease_val,"ax",@progbits
 358               		.weak	rgblight_decrease_val
 360               	rgblight_decrease_val:
 361               	.LFB80:
 362               		.cfi_startproc
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 0 */
 366               	.L__stack_usage = 0
 367               	/* epilogue start */
 368 0000 0895      		ret
 369               		.cfi_endproc
 370               	.LFE80:
 372               		.section	.text.rgblight_increase_speed,"ax",@progbits
 373               		.weak	rgblight_increase_speed
 375               	rgblight_increase_speed:
 376               	.LFB82:
 377               		.cfi_startproc
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 0 */
 381               	.L__stack_usage = 0
 382               	/* epilogue start */
 383 0000 0895      		ret
 384               		.cfi_endproc
 385               	.LFE82:
 387               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 388               		.weak	rgblight_decrease_speed
 390               	rgblight_decrease_speed:
 391               	.LFB84:
 392               		.cfi_startproc
 393               	/* prologue: function */
 394               	/* frame size = 0 */
 395               	/* stack size = 0 */
 396               	.L__stack_usage = 0
 397               	/* epilogue start */
 398 0000 0895      		ret
 399               		.cfi_endproc
 400               	.LFE84:
 402               		.section	.text.register_code16,"ax",@progbits
 403               	.global	register_code16
 405               	register_code16:
 406               	.LVL22:
 407               	.LFB33:
 100:quantum/quantum.c **** }
 101:quantum/quantum.c **** 
 102:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 103:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 104:quantum/quantum.c ****     send_keyboard_report();
 105:quantum/quantum.c **** }
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 108:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 109:quantum/quantum.c ****     send_keyboard_report();
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** void register_code16 (uint16_t code) {
 408               		.loc 1 112 38 is_stmt 1 view -0
 409               		.cfi_startproc
 410               		.loc 1 112 38 is_stmt 0 view .LVU47
 411 0000 CF93      		push r28
 412               	.LCFI4:
 413               		.cfi_def_cfa_offset 3
 414               		.cfi_offset 28, -2
 415 0002 DF93      		push r29
 416               	.LCFI5:
 417               		.cfi_def_cfa_offset 4
 418               		.cfi_offset 29, -3
 419               	/* prologue: function */
 420               	/* frame size = 0 */
 421               	/* stack size = 2 */
 422               	.L__stack_usage = 2
 423 0004 EC01      		movw r28,r24
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 424               		.loc 1 113 3 is_stmt 1 view .LVU48
 425               		.loc 1 113 7 is_stmt 0 view .LVU49
 426 0006 805E      		subi r24,-32
 427 0008 9109      		sbc r25,__zero_reg__
 428               	.LVL23:
 429               		.loc 1 113 6 view .LVU50
 430 000a 0897      		sbiw r24,8
 431 000c 00F0      		brlo .L37
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 115:quantum/quantum.c ****   } else {
 116:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 432               		.loc 1 116 7 discriminator 1 view .LVU51
 433 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 434 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 435               		.loc 1 113 20 discriminator 1 view .LVU52
 436 0012 2097      		sbiw r28,0
 437 0014 01F4      		brne .L40
 438               	.L37:
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 439               		.loc 1 114 7 is_stmt 1 view .LVU53
 440 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 441 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 442               	.L40:
 443               		.loc 1 116 7 is_stmt 0 view .LVU54
 444 001a CE01      		movw r24,r28
 445 001c 0E94 0000 		call do_code16
 446               	.LVL24:
 117:quantum/quantum.c ****   }
 118:quantum/quantum.c ****   register_code (code);
 447               		.loc 1 118 3 is_stmt 1 view .LVU55
 448 0020 8C2F      		mov r24,r28
 449               	/* epilogue start */
 119:quantum/quantum.c **** }
 450               		.loc 1 119 1 is_stmt 0 view .LVU56
 451 0022 DF91      		pop r29
 452 0024 CF91      		pop r28
 453               	.LVL25:
 118:quantum/quantum.c **** }
 454               		.loc 1 118 3 view .LVU57
 455 0026 0C94 0000 		jmp register_code
 456               	.LVL26:
 457               		.cfi_endproc
 458               	.LFE33:
 460               		.section	.text.unregister_code16,"ax",@progbits
 461               	.global	unregister_code16
 463               	unregister_code16:
 464               	.LVL27:
 465               	.LFB34:
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 466               		.loc 1 121 40 is_stmt 1 view -0
 467               		.cfi_startproc
 468               		.loc 1 121 40 is_stmt 0 view .LVU59
 469 0000 CF93      		push r28
 470               	.LCFI6:
 471               		.cfi_def_cfa_offset 3
 472               		.cfi_offset 28, -2
 473 0002 DF93      		push r29
 474               	.LCFI7:
 475               		.cfi_def_cfa_offset 4
 476               		.cfi_offset 29, -3
 477               	/* prologue: function */
 478               	/* frame size = 0 */
 479               	/* stack size = 2 */
 480               	.L__stack_usage = 2
 481 0004 EC01      		movw r28,r24
 122:quantum/quantum.c ****   unregister_code (code);
 482               		.loc 1 122 3 is_stmt 1 view .LVU60
 483 0006 0E94 0000 		call unregister_code
 484               	.LVL28:
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 485               		.loc 1 123 3 view .LVU61
 486               		.loc 1 123 7 is_stmt 0 view .LVU62
 487 000a CE01      		movw r24,r28
 488 000c 805E      		subi r24,-32
 489 000e 9109      		sbc r25,__zero_reg__
 490               		.loc 1 123 6 view .LVU63
 491 0010 0897      		sbiw r24,8
 492 0012 00F0      		brlo .L42
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 125:quantum/quantum.c ****   } else {
 126:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 493               		.loc 1 126 7 discriminator 1 view .LVU64
 494 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 495 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 496               		.loc 1 123 20 discriminator 1 view .LVU65
 497 0018 2097      		sbiw r28,0
 498 001a 01F4      		brne .L44
 499               	.L42:
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 500               		.loc 1 124 7 is_stmt 1 view .LVU66
 501 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 502 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 503               	.L44:
 504               		.loc 1 126 7 is_stmt 0 view .LVU67
 505 0020 CE01      		movw r24,r28
 506               	/* epilogue start */
 127:quantum/quantum.c ****   }
 128:quantum/quantum.c **** }
 507               		.loc 1 128 1 view .LVU68
 508 0022 DF91      		pop r29
 509 0024 CF91      		pop r28
 510               	.LVL29:
 126:quantum/quantum.c ****   }
 511               		.loc 1 126 7 view .LVU69
 512 0026 0C94 0000 		jmp do_code16
 513               	.LVL30:
 126:quantum/quantum.c ****   }
 514               		.loc 1 126 7 view .LVU70
 515               		.cfi_endproc
 516               	.LFE34:
 518               		.section	.text.process_action_kb,"ax",@progbits
 519               		.weak	process_action_kb
 521               	process_action_kb:
 522               	.LVL31:
 523               	.LFB35:
 129:quantum/quantum.c **** 
 130:quantum/quantum.c **** __attribute__ ((weak))
 131:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 524               		.loc 1 131 45 is_stmt 1 view -0
 525               		.cfi_startproc
 526               	/* prologue: function */
 527               	/* frame size = 0 */
 528               	/* stack size = 0 */
 529               	.L__stack_usage = 0
 132:quantum/quantum.c ****   return true;
 530               		.loc 1 132 3 view .LVU72
 133:quantum/quantum.c **** }
 531               		.loc 1 133 1 is_stmt 0 view .LVU73
 532 0000 81E0      		ldi r24,lo8(1)
 533               	.LVL32:
 534               	/* epilogue start */
 535               		.loc 1 133 1 view .LVU74
 536 0002 0895      		ret
 537               		.cfi_endproc
 538               	.LFE35:
 540               		.section	.text.process_record_user,"ax",@progbits
 541               		.weak	process_record_user
 543               	process_record_user:
 544               	.LVL33:
 545               	.LFB37:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__ ((weak))
 136:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 137:quantum/quantum.c ****   return process_record_user(keycode, record);
 138:quantum/quantum.c **** }
 139:quantum/quantum.c **** 
 140:quantum/quantum.c **** __attribute__ ((weak))
 141:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 546               		.loc 1 141 65 is_stmt 1 view -0
 547               		.cfi_startproc
 548               	/* prologue: function */
 549               	/* frame size = 0 */
 550               	/* stack size = 0 */
 551               	.L__stack_usage = 0
 142:quantum/quantum.c ****   return true;
 552               		.loc 1 142 3 view .LVU76
 143:quantum/quantum.c **** }
 553               		.loc 1 143 1 is_stmt 0 view .LVU77
 554 0000 81E0      		ldi r24,lo8(1)
 555               	.LVL34:
 556               	/* epilogue start */
 557               		.loc 1 143 1 view .LVU78
 558 0002 0895      		ret
 559               		.cfi_endproc
 560               	.LFE37:
 562               		.section	.text.process_record_kb,"ax",@progbits
 563               		.weak	process_record_kb
 565               	process_record_kb:
 566               	.LVL35:
 567               	.LFB36:
 136:quantum/quantum.c ****   return process_record_user(keycode, record);
 568               		.loc 1 136 63 is_stmt 1 view -0
 569               		.cfi_startproc
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 137:quantum/quantum.c **** }
 574               		.loc 1 137 3 view .LVU80
 137:quantum/quantum.c **** }
 575               		.loc 1 137 10 is_stmt 0 view .LVU81
 576 0000 0C94 0000 		jmp process_record_user
 577               	.LVL36:
 137:quantum/quantum.c **** }
 578               		.loc 1 137 10 view .LVU82
 579               		.cfi_endproc
 580               	.LFE36:
 582               		.section	.text.reset_keyboard,"ax",@progbits
 583               	.global	reset_keyboard
 585               	reset_keyboard:
 586               	.LFB38:
 144:quantum/quantum.c **** 
 145:quantum/quantum.c **** void reset_keyboard(void) {
 587               		.loc 1 145 27 is_stmt 1 view -0
 588               		.cfi_startproc
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 0 */
 592               	.L__stack_usage = 0
 146:quantum/quantum.c ****   clear_keyboard();
 593               		.loc 1 146 3 view .LVU84
 594 0000 0E94 0000 		call clear_keyboard
 595               	.LVL37:
 147:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 148:quantum/quantum.c ****   process_midi_all_notes_off();
 149:quantum/quantum.c **** #endif
 150:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 151:quantum/quantum.c ****   music_all_notes_off();
 152:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 153:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 154:quantum/quantum.c ****   shutdown_user();
 155:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 156:quantum/quantum.c ****     wait_ms(1);
 157:quantum/quantum.c ****   stop_all_notes();
 158:quantum/quantum.c **** #else
 159:quantum/quantum.c ****   wait_ms(250);
 596               		.loc 1 159 3 view .LVU85
 597               	.LBB22:
 598               	.LBI22:
 599               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 600               		.loc 3 166 1 view .LVU86
 601               	.LBB23:
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 602               		.loc 3 168 2 view .LVU87
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 603               		.loc 3 172 2 view .LVU88
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 604               		.loc 3 173 2 view .LVU89
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 605               		.loc 3 174 2 view .LVU90
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 606               		.loc 3 184 3 view .LVU91
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 607               		.loc 3 187 2 view .LVU92
 608 0004 2FEF      		ldi r18,lo8(799999)
 609 0006 84E3      		ldi r24,hi8(799999)
 610 0008 9CE0      		ldi r25,hlo8(799999)
 611 000a 2150      	1:	subi r18,1
 612 000c 8040      		sbci r24,0
 613 000e 9040      		sbci r25,0
 614 0010 01F4      		brne 1b
 615 0012 00C0      		rjmp .
 616 0014 0000      		nop
 617               	.LVL38:
 618               		.loc 3 187 2 is_stmt 0 view .LVU93
 619               	.LBE23:
 620               	.LBE22:
 160:quantum/quantum.c **** #endif
 161:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 162:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 163:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 621               		.loc 1 163 3 is_stmt 1 view .LVU94
 622               		.loc 1 163 23 is_stmt 0 view .LVU95
 623 0016 87E7      		ldi r24,lo8(119)
 624 0018 97E7      		ldi r25,lo8(119)
 625 001a 9093 0108 		sts 2048+1,r25
 626 001e 8093 0008 		sts 2048,r24
 164:quantum/quantum.c **** #endif
 165:quantum/quantum.c ****   bootloader_jump();
 627               		.loc 1 165 3 is_stmt 1 view .LVU96
 628 0022 0C94 0000 		jmp bootloader_jump
 629               	.LVL39:
 630               		.cfi_endproc
 631               	.LFE38:
 633               		.section	.text.process_record_quantum,"ax",@progbits
 634               	.global	process_record_quantum
 636               	process_record_quantum:
 637               	.LVL40:
 638               	.LFB39:
 166:quantum/quantum.c **** }
 167:quantum/quantum.c **** 
 168:quantum/quantum.c **** // Shift / paren setup
 169:quantum/quantum.c **** 
 170:quantum/quantum.c **** #ifndef LSPO_KEY
 171:quantum/quantum.c ****   #define LSPO_KEY KC_9
 172:quantum/quantum.c **** #endif
 173:quantum/quantum.c **** #ifndef RSPC_KEY
 174:quantum/quantum.c ****   #define RSPC_KEY KC_0
 175:quantum/quantum.c **** #endif
 176:quantum/quantum.c **** 
 177:quantum/quantum.c **** // Shift / Enter setup
 178:quantum/quantum.c **** #ifndef SFTENT_KEY
 179:quantum/quantum.c ****   #define SFTENT_KEY KC_ENT
 180:quantum/quantum.c **** #endif
 181:quantum/quantum.c **** 
 182:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 183:quantum/quantum.c **** static uint16_t scs_timer[2] = {0, 0};
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 639               		.loc 1 190 50 view -0
 640               		.cfi_startproc
 641               		.loc 1 190 50 is_stmt 0 view .LVU98
 642 0000 0F93      		push r16
 643               	.LCFI8:
 644               		.cfi_def_cfa_offset 3
 645               		.cfi_offset 16, -2
 646 0002 1F93      		push r17
 647               	.LCFI9:
 648               		.cfi_def_cfa_offset 4
 649               		.cfi_offset 17, -3
 650 0004 CF93      		push r28
 651               	.LCFI10:
 652               		.cfi_def_cfa_offset 5
 653               		.cfi_offset 28, -4
 654 0006 DF93      		push r29
 655               	.LCFI11:
 656               		.cfi_def_cfa_offset 6
 657               		.cfi_offset 29, -5
 658               	/* prologue: function */
 659               	/* frame size = 0 */
 660               	/* stack size = 4 */
 661               	.L__stack_usage = 4
 662 0008 8C01      		movw r16,r24
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 193:quantum/quantum.c ****   keypos_t key = record->event.key;
 663               		.loc 1 193 3 is_stmt 1 view .LVU99
 664               		.loc 1 193 12 is_stmt 0 view .LVU100
 665 000a FC01      		movw r30,r24
 666 000c C081      		ld r28,Z
 667 000e D181      		ldd r29,Z+1
 668               	.LVL41:
 194:quantum/quantum.c ****   uint16_t keycode;
 669               		.loc 1 194 3 is_stmt 1 view .LVU101
 195:quantum/quantum.c **** 
 196:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 197:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 198:quantum/quantum.c ****     if (!disable_action_cache) {
 199:quantum/quantum.c ****       uint8_t layer;
 200:quantum/quantum.c **** 
 201:quantum/quantum.c ****       if (record->event.pressed) {
 202:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 203:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 204:quantum/quantum.c ****       } else {
 205:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 206:quantum/quantum.c ****       }
 207:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 208:quantum/quantum.c ****     } else
 209:quantum/quantum.c ****   #endif
 210:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 670               		.loc 1 210 5 view .LVU102
 671               		.loc 1 210 37 is_stmt 0 view .LVU103
 672 0010 CE01      		movw r24,r28
 673               	.LVL42:
 674               		.loc 1 210 37 view .LVU104
 675 0012 0E94 0000 		call layer_switch_get_layer
 676               	.LVL43:
 677               		.loc 1 210 15 view .LVU105
 678 0016 BE01      		movw r22,r28
 679 0018 0E94 0000 		call keymap_key_to_keycode
 680               	.LVL44:
 681 001c EC01      		movw r28,r24
 682               	.LVL45:
 211:quantum/quantum.c **** 
 212:quantum/quantum.c ****     // This is how you use actions here
 213:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 214:quantum/quantum.c ****     //   action_t action;
 215:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 216:quantum/quantum.c ****     //   process_action(record, action);
 217:quantum/quantum.c ****     //   return false;
 218:quantum/quantum.c ****     // }
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 221:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 683               		.loc 1 221 5 is_stmt 1 view .LVU106
 684 001e B801      		movw r22,r16
 685 0020 0E94 0000 		call preprocess_tap_dance
 686               	.LVL46:
 222:quantum/quantum.c ****   #endif
 223:quantum/quantum.c **** 
 224:quantum/quantum.c ****   if (!(
 687               		.loc 1 224 3 view .LVU107
 225:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 226:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 227:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 228:quantum/quantum.c ****   #endif
 229:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****       process_clicky(keycode, record) &&
 231:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 232:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 688               		.loc 1 232 5 is_stmt 0 view .LVU108
 689 0024 B801      		movw r22,r16
 690 0026 CE01      		movw r24,r28
 691 0028 0E94 0000 		call process_record_kb
 692               	.LVL47:
 233:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 234:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 235:quantum/quantum.c ****   #endif
 236:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 237:quantum/quantum.c ****     process_midi(keycode, record) &&
 238:quantum/quantum.c ****   #endif
 239:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 240:quantum/quantum.c ****     process_audio(keycode, record) &&
 241:quantum/quantum.c ****   #endif
 242:quantum/quantum.c ****   #ifdef STENO_ENABLE
 243:quantum/quantum.c ****     process_steno(keycode, record) &&
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c ****   #if ( defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSI
 246:quantum/quantum.c ****     process_music(keycode, record) &&
 247:quantum/quantum.c ****   #endif
 248:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 249:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 693               		.loc 1 249 40 view .LVU109
 694 002c 8823      		tst r24
 695 002e 01F4      		brne .+2
 696 0030 00C0      		rjmp .L49
 697               		.loc 1 249 5 discriminator 2 view .LVU110
 698 0032 B801      		movw r22,r16
 699 0034 CE01      		movw r24,r28
 700 0036 0E94 0000 		call process_tap_dance
 701               	.LVL48:
 232:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 702               		.loc 1 232 40 discriminator 2 view .LVU111
 703 003a 8823      		tst r24
 704 003c 01F4      		brne .+2
 705 003e 00C0      		rjmp .L49
 250:quantum/quantum.c ****   #endif
 251:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 252:quantum/quantum.c ****     process_leader(keycode, record) &&
 706               		.loc 1 252 5 discriminator 3 view .LVU112
 707 0040 B801      		movw r22,r16
 708 0042 CE01      		movw r24,r28
 709 0044 0E94 0000 		call process_leader
 710               	.LVL49:
 249:quantum/quantum.c ****   #endif
 711               		.loc 1 249 40 discriminator 3 view .LVU113
 712 0048 8823      		tst r24
 713 004a 01F4      		brne .+2
 714 004c 00C0      		rjmp .L49
 253:quantum/quantum.c ****   #endif
 254:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 255:quantum/quantum.c ****     process_chording(keycode, record) &&
 256:quantum/quantum.c ****   #endif
 257:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 258:quantum/quantum.c ****     process_combo(keycode, record) &&
 259:quantum/quantum.c ****   #endif
 260:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 261:quantum/quantum.c ****     process_unicode(keycode, record) &&
 262:quantum/quantum.c ****   #endif
 263:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 264:quantum/quantum.c ****     process_ucis(keycode, record) &&
 265:quantum/quantum.c ****   #endif
 266:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 267:quantum/quantum.c ****     process_printer(keycode, record) &&
 268:quantum/quantum.c ****   #endif
 269:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 270:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 271:quantum/quantum.c ****   #endif
 272:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 273:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 274:quantum/quantum.c ****   #endif
 275:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 276:quantum/quantum.c ****     process_terminal(keycode, record) &&
 277:quantum/quantum.c ****   #endif
 278:quantum/quantum.c ****       true)) {
 279:quantum/quantum.c ****     return false;
 280:quantum/quantum.c ****   }
 281:quantum/quantum.c **** 
 282:quantum/quantum.c ****   // Shift / paren setup
 283:quantum/quantum.c **** 
 284:quantum/quantum.c ****   switch(keycode) {
 715               		.loc 1 284 3 is_stmt 1 view .LVU114
 716 004e C531      		cpi r28,21
 717 0050 FCE5      		ldi r31,92
 718 0052 DF07      		cpc r29,r31
 719 0054 01F4      		brne .+2
 720 0056 00C0      		rjmp .L53
 721 0058 00F4      		brsh .L54
 722 005a C130      		cpi r28,1
 723 005c ECE5      		ldi r30,92
 724 005e DE07      		cpc r29,r30
 725 0060 01F4      		brne .+2
 726 0062 00C0      		rjmp .L55
 727 0064 00F0      		brlo .+2
 728 0066 00C0      		rjmp .L56
 729 0068 C115      		cp r28,__zero_reg__
 730 006a DC45      		sbci r29,92
 731 006c 01F0      		breq .L57
 732               	.L58:
 285:quantum/quantum.c ****     case RESET:
 286:quantum/quantum.c ****       if (record->event.pressed) {
 287:quantum/quantum.c ****         reset_keyboard();
 288:quantum/quantum.c ****       }
 289:quantum/quantum.c ****     return false;
 290:quantum/quantum.c ****     case DEBUG:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****           debug_enable = true;
 293:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 294:quantum/quantum.c ****       }
 295:quantum/quantum.c ****     return false;
 296:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 297:quantum/quantum.c ****   case FC_TOG:
 298:quantum/quantum.c ****     if (record->event.pressed) {
 299:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 300:quantum/quantum.c ****     }
 301:quantum/quantum.c ****     return false;
 302:quantum/quantum.c ****   case FC_ON:
 303:quantum/quantum.c ****     if (record->event.pressed) {
 304:quantum/quantum.c ****       FAUXCLICKY_ON;
 305:quantum/quantum.c ****     }
 306:quantum/quantum.c ****     return false;
 307:quantum/quantum.c ****   case FC_OFF:
 308:quantum/quantum.c ****     if (record->event.pressed) {
 309:quantum/quantum.c ****       FAUXCLICKY_OFF;
 310:quantum/quantum.c ****     }
 311:quantum/quantum.c ****     return false;
 312:quantum/quantum.c ****   #endif
 313:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 314:quantum/quantum.c ****   case RGB_TOG:
 315:quantum/quantum.c ****     if (record->event.pressed) {
 316:quantum/quantum.c ****       rgblight_toggle();
 317:quantum/quantum.c ****     }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 320:quantum/quantum.c ****     if (record->event.pressed) {
 321:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 322:quantum/quantum.c ****       if(shifted) {
 323:quantum/quantum.c ****         rgblight_step_reverse();
 324:quantum/quantum.c ****       }
 325:quantum/quantum.c ****       else {
 326:quantum/quantum.c ****         rgblight_step();
 327:quantum/quantum.c ****       }
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****       if(shifted) {
 334:quantum/quantum.c ****         rgblight_step();
 335:quantum/quantum.c ****       }
 336:quantum/quantum.c ****       else {
 337:quantum/quantum.c ****         rgblight_step_reverse();
 338:quantum/quantum.c ****       }
 339:quantum/quantum.c ****     }
 340:quantum/quantum.c ****     return false;
 341:quantum/quantum.c ****   case RGB_HUI:
 342:quantum/quantum.c ****     if (record->event.pressed) {
 343:quantum/quantum.c ****       rgblight_increase_hue();
 344:quantum/quantum.c ****     }
 345:quantum/quantum.c ****     return false;
 346:quantum/quantum.c ****   case RGB_HUD:
 347:quantum/quantum.c ****     if (record->event.pressed) {
 348:quantum/quantum.c ****       rgblight_decrease_hue();
 349:quantum/quantum.c ****     }
 350:quantum/quantum.c ****     return false;
 351:quantum/quantum.c ****   case RGB_SAI:
 352:quantum/quantum.c ****     if (record->event.pressed) {
 353:quantum/quantum.c ****       rgblight_increase_sat();
 354:quantum/quantum.c ****     }
 355:quantum/quantum.c ****     return false;
 356:quantum/quantum.c ****   case RGB_SAD:
 357:quantum/quantum.c ****     if (record->event.pressed) {
 358:quantum/quantum.c ****       rgblight_decrease_sat();
 359:quantum/quantum.c ****     }
 360:quantum/quantum.c ****     return false;
 361:quantum/quantum.c ****   case RGB_VAI:
 362:quantum/quantum.c ****     if (record->event.pressed) {
 363:quantum/quantum.c ****       rgblight_increase_val();
 364:quantum/quantum.c ****     }
 365:quantum/quantum.c ****     return false;
 366:quantum/quantum.c ****   case RGB_VAD:
 367:quantum/quantum.c ****     if (record->event.pressed) {
 368:quantum/quantum.c ****       rgblight_decrease_val();
 369:quantum/quantum.c ****     }
 370:quantum/quantum.c ****     return false;
 371:quantum/quantum.c ****   case RGB_SPI:
 372:quantum/quantum.c ****     if (record->event.pressed) {
 373:quantum/quantum.c ****       rgblight_increase_speed();
 374:quantum/quantum.c ****     }
 375:quantum/quantum.c ****     return false;
 376:quantum/quantum.c ****   case RGB_SPD:
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****       rgblight_decrease_speed();
 379:quantum/quantum.c ****     }
 380:quantum/quantum.c ****     return false;
 381:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 382:quantum/quantum.c ****     if (record->event.pressed) {
 383:quantum/quantum.c ****       rgblight_mode(1);
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 389:quantum/quantum.c ****         rgblight_step();
 390:quantum/quantum.c ****       } else {
 391:quantum/quantum.c ****         rgblight_mode(2);
 392:quantum/quantum.c ****       }
 393:quantum/quantum.c ****     }
 394:quantum/quantum.c ****     return false;
 395:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 396:quantum/quantum.c ****     if (record->event.pressed) {
 397:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 398:quantum/quantum.c ****         rgblight_step();
 399:quantum/quantum.c ****       } else {
 400:quantum/quantum.c ****         rgblight_mode(6);
 401:quantum/quantum.c ****       }
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 405:quantum/quantum.c ****     if (record->event.pressed) {
 406:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 407:quantum/quantum.c ****         rgblight_step();
 408:quantum/quantum.c ****       } else {
 409:quantum/quantum.c ****         rgblight_mode(9);
 410:quantum/quantum.c ****       }
 411:quantum/quantum.c ****     }
 412:quantum/quantum.c ****     return false;
 413:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 414:quantum/quantum.c ****     if (record->event.pressed) {
 415:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 416:quantum/quantum.c ****         rgblight_step();
 417:quantum/quantum.c ****       } else {
 418:quantum/quantum.c ****         rgblight_mode(15);
 419:quantum/quantum.c ****       }
 420:quantum/quantum.c ****     }
 421:quantum/quantum.c ****     return false;
 422:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 423:quantum/quantum.c ****     if (record->event.pressed) {
 424:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 425:quantum/quantum.c ****         rgblight_step();
 426:quantum/quantum.c ****       } else {
 427:quantum/quantum.c ****         rgblight_mode(21);
 428:quantum/quantum.c ****       }
 429:quantum/quantum.c ****     }
 430:quantum/quantum.c ****     return false;
 431:quantum/quantum.c ****   case RGB_MODE_XMAS:
 432:quantum/quantum.c ****     if (record->event.pressed) {
 433:quantum/quantum.c ****       rgblight_mode(24);
 434:quantum/quantum.c ****     }
 435:quantum/quantum.c ****     return false;
 436:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 437:quantum/quantum.c ****     if (record->event.pressed) {
 438:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 439:quantum/quantum.c ****         rgblight_step();
 440:quantum/quantum.c ****       } else {
 441:quantum/quantum.c ****         rgblight_mode(25);
 442:quantum/quantum.c ****       }
 443:quantum/quantum.c ****     }
 444:quantum/quantum.c ****     return false;
 445:quantum/quantum.c ****   #endif
 446:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 447:quantum/quantum.c ****     case OUT_AUTO:
 448:quantum/quantum.c ****       if (record->event.pressed) {
 449:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 450:quantum/quantum.c ****       }
 451:quantum/quantum.c ****       return false;
 452:quantum/quantum.c ****     case OUT_USB:
 453:quantum/quantum.c ****       if (record->event.pressed) {
 454:quantum/quantum.c ****         set_output(OUTPUT_USB);
 455:quantum/quantum.c ****       }
 456:quantum/quantum.c ****       return false;
 457:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 458:quantum/quantum.c ****     case OUT_BT:
 459:quantum/quantum.c ****       if (record->event.pressed) {
 460:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 461:quantum/quantum.c ****       }
 462:quantum/quantum.c ****       return false;
 463:quantum/quantum.c ****     #endif
 464:quantum/quantum.c ****     #endif
 465:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 466:quantum/quantum.c ****       if (record->event.pressed) {
 467:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 468:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 469:quantum/quantum.c ****             eeconfig_init();
 470:quantum/quantum.c ****         }
 471:quantum/quantum.c ****         /* keymap config */
 472:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 473:quantum/quantum.c ****         switch (keycode)
 474:quantum/quantum.c ****         {
 475:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 476:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 477:quantum/quantum.c ****             break;
 478:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 479:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 480:quantum/quantum.c ****             break;
 481:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 482:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 483:quantum/quantum.c ****             break;
 484:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 485:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 486:quantum/quantum.c ****             break;
 487:quantum/quantum.c ****           case MAGIC_NO_GUI:
 488:quantum/quantum.c ****             keymap_config.no_gui = true;
 489:quantum/quantum.c ****             break;
 490:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 491:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 492:quantum/quantum.c ****             break;
 493:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 494:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 495:quantum/quantum.c ****             break;
 496:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 497:quantum/quantum.c ****             keymap_config.nkro = true;
 498:quantum/quantum.c ****             break;
 499:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 500:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 501:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 502:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 503:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 504:quantum/quantum.c ****             #endif
 505:quantum/quantum.c ****             break;
 506:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 507:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 508:quantum/quantum.c ****             break;
 509:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 510:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 511:quantum/quantum.c ****             break;
 512:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 513:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 514:quantum/quantum.c ****             break;
 515:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 516:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 517:quantum/quantum.c ****             break;
 518:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 519:quantum/quantum.c ****             keymap_config.no_gui = false;
 520:quantum/quantum.c ****             break;
 521:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 522:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 523:quantum/quantum.c ****             break;
 524:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 525:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 526:quantum/quantum.c ****             break;
 527:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 528:quantum/quantum.c ****             keymap_config.nkro = false;
 529:quantum/quantum.c ****             break;
 530:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 531:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 532:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 533:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 534:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 535:quantum/quantum.c ****             #endif
 536:quantum/quantum.c ****             break;
 537:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 538:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 539:quantum/quantum.c ****             break;
 540:quantum/quantum.c ****           default:
 541:quantum/quantum.c ****             break;
 542:quantum/quantum.c ****         }
 543:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 544:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 545:quantum/quantum.c **** 
 546:quantum/quantum.c ****         return false;
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       break;
 549:quantum/quantum.c ****     case KC_LSPO: {
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         shift_interrupted[0] = false;
 552:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 553:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 554:quantum/quantum.c ****       }
 555:quantum/quantum.c ****       else {
 556:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 557:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 558:quantum/quantum.c ****             shift_interrupted[0] = true;
 559:quantum/quantum.c ****             shift_interrupted[1] = true;
 560:quantum/quantum.c ****           }
 561:quantum/quantum.c ****         #endif
 562:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer[0]) < TAPPING_TERM) {
 563:quantum/quantum.c ****           register_code(LSPO_KEY);
 564:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 565:quantum/quantum.c ****         }
 566:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 567:quantum/quantum.c ****       }
 568:quantum/quantum.c ****       return false;
 569:quantum/quantum.c ****     }
 570:quantum/quantum.c **** 
 571:quantum/quantum.c ****     case KC_RSPC: {
 572:quantum/quantum.c ****       if (record->event.pressed) {
 573:quantum/quantum.c ****         shift_interrupted[1] = false;
 574:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 575:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 576:quantum/quantum.c ****       }
 577:quantum/quantum.c ****       else {
 578:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 579:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 580:quantum/quantum.c ****             shift_interrupted[0] = true;
 581:quantum/quantum.c ****             shift_interrupted[1] = true;
 582:quantum/quantum.c ****           }
 583:quantum/quantum.c ****         #endif
 584:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 585:quantum/quantum.c ****           register_code(RSPC_KEY);
 586:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 587:quantum/quantum.c ****         }
 588:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 589:quantum/quantum.c ****       }
 590:quantum/quantum.c ****       return false;
 591:quantum/quantum.c ****     }
 592:quantum/quantum.c **** 
 593:quantum/quantum.c ****     case KC_SFTENT: {
 594:quantum/quantum.c ****       if (record->event.pressed) {
 595:quantum/quantum.c ****         shift_interrupted[1] = false;
 596:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 597:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 598:quantum/quantum.c ****       }
 599:quantum/quantum.c ****       else if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 600:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 601:quantum/quantum.c ****         register_code(SFTENT_KEY);
 602:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 603:quantum/quantum.c ****       }
 604:quantum/quantum.c ****       else {
 605:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 606:quantum/quantum.c ****       }
 607:quantum/quantum.c ****       return false;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c **** 
 610:quantum/quantum.c ****     case GRAVE_ESC: {
 611:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 612:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 615:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 616:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 617:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 618:quantum/quantum.c ****         shifted = 0;
 619:quantum/quantum.c ****       }
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c **** 
 622:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 623:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 624:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 625:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 626:quantum/quantum.c ****         shifted = 0;
 627:quantum/quantum.c ****       }
 628:quantum/quantum.c **** #endif
 629:quantum/quantum.c **** 
 630:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 631:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 632:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 633:quantum/quantum.c ****         shifted = 0;
 634:quantum/quantum.c ****       }
 635:quantum/quantum.c **** #endif
 636:quantum/quantum.c **** 
 637:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 638:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 639:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 640:quantum/quantum.c ****         shifted = 0;
 641:quantum/quantum.c ****       }
 642:quantum/quantum.c **** #endif
 643:quantum/quantum.c **** 
 644:quantum/quantum.c ****       if (record->event.pressed) {
 645:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 646:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 647:quantum/quantum.c ****       }
 648:quantum/quantum.c ****       else {
 649:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 650:quantum/quantum.c ****       }
 651:quantum/quantum.c **** 
 652:quantum/quantum.c ****       send_keyboard_report();
 653:quantum/quantum.c ****       return false;
 654:quantum/quantum.c ****     }
 655:quantum/quantum.c **** 
 656:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 657:quantum/quantum.c ****     case BL_BRTG: {
 658:quantum/quantum.c ****       if (record->event.pressed)
 659:quantum/quantum.c ****         breathing_toggle();
 660:quantum/quantum.c ****       return false;
 661:quantum/quantum.c ****     }
 662:quantum/quantum.c **** #endif
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     default: {
 665:quantum/quantum.c ****       shift_interrupted[0] = true;
 733               		.loc 1 665 7 view .LVU115
 734               		.loc 1 665 28 is_stmt 0 view .LVU116
 735 006e 81E0      		ldi r24,lo8(1)
 736 0070 8093 0000 		sts shift_interrupted,r24
 666:quantum/quantum.c ****       shift_interrupted[1] = true;
 737               		.loc 1 666 7 is_stmt 1 view .LVU117
 738               		.loc 1 666 28 is_stmt 0 view .LVU118
 739 0074 8093 0000 		sts shift_interrupted+1,r24
 667:quantum/quantum.c ****       break;
 740               		.loc 1 667 7 is_stmt 1 view .LVU119
 741               	.L65:
 668:quantum/quantum.c ****     }
 669:quantum/quantum.c ****   }
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****   return process_action_kb(record);
 742               		.loc 1 671 3 view .LVU120
 743               		.loc 1 671 10 is_stmt 0 view .LVU121
 744 0078 C801      		movw r24,r16
 745               	/* epilogue start */
 672:quantum/quantum.c **** }
 746               		.loc 1 672 1 view .LVU122
 747 007a DF91      		pop r29
 748 007c CF91      		pop r28
 749               	.LVL50:
 750               		.loc 1 672 1 view .LVU123
 751 007e 1F91      		pop r17
 752 0080 0F91      		pop r16
 753               	.LVL51:
 671:quantum/quantum.c **** }
 754               		.loc 1 671 10 view .LVU124
 755 0082 0C94 0000 		jmp process_action_kb
 756               	.LVL52:
 757               	.L54:
 284:quantum/quantum.c ****     case RESET:
 758               		.loc 1 284 3 view .LVU125
 759 0086 C53D      		cpi r28,-43
 760 0088 ECE5      		ldi r30,92
 761 008a DE07      		cpc r29,r30
 762 008c 01F4      		brne .+2
 763 008e 00C0      		rjmp .L59
 764 0090 00F4      		brsh .L60
 765 0092 C33D      		cpi r28,-45
 766 0094 8CE5      		ldi r24,92
 767 0096 D807      		cpc r29,r24
 768 0098 01F4      		brne .+2
 769 009a 00C0      		rjmp .L61
 770 009c C43D      		cpi r28,-44
 771 009e DC45      		sbci r29,92
 772 00a0 01F4      		brne .L58
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 773               		.loc 1 572 7 is_stmt 1 view .LVU126
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 774               		.loc 1 572 10 is_stmt 0 view .LVU127
 775 00a2 F801      		movw r30,r16
 776 00a4 8281      		ldd r24,Z+2
 777 00a6 8823      		tst r24
 778 00a8 01F4      		brne .+2
 779 00aa 00C0      		rjmp .L92
 780               	.L96:
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 781               		.loc 1 573 9 is_stmt 1 view .LVU128
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 782               		.loc 1 573 30 is_stmt 0 view .LVU129
 783 00ac 1092 0000 		sts shift_interrupted+1,__zero_reg__
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 784               		.loc 1 574 9 is_stmt 1 view .LVU130
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 785               		.loc 1 574 24 is_stmt 0 view .LVU131
 786 00b0 0E94 0000 		call timer_read
 787               	.LVL53:
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 788               		.loc 1 574 22 view .LVU132
 789 00b4 9093 0000 		sts scs_timer+2+1,r25
 790 00b8 8093 0000 		sts scs_timer+2,r24
 575:quantum/quantum.c ****       }
 791               		.loc 1 575 9 is_stmt 1 view .LVU133
 792 00bc 80E2      		ldi r24,lo8(32)
 793 00be 00C0      		rjmp .L127
 794               	.L60:
 284:quantum/quantum.c ****     case RESET:
 795               		.loc 1 284 3 is_stmt 0 view .LVU134
 796 00c0 C83D      		cpi r28,-40
 797 00c2 FCE5      		ldi r31,92
 798 00c4 DF07      		cpc r29,r31
 799 00c6 01F0      		breq .L63
 800 00c8 C93D      		cpi r28,-39
 801 00ca DC45      		sbci r29,92
 802 00cc 01F4      		brne .L58
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 803               		.loc 1 453 7 is_stmt 1 view .LVU135
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 804               		.loc 1 453 10 is_stmt 0 view .LVU136
 805 00ce F801      		movw r30,r16
 806 00d0 8281      		ldd r24,Z+2
 807 00d2 8823      		tst r24
 808 00d4 01F0      		breq .L49
 454:quantum/quantum.c ****       }
 809               		.loc 1 454 9 is_stmt 1 view .LVU137
 810 00d6 82E0      		ldi r24,lo8(2)
 811 00d8 00C0      		rjmp .L126
 812               	.L57:
 286:quantum/quantum.c ****         reset_keyboard();
 813               		.loc 1 286 7 view .LVU138
 286:quantum/quantum.c ****         reset_keyboard();
 814               		.loc 1 286 10 is_stmt 0 view .LVU139
 815 00da F801      		movw r30,r16
 816 00dc 8281      		ldd r24,Z+2
 817 00de 8111      		cpse r24,__zero_reg__
 287:quantum/quantum.c ****       }
 818               		.loc 1 287 9 is_stmt 1 view .LVU140
 819 00e0 0E94 0000 		call reset_keyboard
 820               	.LVL54:
 821               	.L49:
 822               		.loc 1 672 1 is_stmt 0 view .LVU141
 823 00e4 80E0      		ldi r24,0
 824               	/* epilogue start */
 825 00e6 DF91      		pop r29
 826 00e8 CF91      		pop r28
 827               	.LVL55:
 828               		.loc 1 672 1 view .LVU142
 829 00ea 1F91      		pop r17
 830 00ec 0F91      		pop r16
 831               	.LVL56:
 832               		.loc 1 672 1 view .LVU143
 833 00ee 0895      		ret
 834               	.LVL57:
 835               	.L55:
 291:quantum/quantum.c ****           debug_enable = true;
 836               		.loc 1 291 7 is_stmt 1 view .LVU144
 291:quantum/quantum.c ****           debug_enable = true;
 837               		.loc 1 291 10 is_stmt 0 view .LVU145
 838 00f0 F801      		movw r30,r16
 839 00f2 8281      		ldd r24,Z+2
 840 00f4 8823      		tst r24
 841 00f6 01F0      		breq .L49
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 842               		.loc 1 292 11 is_stmt 1 view .LVU146
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 843               		.loc 1 292 24 is_stmt 0 view .LVU147
 844 00f8 8091 0000 		lds r24,debug_config
 845 00fc 8160      		ori r24,lo8(1<<0)
 846 00fe 8093 0000 		sts debug_config,r24
 293:quantum/quantum.c ****       }
 847               		.loc 1 293 11 is_stmt 1 view .LVU148
 848               	.LBB24:
 293:quantum/quantum.c ****       }
 849               		.loc 1 293 11 view .LVU149
 293:quantum/quantum.c ****       }
 850               		.loc 1 293 11 view .LVU150
 851               	.LBE24:
 852 0102 80E0      		ldi r24,lo8(__c.3357)
 853 0104 90E0      		ldi r25,hi8(__c.3357)
 854 0106 0E94 0000 		call xputs
 855               	.LVL58:
 856 010a 00C0      		rjmp .L49
 857               	.L63:
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 858               		.loc 1 448 7 view .LVU151
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 859               		.loc 1 448 10 is_stmt 0 view .LVU152
 860 010c F801      		movw r30,r16
 861 010e 8281      		ldd r24,Z+2
 862 0110 8823      		tst r24
 863 0112 01F0      		breq .L49
 449:quantum/quantum.c ****       }
 864               		.loc 1 449 9 is_stmt 1 view .LVU153
 865 0114 80E0      		ldi r24,0
 866               	.L126:
 454:quantum/quantum.c ****       }
 867               		.loc 1 454 9 is_stmt 0 view .LVU154
 868 0116 0E94 0000 		call set_output
 869               	.LVL59:
 870 011a 00C0      		rjmp .L49
 871               	.L56:
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 872               		.loc 1 466 7 is_stmt 1 view .LVU155
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 873               		.loc 1 466 10 is_stmt 0 view .LVU156
 874 011c F801      		movw r30,r16
 875 011e 8281      		ldd r24,Z+2
 876 0120 8823      		tst r24
 877 0122 01F4      		brne .+2
 878 0124 00C0      		rjmp .L65
 468:quantum/quantum.c ****             eeconfig_init();
 879               		.loc 1 468 9 is_stmt 1 view .LVU157
 468:quantum/quantum.c ****             eeconfig_init();
 880               		.loc 1 468 14 is_stmt 0 view .LVU158
 881 0126 0E94 0000 		call eeconfig_is_enabled
 882               	.LVL60:
 468:quantum/quantum.c ****             eeconfig_init();
 883               		.loc 1 468 12 view .LVU159
 884 012a 8111      		cpse r24,__zero_reg__
 885 012c 00C0      		rjmp .L66
 469:quantum/quantum.c ****         }
 886               		.loc 1 469 13 is_stmt 1 view .LVU160
 887 012e 0E94 0000 		call eeconfig_init
 888               	.LVL61:
 889               	.L66:
 472:quantum/quantum.c ****         switch (keycode)
 890               		.loc 1 472 9 view .LVU161
 472:quantum/quantum.c ****         switch (keycode)
 891               		.loc 1 472 29 is_stmt 0 view .LVU162
 892 0132 0E94 0000 		call eeconfig_read_keymap
 893               	.LVL62:
 894 0136 90E0      		ldi r25,0
 895 0138 9093 0000 		sts keymap_config+1,r25
 896 013c 8093 0000 		sts keymap_config,r24
 473:quantum/quantum.c ****         {
 897               		.loc 1 473 9 is_stmt 1 view .LVU163
 898 0140 FE01      		movw r30,r28
 899 0142 E350      		subi r30,3
 900 0144 FC45      		sbci r31,92
 476:quantum/quantum.c ****             break;
 901               		.loc 1 476 49 is_stmt 0 view .LVU164
 902 0146 8091 0000 		lds r24,keymap_config
 903 014a 8160      		ori r24,lo8(1<<0)
 904 014c E231      		cpi r30,18
 905 014e F105      		cpc r31,__zero_reg__
 906 0150 00F4      		brsh .L125
 907 0152 E050      		subi r30,lo8(-(gs(.L69)))
 908 0154 F040      		sbci r31,hi8(-(gs(.L69)))
 909 0156 0C94 0000 		jmp __tablejump2__
 910               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 911               		.p2align	1
 912               	.L69:
 913 0000 0000      		.word gs(.L86)
 914 0002 0000      		.word gs(.L85)
 915 0004 0000      		.word gs(.L84)
 916 0006 0000      		.word gs(.L83)
 917 0008 0000      		.word gs(.L82)
 918 000a 0000      		.word gs(.L81)
 919 000c 0000      		.word gs(.L80)
 920 000e 0000      		.word gs(.L79)
 921 0010 0000      		.word gs(.L78)
 922 0012 0000      		.word gs(.L77)
 923 0014 0000      		.word gs(.L76)
 924 0016 0000      		.word gs(.L75)
 925 0018 0000      		.word gs(.L74)
 926 001a 0000      		.word gs(.L73)
 927 001c 0000      		.word gs(.L72)
 928 001e 0000      		.word gs(.L71)
 929 0020 0000      		.word gs(.L70)
 930 0022 0000      		.word gs(.L68)
 931               		.section	.text.process_record_quantum
 932               	.L86:
 479:quantum/quantum.c ****             break;
 933               		.loc 1 479 13 is_stmt 1 view .LVU165
 479:quantum/quantum.c ****             break;
 934               		.loc 1 479 47 is_stmt 0 view .LVU166
 935 015a 8091 0000 		lds r24,keymap_config
 936 015e 8260      		ori r24,lo8(1<<1)
 937               	.L125:
 538:quantum/quantum.c ****             break;
 938               		.loc 1 538 32 view .LVU167
 939 0160 8093 0000 		sts keymap_config,r24
 539:quantum/quantum.c ****           default:
 940               		.loc 1 539 13 is_stmt 1 view .LVU168
 543:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 941               		.loc 1 543 9 view .LVU169
 942 0164 8091 0000 		lds r24,keymap_config
 943 0168 0E94 0000 		call eeconfig_update_keymap
 944               	.LVL63:
 544:quantum/quantum.c **** 
 945               		.loc 1 544 9 view .LVU170
 946 016c 0E94 0000 		call clear_keyboard
 947               	.LVL64:
 546:quantum/quantum.c ****       }
 948               		.loc 1 546 9 view .LVU171
 546:quantum/quantum.c ****       }
 949               		.loc 1 546 16 is_stmt 0 view .LVU172
 950 0170 00C0      		rjmp .L49
 951               	.L85:
 482:quantum/quantum.c ****             break;
 952               		.loc 1 482 13 is_stmt 1 view .LVU173
 482:quantum/quantum.c ****             break;
 953               		.loc 1 482 42 is_stmt 0 view .LVU174
 954 0172 8091 0000 		lds r24,keymap_config
 955 0176 8460      		ori r24,lo8(1<<2)
 956 0178 00C0      		rjmp .L125
 957               	.L84:
 485:quantum/quantum.c ****             break;
 958               		.loc 1 485 13 is_stmt 1 view .LVU175
 485:quantum/quantum.c ****             break;
 959               		.loc 1 485 42 is_stmt 0 view .LVU176
 960 017a 8091 0000 		lds r24,keymap_config
 961 017e 8860      		ori r24,lo8(1<<3)
 962 0180 00C0      		rjmp .L125
 963               	.L83:
 488:quantum/quantum.c ****             break;
 964               		.loc 1 488 13 is_stmt 1 view .LVU177
 488:quantum/quantum.c ****             break;
 965               		.loc 1 488 34 is_stmt 0 view .LVU178
 966 0182 8091 0000 		lds r24,keymap_config
 967 0186 8061      		ori r24,lo8(1<<4)
 968 0188 00C0      		rjmp .L125
 969               	.L82:
 491:quantum/quantum.c ****             break;
 970               		.loc 1 491 13 is_stmt 1 view .LVU179
 491:quantum/quantum.c ****             break;
 971               		.loc 1 491 42 is_stmt 0 view .LVU180
 972 018a 8091 0000 		lds r24,keymap_config
 973 018e 8062      		ori r24,lo8(1<<5)
 974 0190 00C0      		rjmp .L125
 975               	.L81:
 494:quantum/quantum.c ****             break;
 976               		.loc 1 494 13 is_stmt 1 view .LVU181
 494:quantum/quantum.c ****             break;
 977               		.loc 1 494 52 is_stmt 0 view .LVU182
 978 0192 8091 0000 		lds r24,keymap_config
 979 0196 8064      		ori r24,lo8(1<<6)
 980 0198 00C0      		rjmp .L125
 981               	.L80:
 497:quantum/quantum.c ****             break;
 982               		.loc 1 497 13 is_stmt 1 view .LVU183
 497:quantum/quantum.c ****             break;
 983               		.loc 1 497 32 is_stmt 0 view .LVU184
 984 019a 8091 0000 		lds r24,keymap_config
 985 019e 8068      		ori r24,lo8(1<<7)
 986 01a0 00C0      		rjmp .L125
 987               	.L79:
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 988               		.loc 1 500 13 is_stmt 1 view .LVU185
 501:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 989               		.loc 1 501 13 view .LVU186
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 990               		.loc 1 500 42 is_stmt 0 view .LVU187
 991 01a2 8091 0000 		lds r24,keymap_config
 992 01a6 8C60      		ori r24,lo8(12)
 993 01a8 00C0      		rjmp .L125
 994               	.L78:
 507:quantum/quantum.c ****             break;
 995               		.loc 1 507 13 is_stmt 1 view .LVU188
 507:quantum/quantum.c ****             break;
 996               		.loc 1 507 49 is_stmt 0 view .LVU189
 997 01aa 8091 0000 		lds r24,keymap_config
 998 01ae 8E7F      		andi r24,lo8(~(1<<0))
 999 01b0 00C0      		rjmp .L125
 1000               	.L77:
 510:quantum/quantum.c ****             break;
 1001               		.loc 1 510 13 is_stmt 1 view .LVU190
 510:quantum/quantum.c ****             break;
 1002               		.loc 1 510 47 is_stmt 0 view .LVU191
 1003 01b2 8091 0000 		lds r24,keymap_config
 1004 01b6 8D7F      		andi r24,lo8(~(1<<1))
 1005 01b8 00C0      		rjmp .L125
 1006               	.L76:
 513:quantum/quantum.c ****             break;
 1007               		.loc 1 513 13 is_stmt 1 view .LVU192
 513:quantum/quantum.c ****             break;
 1008               		.loc 1 513 42 is_stmt 0 view .LVU193
 1009 01ba 8091 0000 		lds r24,keymap_config
 1010 01be 8B7F      		andi r24,lo8(~(1<<2))
 1011 01c0 00C0      		rjmp .L125
 1012               	.L75:
 516:quantum/quantum.c ****             break;
 1013               		.loc 1 516 13 is_stmt 1 view .LVU194
 516:quantum/quantum.c ****             break;
 1014               		.loc 1 516 42 is_stmt 0 view .LVU195
 1015 01c2 8091 0000 		lds r24,keymap_config
 1016 01c6 877F      		andi r24,lo8(~(1<<3))
 1017 01c8 00C0      		rjmp .L125
 1018               	.L74:
 519:quantum/quantum.c ****             break;
 1019               		.loc 1 519 13 is_stmt 1 view .LVU196
 519:quantum/quantum.c ****             break;
 1020               		.loc 1 519 34 is_stmt 0 view .LVU197
 1021 01ca 8091 0000 		lds r24,keymap_config
 1022 01ce 8F7E      		andi r24,lo8(~(1<<4))
 1023 01d0 00C0      		rjmp .L125
 1024               	.L73:
 522:quantum/quantum.c ****             break;
 1025               		.loc 1 522 13 is_stmt 1 view .LVU198
 522:quantum/quantum.c ****             break;
 1026               		.loc 1 522 42 is_stmt 0 view .LVU199
 1027 01d2 8091 0000 		lds r24,keymap_config
 1028 01d6 8F7D      		andi r24,lo8(~(1<<5))
 1029 01d8 00C0      		rjmp .L125
 1030               	.L72:
 525:quantum/quantum.c ****             break;
 1031               		.loc 1 525 13 is_stmt 1 view .LVU200
 525:quantum/quantum.c ****             break;
 1032               		.loc 1 525 52 is_stmt 0 view .LVU201
 1033 01da 8091 0000 		lds r24,keymap_config
 1034 01de 8F7B      		andi r24,lo8(~(1<<6))
 1035 01e0 00C0      		rjmp .L125
 1036               	.L71:
 528:quantum/quantum.c ****             break;
 1037               		.loc 1 528 13 is_stmt 1 view .LVU202
 528:quantum/quantum.c ****             break;
 1038               		.loc 1 528 32 is_stmt 0 view .LVU203
 1039 01e2 8091 0000 		lds r24,keymap_config
 1040 01e6 8F77      		andi r24,lo8(~(1<<7))
 1041 01e8 00C0      		rjmp .L125
 1042               	.L70:
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1043               		.loc 1 531 13 is_stmt 1 view .LVU204
 532:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 1044               		.loc 1 532 13 view .LVU205
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1045               		.loc 1 531 42 is_stmt 0 view .LVU206
 1046 01ea 8091 0000 		lds r24,keymap_config
 1047 01ee 837F      		andi r24,lo8(-13)
 1048 01f0 00C0      		rjmp .L125
 1049               	.L68:
 538:quantum/quantum.c ****             break;
 1050               		.loc 1 538 13 is_stmt 1 view .LVU207
 538:quantum/quantum.c ****             break;
 1051               		.loc 1 538 48 is_stmt 0 view .LVU208
 1052 01f2 9091 0000 		lds r25,keymap_config
 538:quantum/quantum.c ****             break;
 1053               		.loc 1 538 32 view .LVU209
 1054 01f6 892F      		mov r24,r25
 1055 01f8 97FB      		bst r25,7
 1056 01fa 87F9      		bld r24,7
 1057 01fc 8058      		subi r24,0x80
 1058 01fe 00C0      		rjmp .L125
 1059               	.L61:
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1060               		.loc 1 550 7 is_stmt 1 view .LVU210
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1061               		.loc 1 550 24 is_stmt 0 view .LVU211
 1062 0200 F801      		movw r30,r16
 1063 0202 8281      		ldd r24,Z+2
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1064               		.loc 1 550 10 view .LVU212
 1065 0204 8823      		tst r24
 1066 0206 01F0      		breq .L88
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 1067               		.loc 1 551 9 is_stmt 1 view .LVU213
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 1068               		.loc 1 551 30 is_stmt 0 view .LVU214
 1069 0208 1092 0000 		sts shift_interrupted,__zero_reg__
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1070               		.loc 1 552 9 is_stmt 1 view .LVU215
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1071               		.loc 1 552 24 is_stmt 0 view .LVU216
 1072 020c 0E94 0000 		call timer_read
 1073               	.LVL65:
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1074               		.loc 1 552 22 view .LVU217
 1075 0210 9093 0000 		sts scs_timer+1,r25
 1076 0214 8093 0000 		sts scs_timer,r24
 553:quantum/quantum.c ****       }
 1077               		.loc 1 553 9 is_stmt 1 view .LVU218
 1078 0218 82E0      		ldi r24,lo8(2)
 1079               	.L127:
 575:quantum/quantum.c ****       }
 1080               		.loc 1 575 9 is_stmt 0 view .LVU219
 1081 021a 0E94 0000 		call register_mods
 1082               	.LVL66:
 1083 021e 00C0      		rjmp .L49
 1084               	.L88:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1085               		.loc 1 562 9 is_stmt 1 view .LVU220
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1086               		.loc 1 562 12 is_stmt 0 view .LVU221
 1087 0220 8091 0000 		lds r24,shift_interrupted
 1088 0224 8111      		cpse r24,__zero_reg__
 1089 0226 00C0      		rjmp .L90
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1090               		.loc 1 562 38 discriminator 1 view .LVU222
 1091 0228 8091 0000 		lds r24,scs_timer
 1092 022c 9091 0000 		lds r25,scs_timer+1
 1093 0230 0E94 0000 		call timer_elapsed
 1094               	.LVL67:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1095               		.loc 1 562 35 discriminator 1 view .LVU223
 1096 0234 8639      		cpi r24,-106
 1097 0236 9105      		cpc r25,__zero_reg__
 1098 0238 00F4      		brsh .L90
 563:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 1099               		.loc 1 563 11 is_stmt 1 view .LVU224
 1100 023a 86E2      		ldi r24,lo8(38)
 1101 023c 0E94 0000 		call register_code
 1102               	.LVL68:
 564:quantum/quantum.c ****         }
 1103               		.loc 1 564 11 view .LVU225
 1104 0240 86E2      		ldi r24,lo8(38)
 1105 0242 0E94 0000 		call unregister_code
 1106               	.LVL69:
 1107               	.L90:
 566:quantum/quantum.c ****       }
 1108               		.loc 1 566 9 view .LVU226
 1109 0246 82E0      		ldi r24,lo8(2)
 1110               	.L128:
 588:quantum/quantum.c ****       }
 1111               		.loc 1 588 9 is_stmt 0 view .LVU227
 1112 0248 0E94 0000 		call unregister_mods
 1113               	.LVL70:
 1114 024c 00C0      		rjmp .L49
 1115               	.L92:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1116               		.loc 1 584 9 is_stmt 1 view .LVU228
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1117               		.loc 1 584 12 is_stmt 0 view .LVU229
 1118 024e 8091 0000 		lds r24,shift_interrupted+1
 1119 0252 8111      		cpse r24,__zero_reg__
 1120 0254 00C0      		rjmp .L94
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1121               		.loc 1 584 38 discriminator 1 view .LVU230
 1122 0256 8091 0000 		lds r24,scs_timer+2
 1123 025a 9091 0000 		lds r25,scs_timer+2+1
 1124 025e 0E94 0000 		call timer_elapsed
 1125               	.LVL71:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1126               		.loc 1 584 35 discriminator 1 view .LVU231
 1127 0262 8639      		cpi r24,-106
 1128 0264 9105      		cpc r25,__zero_reg__
 1129 0266 00F4      		brsh .L94
 585:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 1130               		.loc 1 585 11 is_stmt 1 view .LVU232
 1131 0268 87E2      		ldi r24,lo8(39)
 1132 026a 0E94 0000 		call register_code
 1133               	.LVL72:
 586:quantum/quantum.c ****         }
 1134               		.loc 1 586 11 view .LVU233
 1135 026e 87E2      		ldi r24,lo8(39)
 1136 0270 0E94 0000 		call unregister_code
 1137               	.LVL73:
 1138               	.L94:
 588:quantum/quantum.c ****       }
 1139               		.loc 1 588 9 view .LVU234
 1140 0274 80E2      		ldi r24,lo8(32)
 1141 0276 00C0      		rjmp .L128
 1142               	.L59:
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 1143               		.loc 1 594 7 view .LVU235
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 1144               		.loc 1 594 10 is_stmt 0 view .LVU236
 1145 0278 F801      		movw r30,r16
 1146 027a 8281      		ldd r24,Z+2
 1147 027c 8111      		cpse r24,__zero_reg__
 1148 027e 00C0      		rjmp .L96
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1149               		.loc 1 599 12 is_stmt 1 view .LVU237
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1150               		.loc 1 599 34 is_stmt 0 view .LVU238
 1151 0280 8091 0000 		lds r24,shift_interrupted+1
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1152               		.loc 1 599 15 view .LVU239
 1153 0284 8111      		cpse r24,__zero_reg__
 1154 0286 00C0      		rjmp .L94
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1155               		.loc 1 599 41 discriminator 1 view .LVU240
 1156 0288 8091 0000 		lds r24,scs_timer+2
 1157 028c 9091 0000 		lds r25,scs_timer+2+1
 1158 0290 0E94 0000 		call timer_elapsed
 1159               	.LVL74:
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1160               		.loc 1 599 38 discriminator 1 view .LVU241
 1161 0294 8639      		cpi r24,-106
 1162 0296 9105      		cpc r25,__zero_reg__
 1163 0298 00F4      		brsh .L94
 600:quantum/quantum.c ****         register_code(SFTENT_KEY);
 1164               		.loc 1 600 9 is_stmt 1 view .LVU242
 1165 029a 80E2      		ldi r24,lo8(32)
 1166 029c 0E94 0000 		call unregister_mods
 1167               	.LVL75:
 601:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 1168               		.loc 1 601 9 view .LVU243
 1169 02a0 88E2      		ldi r24,lo8(40)
 1170 02a2 0E94 0000 		call register_code
 1171               	.LVL76:
 602:quantum/quantum.c ****       }
 1172               		.loc 1 602 9 view .LVU244
 1173 02a6 88E2      		ldi r24,lo8(40)
 1174 02a8 0E94 0000 		call unregister_code
 1175               	.LVL77:
 1176 02ac 00C0      		rjmp .L49
 1177               	.L53:
 1178               	.LBB25:
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1179               		.loc 1 611 7 view .LVU245
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1180               		.loc 1 611 25 is_stmt 0 view .LVU246
 1181 02ae 0E94 0000 		call get_mods
 1182               	.LVL78:
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1183               		.loc 1 644 7 is_stmt 1 view .LVU247
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1184               		.loc 1 644 10 is_stmt 0 view .LVU248
 1185 02b2 F801      		movw r30,r16
 1186 02b4 9281      		ldd r25,Z+2
 1187 02b6 9923      		tst r25
 1188 02b8 01F0      		breq .L97
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1189               		.loc 1 611 15 view .LVU249
 1190 02ba 8A7A      		andi r24,lo8(-86)
 1191               	.LVL79:
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1192               		.loc 1 645 9 is_stmt 1 view .LVU250
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1193               		.loc 1 645 31 is_stmt 0 view .LVU251
 1194 02bc 91E0      		ldi r25,lo8(1)
 1195 02be 01F4      		brne .L98
 1196 02c0 90E0      		ldi r25,0
 1197               	.L98:
 1198 02c2 9093 0000 		sts grave_esc_was_shifted,r25
 646:quantum/quantum.c ****       }
 1199               		.loc 1 646 9 is_stmt 1 view .LVU252
 1200 02c6 8111      		cpse r24,__zero_reg__
 1201 02c8 00C0      		rjmp .L102
 1202 02ca 89E2      		ldi r24,lo8(41)
 1203               	.LVL80:
 1204               	.L99:
 646:quantum/quantum.c ****       }
 1205               		.loc 1 646 9 is_stmt 0 discriminator 4 view .LVU253
 1206 02cc 0E94 0000 		call add_key
 1207               	.LVL81:
 1208               	.L100:
 652:quantum/quantum.c ****       return false;
 1209               		.loc 1 652 7 is_stmt 1 view .LVU254
 1210 02d0 0E94 0000 		call send_keyboard_report
 1211               	.LVL82:
 653:quantum/quantum.c ****     }
 1212               		.loc 1 653 7 view .LVU255
 653:quantum/quantum.c ****     }
 1213               		.loc 1 653 14 is_stmt 0 view .LVU256
 1214 02d4 00C0      		rjmp .L49
 1215               	.LVL83:
 1216               	.L102:
 646:quantum/quantum.c ****       }
 1217               		.loc 1 646 9 view .LVU257
 1218 02d6 85E3      		ldi r24,lo8(53)
 1219               	.LVL84:
 646:quantum/quantum.c ****       }
 1220               		.loc 1 646 9 view .LVU258
 1221 02d8 00C0      		rjmp .L99
 1222               	.LVL85:
 1223               	.L97:
 649:quantum/quantum.c ****       }
 1224               		.loc 1 649 9 is_stmt 1 view .LVU259
 1225 02da 8091 0000 		lds r24,grave_esc_was_shifted
 1226               	.LVL86:
 649:quantum/quantum.c ****       }
 1227               		.loc 1 649 9 is_stmt 0 view .LVU260
 1228 02de 8111      		cpse r24,__zero_reg__
 1229 02e0 00C0      		rjmp .L103
 1230 02e2 89E2      		ldi r24,lo8(41)
 1231               	.L101:
 649:quantum/quantum.c ****       }
 1232               		.loc 1 649 9 discriminator 4 view .LVU261
 1233 02e4 0E94 0000 		call del_key
 1234               	.LVL87:
 1235 02e8 00C0      		rjmp .L100
 1236               	.L103:
 649:quantum/quantum.c ****       }
 1237               		.loc 1 649 9 view .LVU262
 1238 02ea 85E3      		ldi r24,lo8(53)
 1239 02ec 00C0      		rjmp .L101
 1240               	.LBE25:
 1241               		.cfi_endproc
 1242               	.LFE39:
 1244               		.section	.text.send_char,"ax",@progbits
 1245               	.global	send_char
 1247               	send_char:
 1248               	.LVL88:
 1249               	.LFB44:
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 676:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 677:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 678:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 679:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 680:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 681:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 682:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 683:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 684:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 685:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 686:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 687:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 688:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 689:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 690:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 691:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 692:quantum/quantum.c **** };
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** __attribute__ ((weak))
 695:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 696:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 697:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 698:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 699:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 700:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 701:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 702:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 703:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 704:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 705:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 706:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 707:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 708:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 709:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 710:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 711:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 712:quantum/quantum.c **** };
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** void send_string(const char *str) {
 715:quantum/quantum.c ****   send_string_with_delay(str, 0);
 716:quantum/quantum.c **** }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** void send_string_P(const char *str) {
 719:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 720:quantum/quantum.c **** }
 721:quantum/quantum.c **** 
 722:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 723:quantum/quantum.c ****     while (1) {
 724:quantum/quantum.c ****         char ascii_code = *str;
 725:quantum/quantum.c ****         if (!ascii_code) break;
 726:quantum/quantum.c ****         if (ascii_code == 1) {
 727:quantum/quantum.c ****           // tap
 728:quantum/quantum.c ****           uint8_t keycode = *(++str);
 729:quantum/quantum.c ****           register_code(keycode);
 730:quantum/quantum.c ****           unregister_code(keycode);
 731:quantum/quantum.c ****         } else if (ascii_code == 2) {
 732:quantum/quantum.c ****           // down
 733:quantum/quantum.c ****           uint8_t keycode = *(++str);
 734:quantum/quantum.c ****           register_code(keycode);
 735:quantum/quantum.c ****         } else if (ascii_code == 3) {
 736:quantum/quantum.c ****           // up
 737:quantum/quantum.c ****           uint8_t keycode = *(++str);
 738:quantum/quantum.c ****           unregister_code(keycode);
 739:quantum/quantum.c ****         } else {
 740:quantum/quantum.c ****           send_char(ascii_code);
 741:quantum/quantum.c ****         }
 742:quantum/quantum.c ****         ++str;
 743:quantum/quantum.c ****         // interval
 744:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 745:quantum/quantum.c ****     }
 746:quantum/quantum.c **** }
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 749:quantum/quantum.c ****     while (1) {
 750:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 751:quantum/quantum.c ****         if (!ascii_code) break;
 752:quantum/quantum.c ****         if (ascii_code == 1) {
 753:quantum/quantum.c ****           // tap
 754:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 755:quantum/quantum.c ****           register_code(keycode);
 756:quantum/quantum.c ****           unregister_code(keycode);
 757:quantum/quantum.c ****         } else if (ascii_code == 2) {
 758:quantum/quantum.c ****           // down
 759:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 760:quantum/quantum.c ****           register_code(keycode);
 761:quantum/quantum.c ****         } else if (ascii_code == 3) {
 762:quantum/quantum.c ****           // up
 763:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 764:quantum/quantum.c ****           unregister_code(keycode);
 765:quantum/quantum.c ****         } else {
 766:quantum/quantum.c ****           send_char(ascii_code);
 767:quantum/quantum.c ****         }
 768:quantum/quantum.c ****         ++str;
 769:quantum/quantum.c ****         // interval
 770:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 771:quantum/quantum.c ****     }
 772:quantum/quantum.c **** }
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_char(char ascii_code) {
 1250               		.loc 1 774 33 is_stmt 1 view -0
 1251               		.cfi_startproc
 1252               		.loc 1 774 33 is_stmt 0 view .LVU264
 1253 0000 CF93      		push r28
 1254               	.LCFI12:
 1255               		.cfi_def_cfa_offset 3
 1256               		.cfi_offset 28, -2
 1257               	/* prologue: function */
 1258               	/* frame size = 0 */
 1259               	/* stack size = 1 */
 1260               	.L__stack_usage = 1
 775:quantum/quantum.c ****   uint8_t keycode;
 1261               		.loc 1 775 3 is_stmt 1 view .LVU265
 776:quantum/quantum.c ****   keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 1262               		.loc 1 776 3 view .LVU266
 1263               	.LBB26:
 1264               		.loc 1 776 13 view .LVU267
 1265 0002 90E0      		ldi r25,0
 1266               	.LVL89:
 1267               		.loc 1 776 13 view .LVU268
 1268               		.loc 1 776 13 view .LVU269
 1269 0004 FC01      		movw r30,r24
 1270 0006 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 1271 0008 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 1272               	.LVL90:
 1273               		.loc 1 776 13 is_stmt 0 view .LVU270
 1274               	/* #APP */
 1275               	 ;  776 "quantum/quantum.c" 1
 1276 000a C491      		lpm r28, Z
 1277               		
 1278               	 ;  0 "" 2
 1279               	.LVL91:
 1280               		.loc 1 776 13 is_stmt 1 view .LVU271
 1281               		.loc 1 776 13 is_stmt 0 view .LVU272
 1282               	/* #NOAPP */
 1283               	.LBE26:
 777:quantum/quantum.c ****   if (pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code])) {
 1284               		.loc 1 777 3 is_stmt 1 view .LVU273
 1285               	.LBB27:
 1286               		.loc 1 777 7 view .LVU274
 1287               		.loc 1 777 7 view .LVU275
 1288               		.loc 1 777 7 view .LVU276
 1289 000c 8050      		subi r24,lo8(-(ascii_to_shift_lut))
 1290 000e 9040      		sbci r25,hi8(-(ascii_to_shift_lut))
 1291               	.LVL92:
 1292               		.loc 1 777 7 is_stmt 0 view .LVU277
 1293 0010 FC01      		movw r30,r24
 1294               	.LVL93:
 1295               		.loc 1 777 7 view .LVU278
 1296               	/* #APP */
 1297               	 ;  777 "quantum/quantum.c" 1
 1298 0012 8491      		lpm r24, Z
 1299               		
 1300               	 ;  0 "" 2
 1301               	.LVL94:
 1302               		.loc 1 777 7 is_stmt 1 view .LVU279
 1303               	/* #NOAPP */
 1304               	.LBE27:
 1305               		.loc 1 777 6 is_stmt 0 view .LVU280
 1306 0014 8823      		tst r24
 1307 0016 01F0      		breq .L130
 778:quantum/quantum.c ****       register_code(KC_LSFT);
 1308               		.loc 1 778 7 is_stmt 1 view .LVU281
 1309 0018 81EE      		ldi r24,lo8(-31)
 1310               	.LVL95:
 1311               		.loc 1 778 7 is_stmt 0 view .LVU282
 1312 001a 0E94 0000 		call register_code
 1313               	.LVL96:
 779:quantum/quantum.c ****       register_code(keycode);
 1314               		.loc 1 779 7 is_stmt 1 view .LVU283
 1315 001e 8C2F      		mov r24,r28
 1316 0020 0E94 0000 		call register_code
 1317               	.LVL97:
 780:quantum/quantum.c ****       unregister_code(keycode);
 1318               		.loc 1 780 7 view .LVU284
 1319 0024 8C2F      		mov r24,r28
 1320 0026 0E94 0000 		call unregister_code
 1321               	.LVL98:
 781:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1322               		.loc 1 781 7 view .LVU285
 1323 002a 81EE      		ldi r24,lo8(-31)
 1324               	.L131:
 1325               	/* epilogue start */
 782:quantum/quantum.c ****   } else {
 783:quantum/quantum.c ****       register_code(keycode);
 784:quantum/quantum.c ****       unregister_code(keycode);
 785:quantum/quantum.c ****   }
 786:quantum/quantum.c **** }
 1326               		.loc 1 786 1 is_stmt 0 view .LVU286
 1327 002c CF91      		pop r28
 1328               	.LVL99:
 784:quantum/quantum.c ****   }
 1329               		.loc 1 784 7 view .LVU287
 1330 002e 0C94 0000 		jmp unregister_code
 1331               	.LVL100:
 1332               	.L130:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1333               		.loc 1 783 7 is_stmt 1 view .LVU288
 1334 0032 8C2F      		mov r24,r28
 1335               	.LVL101:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1336               		.loc 1 783 7 is_stmt 0 view .LVU289
 1337 0034 0E94 0000 		call register_code
 1338               	.LVL102:
 784:quantum/quantum.c ****   }
 1339               		.loc 1 784 7 is_stmt 1 view .LVU290
 1340 0038 8C2F      		mov r24,r28
 1341 003a 00C0      		rjmp .L131
 1342               		.cfi_endproc
 1343               	.LFE44:
 1345               		.section	.text.send_string_with_delay,"ax",@progbits
 1346               	.global	send_string_with_delay
 1348               	send_string_with_delay:
 1349               	.LVL103:
 1350               	.LFB42:
 722:quantum/quantum.c ****     while (1) {
 1351               		.loc 1 722 64 view -0
 1352               		.cfi_startproc
 722:quantum/quantum.c ****     while (1) {
 1353               		.loc 1 722 64 is_stmt 0 view .LVU292
 1354 0000 FF92      		push r15
 1355               	.LCFI13:
 1356               		.cfi_def_cfa_offset 3
 1357               		.cfi_offset 15, -2
 1358 0002 0F93      		push r16
 1359               	.LCFI14:
 1360               		.cfi_def_cfa_offset 4
 1361               		.cfi_offset 16, -3
 1362 0004 1F93      		push r17
 1363               	.LCFI15:
 1364               		.cfi_def_cfa_offset 5
 1365               		.cfi_offset 17, -4
 1366 0006 CF93      		push r28
 1367               	.LCFI16:
 1368               		.cfi_def_cfa_offset 6
 1369               		.cfi_offset 28, -5
 1370 0008 DF93      		push r29
 1371               	.LCFI17:
 1372               		.cfi_def_cfa_offset 7
 1373               		.cfi_offset 29, -6
 1374               	/* prologue: function */
 1375               	/* frame size = 0 */
 1376               	/* stack size = 5 */
 1377               	.L__stack_usage = 5
 1378 000a EC01      		movw r28,r24
 1379 000c F62E      		mov r15,r22
 1380               	.LVL104:
 1381               	.L140:
 723:quantum/quantum.c ****         char ascii_code = *str;
 1382               		.loc 1 723 5 is_stmt 1 view .LVU293
 1383               	.LBB28:
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1384               		.loc 1 724 9 view .LVU294
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1385               		.loc 1 724 14 is_stmt 0 view .LVU295
 1386 000e 8881      		ld r24,Y
 1387               	.LVL105:
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1388               		.loc 1 725 9 is_stmt 1 view .LVU296
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1389               		.loc 1 725 12 is_stmt 0 view .LVU297
 1390 0010 8823      		tst r24
 1391 0012 01F0      		breq .L132
 726:quantum/quantum.c ****           // tap
 1392               		.loc 1 726 9 is_stmt 1 view .LVU298
 1393 0014 8E01      		movw r16,r28
 1394 0016 0F5F      		subi r16,-1
 1395 0018 1F4F      		sbci r17,-1
 726:quantum/quantum.c ****           // tap
 1396               		.loc 1 726 12 is_stmt 0 view .LVU299
 1397 001a 8130      		cpi r24,lo8(1)
 1398 001c 01F4      		brne .L134
 1399               	.LBB29:
 728:quantum/quantum.c ****           register_code(keycode);
 1400               		.loc 1 728 11 is_stmt 1 view .LVU300
 1401               	.LVL106:
 728:quantum/quantum.c ****           register_code(keycode);
 1402               		.loc 1 728 19 is_stmt 0 view .LVU301
 1403 001e C981      		ldd r28,Y+1
 1404               	.LVL107:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1405               		.loc 1 729 11 is_stmt 1 view .LVU302
 1406 0020 8C2F      		mov r24,r28
 1407               	.LVL108:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1408               		.loc 1 729 11 is_stmt 0 view .LVU303
 1409 0022 0E94 0000 		call register_code
 1410               	.LVL109:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1411               		.loc 1 730 11 is_stmt 1 view .LVU304
 1412 0026 8C2F      		mov r24,r28
 1413               	.LVL110:
 1414               	.L141:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1415               		.loc 1 730 11 is_stmt 0 view .LVU305
 1416               	.LBE29:
 1417               	.LBB30:
 738:quantum/quantum.c ****         } else {
 1418               		.loc 1 738 11 view .LVU306
 1419 0028 0E94 0000 		call unregister_code
 1420               	.LVL111:
 1421               	.LBE30:
 1422 002c 00C0      		rjmp .L135
 1423               	.LVL112:
 1424               	.L134:
 731:quantum/quantum.c ****           // down
 1425               		.loc 1 731 16 is_stmt 1 view .LVU307
 731:quantum/quantum.c ****           // down
 1426               		.loc 1 731 19 is_stmt 0 view .LVU308
 1427 002e 8230      		cpi r24,lo8(2)
 1428 0030 01F4      		brne .L136
 1429               	.LBB31:
 733:quantum/quantum.c ****           register_code(keycode);
 1430               		.loc 1 733 11 is_stmt 1 view .LVU309
 1431               	.LVL113:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1432               		.loc 1 734 11 view .LVU310
 1433 0032 8981      		ldd r24,Y+1
 1434               	.LVL114:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1435               		.loc 1 734 11 is_stmt 0 view .LVU311
 1436 0034 0E94 0000 		call register_code
 1437               	.LVL115:
 1438               	.L135:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1439               		.loc 1 734 11 view .LVU312
 1440               	.LBE31:
 742:quantum/quantum.c ****         // interval
 1441               		.loc 1 742 9 is_stmt 1 view .LVU313
 1442 0038 E801      		movw r28,r16
 1443 003a 2196      		adiw r28,1
 1444               	.LVL116:
 1445               	.LBB32:
 744:quantum/quantum.c ****     }
 1446               		.loc 1 744 11 view .LVU314
 744:quantum/quantum.c ****     }
 1447               		.loc 1 744 34 view .LVU315
 744:quantum/quantum.c ****     }
 1448               		.loc 1 744 19 is_stmt 0 view .LVU316
 1449 003c 8F2D      		mov r24,r15
 1450               	.LVL117:
 1451               	.L138:
 744:quantum/quantum.c ****     }
 1452               		.loc 1 744 43 discriminator 1 view .LVU317
 1453               	.LVL118:
 1454 003e 8150      		subi r24,1
 1455 0040 00F0      		brcs .L140
 744:quantum/quantum.c ****     }
 1456               		.loc 1 744 47 is_stmt 1 view .LVU318
 1457               	.LBB33:
 1458               	.LBI33:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1459               		.loc 3 166 1 view .LVU319
 1460               	.LBB34:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1461               		.loc 3 168 2 view .LVU320
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1462               		.loc 3 172 2 view .LVU321
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1463               		.loc 3 173 2 view .LVU322
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1464               		.loc 3 174 2 view .LVU323
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1465               		.loc 3 184 3 view .LVU324
 1466               		.loc 3 187 2 view .LVU325
 1467 0042 EFE9      		ldi r30,lo8(3999)
 1468 0044 FFE0      		ldi r31,hi8(3999)
 1469 0046 3197      	1:	sbiw r30,1
 1470 0048 01F4      		brne 1b
 1471 004a 00C0      		rjmp .
 1472 004c 0000      		nop
 1473 004e 00C0      		rjmp .L138
 1474               	.LVL119:
 1475               	.L136:
 1476               		.loc 3 187 2 is_stmt 0 view .LVU326
 1477               	.LBE34:
 1478               	.LBE33:
 1479               	.LBE32:
 735:quantum/quantum.c ****           // up
 1480               		.loc 1 735 16 is_stmt 1 view .LVU327
 735:quantum/quantum.c ****           // up
 1481               		.loc 1 735 19 is_stmt 0 view .LVU328
 1482 0050 8330      		cpi r24,lo8(3)
 1483 0052 01F4      		brne .L137
 1484               	.LBB35:
 737:quantum/quantum.c ****           unregister_code(keycode);
 1485               		.loc 1 737 11 is_stmt 1 view .LVU329
 1486               	.LVL120:
 738:quantum/quantum.c ****         } else {
 1487               		.loc 1 738 11 view .LVU330
 1488 0054 8981      		ldd r24,Y+1
 1489               	.LVL121:
 738:quantum/quantum.c ****         } else {
 1490               		.loc 1 738 11 is_stmt 0 view .LVU331
 1491 0056 00C0      		rjmp .L141
 1492               	.LVL122:
 1493               	.L137:
 738:quantum/quantum.c ****         } else {
 1494               		.loc 1 738 11 view .LVU332
 1495               	.LBE35:
 740:quantum/quantum.c ****         }
 1496               		.loc 1 740 11 is_stmt 1 view .LVU333
 1497 0058 0E94 0000 		call send_char
 1498               	.LVL123:
 740:quantum/quantum.c ****         }
 1499               		.loc 1 740 11 is_stmt 0 view .LVU334
 1500 005c 8E01      		movw r16,r28
 1501 005e 00C0      		rjmp .L135
 1502               	.LVL124:
 1503               	.L132:
 1504               	/* epilogue start */
 740:quantum/quantum.c ****         }
 1505               		.loc 1 740 11 view .LVU335
 1506               	.LBE28:
 746:quantum/quantum.c **** 
 1507               		.loc 1 746 1 view .LVU336
 1508 0060 DF91      		pop r29
 1509 0062 CF91      		pop r28
 1510               	.LVL125:
 746:quantum/quantum.c **** 
 1511               		.loc 1 746 1 view .LVU337
 1512 0064 1F91      		pop r17
 1513 0066 0F91      		pop r16
 1514 0068 FF90      		pop r15
 1515               	.LVL126:
 746:quantum/quantum.c **** 
 1516               		.loc 1 746 1 view .LVU338
 1517 006a 0895      		ret
 1518               		.cfi_endproc
 1519               	.LFE42:
 1521               		.section	.text.send_string,"ax",@progbits
 1522               	.global	send_string
 1524               	send_string:
 1525               	.LVL127:
 1526               	.LFB40:
 714:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1527               		.loc 1 714 35 is_stmt 1 view -0
 1528               		.cfi_startproc
 1529               	/* prologue: function */
 1530               	/* frame size = 0 */
 1531               	/* stack size = 0 */
 1532               	.L__stack_usage = 0
 715:quantum/quantum.c **** }
 1533               		.loc 1 715 3 view .LVU340
 1534 0000 60E0      		ldi r22,0
 1535 0002 0C94 0000 		jmp send_string_with_delay
 1536               	.LVL128:
 715:quantum/quantum.c **** }
 1537               		.loc 1 715 3 is_stmt 0 view .LVU341
 1538               		.cfi_endproc
 1539               	.LFE40:
 1541               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1542               	.global	send_string_with_delay_P
 1544               	send_string_with_delay_P:
 1545               	.LVL129:
 1546               	.LFB43:
 748:quantum/quantum.c ****     while (1) {
 1547               		.loc 1 748 66 is_stmt 1 view -0
 1548               		.cfi_startproc
 748:quantum/quantum.c ****     while (1) {
 1549               		.loc 1 748 66 is_stmt 0 view .LVU343
 1550 0000 FF92      		push r15
 1551               	.LCFI18:
 1552               		.cfi_def_cfa_offset 3
 1553               		.cfi_offset 15, -2
 1554 0002 0F93      		push r16
 1555               	.LCFI19:
 1556               		.cfi_def_cfa_offset 4
 1557               		.cfi_offset 16, -3
 1558 0004 1F93      		push r17
 1559               	.LCFI20:
 1560               		.cfi_def_cfa_offset 5
 1561               		.cfi_offset 17, -4
 1562 0006 CF93      		push r28
 1563               	.LCFI21:
 1564               		.cfi_def_cfa_offset 6
 1565               		.cfi_offset 28, -5
 1566 0008 DF93      		push r29
 1567               	.LCFI22:
 1568               		.cfi_def_cfa_offset 7
 1569               		.cfi_offset 29, -6
 1570               	/* prologue: function */
 1571               	/* frame size = 0 */
 1572               	/* stack size = 5 */
 1573               	.L__stack_usage = 5
 1574 000a 8C01      		movw r16,r24
 1575 000c F62E      		mov r15,r22
 1576               	.LVL130:
 1577               	.L151:
 749:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1578               		.loc 1 749 5 is_stmt 1 view .LVU344
 1579               	.LBB36:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1580               		.loc 1 750 9 view .LVU345
 1581               	.LBB37:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1582               		.loc 1 750 27 view .LVU346
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1583               		.loc 1 750 27 view .LVU347
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1584               		.loc 1 750 27 view .LVU348
 1585 000e F801      		movw r30,r16
 1586               	/* #APP */
 1587               	 ;  750 "quantum/quantum.c" 1
 1588 0010 8491      		lpm r24, Z
 1589               		
 1590               	 ;  0 "" 2
 1591               	.LVL131:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1592               		.loc 1 750 27 view .LVU349
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1593               		.loc 1 750 27 is_stmt 0 view .LVU350
 1594               	/* #NOAPP */
 1595               	.LBE37:
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1596               		.loc 1 751 9 is_stmt 1 view .LVU351
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1597               		.loc 1 751 12 is_stmt 0 view .LVU352
 1598 0012 8823      		tst r24
 1599 0014 01F0      		breq .L143
 752:quantum/quantum.c ****           // tap
 1600               		.loc 1 752 9 is_stmt 1 view .LVU353
 1601 0016 E801      		movw r28,r16
 1602 0018 2196      		adiw r28,1
 752:quantum/quantum.c ****           // tap
 1603               		.loc 1 752 12 is_stmt 0 view .LVU354
 1604 001a 8130      		cpi r24,lo8(1)
 1605 001c 01F4      		brne .L145
 1606               	.LBB38:
 754:quantum/quantum.c ****           register_code(keycode);
 1607               		.loc 1 754 11 is_stmt 1 view .LVU355
 1608               	.LBB39:
 754:quantum/quantum.c ****           register_code(keycode);
 1609               		.loc 1 754 29 view .LVU356
 1610               	.LVL132:
 754:quantum/quantum.c ****           register_code(keycode);
 1611               		.loc 1 754 29 view .LVU357
 754:quantum/quantum.c ****           register_code(keycode);
 1612               		.loc 1 754 29 view .LVU358
 1613 001e FE01      		movw r30,r28
 1614               	/* #APP */
 1615               	 ;  754 "quantum/quantum.c" 1
 1616 0020 1491      		lpm r17, Z
 1617               		
 1618               	 ;  0 "" 2
 1619               	.LVL133:
 754:quantum/quantum.c ****           register_code(keycode);
 1620               		.loc 1 754 29 view .LVU359
 754:quantum/quantum.c ****           register_code(keycode);
 1621               		.loc 1 754 29 is_stmt 0 view .LVU360
 1622               	/* #NOAPP */
 1623               	.LBE39:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1624               		.loc 1 755 11 is_stmt 1 view .LVU361
 1625 0022 812F      		mov r24,r17
 1626               	.LVL134:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1627               		.loc 1 755 11 is_stmt 0 view .LVU362
 1628 0024 0E94 0000 		call register_code
 1629               	.LVL135:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1630               		.loc 1 756 11 is_stmt 1 view .LVU363
 1631 0028 812F      		mov r24,r17
 1632               	.LVL136:
 1633               	.L152:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1634               		.loc 1 756 11 is_stmt 0 view .LVU364
 1635               	.LBE38:
 1636               	.LBB40:
 1637               	.LBB41:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1638               		.loc 1 763 29 is_stmt 1 view .LVU365
 763:quantum/quantum.c ****           unregister_code(keycode);
 1639               		.loc 1 763 29 is_stmt 0 view .LVU366
 1640               	.LBE41:
 764:quantum/quantum.c ****         } else {
 1641               		.loc 1 764 11 is_stmt 1 view .LVU367
 1642 002a 0E94 0000 		call unregister_code
 1643               	.LVL137:
 764:quantum/quantum.c ****         } else {
 1644               		.loc 1 764 11 is_stmt 0 view .LVU368
 1645               	.LBE40:
 1646 002e 00C0      		rjmp .L146
 1647               	.LVL138:
 1648               	.L145:
 757:quantum/quantum.c ****           // down
 1649               		.loc 1 757 16 is_stmt 1 view .LVU369
 757:quantum/quantum.c ****           // down
 1650               		.loc 1 757 19 is_stmt 0 view .LVU370
 1651 0030 8230      		cpi r24,lo8(2)
 1652 0032 01F4      		brne .L147
 1653               	.LBB43:
 759:quantum/quantum.c ****           register_code(keycode);
 1654               		.loc 1 759 11 is_stmt 1 view .LVU371
 1655               	.LBB44:
 759:quantum/quantum.c ****           register_code(keycode);
 1656               		.loc 1 759 29 view .LVU372
 1657               	.LVL139:
 759:quantum/quantum.c ****           register_code(keycode);
 1658               		.loc 1 759 29 view .LVU373
 759:quantum/quantum.c ****           register_code(keycode);
 1659               		.loc 1 759 29 view .LVU374
 1660 0034 FE01      		movw r30,r28
 1661               	/* #APP */
 1662               	 ;  759 "quantum/quantum.c" 1
 1663 0036 8491      		lpm r24, Z
 1664               		
 1665               	 ;  0 "" 2
 1666               	.LVL140:
 759:quantum/quantum.c ****           register_code(keycode);
 1667               		.loc 1 759 29 view .LVU375
 759:quantum/quantum.c ****           register_code(keycode);
 1668               		.loc 1 759 29 is_stmt 0 view .LVU376
 1669               	/* #NOAPP */
 1670               	.LBE44:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1671               		.loc 1 760 11 is_stmt 1 view .LVU377
 1672 0038 0E94 0000 		call register_code
 1673               	.LVL141:
 1674               	.L146:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1675               		.loc 1 760 11 is_stmt 0 view .LVU378
 1676               	.LBE43:
 768:quantum/quantum.c ****         // interval
 1677               		.loc 1 768 9 is_stmt 1 view .LVU379
 768:quantum/quantum.c ****         // interval
 1678               		.loc 1 768 9 is_stmt 0 view .LVU380
 1679 003c 8E01      		movw r16,r28
 1680 003e 0F5F      		subi r16,-1
 1681 0040 1F4F      		sbci r17,-1
 1682               	.LVL142:
 1683               	.LBB45:
 770:quantum/quantum.c ****     }
 1684               		.loc 1 770 11 is_stmt 1 view .LVU381
 770:quantum/quantum.c ****     }
 1685               		.loc 1 770 34 view .LVU382
 770:quantum/quantum.c ****     }
 1686               		.loc 1 770 19 is_stmt 0 view .LVU383
 1687 0042 8F2D      		mov r24,r15
 1688               	.LVL143:
 1689               	.L149:
 770:quantum/quantum.c ****     }
 1690               		.loc 1 770 43 discriminator 1 view .LVU384
 1691               	.LVL144:
 1692 0044 8150      		subi r24,1
 1693 0046 00F0      		brcs .L151
 770:quantum/quantum.c ****     }
 1694               		.loc 1 770 47 is_stmt 1 view .LVU385
 1695               	.LBB46:
 1696               	.LBI46:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1697               		.loc 3 166 1 view .LVU386
 1698               	.LBB47:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1699               		.loc 3 168 2 view .LVU387
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1700               		.loc 3 172 2 view .LVU388
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1701               		.loc 3 173 2 view .LVU389
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1702               		.loc 3 174 2 view .LVU390
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1703               		.loc 3 184 3 view .LVU391
 1704               		.loc 3 187 2 view .LVU392
 1705 0048 EFE9      		ldi r30,lo8(3999)
 1706 004a FFE0      		ldi r31,hi8(3999)
 1707 004c 3197      	1:	sbiw r30,1
 1708 004e 01F4      		brne 1b
 1709 0050 00C0      		rjmp .
 1710 0052 0000      		nop
 1711 0054 00C0      		rjmp .L149
 1712               	.LVL145:
 1713               	.L147:
 1714               		.loc 3 187 2 is_stmt 0 view .LVU393
 1715               	.LBE47:
 1716               	.LBE46:
 1717               	.LBE45:
 761:quantum/quantum.c ****           // up
 1718               		.loc 1 761 16 is_stmt 1 view .LVU394
 761:quantum/quantum.c ****           // up
 1719               		.loc 1 761 19 is_stmt 0 view .LVU395
 1720 0056 8330      		cpi r24,lo8(3)
 1721 0058 01F4      		brne .L148
 1722               	.LBB48:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1723               		.loc 1 763 11 is_stmt 1 view .LVU396
 1724               	.LBB42:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1725               		.loc 1 763 29 view .LVU397
 1726               	.LVL146:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1727               		.loc 1 763 29 view .LVU398
 763:quantum/quantum.c ****           unregister_code(keycode);
 1728               		.loc 1 763 29 view .LVU399
 1729 005a FE01      		movw r30,r28
 1730               	/* #APP */
 1731               	 ;  763 "quantum/quantum.c" 1
 1732 005c 8491      		lpm r24, Z
 1733               		
 1734               	 ;  0 "" 2
 1735               	.LVL147:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1736               		.loc 1 763 29 is_stmt 0 view .LVU400
 1737               	/* #NOAPP */
 1738 005e 00C0      		rjmp .L152
 1739               	.LVL148:
 1740               	.L148:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1741               		.loc 1 763 29 view .LVU401
 1742               	.LBE42:
 1743               	.LBE48:
 766:quantum/quantum.c ****         }
 1744               		.loc 1 766 11 is_stmt 1 view .LVU402
 1745 0060 0E94 0000 		call send_char
 1746               	.LVL149:
 766:quantum/quantum.c ****         }
 1747               		.loc 1 766 11 is_stmt 0 view .LVU403
 1748 0064 E801      		movw r28,r16
 1749 0066 00C0      		rjmp .L146
 1750               	.LVL150:
 1751               	.L143:
 1752               	/* epilogue start */
 766:quantum/quantum.c ****         }
 1753               		.loc 1 766 11 view .LVU404
 1754               	.LBE36:
 772:quantum/quantum.c **** 
 1755               		.loc 1 772 1 view .LVU405
 1756 0068 DF91      		pop r29
 1757 006a CF91      		pop r28
 1758 006c 1F91      		pop r17
 1759 006e 0F91      		pop r16
 1760               	.LVL151:
 772:quantum/quantum.c **** 
 1761               		.loc 1 772 1 view .LVU406
 1762 0070 FF90      		pop r15
 1763               	.LVL152:
 772:quantum/quantum.c **** 
 1764               		.loc 1 772 1 view .LVU407
 1765 0072 0895      		ret
 1766               		.cfi_endproc
 1767               	.LFE43:
 1769               		.section	.text.send_string_P,"ax",@progbits
 1770               	.global	send_string_P
 1772               	send_string_P:
 1773               	.LVL153:
 1774               	.LFB41:
 718:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1775               		.loc 1 718 37 is_stmt 1 view -0
 1776               		.cfi_startproc
 1777               	/* prologue: function */
 1778               	/* frame size = 0 */
 1779               	/* stack size = 0 */
 1780               	.L__stack_usage = 0
 719:quantum/quantum.c **** }
 1781               		.loc 1 719 3 view .LVU409
 1782 0000 60E0      		ldi r22,0
 1783 0002 0C94 0000 		jmp send_string_with_delay_P
 1784               	.LVL154:
 719:quantum/quantum.c **** }
 1785               		.loc 1 719 3 is_stmt 0 view .LVU410
 1786               		.cfi_endproc
 1787               	.LFE41:
 1789               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1790               	.global	set_single_persistent_default_layer
 1792               	set_single_persistent_default_layer:
 1793               	.LVL155:
 1794               	.LFB45:
 787:quantum/quantum.c **** 
 788:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1795               		.loc 1 788 65 is_stmt 1 view -0
 1796               		.cfi_startproc
 1797               		.loc 1 788 65 is_stmt 0 view .LVU412
 1798 0000 CF93      		push r28
 1799               	.LCFI23:
 1800               		.cfi_def_cfa_offset 3
 1801               		.cfi_offset 28, -2
 1802 0002 DF93      		push r29
 1803               	.LCFI24:
 1804               		.cfi_def_cfa_offset 4
 1805               		.cfi_offset 29, -3
 1806               	/* prologue: function */
 1807               	/* frame size = 0 */
 1808               	/* stack size = 2 */
 1809               	.L__stack_usage = 2
 789:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 790:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 791:quantum/quantum.c ****   #endif
 792:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1810               		.loc 1 792 3 is_stmt 1 view .LVU413
 1811               		.loc 1 792 35 is_stmt 0 view .LVU414
 1812 0004 C1E0      		ldi r28,lo8(1)
 1813 0006 D0E0      		ldi r29,0
 1814 0008 00C0      		rjmp 2f
 1815               		1:
 1816 000a CC0F      		lsl r28
 1817 000c DD1F      		rol r29
 1818               		2:
 1819 000e 8A95      		dec r24
 1820 0010 02F4      		brpl 1b
 1821               		.loc 1 792 3 view .LVU415
 1822 0012 8C2F      		mov r24,r28
 1823               	.LVL156:
 1824               		.loc 1 792 3 view .LVU416
 1825 0014 0E94 0000 		call eeconfig_update_default_layer
 1826               	.LVL157:
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1827               		.loc 1 793 3 is_stmt 1 view .LVU417
 1828 0018 BE01      		movw r22,r28
 1829 001a 90E0      		ldi r25,0
 1830 001c 80E0      		ldi r24,0
 1831               	/* epilogue start */
 794:quantum/quantum.c **** }
 1832               		.loc 1 794 1 is_stmt 0 view .LVU418
 1833 001e DF91      		pop r29
 1834 0020 CF91      		pop r28
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1835               		.loc 1 793 3 view .LVU419
 1836 0022 0C94 0000 		jmp default_layer_set
 1837               	.LVL158:
 1838               		.cfi_endproc
 1839               	.LFE45:
 1841               		.section	.text.update_tri_layer_state,"ax",@progbits
 1842               	.global	update_tri_layer_state
 1844               	update_tri_layer_state:
 1845               	.LVL159:
 1846               	.LFB46:
 795:quantum/quantum.c **** 
 796:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1847               		.loc 1 796 97 is_stmt 1 view -0
 1848               		.cfi_startproc
 1849               		.loc 1 796 97 is_stmt 0 view .LVU421
 1850 0000 8F92      		push r8
 1851               	.LCFI25:
 1852               		.cfi_def_cfa_offset 3
 1853               		.cfi_offset 8, -2
 1854 0002 9F92      		push r9
 1855               	.LCFI26:
 1856               		.cfi_def_cfa_offset 4
 1857               		.cfi_offset 9, -3
 1858 0004 AF92      		push r10
 1859               	.LCFI27:
 1860               		.cfi_def_cfa_offset 5
 1861               		.cfi_offset 10, -4
 1862 0006 BF92      		push r11
 1863               	.LCFI28:
 1864               		.cfi_def_cfa_offset 6
 1865               		.cfi_offset 11, -5
 1866 0008 CF92      		push r12
 1867               	.LCFI29:
 1868               		.cfi_def_cfa_offset 7
 1869               		.cfi_offset 12, -6
 1870 000a DF92      		push r13
 1871               	.LCFI30:
 1872               		.cfi_def_cfa_offset 8
 1873               		.cfi_offset 13, -7
 1874 000c EF92      		push r14
 1875               	.LCFI31:
 1876               		.cfi_def_cfa_offset 9
 1877               		.cfi_offset 14, -8
 1878 000e FF92      		push r15
 1879               	.LCFI32:
 1880               		.cfi_def_cfa_offset 10
 1881               		.cfi_offset 15, -9
 1882 0010 0F93      		push r16
 1883               	.LCFI33:
 1884               		.cfi_def_cfa_offset 11
 1885               		.cfi_offset 16, -10
 1886 0012 1F93      		push r17
 1887               	.LCFI34:
 1888               		.cfi_def_cfa_offset 12
 1889               		.cfi_offset 17, -11
 1890               	/* prologue: function */
 1891               	/* frame size = 0 */
 1892               	/* stack size = 10 */
 1893               	.L__stack_usage = 10
 1894 0014 6B01      		movw r12,r22
 1895 0016 7C01      		movw r14,r24
 797:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 1896               		.loc 1 797 3 is_stmt 1 view .LVU422
 1897               		.loc 1 797 26 is_stmt 0 view .LVU423
 1898 0018 81E0      		ldi r24,lo8(1)
 1899 001a 90E0      		ldi r25,0
 1900 001c A0E0      		ldi r26,0
 1901 001e B0E0      		ldi r27,0
 1902 0020 4C01      		movw r8,r24
 1903 0022 5D01      		movw r10,r26
 1904 0024 00C0      		rjmp 2f
 1905               		1:
 1906 0026 880C      		lsl r8
 1907 0028 991C      		rol r9
 1908 002a AA1C      		rol r10
 1909 002c BB1C      		rol r11
 1910               		2:
 1911 002e 4A95      		dec r20
 1912 0030 02F4      		brpl 1b
 1913 0032 B501      		movw r22,r10
 1914               	.LVL160:
 1915               		.loc 1 797 26 view .LVU424
 1916 0034 A401      		movw r20,r8
 1917               	.LVL161:
 1918               		.loc 1 797 44 view .LVU425
 1919 0036 4C01      		movw r8,r24
 1920 0038 5D01      		movw r10,r26
 1921 003a 00C0      		rjmp 2f
 1922               		1:
 1923 003c 880C      		lsl r8
 1924 003e 991C      		rol r9
 1925 0040 AA1C      		rol r10
 1926 0042 BB1C      		rol r11
 1927               		2:
 1928 0044 2A95      		dec r18
 1929 0046 02F4      		brpl 1b
 1930               		.loc 1 797 12 view .LVU426
 1931 0048 4829      		or r20,r8
 1932 004a 5929      		or r21,r9
 1933 004c 6A29      		or r22,r10
 1934 004e 7B29      		or r23,r11
 1935               	.LVL162:
 798:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 1936               		.loc 1 798 3 is_stmt 1 view .LVU427
 1937               		.loc 1 798 12 is_stmt 0 view .LVU428
 1938 0050 00C0      		rjmp 2f
 1939               		1:
 1940 0052 880F      		lsl r24
 1941 0054 991F      		rol r25
 1942 0056 AA1F      		rol r26
 1943 0058 BB1F      		rol r27
 1944               		2:
 1945 005a 0A95      		dec r16
 1946 005c 02F4      		brpl 1b
 1947               	.LVL163:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1948               		.loc 1 799 3 is_stmt 1 view .LVU429
 1949               		.loc 1 799 17 is_stmt 0 view .LVU430
 1950 005e 8A01      		movw r16,r20
 1951               	.LVL164:
 1952               		.loc 1 799 17 view .LVU431
 1953 0060 9B01      		movw r18,r22
 1954               	.LVL165:
 1955               		.loc 1 799 17 view .LVU432
 1956 0062 0C21      		and r16,r12
 1957 0064 1D21      		and r17,r13
 1958 0066 2E21      		and r18,r14
 1959 0068 3F21      		and r19,r15
 1960               		.loc 1 799 55 view .LVU433
 1961 006a 0417      		cp r16,r20
 1962 006c 1507      		cpc r17,r21
 1963 006e 2607      		cpc r18,r22
 1964 0070 3707      		cpc r19,r23
 1965 0072 01F4      		brne .L156
 1966               		.loc 1 799 55 discriminator 1 view .LVU434
 1967 0074 8C29      		or r24,r12
 1968               	.LVL166:
 1969               		.loc 1 799 55 discriminator 1 view .LVU435
 1970 0076 9D29      		or r25,r13
 1971 0078 AE29      		or r26,r14
 1972 007a BF29      		or r27,r15
 1973               	.L155:
 800:quantum/quantum.c **** }
 1974               		.loc 1 800 1 view .LVU436
 1975 007c BC01      		movw r22,r24
 1976 007e CD01      		movw r24,r26
 1977               	/* epilogue start */
 1978 0080 1F91      		pop r17
 1979               	.LVL167:
 1980               		.loc 1 800 1 view .LVU437
 1981 0082 0F91      		pop r16
 1982               	.LVL168:
 1983               		.loc 1 800 1 view .LVU438
 1984 0084 FF90      		pop r15
 1985 0086 EF90      		pop r14
 1986 0088 DF90      		pop r13
 1987 008a CF90      		pop r12
 1988 008c BF90      		pop r11
 1989 008e AF90      		pop r10
 1990 0090 9F90      		pop r9
 1991 0092 8F90      		pop r8
 1992               	.LVL169:
 1993               		.loc 1 800 1 view .LVU439
 1994 0094 0895      		ret
 1995               	.LVL170:
 1996               	.L156:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1997               		.loc 1 799 66 discriminator 2 view .LVU440
 1998 0096 8095      		com r24
 1999 0098 9095      		com r25
 2000 009a A095      		com r26
 2001 009c B095      		com r27
 2002               	.LVL171:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2003               		.loc 1 799 55 discriminator 2 view .LVU441
 2004 009e 8C21      		and r24,r12
 2005               	.LVL172:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2006               		.loc 1 799 55 discriminator 2 view .LVU442
 2007 00a0 9D21      		and r25,r13
 2008 00a2 AE21      		and r26,r14
 2009 00a4 BF21      		and r27,r15
 2010 00a6 00C0      		rjmp .L155
 2011               		.cfi_endproc
 2012               	.LFE46:
 2014               		.section	.text.update_tri_layer,"ax",@progbits
 2015               	.global	update_tri_layer
 2017               	update_tri_layer:
 2018               	.LVL173:
 2019               	.LFB47:
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 2020               		.loc 1 802 71 is_stmt 1 view -0
 2021               		.cfi_startproc
 2022               		.loc 1 802 71 is_stmt 0 view .LVU444
 2023 0000 0F93      		push r16
 2024               	.LCFI35:
 2025               		.cfi_def_cfa_offset 3
 2026               		.cfi_offset 16, -2
 2027               	/* prologue: function */
 2028               	/* frame size = 0 */
 2029               	/* stack size = 1 */
 2030               	.L__stack_usage = 1
 2031 0002 382F      		mov r19,r24
 2032 0004 262F      		mov r18,r22
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2033               		.loc 1 803 3 is_stmt 1 view .LVU445
 2034 0006 6091 0000 		lds r22,layer_state
 2035 000a 7091 0000 		lds r23,layer_state+1
 2036 000e 8091 0000 		lds r24,layer_state+2
 2037 0012 9091 0000 		lds r25,layer_state+3
 2038               	.LVL174:
 2039               		.loc 1 803 3 is_stmt 0 view .LVU446
 2040 0016 042F      		mov r16,r20
 2041 0018 432F      		mov r20,r19
 2042               	.LVL175:
 2043               		.loc 1 803 3 view .LVU447
 2044 001a 0E94 0000 		call update_tri_layer_state
 2045               	.LVL176:
 2046               	/* epilogue start */
 804:quantum/quantum.c **** }
 2047               		.loc 1 804 1 view .LVU448
 2048 001e 0F91      		pop r16
 2049               	.LVL177:
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2050               		.loc 1 803 3 view .LVU449
 2051 0020 0C94 0000 		jmp layer_state_set
 2052               	.LVL178:
 2053               		.cfi_endproc
 2054               	.LFE47:
 2056               		.section	.text.tap_random_base64,"ax",@progbits
 2057               	.global	tap_random_base64
 2059               	tap_random_base64:
 2060               	.LFB48:
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** void tap_random_base64(void) {
 2061               		.loc 1 806 30 is_stmt 1 view -0
 2062               		.cfi_startproc
 2063 0000 CF93      		push r28
 2064               	.LCFI36:
 2065               		.cfi_def_cfa_offset 3
 2066               		.cfi_offset 28, -2
 2067 0002 DF93      		push r29
 2068               	.LCFI37:
 2069               		.cfi_def_cfa_offset 4
 2070               		.cfi_offset 29, -3
 2071               	/* prologue: function */
 2072               	/* frame size = 0 */
 2073               	/* stack size = 2 */
 2074               	.L__stack_usage = 2
 807:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 808:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 2075               		.loc 1 808 5 view .LVU451
 2076               		.loc 1 808 20 is_stmt 0 view .LVU452
 2077 0004 46B5      		in r20,0x26
 2078               		.loc 1 808 28 view .LVU453
 2079 0006 2091 8400 		lds r18,132
 2080 000a 3091 8500 		lds r19,132+1
 2081               		.loc 1 808 36 view .LVU454
 2082 000e C091 9400 		lds r28,148
 2083 0012 D091 9500 		lds r29,148+1
 2084               		.loc 1 808 44 view .LVU455
 2085 0016 8091 BE00 		lds r24,190
 2086 001a 9091 BF00 		lds r25,190+1
 2087               		.loc 1 808 34 view .LVU456
 2088 001e C20F      		add r28,r18
 2089 0020 C40F      		add r28,r20
 2090               		.loc 1 808 42 view .LVU457
 2091 0022 C80F      		add r28,r24
 2092               		.loc 1 808 13 view .LVU458
 2093 0024 CF73      		andi r28,lo8(63)
 2094               	.LVL179:
 809:quantum/quantum.c ****   #else
 810:quantum/quantum.c ****     uint8_t key = rand() % 64;
 811:quantum/quantum.c ****   #endif
 812:quantum/quantum.c ****   switch (key) {
 2095               		.loc 1 812 3 is_stmt 1 view .LVU459
 2096 0026 CE33      		cpi r28,lo8(62)
 2097 0028 00F4      		brsh .L160
 2098 002a C533      		cpi r28,lo8(53)
 2099 002c 00F4      		brsh .L161
 2100 002e CA31      		cpi r28,lo8(26)
 2101 0030 00F0      		brlo .L162
 2102 0032 C433      		cpi r28,lo8(52)
 2103 0034 00F4      		brsh .L167
 813:quantum/quantum.c ****     case 0 ... 25:
 814:quantum/quantum.c ****       register_code(KC_LSFT);
 815:quantum/quantum.c ****       register_code(key + KC_A);
 816:quantum/quantum.c ****       unregister_code(key + KC_A);
 817:quantum/quantum.c ****       unregister_code(KC_LSFT);
 818:quantum/quantum.c ****       break;
 819:quantum/quantum.c ****     case 26 ... 51:
 820:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 2104               		.loc 1 820 7 view .LVU460
 2105 0036 C651      		subi r28,lo8(-(-22))
 2106               	.LVL180:
 2107               	.L170:
 821:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 822:quantum/quantum.c ****       break;
 823:quantum/quantum.c ****     case 52:
 824:quantum/quantum.c ****       register_code(KC_0);
 825:quantum/quantum.c ****       unregister_code(KC_0);
 826:quantum/quantum.c ****       break;
 827:quantum/quantum.c ****     case 53 ... 61:
 828:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 2108               		.loc 1 828 7 is_stmt 0 view .LVU461
 2109 0038 8C2F      		mov r24,r28
 2110 003a 0E94 0000 		call register_code
 2111               	.LVL181:
 829:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2112               		.loc 1 829 7 is_stmt 1 view .LVU462
 2113 003e 8C2F      		mov r24,r28
 2114 0040 00C0      		rjmp .L168
 2115               	.LVL182:
 2116               	.L160:
 812:quantum/quantum.c ****     case 0 ... 25:
 2117               		.loc 1 812 3 is_stmt 0 view .LVU463
 2118 0042 CE33      		cpi r28,lo8(62)
 2119 0044 01F0      		breq .L165
 2120 0046 CF33      		cpi r28,lo8(63)
 2121 0048 01F0      		breq .L166
 2122               	.L162:
 814:quantum/quantum.c ****       register_code(key + KC_A);
 2123               		.loc 1 814 7 is_stmt 1 view .LVU464
 2124 004a 81EE      		ldi r24,lo8(-31)
 2125 004c 0E94 0000 		call register_code
 2126               	.LVL183:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2127               		.loc 1 815 7 view .LVU465
 2128 0050 CC5F      		subi r28,lo8(-(4))
 2129               	.LVL184:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2130               		.loc 1 815 7 is_stmt 0 view .LVU466
 2131 0052 8C2F      		mov r24,r28
 2132 0054 0E94 0000 		call register_code
 2133               	.LVL185:
 816:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2134               		.loc 1 816 7 is_stmt 1 view .LVU467
 2135 0058 8C2F      		mov r24,r28
 2136               	.LVL186:
 2137               	.L169:
 830:quantum/quantum.c ****       break;
 831:quantum/quantum.c ****     case 62:
 832:quantum/quantum.c ****       register_code(KC_LSFT);
 833:quantum/quantum.c ****       register_code(KC_EQL);
 834:quantum/quantum.c ****       unregister_code(KC_EQL);
 2138               		.loc 1 834 7 is_stmt 0 view .LVU468
 2139 005a 0E94 0000 		call unregister_code
 2140               	.LVL187:
 835:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2141               		.loc 1 835 7 is_stmt 1 view .LVU469
 2142 005e 81EE      		ldi r24,lo8(-31)
 2143 0060 00C0      		rjmp .L168
 2144               	.LVL188:
 2145               	.L167:
 824:quantum/quantum.c ****       unregister_code(KC_0);
 2146               		.loc 1 824 7 view .LVU470
 2147 0062 87E2      		ldi r24,lo8(39)
 2148 0064 0E94 0000 		call register_code
 2149               	.LVL189:
 825:quantum/quantum.c ****       break;
 2150               		.loc 1 825 7 view .LVU471
 2151 0068 87E2      		ldi r24,lo8(39)
 2152               	.LVL190:
 2153               	.L168:
 2154               	/* epilogue start */
 836:quantum/quantum.c ****       break;
 837:quantum/quantum.c ****     case 63:
 838:quantum/quantum.c ****       register_code(KC_SLSH);
 839:quantum/quantum.c ****       unregister_code(KC_SLSH);
 840:quantum/quantum.c ****       break;
 841:quantum/quantum.c ****   }
 842:quantum/quantum.c **** }
 2155               		.loc 1 842 1 is_stmt 0 view .LVU472
 2156 006a DF91      		pop r29
 2157 006c CF91      		pop r28
 839:quantum/quantum.c ****       break;
 2158               		.loc 1 839 7 view .LVU473
 2159 006e 0C94 0000 		jmp unregister_code
 2160               	.LVL191:
 2161               	.L161:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2162               		.loc 1 828 7 is_stmt 1 view .LVU474
 2163 0072 C751      		subi r28,lo8(-(-23))
 2164               	.LVL192:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2165               		.loc 1 828 7 is_stmt 0 view .LVU475
 2166 0074 00C0      		rjmp .L170
 2167               	.LVL193:
 2168               	.L165:
 832:quantum/quantum.c ****       register_code(KC_EQL);
 2169               		.loc 1 832 7 is_stmt 1 view .LVU476
 2170 0076 81EE      		ldi r24,lo8(-31)
 2171 0078 0E94 0000 		call register_code
 2172               	.LVL194:
 833:quantum/quantum.c ****       unregister_code(KC_EQL);
 2173               		.loc 1 833 7 view .LVU477
 2174 007c 8EE2      		ldi r24,lo8(46)
 2175 007e 0E94 0000 		call register_code
 2176               	.LVL195:
 834:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2177               		.loc 1 834 7 view .LVU478
 2178 0082 8EE2      		ldi r24,lo8(46)
 2179 0084 00C0      		rjmp .L169
 2180               	.L166:
 838:quantum/quantum.c ****       unregister_code(KC_SLSH);
 2181               		.loc 1 838 7 view .LVU479
 2182 0086 88E3      		ldi r24,lo8(56)
 2183 0088 0E94 0000 		call register_code
 2184               	.LVL196:
 839:quantum/quantum.c ****       break;
 2185               		.loc 1 839 7 view .LVU480
 2186 008c 88E3      		ldi r24,lo8(56)
 2187 008e 00C0      		rjmp .L168
 2188               		.cfi_endproc
 2189               	.LFE48:
 2191               		.section	.text.matrix_init_quantum,"ax",@progbits
 2192               	.global	matrix_init_quantum
 2194               	matrix_init_quantum:
 2195               	.LFB49:
 843:quantum/quantum.c **** 
 844:quantum/quantum.c **** void matrix_init_quantum() {
 2196               		.loc 1 844 28 view -0
 2197               		.cfi_startproc
 2198               	/* prologue: function */
 2199               	/* frame size = 0 */
 2200               	/* stack size = 0 */
 2201               	.L__stack_usage = 0
 845:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 846:quantum/quantum.c ****     backlight_init_ports();
 847:quantum/quantum.c ****   #endif
 848:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 849:quantum/quantum.c ****     audio_init();
 850:quantum/quantum.c ****   #endif
 851:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 852:quantum/quantum.c ****     rgb_matrix_init_drivers();
 853:quantum/quantum.c ****   #endif
 854:quantum/quantum.c ****   matrix_init_kb();
 2202               		.loc 1 854 3 view .LVU482
 2203 0000 0C94 0000 		jmp matrix_init_kb
 2204               	.LVL197:
 2205               		.cfi_endproc
 2206               	.LFE49:
 2208               		.section	.text.matrix_scan_quantum,"ax",@progbits
 2209               	.global	matrix_scan_quantum
 2211               	matrix_scan_quantum:
 2212               	.LFB50:
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** uint8_t rgb_matrix_task_counter = 0;
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** #ifndef RGB_MATRIX_SKIP_FRAMES
 860:quantum/quantum.c ****   #define RGB_MATRIX_SKIP_FRAMES 1
 861:quantum/quantum.c **** #endif
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** void matrix_scan_quantum() {
 2213               		.loc 1 863 28 view -0
 2214               		.cfi_startproc
 2215               	/* prologue: function */
 2216               	/* frame size = 0 */
 2217               	/* stack size = 0 */
 2218               	.L__stack_usage = 0
 864:quantum/quantum.c ****   #if defined(AUDIO_ENABLE)
 865:quantum/quantum.c ****     matrix_scan_music();
 866:quantum/quantum.c ****   #endif
 867:quantum/quantum.c **** 
 868:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 869:quantum/quantum.c ****     matrix_scan_tap_dance();
 2219               		.loc 1 869 5 view .LVU484
 2220 0000 0E94 0000 		call matrix_scan_tap_dance
 2221               	.LVL198:
 870:quantum/quantum.c ****   #endif
 871:quantum/quantum.c **** 
 872:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 873:quantum/quantum.c ****     matrix_scan_combo();
 874:quantum/quantum.c ****   #endif
 875:quantum/quantum.c **** 
 876:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 877:quantum/quantum.c ****     backlight_task();
 878:quantum/quantum.c ****   #endif
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 881:quantum/quantum.c ****     rgb_matrix_task();
 882:quantum/quantum.c ****     if (rgb_matrix_task_counter == 0) {
 883:quantum/quantum.c ****       rgb_matrix_update_pwm_buffers();
 884:quantum/quantum.c ****     }
 885:quantum/quantum.c ****     rgb_matrix_task_counter = ((rgb_matrix_task_counter + 1) % (RGB_MATRIX_SKIP_FRAMES + 1));
 886:quantum/quantum.c ****   #endif
 887:quantum/quantum.c **** 
 888:quantum/quantum.c ****   matrix_scan_kb();
 2222               		.loc 1 888 3 view .LVU485
 2223 0004 0C94 0000 		jmp matrix_scan_kb
 2224               	.LVL199:
 2225               		.cfi_endproc
 2226               	.LFE50:
 2228               		.section	.text.backlight_init_ports,"ax",@progbits
 2229               		.weak	backlight_init_ports
 2231               	backlight_init_ports:
 2232               	.LFB92:
 2233               		.cfi_startproc
 2234               	/* prologue: function */
 2235               	/* frame size = 0 */
 2236               	/* stack size = 0 */
 2237               	.L__stack_usage = 0
 2238               	/* epilogue start */
 2239 0000 0895      		ret
 2240               		.cfi_endproc
 2241               	.LFE92:
 2243               		.section	.text.send_nibble,"ax",@progbits
 2244               	.global	send_nibble
 2246               	send_nibble:
 2247               	.LVL200:
 2248               	.LFB56:
 889:quantum/quantum.c **** }
 890:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 891:quantum/quantum.c **** 
 892:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 893:quantum/quantum.c **** 
 894:quantum/quantum.c **** // depending on the pin, we use a different output compare unit
 895:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 896:quantum/quantum.c **** #  define COM1x1 COM1C1
 897:quantum/quantum.c **** #  define OCR1x  OCR1C
 898:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 899:quantum/quantum.c **** #  define COM1x1 COM1B1
 900:quantum/quantum.c **** #  define OCR1x  OCR1B
 901:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 902:quantum/quantum.c **** #  define COM1x1 COM1A1
 903:quantum/quantum.c **** #  define OCR1x  OCR1A
 904:quantum/quantum.c **** #else
 905:quantum/quantum.c **** #  define NO_HARDWARE_PWM
 906:quantum/quantum.c **** #endif
 907:quantum/quantum.c **** 
 908:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 909:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 910:quantum/quantum.c **** #endif
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM // pwm through software
 913:quantum/quantum.c **** 
 914:quantum/quantum.c **** __attribute__ ((weak))
 915:quantum/quantum.c **** void backlight_init_ports(void)
 916:quantum/quantum.c **** {
 917:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 918:quantum/quantum.c ****   // DDRx |= n
 919:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 920:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 921:quantum/quantum.c ****     // PORTx &= ~n
 922:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 923:quantum/quantum.c ****   #else
 924:quantum/quantum.c ****     // PORTx |= n
 925:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c **** }
 928:quantum/quantum.c **** 
 929:quantum/quantum.c **** __attribute__ ((weak))
 930:quantum/quantum.c **** void backlight_set(uint8_t level) {}
 931:quantum/quantum.c **** 
 932:quantum/quantum.c **** uint8_t backlight_tick = 0;
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 935:quantum/quantum.c **** void backlight_task(void) {
 936:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
 937:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 938:quantum/quantum.c ****       // PORTx &= ~n
 939:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 940:quantum/quantum.c ****     #else
 941:quantum/quantum.c ****       // PORTx |= n
 942:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 943:quantum/quantum.c ****     #endif
 944:quantum/quantum.c ****   } else {
 945:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 946:quantum/quantum.c ****       // PORTx |= n
 947:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 948:quantum/quantum.c ****     #else
 949:quantum/quantum.c ****       // PORTx &= ~n
 950:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 951:quantum/quantum.c ****     #endif
 952:quantum/quantum.c ****   }
 953:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 954:quantum/quantum.c **** }
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 958:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
 959:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** #else // pwm through timer
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
 968:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
 969:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
 970:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 971:quantum/quantum.c ****   else {
 972:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
 973:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 974:quantum/quantum.c ****     // and revert what we've done again after squaring.
 975:quantum/quantum.c ****     y = y * y * y >> 8;
 976:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 977:quantum/quantum.c ****       return 0xFFFFU;
 978:quantum/quantum.c ****     else
 979:quantum/quantum.c ****       return (uint16_t) y;
 980:quantum/quantum.c ****   }
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
 984:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
 985:quantum/quantum.c ****   OCR1x = val;
 986:quantum/quantum.c **** }
 987:quantum/quantum.c **** 
 988:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 989:quantum/quantum.c **** __attribute__ ((weak))
 990:quantum/quantum.c **** void backlight_set(uint8_t level) {
 991:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
 992:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
 993:quantum/quantum.c **** 
 994:quantum/quantum.c ****   if (level == 0) {
 995:quantum/quantum.c ****     // Turn off PWM control on backlight pin
 996:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 997:quantum/quantum.c ****   } else {
 998:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 999:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
1000:quantum/quantum.c ****   }
1001:quantum/quantum.c ****   // Set the brightness
1002:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1003:quantum/quantum.c **** }
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** void backlight_task(void) {}
1006:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1007:quantum/quantum.c **** 
1008:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1011:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1012:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1013:quantum/quantum.c **** #define BREATHING_STEPS 128
1014:quantum/quantum.c **** 
1015:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1016:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1017:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** bool is_breathing(void) {
1020:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1021:quantum/quantum.c **** }
1022:quantum/quantum.c **** 
1023:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1024:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1025:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1026:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1027:quantum/quantum.c **** 
1028:quantum/quantum.c **** void breathing_enable(void)
1029:quantum/quantum.c **** {
1030:quantum/quantum.c ****   breathing_counter = 0;
1031:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1032:quantum/quantum.c ****   breathing_interrupt_enable();
1033:quantum/quantum.c **** }
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** void breathing_pulse(void)
1036:quantum/quantum.c **** {
1037:quantum/quantum.c ****     if (get_backlight_level() == 0)
1038:quantum/quantum.c ****       breathing_min();
1039:quantum/quantum.c ****     else
1040:quantum/quantum.c ****       breathing_max();
1041:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1042:quantum/quantum.c ****     breathing_interrupt_enable();
1043:quantum/quantum.c **** }
1044:quantum/quantum.c **** 
1045:quantum/quantum.c **** void breathing_disable(void)
1046:quantum/quantum.c **** {
1047:quantum/quantum.c ****     breathing_interrupt_disable();
1048:quantum/quantum.c ****     // Restore backlight level
1049:quantum/quantum.c ****     backlight_set(get_backlight_level());
1050:quantum/quantum.c **** }
1051:quantum/quantum.c **** 
1052:quantum/quantum.c **** void breathing_self_disable(void)
1053:quantum/quantum.c **** {
1054:quantum/quantum.c ****   if (get_backlight_level() == 0)
1055:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1056:quantum/quantum.c ****   else
1057:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1058:quantum/quantum.c **** }
1059:quantum/quantum.c **** 
1060:quantum/quantum.c **** void breathing_toggle(void) {
1061:quantum/quantum.c ****   if (is_breathing())
1062:quantum/quantum.c ****     breathing_disable();
1063:quantum/quantum.c ****   else
1064:quantum/quantum.c ****     breathing_enable();
1065:quantum/quantum.c **** }
1066:quantum/quantum.c **** 
1067:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1068:quantum/quantum.c **** {
1069:quantum/quantum.c ****   if (!value)
1070:quantum/quantum.c ****     value = 1;
1071:quantum/quantum.c ****   breathing_period = value;
1072:quantum/quantum.c **** }
1073:quantum/quantum.c **** 
1074:quantum/quantum.c **** void breathing_period_default(void) {
1075:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1076:quantum/quantum.c **** }
1077:quantum/quantum.c **** 
1078:quantum/quantum.c **** void breathing_period_inc(void)
1079:quantum/quantum.c **** {
1080:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1081:quantum/quantum.c **** }
1082:quantum/quantum.c **** 
1083:quantum/quantum.c **** void breathing_period_dec(void)
1084:quantum/quantum.c **** {
1085:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1086:quantum/quantum.c **** }
1087:quantum/quantum.c **** 
1088:quantum/quantum.c **** /* To generate breathing curve in python:
1089:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1090:quantum/quantum.c ****  */
1091:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1092:quantum/quantum.c **** 
1093:quantum/quantum.c **** // Use this before the cie_lightness function.
1094:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1095:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1096:quantum/quantum.c **** }
1097:quantum/quantum.c **** 
1098:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1099:quantum/quantum.c ****  * about 244 times per second.
1100:quantum/quantum.c ****  */
1101:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1102:quantum/quantum.c **** {
1103:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1104:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1105:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1106:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1107:quantum/quantum.c **** 
1108:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1109:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1110:quantum/quantum.c ****   {
1111:quantum/quantum.c ****       breathing_interrupt_disable();
1112:quantum/quantum.c ****   }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1115:quantum/quantum.c **** }
1116:quantum/quantum.c **** 
1117:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1118:quantum/quantum.c **** 
1119:quantum/quantum.c **** __attribute__ ((weak))
1120:quantum/quantum.c **** void backlight_init_ports(void)
1121:quantum/quantum.c **** {
1122:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1123:quantum/quantum.c ****   // DDRx |= n
1124:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
1125:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
1126:quantum/quantum.c ****     // PORTx &= ~n
1127:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
1128:quantum/quantum.c ****   #else
1129:quantum/quantum.c ****     // PORTx |= n
1130:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
1131:quantum/quantum.c ****   #endif
1132:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1133:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1134:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1135:quantum/quantum.c **** 
1136:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1137:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1138:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1139:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1140:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c ****   /*
1143:quantum/quantum.c ****   14.8.3:
1144:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1145:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1146:quantum/quantum.c ****   */
1147:quantum/quantum.c **** 
1148:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
1149:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1150:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1151:quantum/quantum.c ****   ICR1 = TIMER_TOP;
1152:quantum/quantum.c **** 
1153:quantum/quantum.c ****   backlight_init();
1154:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1155:quantum/quantum.c ****     breathing_enable();
1156:quantum/quantum.c ****   #endif
1157:quantum/quantum.c **** }
1158:quantum/quantum.c **** 
1159:quantum/quantum.c **** #endif // NO_HARDWARE_PWM
1160:quantum/quantum.c **** 
1161:quantum/quantum.c **** #else // backlight
1162:quantum/quantum.c **** 
1163:quantum/quantum.c **** __attribute__ ((weak))
1164:quantum/quantum.c **** void backlight_init_ports(void) {}
1165:quantum/quantum.c **** 
1166:quantum/quantum.c **** __attribute__ ((weak))
1167:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #endif // backlight
1170:quantum/quantum.c **** 
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** // Functions for spitting out values
1173:quantum/quantum.c **** //
1174:quantum/quantum.c **** 
1175:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1176:quantum/quantum.c ****     uint16_t word = (number >> 16);
1177:quantum/quantum.c ****     send_word(word);
1178:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void send_word(uint16_t number) {
1182:quantum/quantum.c ****     uint8_t byte = number >> 8;
1183:quantum/quantum.c ****     send_byte(byte);
1184:quantum/quantum.c ****     send_byte(number & 0xFF);
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** 
1187:quantum/quantum.c **** void send_byte(uint8_t number) {
1188:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1189:quantum/quantum.c ****     send_nibble(nibble);
1190:quantum/quantum.c ****     send_nibble(number & 0xF);
1191:quantum/quantum.c **** }
1192:quantum/quantum.c **** 
1193:quantum/quantum.c **** void send_nibble(uint8_t number) {
 2249               		.loc 1 1193 34 view -0
 2250               		.cfi_startproc
 2251               		.loc 1 1193 34 is_stmt 0 view .LVU487
 2252 0000 CF93      		push r28
 2253               	.LCFI38:
 2254               		.cfi_def_cfa_offset 3
 2255               		.cfi_offset 28, -2
 2256               	/* prologue: function */
 2257               	/* frame size = 0 */
 2258               	/* stack size = 1 */
 2259               	.L__stack_usage = 1
1194:quantum/quantum.c ****     switch (number) {
 2260               		.loc 1 1194 5 is_stmt 1 view .LVU488
 2261 0002 8A30      		cpi r24,lo8(10)
 2262 0004 00F4      		brsh .L175
 2263 0006 8823      		tst r24
 2264 0008 01F0      		breq .L180
1195:quantum/quantum.c ****         case 0:
1196:quantum/quantum.c ****             register_code(KC_0);
1197:quantum/quantum.c ****             unregister_code(KC_0);
1198:quantum/quantum.c ****             break;
1199:quantum/quantum.c ****         case 1 ... 9:
1200:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 2265               		.loc 1 1200 13 view .LVU489
 2266 000a CDE1      		ldi r28,lo8(29)
 2267               	.L183:
1201:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1202:quantum/quantum.c ****             break;
1203:quantum/quantum.c ****         case 0xA ... 0xF:
1204:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2268               		.loc 1 1204 13 is_stmt 0 view .LVU490
 2269 000c C80F      		add r28,r24
 2270 000e 8C2F      		mov r24,r28
 2271               	.LVL201:
 2272               		.loc 1 1204 13 view .LVU491
 2273 0010 0E94 0000 		call register_code
 2274               	.LVL202:
1205:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2275               		.loc 1 1205 13 is_stmt 1 view .LVU492
 2276 0014 8C2F      		mov r24,r28
 2277 0016 00C0      		rjmp .L182
 2278               	.LVL203:
 2279               	.L175:
1204:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2280               		.loc 1 1204 13 is_stmt 0 view .LVU493
 2281 0018 CAEF      		ldi r28,lo8(-6)
1194:quantum/quantum.c ****         case 0:
 2282               		.loc 1 1194 5 view .LVU494
 2283 001a 8031      		cpi r24,lo8(16)
 2284 001c 00F0      		brlo .L183
 2285               	/* epilogue start */
1206:quantum/quantum.c ****             break;
1207:quantum/quantum.c ****     }
1208:quantum/quantum.c **** }
 2286               		.loc 1 1208 1 view .LVU495
 2287 001e CF91      		pop r28
 2288 0020 0895      		ret
 2289               	.L180:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2290               		.loc 1 1196 13 is_stmt 1 view .LVU496
 2291 0022 87E2      		ldi r24,lo8(39)
 2292               	.LVL204:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2293               		.loc 1 1196 13 is_stmt 0 view .LVU497
 2294 0024 0E94 0000 		call register_code
 2295               	.LVL205:
1197:quantum/quantum.c ****             break;
 2296               		.loc 1 1197 13 is_stmt 1 view .LVU498
 2297 0028 87E2      		ldi r24,lo8(39)
 2298               	.L182:
 2299               	/* epilogue start */
 2300               		.loc 1 1208 1 is_stmt 0 view .LVU499
 2301 002a CF91      		pop r28
1205:quantum/quantum.c ****             break;
 2302               		.loc 1 1205 13 view .LVU500
 2303 002c 0C94 0000 		jmp unregister_code
 2304               	.LVL206:
 2305               		.cfi_endproc
 2306               	.LFE56:
 2308               		.section	.text.send_byte,"ax",@progbits
 2309               	.global	send_byte
 2311               	send_byte:
 2312               	.LVL207:
 2313               	.LFB55:
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2314               		.loc 1 1187 32 is_stmt 1 view -0
 2315               		.cfi_startproc
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2316               		.loc 1 1187 32 is_stmt 0 view .LVU502
 2317 0000 CF93      		push r28
 2318               	.LCFI39:
 2319               		.cfi_def_cfa_offset 3
 2320               		.cfi_offset 28, -2
 2321               	/* prologue: function */
 2322               	/* frame size = 0 */
 2323               	/* stack size = 1 */
 2324               	.L__stack_usage = 1
 2325 0002 C82F      		mov r28,r24
1188:quantum/quantum.c ****     send_nibble(nibble);
 2326               		.loc 1 1188 5 is_stmt 1 view .LVU503
 2327               	.LVL208:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2328               		.loc 1 1189 5 view .LVU504
 2329 0004 8295      		swap r24
 2330               	.LVL209:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2331               		.loc 1 1189 5 is_stmt 0 view .LVU505
 2332 0006 8F70      		andi r24,lo8(15)
 2333 0008 0E94 0000 		call send_nibble
 2334               	.LVL210:
1190:quantum/quantum.c **** }
 2335               		.loc 1 1190 5 is_stmt 1 view .LVU506
 2336 000c 8C2F      		mov r24,r28
 2337 000e 8F70      		andi r24,lo8(15)
 2338               	/* epilogue start */
1191:quantum/quantum.c **** 
 2339               		.loc 1 1191 1 is_stmt 0 view .LVU507
 2340 0010 CF91      		pop r28
 2341               	.LVL211:
1190:quantum/quantum.c **** }
 2342               		.loc 1 1190 5 view .LVU508
 2343 0012 0C94 0000 		jmp send_nibble
 2344               	.LVL212:
 2345               		.cfi_endproc
 2346               	.LFE55:
 2348               		.section	.text.send_word,"ax",@progbits
 2349               	.global	send_word
 2351               	send_word:
 2352               	.LVL213:
 2353               	.LFB54:
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2354               		.loc 1 1181 33 is_stmt 1 view -0
 2355               		.cfi_startproc
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2356               		.loc 1 1181 33 is_stmt 0 view .LVU510
 2357 0000 CF93      		push r28
 2358               	.LCFI40:
 2359               		.cfi_def_cfa_offset 3
 2360               		.cfi_offset 28, -2
 2361               	/* prologue: function */
 2362               	/* frame size = 0 */
 2363               	/* stack size = 1 */
 2364               	.L__stack_usage = 1
 2365 0002 C82F      		mov r28,r24
1182:quantum/quantum.c ****     send_byte(byte);
 2366               		.loc 1 1182 5 is_stmt 1 view .LVU511
 2367               	.LVL214:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2368               		.loc 1 1183 5 view .LVU512
 2369 0004 892F      		mov r24,r25
 2370               	.LVL215:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2371               		.loc 1 1183 5 is_stmt 0 view .LVU513
 2372 0006 0E94 0000 		call send_byte
 2373               	.LVL216:
1184:quantum/quantum.c **** }
 2374               		.loc 1 1184 5 is_stmt 1 view .LVU514
 2375 000a 8C2F      		mov r24,r28
 2376               	/* epilogue start */
1185:quantum/quantum.c **** 
 2377               		.loc 1 1185 1 is_stmt 0 view .LVU515
 2378 000c CF91      		pop r28
1184:quantum/quantum.c **** }
 2379               		.loc 1 1184 5 view .LVU516
 2380 000e 0C94 0000 		jmp send_byte
 2381               	.LVL217:
 2382               		.cfi_endproc
 2383               	.LFE54:
 2385               		.section	.text.send_dword,"ax",@progbits
 2386               	.global	send_dword
 2388               	send_dword:
 2389               	.LVL218:
 2390               	.LFB53:
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2391               		.loc 1 1175 34 is_stmt 1 view -0
 2392               		.cfi_startproc
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2393               		.loc 1 1175 34 is_stmt 0 view .LVU518
 2394 0000 CF92      		push r12
 2395               	.LCFI41:
 2396               		.cfi_def_cfa_offset 3
 2397               		.cfi_offset 12, -2
 2398 0002 DF92      		push r13
 2399               	.LCFI42:
 2400               		.cfi_def_cfa_offset 4
 2401               		.cfi_offset 13, -3
 2402 0004 EF92      		push r14
 2403               	.LCFI43:
 2404               		.cfi_def_cfa_offset 5
 2405               		.cfi_offset 14, -4
 2406 0006 FF92      		push r15
 2407               	.LCFI44:
 2408               		.cfi_def_cfa_offset 6
 2409               		.cfi_offset 15, -5
 2410               	/* prologue: function */
 2411               	/* frame size = 0 */
 2412               	/* stack size = 4 */
 2413               	.L__stack_usage = 4
 2414 0008 6B01      		movw r12,r22
1176:quantum/quantum.c ****     send_word(word);
 2415               		.loc 1 1176 5 is_stmt 1 view .LVU519
1177:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2416               		.loc 1 1177 5 view .LVU520
 2417 000a 0E94 0000 		call send_word
 2418               	.LVL219:
1178:quantum/quantum.c **** }
 2419               		.loc 1 1178 5 view .LVU521
 2420 000e C601      		movw r24,r12
 2421               	/* epilogue start */
1179:quantum/quantum.c **** 
 2422               		.loc 1 1179 1 is_stmt 0 view .LVU522
 2423 0010 FF90      		pop r15
 2424 0012 EF90      		pop r14
 2425 0014 DF90      		pop r13
 2426 0016 CF90      		pop r12
1178:quantum/quantum.c **** }
 2427               		.loc 1 1178 5 view .LVU523
 2428 0018 0C94 0000 		jmp send_word
 2429               	.LVL220:
 2430               		.cfi_endproc
 2431               	.LFE53:
 2433               		.section	.text.hex_to_keycode,"ax",@progbits
 2434               		.weak	hex_to_keycode
 2436               	hex_to_keycode:
 2437               	.LVL221:
 2438               	.LFB57:
1209:quantum/quantum.c **** 
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** __attribute__((weak))
1212:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1213:quantum/quantum.c **** {
 2439               		.loc 1 1213 1 is_stmt 1 view -0
 2440               		.cfi_startproc
 2441               	/* prologue: function */
 2442               	/* frame size = 0 */
 2443               	/* stack size = 0 */
 2444               	.L__stack_usage = 0
1214:quantum/quantum.c ****   hex = hex & 0xF;
 2445               		.loc 1 1214 3 view .LVU525
 2446               		.loc 1 1214 7 is_stmt 0 view .LVU526
 2447 0000 282F      		mov r18,r24
 2448 0002 2F70      		andi r18,lo8(15)
 2449               	.LVL222:
1215:quantum/quantum.c ****   if (hex == 0x0) {
 2450               		.loc 1 1215 3 is_stmt 1 view .LVU527
 2451               		.loc 1 1215 6 is_stmt 0 view .LVU528
 2452 0004 01F0      		breq .L190
1216:quantum/quantum.c ****     return KC_0;
1217:quantum/quantum.c ****   } else if (hex < 0xA) {
 2453               		.loc 1 1217 10 is_stmt 1 view .LVU529
 2454 0006 822F      		mov r24,r18
 2455 0008 90E0      		ldi r25,0
 2456               		.loc 1 1217 13 is_stmt 0 view .LVU530
 2457 000a 2A30      		cpi r18,lo8(10)
 2458 000c 00F4      		brsh .L189
1218:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2459               		.loc 1 1218 5 is_stmt 1 view .LVU531
 2460               		.loc 1 1218 17 is_stmt 0 view .LVU532
 2461 000e 4D96      		adiw r24,29
 2462 0010 0895      		ret
 2463               	.L189:
1219:quantum/quantum.c ****   } else {
1220:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2464               		.loc 1 1220 5 is_stmt 1 view .LVU533
 2465               		.loc 1 1220 17 is_stmt 0 view .LVU534
 2466 0012 0697      		sbiw r24,6
 2467 0014 0895      		ret
 2468               	.L190:
1216:quantum/quantum.c ****   } else if (hex < 0xA) {
 2469               		.loc 1 1216 12 view .LVU535
 2470 0016 87E2      		ldi r24,lo8(39)
 2471 0018 90E0      		ldi r25,0
 2472               	/* epilogue start */
1221:quantum/quantum.c ****   }
1222:quantum/quantum.c **** }
 2473               		.loc 1 1222 1 view .LVU536
 2474 001a 0895      		ret
 2475               		.cfi_endproc
 2476               	.LFE57:
 2478               		.section	.text.api_send_unicode,"ax",@progbits
 2479               	.global	api_send_unicode
 2481               	api_send_unicode:
 2482               	.LVL223:
 2483               	.LFB58:
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2484               		.loc 1 1224 41 is_stmt 1 view -0
 2485               		.cfi_startproc
 2486               	/* prologue: function */
 2487               	/* frame size = 0 */
 2488               	/* stack size = 0 */
 2489               	.L__stack_usage = 0
1225:quantum/quantum.c **** #ifdef API_ENABLE
1226:quantum/quantum.c ****     uint8_t chunk[4];
1227:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1228:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1229:quantum/quantum.c **** #endif
1230:quantum/quantum.c **** }
 2490               		.loc 1 1230 1 view .LVU538
 2491               	/* epilogue start */
 2492 0000 0895      		ret
 2493               		.cfi_endproc
 2494               	.LFE58:
 2496               		.section	.text.led_set_user,"ax",@progbits
 2497               		.weak	led_set_user
 2499               	led_set_user:
 2500               	.LVL224:
 2501               	.LFB59:
1231:quantum/quantum.c **** 
1232:quantum/quantum.c **** __attribute__ ((weak))
1233:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2502               		.loc 1 1233 36 view -0
 2503               		.cfi_startproc
 2504               	/* prologue: function */
 2505               	/* frame size = 0 */
 2506               	/* stack size = 0 */
 2507               	.L__stack_usage = 0
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** }
 2508               		.loc 1 1235 1 view .LVU540
 2509               	/* epilogue start */
 2510 0000 0895      		ret
 2511               		.cfi_endproc
 2512               	.LFE59:
 2514               		.set	led_set_user.localalias.1,led_set_user
 2515               		.section	.text.backlight_set,"ax",@progbits
 2516               		.weak	backlight_set
 2518               	backlight_set:
 2519               	.LFB94:
 2520               		.cfi_startproc
 2521               	/* prologue: function */
 2522               	/* frame size = 0 */
 2523               	/* stack size = 0 */
 2524               	.L__stack_usage = 0
 2525               	/* epilogue start */
 2526 0000 0895      		ret
 2527               		.cfi_endproc
 2528               	.LFE94:
 2530               		.section	.text.led_set_kb,"ax",@progbits
 2531               		.weak	led_set_kb
 2533               	led_set_kb:
 2534               	.LVL225:
 2535               	.LFB60:
1236:quantum/quantum.c **** 
1237:quantum/quantum.c **** __attribute__ ((weak))
1238:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2536               		.loc 1 1238 34 view -0
 2537               		.cfi_startproc
 2538               	/* prologue: function */
 2539               	/* frame size = 0 */
 2540               	/* stack size = 0 */
 2541               	.L__stack_usage = 0
1239:quantum/quantum.c ****     led_set_user(usb_led);
 2542               		.loc 1 1239 5 view .LVU542
 2543 0000 0C94 0000 		jmp led_set_user
 2544               	.LVL226:
 2545               		.loc 1 1239 5 is_stmt 0 view .LVU543
 2546               		.cfi_endproc
 2547               	.LFE60:
 2549               		.section	.text.led_init_ports,"ax",@progbits
 2550               		.weak	led_init_ports
 2552               	led_init_ports:
 2553               	.LFB86:
 2554               		.cfi_startproc
 2555               	/* prologue: function */
 2556               	/* frame size = 0 */
 2557               	/* stack size = 0 */
 2558               	.L__stack_usage = 0
 2559               	/* epilogue start */
 2560 0000 0895      		ret
 2561               		.cfi_endproc
 2562               	.LFE86:
 2564               		.section	.text.led_set,"ax",@progbits
 2565               		.weak	led_set
 2567               	led_set:
 2568               	.LVL227:
 2569               	.LFB62:
1240:quantum/quantum.c **** }
1241:quantum/quantum.c **** 
1242:quantum/quantum.c **** __attribute__ ((weak))
1243:quantum/quantum.c **** void led_init_ports(void)
1244:quantum/quantum.c **** {
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** }
1247:quantum/quantum.c **** 
1248:quantum/quantum.c **** __attribute__ ((weak))
1249:quantum/quantum.c **** void led_set(uint8_t usb_led)
1250:quantum/quantum.c **** {
 2570               		.loc 1 1250 1 is_stmt 1 view -0
 2571               		.cfi_startproc
 2572               	/* prologue: function */
 2573               	/* frame size = 0 */
 2574               	/* stack size = 0 */
 2575               	.L__stack_usage = 0
1251:quantum/quantum.c **** 
1252:quantum/quantum.c ****   // Example LED Code
1253:quantum/quantum.c ****   //
1254:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1255:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1256:quantum/quantum.c ****     // {
1257:quantum/quantum.c ****     //     // Output high.
1258:quantum/quantum.c ****     //     DDRE |= (1<<6);
1259:quantum/quantum.c ****     //     PORTE |= (1<<6);
1260:quantum/quantum.c ****     // }
1261:quantum/quantum.c ****     // else
1262:quantum/quantum.c ****     // {
1263:quantum/quantum.c ****     //     // Output low.
1264:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1265:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1266:quantum/quantum.c ****     // }
1267:quantum/quantum.c **** 
1268:quantum/quantum.c ****   led_set_kb(usb_led);
 2576               		.loc 1 1268 3 view .LVU545
 2577 0000 0C94 0000 		jmp led_set_kb
 2578               	.LVL228:
 2579               		.loc 1 1268 3 is_stmt 0 view .LVU546
 2580               		.cfi_endproc
 2581               	.LFE62:
 2583               		.section	.text.startup_user,"ax",@progbits
 2584               		.weak	startup_user
 2586               	startup_user:
 2587               	.LFB88:
 2588               		.cfi_startproc
 2589               	/* prologue: function */
 2590               	/* frame size = 0 */
 2591               	/* stack size = 0 */
 2592               	.L__stack_usage = 0
 2593               	/* epilogue start */
 2594 0000 0895      		ret
 2595               		.cfi_endproc
 2596               	.LFE88:
 2598               		.section	.text.shutdown_user,"ax",@progbits
 2599               		.weak	shutdown_user
 2601               	shutdown_user:
 2602               	.LFB90:
 2603               		.cfi_startproc
 2604               	/* prologue: function */
 2605               	/* frame size = 0 */
 2606               	/* stack size = 0 */
 2607               	.L__stack_usage = 0
 2608               	/* epilogue start */
 2609 0000 0895      		ret
 2610               		.cfi_endproc
 2611               	.LFE90:
 2613               		.section	.progmem.data.__c.3357,"a"
 2616               	__c.3357:
 2617 0000 4445 4255 		.string	"DEBUG: enabled.\n"
 2617      473A 2065 
 2617      6E61 626C 
 2617      6564 2E0A 
 2617      00
 2618               	.global	rgb_matrix_task_counter
 2619               		.section	.bss.rgb_matrix_task_counter,"aw",@nobits
 2622               	rgb_matrix_task_counter:
 2623 0000 00        		.zero	1
 2624               		.weak	ascii_to_keycode_lut
 2625               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2628               	ascii_to_keycode_lut:
 2629 0000 00        		.byte	0
 2630 0001 00        		.byte	0
 2631 0002 00        		.byte	0
 2632 0003 00        		.byte	0
 2633 0004 00        		.byte	0
 2634 0005 00        		.byte	0
 2635 0006 00        		.byte	0
 2636 0007 00        		.byte	0
 2637 0008 2A        		.byte	42
 2638 0009 2B        		.byte	43
 2639 000a 28        		.byte	40
 2640 000b 00        		.byte	0
 2641 000c 00        		.byte	0
 2642 000d 00        		.byte	0
 2643 000e 00        		.byte	0
 2644 000f 00        		.byte	0
 2645 0010 00        		.byte	0
 2646 0011 00        		.byte	0
 2647 0012 00        		.byte	0
 2648 0013 00        		.byte	0
 2649 0014 00        		.byte	0
 2650 0015 00        		.byte	0
 2651 0016 00        		.byte	0
 2652 0017 00        		.byte	0
 2653 0018 00        		.byte	0
 2654 0019 00        		.byte	0
 2655 001a 00        		.byte	0
 2656 001b 29        		.byte	41
 2657 001c 00        		.byte	0
 2658 001d 00        		.byte	0
 2659 001e 00        		.byte	0
 2660 001f 00        		.byte	0
 2661 0020 2C        		.byte	44
 2662 0021 1E        		.byte	30
 2663 0022 34        		.byte	52
 2664 0023 20        		.byte	32
 2665 0024 21        		.byte	33
 2666 0025 22        		.byte	34
 2667 0026 24        		.byte	36
 2668 0027 34        		.byte	52
 2669 0028 26        		.byte	38
 2670 0029 27        		.byte	39
 2671 002a 25        		.byte	37
 2672 002b 2E        		.byte	46
 2673 002c 36        		.byte	54
 2674 002d 2D        		.byte	45
 2675 002e 37        		.byte	55
 2676 002f 38        		.byte	56
 2677 0030 27        		.byte	39
 2678 0031 1E        		.byte	30
 2679 0032 1F        		.byte	31
 2680 0033 20        		.byte	32
 2681 0034 21        		.byte	33
 2682 0035 22        		.byte	34
 2683 0036 23        		.byte	35
 2684 0037 24        		.byte	36
 2685 0038 25        		.byte	37
 2686 0039 26        		.byte	38
 2687 003a 33        		.byte	51
 2688 003b 33        		.byte	51
 2689 003c 36        		.byte	54
 2690 003d 2E        		.byte	46
 2691 003e 37        		.byte	55
 2692 003f 38        		.byte	56
 2693 0040 1F        		.byte	31
 2694 0041 04        		.byte	4
 2695 0042 05        		.byte	5
 2696 0043 06        		.byte	6
 2697 0044 07        		.byte	7
 2698 0045 08        		.byte	8
 2699 0046 09        		.byte	9
 2700 0047 0A        		.byte	10
 2701 0048 0B        		.byte	11
 2702 0049 0C        		.byte	12
 2703 004a 0D        		.byte	13
 2704 004b 0E        		.byte	14
 2705 004c 0F        		.byte	15
 2706 004d 10        		.byte	16
 2707 004e 11        		.byte	17
 2708 004f 12        		.byte	18
 2709 0050 13        		.byte	19
 2710 0051 14        		.byte	20
 2711 0052 15        		.byte	21
 2712 0053 16        		.byte	22
 2713 0054 17        		.byte	23
 2714 0055 18        		.byte	24
 2715 0056 19        		.byte	25
 2716 0057 1A        		.byte	26
 2717 0058 1B        		.byte	27
 2718 0059 1C        		.byte	28
 2719 005a 1D        		.byte	29
 2720 005b 2F        		.byte	47
 2721 005c 31        		.byte	49
 2722 005d 30        		.byte	48
 2723 005e 23        		.byte	35
 2724 005f 2D        		.byte	45
 2725 0060 35        		.byte	53
 2726 0061 04        		.byte	4
 2727 0062 05        		.byte	5
 2728 0063 06        		.byte	6
 2729 0064 07        		.byte	7
 2730 0065 08        		.byte	8
 2731 0066 09        		.byte	9
 2732 0067 0A        		.byte	10
 2733 0068 0B        		.byte	11
 2734 0069 0C        		.byte	12
 2735 006a 0D        		.byte	13
 2736 006b 0E        		.byte	14
 2737 006c 0F        		.byte	15
 2738 006d 10        		.byte	16
 2739 006e 11        		.byte	17
 2740 006f 12        		.byte	18
 2741 0070 13        		.byte	19
 2742 0071 14        		.byte	20
 2743 0072 15        		.byte	21
 2744 0073 16        		.byte	22
 2745 0074 17        		.byte	23
 2746 0075 18        		.byte	24
 2747 0076 19        		.byte	25
 2748 0077 1A        		.byte	26
 2749 0078 1B        		.byte	27
 2750 0079 1C        		.byte	28
 2751 007a 1D        		.byte	29
 2752 007b 2F        		.byte	47
 2753 007c 31        		.byte	49
 2754 007d 30        		.byte	48
 2755 007e 35        		.byte	53
 2756 007f 4C        		.byte	76
 2757               		.weak	ascii_to_shift_lut
 2758               		.section	.progmem.data.ascii_to_shift_lut,"a"
 2761               	ascii_to_shift_lut:
 2762 0000 00        		.byte	0
 2763 0001 00        		.byte	0
 2764 0002 00        		.byte	0
 2765 0003 00        		.byte	0
 2766 0004 00        		.byte	0
 2767 0005 00        		.byte	0
 2768 0006 00        		.byte	0
 2769 0007 00        		.byte	0
 2770 0008 00        		.byte	0
 2771 0009 00        		.byte	0
 2772 000a 00        		.byte	0
 2773 000b 00        		.byte	0
 2774 000c 00        		.byte	0
 2775 000d 00        		.byte	0
 2776 000e 00        		.byte	0
 2777 000f 00        		.byte	0
 2778 0010 00        		.byte	0
 2779 0011 00        		.byte	0
 2780 0012 00        		.byte	0
 2781 0013 00        		.byte	0
 2782 0014 00        		.byte	0
 2783 0015 00        		.byte	0
 2784 0016 00        		.byte	0
 2785 0017 00        		.byte	0
 2786 0018 00        		.byte	0
 2787 0019 00        		.byte	0
 2788 001a 00        		.byte	0
 2789 001b 00        		.byte	0
 2790 001c 00        		.byte	0
 2791 001d 00        		.byte	0
 2792 001e 00        		.byte	0
 2793 001f 00        		.byte	0
 2794 0020 00        		.byte	0
 2795 0021 01        		.byte	1
 2796 0022 01        		.byte	1
 2797 0023 01        		.byte	1
 2798 0024 01        		.byte	1
 2799 0025 01        		.byte	1
 2800 0026 01        		.byte	1
 2801 0027 00        		.byte	0
 2802 0028 01        		.byte	1
 2803 0029 01        		.byte	1
 2804 002a 01        		.byte	1
 2805 002b 01        		.byte	1
 2806 002c 00        		.byte	0
 2807 002d 00        		.byte	0
 2808 002e 00        		.byte	0
 2809 002f 00        		.byte	0
 2810 0030 00        		.byte	0
 2811 0031 00        		.byte	0
 2812 0032 00        		.byte	0
 2813 0033 00        		.byte	0
 2814 0034 00        		.byte	0
 2815 0035 00        		.byte	0
 2816 0036 00        		.byte	0
 2817 0037 00        		.byte	0
 2818 0038 00        		.byte	0
 2819 0039 00        		.byte	0
 2820 003a 01        		.byte	1
 2821 003b 00        		.byte	0
 2822 003c 01        		.byte	1
 2823 003d 00        		.byte	0
 2824 003e 01        		.byte	1
 2825 003f 01        		.byte	1
 2826 0040 01        		.byte	1
 2827 0041 01        		.byte	1
 2828 0042 01        		.byte	1
 2829 0043 01        		.byte	1
 2830 0044 01        		.byte	1
 2831 0045 01        		.byte	1
 2832 0046 01        		.byte	1
 2833 0047 01        		.byte	1
 2834 0048 01        		.byte	1
 2835 0049 01        		.byte	1
 2836 004a 01        		.byte	1
 2837 004b 01        		.byte	1
 2838 004c 01        		.byte	1
 2839 004d 01        		.byte	1
 2840 004e 01        		.byte	1
 2841 004f 01        		.byte	1
 2842 0050 01        		.byte	1
 2843 0051 01        		.byte	1
 2844 0052 01        		.byte	1
 2845 0053 01        		.byte	1
 2846 0054 01        		.byte	1
 2847 0055 01        		.byte	1
 2848 0056 01        		.byte	1
 2849 0057 01        		.byte	1
 2850 0058 01        		.byte	1
 2851 0059 01        		.byte	1
 2852 005a 01        		.byte	1
 2853 005b 00        		.byte	0
 2854 005c 00        		.byte	0
 2855 005d 00        		.byte	0
 2856 005e 01        		.byte	1
 2857 005f 01        		.byte	1
 2858 0060 00        		.byte	0
 2859 0061 00        		.byte	0
 2860 0062 00        		.byte	0
 2861 0063 00        		.byte	0
 2862 0064 00        		.byte	0
 2863 0065 00        		.byte	0
 2864 0066 00        		.byte	0
 2865 0067 00        		.byte	0
 2866 0068 00        		.byte	0
 2867 0069 00        		.byte	0
 2868 006a 00        		.byte	0
 2869 006b 00        		.byte	0
 2870 006c 00        		.byte	0
 2871 006d 00        		.byte	0
 2872 006e 00        		.byte	0
 2873 006f 00        		.byte	0
 2874 0070 00        		.byte	0
 2875 0071 00        		.byte	0
 2876 0072 00        		.byte	0
 2877 0073 00        		.byte	0
 2878 0074 00        		.byte	0
 2879 0075 00        		.byte	0
 2880 0076 00        		.byte	0
 2881 0077 00        		.byte	0
 2882 0078 00        		.byte	0
 2883 0079 00        		.byte	0
 2884 007a 00        		.byte	0
 2885 007b 01        		.byte	1
 2886 007c 01        		.byte	1
 2887 007d 01        		.byte	1
 2888 007e 01        		.byte	1
 2889 007f 00        		.byte	0
 2890               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 2893               	grave_esc_was_shifted:
 2894 0000 00        		.zero	1
 2895               		.section	.bss.scs_timer,"aw",@nobits
 2898               	scs_timer:
 2899 0000 0000 0000 		.zero	4
 2900               		.section	.bss.shift_interrupted,"aw",@nobits
 2903               	shift_interrupted:
 2904 0000 0000      		.zero	2
 2905               		.text
 2906               	.Letext0:
 2907               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 2908               		.file 5 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/lib/avr-gcc/8/gcc/avr/8.3.0/include/stddef.h"
 2909               		.file 6 "./tmk_core/common/keyboard.h"
 2910               		.file 7 "./tmk_core/common/action.h"
 2911               		.file 8 "./tmk_core/common/report.h"
 2912               		.file 9 "./tmk_core/common/host.h"
 2913               		.file 10 "./tmk_core/common/avr/xprintf.h"
 2914               		.file 11 "./tmk_core/common/debug.h"
 2915               		.file 12 "quantum/keycode_config.h"
 2916               		.file 13 "./tmk_core/common/keycode.h"
 2917               		.file 14 "quantum/quantum_keycodes.h"
 2918               		.file 15 "quantum/keymap.h"
 2919               		.file 16 "./tmk_core/common/action_layer.h"
 2920               		.file 17 "./tmk_core/common/timer.h"
 2921               		.file 18 "./tmk_core/common/action_util.h"
 2922               		.file 19 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdlib.h"
 2923               		.file 20 "./quantum/process_keycode/process_tap_dance.h"
 2924               		.file 21 "quantum/quantum.h"
 2925               		.file 22 "./tmk_core/protocol/lufa/outputselect.h"
 2926               		.file 23 "./tmk_core/common/backlight.h"
 2927               		.file 24 "./tmk_core/common/eeconfig.h"
 2928               		.file 25 "./quantum/process_keycode/process_leader.h"
 2929               		.file 26 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:177    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:190    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:222    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:236    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:255    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:270    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:285    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:300    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:315    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:330    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:345    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:360    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:375    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:390    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:405    .text.register_code16:0000000000000000 register_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:463    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:521    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:543    .text.process_record_user:0000000000000000 process_record_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:565    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:585    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:636    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2903   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2898   .bss.scs_timer:0000000000000000 scs_timer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2616   .progmem.data.__c.3357:0000000000000000 __c.3357
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2893   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1247   .text.send_char:0000000000000000 send_char
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2628   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2761   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1348   .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1524   .text.send_string:0000000000000000 send_string
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1544   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1772   .text.send_string_P:0000000000000000 send_string_P
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1792   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:1844   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2017   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2059   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2194   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2211   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2231   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2246   .text.send_nibble:0000000000000000 send_nibble
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2311   .text.send_byte:0000000000000000 send_byte
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2351   .text.send_word:0000000000000000 send_word
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2388   .text.send_dword:0000000000000000 send_dword
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2436   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2481   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2499   .text.led_set_user:0000000000000000 led_set_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2499   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2518   .text.backlight_set:0000000000000000 backlight_set
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2533   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2552   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2567   .text.led_set:0000000000000000 led_set
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2586   .text.startup_user:0000000000000000 startup_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2601   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctS3Nde.s:2622   .bss.rgb_matrix_task_counter:0000000000000000 rgb_matrix_task_counter

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
preprocess_tap_dance
process_tap_dance
process_leader
timer_read
debug_config
xputs
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
get_mods
add_key
del_key
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
