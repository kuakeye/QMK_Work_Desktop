   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB28:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  19:quantum/quantum.c **** #include "outputselect.h"
  20:quantum/quantum.c **** #endif
  21:quantum/quantum.c **** 
  22:quantum/quantum.c **** #ifndef TAPPING_TERM
  23:quantum/quantum.c **** #define TAPPING_TERM 200
  24:quantum/quantum.c **** #endif
  25:quantum/quantum.c **** 
  26:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  27:quantum/quantum.c **** #define BREATHING_PERIOD 6
  28:quantum/quantum.c **** #endif
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** #include "backlight.h"
  31:quantum/quantum.c **** extern backlight_config_t backlight_config;
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  34:quantum/quantum.c **** #include "fauxclicky.h"
  35:quantum/quantum.c **** #endif
  36:quantum/quantum.c **** 
  37:quantum/quantum.c **** #ifdef API_ENABLE
  38:quantum/quantum.c **** #include "api.h"
  39:quantum/quantum.c **** #endif
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** #ifdef MIDI_ENABLE
  42:quantum/quantum.c **** #include "process_midi.h"
  43:quantum/quantum.c **** #endif
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  46:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  47:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  48:quantum/quantum.c ****   #endif
  49:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  50:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  51:quantum/quantum.c ****   #endif
  52:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  53:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  54:quantum/quantum.c ****   #endif
  55:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  56:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  57:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  58:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  59:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  60:quantum/quantum.c ****   #endif
  61:quantum/quantum.c **** #endif
  62:quantum/quantum.c **** 
  63:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 63 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 63 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  64:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 64 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 64 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  65:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  66:quantum/quantum.c ****     break;
  48               		.loc 1 66 5 is_stmt 1 view .LVU4
  67:quantum/quantum.c ****   default:
  68:quantum/quantum.c ****     return;
  69:quantum/quantum.c ****   }
  70:quantum/quantum.c **** 
  71:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 71 3 view .LVU5
  50               		.loc 1 71 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  72:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 72 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  73:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 73 3 view .LVU8
  60               		.loc 1 73 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  74:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 74 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  75:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 75 3 view .LVU11
  70               		.loc 1 75 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  76:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 76 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  77:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 77 3 view .LVU14
  80               		.loc 1 77 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  78:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 78 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  79:quantum/quantum.c **** 
  80:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 80 3 view .LVU17
  90               		.loc 1 80 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  81:quantum/quantum.c **** 
  82:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 82 3 is_stmt 1 view .LVU19
  83:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 83 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  84:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 84 3 view .LVU21
  85:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 85 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  86:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 86 3 view .LVU23
  87:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 87 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  88:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 88 3 view .LVU25
  89:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 89 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  90:quantum/quantum.c **** }
 117               		.loc 1 90 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 90 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  89:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 89 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 90 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 90 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 90 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE28:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB29:
  91:quantum/quantum.c **** 
  92:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 92 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  93:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 93 5 view .LVU34
 155               		.loc 1 93 19 is_stmt 0 view .LVU35
 156 0000 982F      		mov r25,r24
 157 0002 9770      		andi r25,lo8(7)
 158               		.loc 1 93 5 view .LVU36
 159 0004 81E0      		ldi r24,lo8(1)
 160               	.LVL15:
 161               		.loc 1 93 5 view .LVU37
 162 0006 00C0      		rjmp 2f
 163               		1:
 164 0008 880F      		lsl r24
 165               		2:
 166 000a 9A95      		dec r25
 167 000c 02F4      		brpl 1b
 168 000e 0E94 0000 		call add_weak_mods
 169               	.LVL16:
  94:quantum/quantum.c ****     send_keyboard_report();
 170               		.loc 1 94 5 is_stmt 1 view .LVU38
 171 0012 0C94 0000 		jmp send_keyboard_report
 172               	.LVL17:
 173               		.cfi_endproc
 174               	.LFE29:
 176               		.section	.text.qk_register_mods,"ax",@progbits
 178               	qk_register_mods:
 179               	.LFB96:
 180               		.cfi_startproc
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 0 */
 184               	.L__stack_usage = 0
 185 0000 0C94 0000 		jmp qk_register_weak_mods
 186               		.cfi_endproc
 187               	.LFE96:
 189               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 191               	qk_unregister_weak_mods:
 192               	.LVL18:
 193               	.LFB30:
  95:quantum/quantum.c **** }
  96:quantum/quantum.c **** 
  97:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 194               		.loc 1 97 56 view -0
 195               		.cfi_startproc
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
  98:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 200               		.loc 1 98 5 view .LVU40
 201               		.loc 1 98 19 is_stmt 0 view .LVU41
 202 0000 982F      		mov r25,r24
 203 0002 9770      		andi r25,lo8(7)
 204               		.loc 1 98 5 view .LVU42
 205 0004 81E0      		ldi r24,lo8(1)
 206               	.LVL19:
 207               		.loc 1 98 5 view .LVU43
 208 0006 00C0      		rjmp 2f
 209               		1:
 210 0008 880F      		lsl r24
 211               		2:
 212 000a 9A95      		dec r25
 213 000c 02F4      		brpl 1b
 214 000e 0E94 0000 		call del_weak_mods
 215               	.LVL20:
  99:quantum/quantum.c ****     send_keyboard_report();
 216               		.loc 1 99 5 is_stmt 1 view .LVU44
 217 0012 0C94 0000 		jmp send_keyboard_report
 218               	.LVL21:
 219               		.cfi_endproc
 220               	.LFE30:
 222               		.section	.text.qk_unregister_mods,"ax",@progbits
 224               	qk_unregister_mods:
 225               	.LFB98:
 226               		.cfi_startproc
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 231 0000 0C94 0000 		jmp qk_unregister_weak_mods
 232               		.cfi_endproc
 233               	.LFE98:
 235               		.section	.text.rgblight_toggle,"ax",@progbits
 236               		.weak	rgblight_toggle
 238               	rgblight_toggle:
 239               	.LFB10:
 240               		.file 2 "quantum/rgb.h"
   1:quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:quantum/rgb.h ****  *
   3:quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgb.h ****  * (at your option) any later version.
   7:quantum/rgb.h ****  *
   8:quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgb.h ****  * GNU General Public License for more details.
  12:quantum/rgb.h ****  *
  13:quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgb.h ****  */
  16:quantum/rgb.h **** 
  17:quantum/rgb.h **** #ifndef RGB_H
  18:quantum/rgb.h **** #define RGB_H
  19:quantum/rgb.h **** 
  20:quantum/rgb.h **** __attribute__((weak))
  21:quantum/rgb.h **** void rgblight_toggle(void) {};
 241               		.loc 2 21 28 view -0
 242               		.cfi_startproc
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
 247               		.loc 2 21 29 view .LVU46
 248               	/* epilogue start */
 249               		.loc 2 21 1 is_stmt 0 view .LVU47
 250 0000 0895      		ret
 251               		.cfi_endproc
 252               	.LFE10:
 254               		.section	.text.rgblight_step,"ax",@progbits
 255               		.weak	rgblight_step
 257               	rgblight_step:
 258               	.LFB66:
 259               		.cfi_startproc
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 264               	/* epilogue start */
 265 0000 0895      		ret
 266               		.cfi_endproc
 267               	.LFE66:
 269               		.section	.text.rgblight_step_reverse,"ax",@progbits
 270               		.weak	rgblight_step_reverse
 272               	rgblight_step_reverse:
 273               	.LFB68:
 274               		.cfi_startproc
 275               	/* prologue: function */
 276               	/* frame size = 0 */
 277               	/* stack size = 0 */
 278               	.L__stack_usage = 0
 279               	/* epilogue start */
 280 0000 0895      		ret
 281               		.cfi_endproc
 282               	.LFE68:
 284               		.section	.text.rgblight_increase_hue,"ax",@progbits
 285               		.weak	rgblight_increase_hue
 287               	rgblight_increase_hue:
 288               	.LFB70:
 289               		.cfi_startproc
 290               	/* prologue: function */
 291               	/* frame size = 0 */
 292               	/* stack size = 0 */
 293               	.L__stack_usage = 0
 294               	/* epilogue start */
 295 0000 0895      		ret
 296               		.cfi_endproc
 297               	.LFE70:
 299               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 300               		.weak	rgblight_decrease_hue
 302               	rgblight_decrease_hue:
 303               	.LFB72:
 304               		.cfi_startproc
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 0 */
 308               	.L__stack_usage = 0
 309               	/* epilogue start */
 310 0000 0895      		ret
 311               		.cfi_endproc
 312               	.LFE72:
 314               		.section	.text.rgblight_increase_sat,"ax",@progbits
 315               		.weak	rgblight_increase_sat
 317               	rgblight_increase_sat:
 318               	.LFB74:
 319               		.cfi_startproc
 320               	/* prologue: function */
 321               	/* frame size = 0 */
 322               	/* stack size = 0 */
 323               	.L__stack_usage = 0
 324               	/* epilogue start */
 325 0000 0895      		ret
 326               		.cfi_endproc
 327               	.LFE74:
 329               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 330               		.weak	rgblight_decrease_sat
 332               	rgblight_decrease_sat:
 333               	.LFB76:
 334               		.cfi_startproc
 335               	/* prologue: function */
 336               	/* frame size = 0 */
 337               	/* stack size = 0 */
 338               	.L__stack_usage = 0
 339               	/* epilogue start */
 340 0000 0895      		ret
 341               		.cfi_endproc
 342               	.LFE76:
 344               		.section	.text.rgblight_increase_val,"ax",@progbits
 345               		.weak	rgblight_increase_val
 347               	rgblight_increase_val:
 348               	.LFB78:
 349               		.cfi_startproc
 350               	/* prologue: function */
 351               	/* frame size = 0 */
 352               	/* stack size = 0 */
 353               	.L__stack_usage = 0
 354               	/* epilogue start */
 355 0000 0895      		ret
 356               		.cfi_endproc
 357               	.LFE78:
 359               		.section	.text.rgblight_decrease_val,"ax",@progbits
 360               		.weak	rgblight_decrease_val
 362               	rgblight_decrease_val:
 363               	.LFB80:
 364               		.cfi_startproc
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
 369               	/* epilogue start */
 370 0000 0895      		ret
 371               		.cfi_endproc
 372               	.LFE80:
 374               		.section	.text.rgblight_increase_speed,"ax",@progbits
 375               		.weak	rgblight_increase_speed
 377               	rgblight_increase_speed:
 378               	.LFB82:
 379               		.cfi_startproc
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 384               	/* epilogue start */
 385 0000 0895      		ret
 386               		.cfi_endproc
 387               	.LFE82:
 389               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 390               		.weak	rgblight_decrease_speed
 392               	rgblight_decrease_speed:
 393               	.LFB84:
 394               		.cfi_startproc
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 0 */
 398               	.L__stack_usage = 0
 399               	/* epilogue start */
 400 0000 0895      		ret
 401               		.cfi_endproc
 402               	.LFE84:
 404               		.section	.text.register_code16,"ax",@progbits
 405               	.global	register_code16
 407               	register_code16:
 408               	.LVL22:
 409               	.LFB33:
 100:quantum/quantum.c **** }
 101:quantum/quantum.c **** 
 102:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 103:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 104:quantum/quantum.c ****     send_keyboard_report();
 105:quantum/quantum.c **** }
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 108:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 109:quantum/quantum.c ****     send_keyboard_report();
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** void register_code16 (uint16_t code) {
 410               		.loc 1 112 38 is_stmt 1 view -0
 411               		.cfi_startproc
 412               		.loc 1 112 38 is_stmt 0 view .LVU49
 413 0000 CF93      		push r28
 414               	.LCFI4:
 415               		.cfi_def_cfa_offset 3
 416               		.cfi_offset 28, -2
 417 0002 DF93      		push r29
 418               	.LCFI5:
 419               		.cfi_def_cfa_offset 4
 420               		.cfi_offset 29, -3
 421               	/* prologue: function */
 422               	/* frame size = 0 */
 423               	/* stack size = 2 */
 424               	.L__stack_usage = 2
 425 0004 EC01      		movw r28,r24
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 426               		.loc 1 113 3 is_stmt 1 view .LVU50
 427               		.loc 1 113 7 is_stmt 0 view .LVU51
 428 0006 805E      		subi r24,-32
 429 0008 9109      		sbc r25,__zero_reg__
 430               	.LVL23:
 431               		.loc 1 113 6 view .LVU52
 432 000a 0897      		sbiw r24,8
 433 000c 00F0      		brlo .L37
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 115:quantum/quantum.c ****   } else {
 116:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 434               		.loc 1 116 7 discriminator 1 view .LVU53
 435 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 436 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 437               		.loc 1 113 20 discriminator 1 view .LVU54
 438 0012 2097      		sbiw r28,0
 439 0014 01F4      		brne .L40
 440               	.L37:
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 441               		.loc 1 114 7 is_stmt 1 view .LVU55
 442 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 443 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 444               	.L40:
 445               		.loc 1 116 7 is_stmt 0 view .LVU56
 446 001a CE01      		movw r24,r28
 447 001c 0E94 0000 		call do_code16
 448               	.LVL24:
 117:quantum/quantum.c ****   }
 118:quantum/quantum.c ****   register_code (code);
 449               		.loc 1 118 3 is_stmt 1 view .LVU57
 450 0020 8C2F      		mov r24,r28
 451               	/* epilogue start */
 119:quantum/quantum.c **** }
 452               		.loc 1 119 1 is_stmt 0 view .LVU58
 453 0022 DF91      		pop r29
 454 0024 CF91      		pop r28
 455               	.LVL25:
 118:quantum/quantum.c **** }
 456               		.loc 1 118 3 view .LVU59
 457 0026 0C94 0000 		jmp register_code
 458               	.LVL26:
 459               		.cfi_endproc
 460               	.LFE33:
 462               		.section	.text.unregister_code16,"ax",@progbits
 463               	.global	unregister_code16
 465               	unregister_code16:
 466               	.LVL27:
 467               	.LFB34:
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 468               		.loc 1 121 40 is_stmt 1 view -0
 469               		.cfi_startproc
 470               		.loc 1 121 40 is_stmt 0 view .LVU61
 471 0000 CF93      		push r28
 472               	.LCFI6:
 473               		.cfi_def_cfa_offset 3
 474               		.cfi_offset 28, -2
 475 0002 DF93      		push r29
 476               	.LCFI7:
 477               		.cfi_def_cfa_offset 4
 478               		.cfi_offset 29, -3
 479               	/* prologue: function */
 480               	/* frame size = 0 */
 481               	/* stack size = 2 */
 482               	.L__stack_usage = 2
 483 0004 EC01      		movw r28,r24
 122:quantum/quantum.c ****   unregister_code (code);
 484               		.loc 1 122 3 is_stmt 1 view .LVU62
 485 0006 0E94 0000 		call unregister_code
 486               	.LVL28:
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 487               		.loc 1 123 3 view .LVU63
 488               		.loc 1 123 7 is_stmt 0 view .LVU64
 489 000a CE01      		movw r24,r28
 490 000c 805E      		subi r24,-32
 491 000e 9109      		sbc r25,__zero_reg__
 492               		.loc 1 123 6 view .LVU65
 493 0010 0897      		sbiw r24,8
 494 0012 00F0      		brlo .L42
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 125:quantum/quantum.c ****   } else {
 126:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 495               		.loc 1 126 7 discriminator 1 view .LVU66
 496 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 497 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 498               		.loc 1 123 20 discriminator 1 view .LVU67
 499 0018 2097      		sbiw r28,0
 500 001a 01F4      		brne .L44
 501               	.L42:
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 502               		.loc 1 124 7 is_stmt 1 view .LVU68
 503 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 504 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 505               	.L44:
 506               		.loc 1 126 7 is_stmt 0 view .LVU69
 507 0020 CE01      		movw r24,r28
 508               	/* epilogue start */
 127:quantum/quantum.c ****   }
 128:quantum/quantum.c **** }
 509               		.loc 1 128 1 view .LVU70
 510 0022 DF91      		pop r29
 511 0024 CF91      		pop r28
 512               	.LVL29:
 126:quantum/quantum.c ****   }
 513               		.loc 1 126 7 view .LVU71
 514 0026 0C94 0000 		jmp do_code16
 515               	.LVL30:
 126:quantum/quantum.c ****   }
 516               		.loc 1 126 7 view .LVU72
 517               		.cfi_endproc
 518               	.LFE34:
 520               		.section	.text.process_action_kb,"ax",@progbits
 521               		.weak	process_action_kb
 523               	process_action_kb:
 524               	.LVL31:
 525               	.LFB35:
 129:quantum/quantum.c **** 
 130:quantum/quantum.c **** __attribute__ ((weak))
 131:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 526               		.loc 1 131 45 is_stmt 1 view -0
 527               		.cfi_startproc
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 132:quantum/quantum.c ****   return true;
 532               		.loc 1 132 3 view .LVU74
 133:quantum/quantum.c **** }
 533               		.loc 1 133 1 is_stmt 0 view .LVU75
 534 0000 81E0      		ldi r24,lo8(1)
 535               	.LVL32:
 536               	/* epilogue start */
 537               		.loc 1 133 1 view .LVU76
 538 0002 0895      		ret
 539               		.cfi_endproc
 540               	.LFE35:
 542               		.section	.text.process_record_user,"ax",@progbits
 543               		.weak	process_record_user
 545               	process_record_user:
 546               	.LVL33:
 547               	.LFB37:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__ ((weak))
 136:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 137:quantum/quantum.c ****   return process_record_user(keycode, record);
 138:quantum/quantum.c **** }
 139:quantum/quantum.c **** 
 140:quantum/quantum.c **** __attribute__ ((weak))
 141:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 548               		.loc 1 141 65 is_stmt 1 view -0
 549               		.cfi_startproc
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 0 */
 553               	.L__stack_usage = 0
 142:quantum/quantum.c ****   return true;
 554               		.loc 1 142 3 view .LVU78
 143:quantum/quantum.c **** }
 555               		.loc 1 143 1 is_stmt 0 view .LVU79
 556 0000 81E0      		ldi r24,lo8(1)
 557               	.LVL34:
 558               	/* epilogue start */
 559               		.loc 1 143 1 view .LVU80
 560 0002 0895      		ret
 561               		.cfi_endproc
 562               	.LFE37:
 564               		.section	.text.process_record_kb,"ax",@progbits
 565               		.weak	process_record_kb
 567               	process_record_kb:
 568               	.LVL35:
 569               	.LFB36:
 136:quantum/quantum.c ****   return process_record_user(keycode, record);
 570               		.loc 1 136 63 is_stmt 1 view -0
 571               		.cfi_startproc
 572               	/* prologue: function */
 573               	/* frame size = 0 */
 574               	/* stack size = 0 */
 575               	.L__stack_usage = 0
 137:quantum/quantum.c **** }
 576               		.loc 1 137 3 view .LVU82
 137:quantum/quantum.c **** }
 577               		.loc 1 137 10 is_stmt 0 view .LVU83
 578 0000 0C94 0000 		jmp process_record_user
 579               	.LVL36:
 137:quantum/quantum.c **** }
 580               		.loc 1 137 10 view .LVU84
 581               		.cfi_endproc
 582               	.LFE36:
 584               		.section	.text.reset_keyboard,"ax",@progbits
 585               	.global	reset_keyboard
 587               	reset_keyboard:
 588               	.LFB38:
 144:quantum/quantum.c **** 
 145:quantum/quantum.c **** void reset_keyboard(void) {
 589               		.loc 1 145 27 is_stmt 1 view -0
 590               		.cfi_startproc
 591               	/* prologue: function */
 592               	/* frame size = 0 */
 593               	/* stack size = 0 */
 594               	.L__stack_usage = 0
 146:quantum/quantum.c ****   clear_keyboard();
 595               		.loc 1 146 3 view .LVU86
 596 0000 0E94 0000 		call clear_keyboard
 597               	.LVL37:
 147:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 148:quantum/quantum.c ****   process_midi_all_notes_off();
 149:quantum/quantum.c **** #endif
 150:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 151:quantum/quantum.c ****   music_all_notes_off();
 152:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 153:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 154:quantum/quantum.c ****   shutdown_user();
 155:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 156:quantum/quantum.c ****     wait_ms(1);
 157:quantum/quantum.c ****   stop_all_notes();
 158:quantum/quantum.c **** #else
 159:quantum/quantum.c ****   wait_ms(250);
 598               		.loc 1 159 3 view .LVU87
 599               	.LBB22:
 600               	.LBI22:
 601               		.file 3 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_ms(double __ms)
 602               		.loc 3 166 1 view .LVU88
 603               	.LBB23:
 167:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
 604               		.loc 3 168 2 view .LVU89
 169:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 605               		.loc 3 172 2 view .LVU90
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 606               		.loc 3 173 2 view .LVU91
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 607               		.loc 3 174 2 view .LVU92
 175:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 608               		.loc 3 184 3 view .LVU93
 185:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 609               		.loc 3 187 2 view .LVU94
 610 0004 2FEF      		ldi r18,lo8(799999)
 611 0006 84E3      		ldi r24,hi8(799999)
 612 0008 9CE0      		ldi r25,hlo8(799999)
 613 000a 2150      	1:	subi r18,1
 614 000c 8040      		sbci r24,0
 615 000e 9040      		sbci r25,0
 616 0010 01F4      		brne 1b
 617 0012 00C0      		rjmp .
 618 0014 0000      		nop
 619               	.LVL38:
 620               		.loc 3 187 2 is_stmt 0 view .LVU95
 621               	.LBE23:
 622               	.LBE22:
 160:quantum/quantum.c **** #endif
 161:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 162:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 163:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 623               		.loc 1 163 3 is_stmt 1 view .LVU96
 624               		.loc 1 163 23 is_stmt 0 view .LVU97
 625 0016 87E7      		ldi r24,lo8(119)
 626 0018 97E7      		ldi r25,lo8(119)
 627 001a 9093 0108 		sts 2048+1,r25
 628 001e 8093 0008 		sts 2048,r24
 164:quantum/quantum.c **** #endif
 165:quantum/quantum.c ****   bootloader_jump();
 629               		.loc 1 165 3 is_stmt 1 view .LVU98
 630 0022 0C94 0000 		jmp bootloader_jump
 631               	.LVL39:
 632               		.cfi_endproc
 633               	.LFE38:
 635               		.section	.text.process_record_quantum,"ax",@progbits
 636               	.global	process_record_quantum
 638               	process_record_quantum:
 639               	.LVL40:
 640               	.LFB39:
 166:quantum/quantum.c **** }
 167:quantum/quantum.c **** 
 168:quantum/quantum.c **** // Shift / paren setup
 169:quantum/quantum.c **** 
 170:quantum/quantum.c **** #ifndef LSPO_KEY
 171:quantum/quantum.c ****   #define LSPO_KEY KC_9
 172:quantum/quantum.c **** #endif
 173:quantum/quantum.c **** #ifndef RSPC_KEY
 174:quantum/quantum.c ****   #define RSPC_KEY KC_0
 175:quantum/quantum.c **** #endif
 176:quantum/quantum.c **** 
 177:quantum/quantum.c **** // Shift / Enter setup
 178:quantum/quantum.c **** #ifndef SFTENT_KEY
 179:quantum/quantum.c ****   #define SFTENT_KEY KC_ENT
 180:quantum/quantum.c **** #endif
 181:quantum/quantum.c **** 
 182:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 183:quantum/quantum.c **** static uint16_t scs_timer[2] = {0, 0};
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 641               		.loc 1 190 50 view -0
 642               		.cfi_startproc
 643               		.loc 1 190 50 is_stmt 0 view .LVU100
 644 0000 0F93      		push r16
 645               	.LCFI8:
 646               		.cfi_def_cfa_offset 3
 647               		.cfi_offset 16, -2
 648 0002 1F93      		push r17
 649               	.LCFI9:
 650               		.cfi_def_cfa_offset 4
 651               		.cfi_offset 17, -3
 652 0004 CF93      		push r28
 653               	.LCFI10:
 654               		.cfi_def_cfa_offset 5
 655               		.cfi_offset 28, -4
 656 0006 DF93      		push r29
 657               	.LCFI11:
 658               		.cfi_def_cfa_offset 6
 659               		.cfi_offset 29, -5
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 4 */
 663               	.L__stack_usage = 4
 664 0008 8C01      		movw r16,r24
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 193:quantum/quantum.c ****   keypos_t key = record->event.key;
 665               		.loc 1 193 3 is_stmt 1 view .LVU101
 666               		.loc 1 193 12 is_stmt 0 view .LVU102
 667 000a FC01      		movw r30,r24
 668 000c C081      		ld r28,Z
 669 000e D181      		ldd r29,Z+1
 670               	.LVL41:
 194:quantum/quantum.c ****   uint16_t keycode;
 671               		.loc 1 194 3 is_stmt 1 view .LVU103
 195:quantum/quantum.c **** 
 196:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 197:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 198:quantum/quantum.c ****     if (!disable_action_cache) {
 199:quantum/quantum.c ****       uint8_t layer;
 200:quantum/quantum.c **** 
 201:quantum/quantum.c ****       if (record->event.pressed) {
 202:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 203:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 204:quantum/quantum.c ****       } else {
 205:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 206:quantum/quantum.c ****       }
 207:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 208:quantum/quantum.c ****     } else
 209:quantum/quantum.c ****   #endif
 210:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 672               		.loc 1 210 5 view .LVU104
 673               		.loc 1 210 37 is_stmt 0 view .LVU105
 674 0010 CE01      		movw r24,r28
 675               	.LVL42:
 676               		.loc 1 210 37 view .LVU106
 677 0012 0E94 0000 		call layer_switch_get_layer
 678               	.LVL43:
 679               		.loc 1 210 15 view .LVU107
 680 0016 BE01      		movw r22,r28
 681 0018 0E94 0000 		call keymap_key_to_keycode
 682               	.LVL44:
 683 001c EC01      		movw r28,r24
 684               	.LVL45:
 211:quantum/quantum.c **** 
 212:quantum/quantum.c ****     // This is how you use actions here
 213:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 214:quantum/quantum.c ****     //   action_t action;
 215:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 216:quantum/quantum.c ****     //   process_action(record, action);
 217:quantum/quantum.c ****     //   return false;
 218:quantum/quantum.c ****     // }
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 221:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 685               		.loc 1 221 5 is_stmt 1 view .LVU108
 686 001e B801      		movw r22,r16
 687 0020 0E94 0000 		call preprocess_tap_dance
 688               	.LVL46:
 222:quantum/quantum.c ****   #endif
 223:quantum/quantum.c **** 
 224:quantum/quantum.c ****   if (!(
 689               		.loc 1 224 3 view .LVU109
 225:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 226:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 227:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 228:quantum/quantum.c ****   #endif
 229:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****       process_clicky(keycode, record) &&
 231:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 232:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 690               		.loc 1 232 5 is_stmt 0 view .LVU110
 691 0024 B801      		movw r22,r16
 692 0026 CE01      		movw r24,r28
 693 0028 0E94 0000 		call process_record_kb
 694               	.LVL47:
 233:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 234:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 235:quantum/quantum.c ****   #endif
 236:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 237:quantum/quantum.c ****     process_midi(keycode, record) &&
 238:quantum/quantum.c ****   #endif
 239:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 240:quantum/quantum.c ****     process_audio(keycode, record) &&
 241:quantum/quantum.c ****   #endif
 242:quantum/quantum.c ****   #ifdef STENO_ENABLE
 243:quantum/quantum.c ****     process_steno(keycode, record) &&
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c ****   #if ( defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSI
 246:quantum/quantum.c ****     process_music(keycode, record) &&
 247:quantum/quantum.c ****   #endif
 248:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 249:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 695               		.loc 1 249 40 view .LVU111
 696 002c 8823      		tst r24
 697 002e 01F4      		brne .+2
 698 0030 00C0      		rjmp .L51
 699               		.loc 1 249 5 discriminator 2 view .LVU112
 700 0032 B801      		movw r22,r16
 701 0034 CE01      		movw r24,r28
 702 0036 0E94 0000 		call process_tap_dance
 703               	.LVL48:
 232:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 704               		.loc 1 232 40 discriminator 2 view .LVU113
 705 003a 8823      		tst r24
 706 003c 01F4      		brne .+2
 707 003e 00C0      		rjmp .L51
 250:quantum/quantum.c ****   #endif
 251:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 252:quantum/quantum.c ****     process_leader(keycode, record) &&
 708               		.loc 1 252 5 discriminator 3 view .LVU114
 709 0040 B801      		movw r22,r16
 710 0042 CE01      		movw r24,r28
 711 0044 0E94 0000 		call process_leader
 712               	.LVL49:
 249:quantum/quantum.c ****   #endif
 713               		.loc 1 249 40 discriminator 3 view .LVU115
 714 0048 8823      		tst r24
 715 004a 01F4      		brne .+2
 716 004c 00C0      		rjmp .L51
 253:quantum/quantum.c ****   #endif
 254:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 255:quantum/quantum.c ****     process_chording(keycode, record) &&
 256:quantum/quantum.c ****   #endif
 257:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 258:quantum/quantum.c ****     process_combo(keycode, record) &&
 259:quantum/quantum.c ****   #endif
 260:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 261:quantum/quantum.c ****     process_unicode(keycode, record) &&
 262:quantum/quantum.c ****   #endif
 263:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 264:quantum/quantum.c ****     process_ucis(keycode, record) &&
 265:quantum/quantum.c ****   #endif
 266:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 267:quantum/quantum.c ****     process_printer(keycode, record) &&
 268:quantum/quantum.c ****   #endif
 269:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 270:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 271:quantum/quantum.c ****   #endif
 272:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 273:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 274:quantum/quantum.c ****   #endif
 275:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 276:quantum/quantum.c ****     process_terminal(keycode, record) &&
 277:quantum/quantum.c ****   #endif
 278:quantum/quantum.c ****       true)) {
 279:quantum/quantum.c ****     return false;
 280:quantum/quantum.c ****   }
 281:quantum/quantum.c **** 
 282:quantum/quantum.c ****   // Shift / paren setup
 283:quantum/quantum.c **** 
 284:quantum/quantum.c ****   switch(keycode) {
 717               		.loc 1 284 3 is_stmt 1 view .LVU116
 718 004e C33D      		cpi r28,-45
 719 0050 FCE5      		ldi r31,92
 720 0052 DF07      		cpc r29,r31
 721 0054 01F4      		brne .+2
 722 0056 00C0      		rjmp .L53
 723 0058 00F4      		brsh .L54
 724 005a C531      		cpi r28,21
 725 005c ECE5      		ldi r30,92
 726 005e DE07      		cpc r29,r30
 727 0060 00F4      		brsh .L55
 728 0062 C230      		cpi r28,2
 729 0064 FCE5      		ldi r31,92
 730 0066 DF07      		cpc r29,r31
 731 0068 00F0      		brlo .+2
 732 006a 00C0      		rjmp .L56
 733 006c C115      		cp r28,__zero_reg__
 734 006e 8CE5      		ldi r24,92
 735 0070 D807      		cpc r29,r24
 736 0072 01F4      		brne .+2
 737 0074 00C0      		rjmp .L57
 738 0076 C130      		cpi r28,1
 739 0078 DC45      		sbci r29,92
 740 007a 01F4      		brne .+2
 741 007c 00C0      		rjmp .L58
 742               	.L59:
 285:quantum/quantum.c ****     case RESET:
 286:quantum/quantum.c ****       if (record->event.pressed) {
 287:quantum/quantum.c ****         reset_keyboard();
 288:quantum/quantum.c ****       }
 289:quantum/quantum.c ****     return false;
 290:quantum/quantum.c ****     case DEBUG:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****           debug_enable = true;
 293:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 294:quantum/quantum.c ****       }
 295:quantum/quantum.c ****     return false;
 296:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 297:quantum/quantum.c ****   case FC_TOG:
 298:quantum/quantum.c ****     if (record->event.pressed) {
 299:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 300:quantum/quantum.c ****     }
 301:quantum/quantum.c ****     return false;
 302:quantum/quantum.c ****   case FC_ON:
 303:quantum/quantum.c ****     if (record->event.pressed) {
 304:quantum/quantum.c ****       FAUXCLICKY_ON;
 305:quantum/quantum.c ****     }
 306:quantum/quantum.c ****     return false;
 307:quantum/quantum.c ****   case FC_OFF:
 308:quantum/quantum.c ****     if (record->event.pressed) {
 309:quantum/quantum.c ****       FAUXCLICKY_OFF;
 310:quantum/quantum.c ****     }
 311:quantum/quantum.c ****     return false;
 312:quantum/quantum.c ****   #endif
 313:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 314:quantum/quantum.c ****   case RGB_TOG:
 315:quantum/quantum.c ****     if (record->event.pressed) {
 316:quantum/quantum.c ****       rgblight_toggle();
 317:quantum/quantum.c ****     }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 320:quantum/quantum.c ****     if (record->event.pressed) {
 321:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 322:quantum/quantum.c ****       if(shifted) {
 323:quantum/quantum.c ****         rgblight_step_reverse();
 324:quantum/quantum.c ****       }
 325:quantum/quantum.c ****       else {
 326:quantum/quantum.c ****         rgblight_step();
 327:quantum/quantum.c ****       }
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****       if(shifted) {
 334:quantum/quantum.c ****         rgblight_step();
 335:quantum/quantum.c ****       }
 336:quantum/quantum.c ****       else {
 337:quantum/quantum.c ****         rgblight_step_reverse();
 338:quantum/quantum.c ****       }
 339:quantum/quantum.c ****     }
 340:quantum/quantum.c ****     return false;
 341:quantum/quantum.c ****   case RGB_HUI:
 342:quantum/quantum.c ****     if (record->event.pressed) {
 343:quantum/quantum.c ****       rgblight_increase_hue();
 344:quantum/quantum.c ****     }
 345:quantum/quantum.c ****     return false;
 346:quantum/quantum.c ****   case RGB_HUD:
 347:quantum/quantum.c ****     if (record->event.pressed) {
 348:quantum/quantum.c ****       rgblight_decrease_hue();
 349:quantum/quantum.c ****     }
 350:quantum/quantum.c ****     return false;
 351:quantum/quantum.c ****   case RGB_SAI:
 352:quantum/quantum.c ****     if (record->event.pressed) {
 353:quantum/quantum.c ****       rgblight_increase_sat();
 354:quantum/quantum.c ****     }
 355:quantum/quantum.c ****     return false;
 356:quantum/quantum.c ****   case RGB_SAD:
 357:quantum/quantum.c ****     if (record->event.pressed) {
 358:quantum/quantum.c ****       rgblight_decrease_sat();
 359:quantum/quantum.c ****     }
 360:quantum/quantum.c ****     return false;
 361:quantum/quantum.c ****   case RGB_VAI:
 362:quantum/quantum.c ****     if (record->event.pressed) {
 363:quantum/quantum.c ****       rgblight_increase_val();
 364:quantum/quantum.c ****     }
 365:quantum/quantum.c ****     return false;
 366:quantum/quantum.c ****   case RGB_VAD:
 367:quantum/quantum.c ****     if (record->event.pressed) {
 368:quantum/quantum.c ****       rgblight_decrease_val();
 369:quantum/quantum.c ****     }
 370:quantum/quantum.c ****     return false;
 371:quantum/quantum.c ****   case RGB_SPI:
 372:quantum/quantum.c ****     if (record->event.pressed) {
 373:quantum/quantum.c ****       rgblight_increase_speed();
 374:quantum/quantum.c ****     }
 375:quantum/quantum.c ****     return false;
 376:quantum/quantum.c ****   case RGB_SPD:
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****       rgblight_decrease_speed();
 379:quantum/quantum.c ****     }
 380:quantum/quantum.c ****     return false;
 381:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 382:quantum/quantum.c ****     if (record->event.pressed) {
 383:quantum/quantum.c ****       rgblight_mode(1);
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 389:quantum/quantum.c ****         rgblight_step();
 390:quantum/quantum.c ****       } else {
 391:quantum/quantum.c ****         rgblight_mode(2);
 392:quantum/quantum.c ****       }
 393:quantum/quantum.c ****     }
 394:quantum/quantum.c ****     return false;
 395:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 396:quantum/quantum.c ****     if (record->event.pressed) {
 397:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 398:quantum/quantum.c ****         rgblight_step();
 399:quantum/quantum.c ****       } else {
 400:quantum/quantum.c ****         rgblight_mode(6);
 401:quantum/quantum.c ****       }
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 405:quantum/quantum.c ****     if (record->event.pressed) {
 406:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 407:quantum/quantum.c ****         rgblight_step();
 408:quantum/quantum.c ****       } else {
 409:quantum/quantum.c ****         rgblight_mode(9);
 410:quantum/quantum.c ****       }
 411:quantum/quantum.c ****     }
 412:quantum/quantum.c ****     return false;
 413:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 414:quantum/quantum.c ****     if (record->event.pressed) {
 415:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 416:quantum/quantum.c ****         rgblight_step();
 417:quantum/quantum.c ****       } else {
 418:quantum/quantum.c ****         rgblight_mode(15);
 419:quantum/quantum.c ****       }
 420:quantum/quantum.c ****     }
 421:quantum/quantum.c ****     return false;
 422:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 423:quantum/quantum.c ****     if (record->event.pressed) {
 424:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 425:quantum/quantum.c ****         rgblight_step();
 426:quantum/quantum.c ****       } else {
 427:quantum/quantum.c ****         rgblight_mode(21);
 428:quantum/quantum.c ****       }
 429:quantum/quantum.c ****     }
 430:quantum/quantum.c ****     return false;
 431:quantum/quantum.c ****   case RGB_MODE_XMAS:
 432:quantum/quantum.c ****     if (record->event.pressed) {
 433:quantum/quantum.c ****       rgblight_mode(24);
 434:quantum/quantum.c ****     }
 435:quantum/quantum.c ****     return false;
 436:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 437:quantum/quantum.c ****     if (record->event.pressed) {
 438:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 439:quantum/quantum.c ****         rgblight_step();
 440:quantum/quantum.c ****       } else {
 441:quantum/quantum.c ****         rgblight_mode(25);
 442:quantum/quantum.c ****       }
 443:quantum/quantum.c ****     }
 444:quantum/quantum.c ****     return false;
 445:quantum/quantum.c ****   #endif
 446:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 447:quantum/quantum.c ****     case OUT_AUTO:
 448:quantum/quantum.c ****       if (record->event.pressed) {
 449:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 450:quantum/quantum.c ****       }
 451:quantum/quantum.c ****       return false;
 452:quantum/quantum.c ****     case OUT_USB:
 453:quantum/quantum.c ****       if (record->event.pressed) {
 454:quantum/quantum.c ****         set_output(OUTPUT_USB);
 455:quantum/quantum.c ****       }
 456:quantum/quantum.c ****       return false;
 457:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 458:quantum/quantum.c ****     case OUT_BT:
 459:quantum/quantum.c ****       if (record->event.pressed) {
 460:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 461:quantum/quantum.c ****       }
 462:quantum/quantum.c ****       return false;
 463:quantum/quantum.c ****     #endif
 464:quantum/quantum.c ****     #endif
 465:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 466:quantum/quantum.c ****       if (record->event.pressed) {
 467:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 468:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 469:quantum/quantum.c ****             eeconfig_init();
 470:quantum/quantum.c ****         }
 471:quantum/quantum.c ****         /* keymap config */
 472:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 473:quantum/quantum.c ****         switch (keycode)
 474:quantum/quantum.c ****         {
 475:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 476:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 477:quantum/quantum.c ****             break;
 478:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 479:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 480:quantum/quantum.c ****             break;
 481:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 482:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 483:quantum/quantum.c ****             break;
 484:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 485:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 486:quantum/quantum.c ****             break;
 487:quantum/quantum.c ****           case MAGIC_NO_GUI:
 488:quantum/quantum.c ****             keymap_config.no_gui = true;
 489:quantum/quantum.c ****             break;
 490:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 491:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 492:quantum/quantum.c ****             break;
 493:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 494:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 495:quantum/quantum.c ****             break;
 496:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 497:quantum/quantum.c ****             keymap_config.nkro = true;
 498:quantum/quantum.c ****             break;
 499:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 500:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 501:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 502:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 503:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 504:quantum/quantum.c ****             #endif
 505:quantum/quantum.c ****             break;
 506:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 507:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 508:quantum/quantum.c ****             break;
 509:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 510:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 511:quantum/quantum.c ****             break;
 512:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 513:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 514:quantum/quantum.c ****             break;
 515:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 516:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 517:quantum/quantum.c ****             break;
 518:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 519:quantum/quantum.c ****             keymap_config.no_gui = false;
 520:quantum/quantum.c ****             break;
 521:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 522:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 523:quantum/quantum.c ****             break;
 524:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 525:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 526:quantum/quantum.c ****             break;
 527:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 528:quantum/quantum.c ****             keymap_config.nkro = false;
 529:quantum/quantum.c ****             break;
 530:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 531:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 532:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 533:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 534:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 535:quantum/quantum.c ****             #endif
 536:quantum/quantum.c ****             break;
 537:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 538:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 539:quantum/quantum.c ****             break;
 540:quantum/quantum.c ****           default:
 541:quantum/quantum.c ****             break;
 542:quantum/quantum.c ****         }
 543:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 544:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 545:quantum/quantum.c **** 
 546:quantum/quantum.c ****         return false;
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       break;
 549:quantum/quantum.c ****     case KC_LSPO: {
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         shift_interrupted[0] = false;
 552:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 553:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 554:quantum/quantum.c ****       }
 555:quantum/quantum.c ****       else {
 556:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 557:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 558:quantum/quantum.c ****             shift_interrupted[0] = true;
 559:quantum/quantum.c ****             shift_interrupted[1] = true;
 560:quantum/quantum.c ****           }
 561:quantum/quantum.c ****         #endif
 562:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer[0]) < TAPPING_TERM) {
 563:quantum/quantum.c ****           register_code(LSPO_KEY);
 564:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 565:quantum/quantum.c ****         }
 566:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 567:quantum/quantum.c ****       }
 568:quantum/quantum.c ****       return false;
 569:quantum/quantum.c ****     }
 570:quantum/quantum.c **** 
 571:quantum/quantum.c ****     case KC_RSPC: {
 572:quantum/quantum.c ****       if (record->event.pressed) {
 573:quantum/quantum.c ****         shift_interrupted[1] = false;
 574:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 575:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 576:quantum/quantum.c ****       }
 577:quantum/quantum.c ****       else {
 578:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 579:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 580:quantum/quantum.c ****             shift_interrupted[0] = true;
 581:quantum/quantum.c ****             shift_interrupted[1] = true;
 582:quantum/quantum.c ****           }
 583:quantum/quantum.c ****         #endif
 584:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 585:quantum/quantum.c ****           register_code(RSPC_KEY);
 586:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 587:quantum/quantum.c ****         }
 588:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 589:quantum/quantum.c ****       }
 590:quantum/quantum.c ****       return false;
 591:quantum/quantum.c ****     }
 592:quantum/quantum.c **** 
 593:quantum/quantum.c ****     case KC_SFTENT: {
 594:quantum/quantum.c ****       if (record->event.pressed) {
 595:quantum/quantum.c ****         shift_interrupted[1] = false;
 596:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 597:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 598:quantum/quantum.c ****       }
 599:quantum/quantum.c ****       else if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 600:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 601:quantum/quantum.c ****         register_code(SFTENT_KEY);
 602:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 603:quantum/quantum.c ****       }
 604:quantum/quantum.c ****       else {
 605:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 606:quantum/quantum.c ****       }
 607:quantum/quantum.c ****       return false;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c **** 
 610:quantum/quantum.c ****     case GRAVE_ESC: {
 611:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 612:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 615:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 616:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 617:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 618:quantum/quantum.c ****         shifted = 0;
 619:quantum/quantum.c ****       }
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c **** 
 622:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 623:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 624:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 625:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 626:quantum/quantum.c ****         shifted = 0;
 627:quantum/quantum.c ****       }
 628:quantum/quantum.c **** #endif
 629:quantum/quantum.c **** 
 630:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 631:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 632:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 633:quantum/quantum.c ****         shifted = 0;
 634:quantum/quantum.c ****       }
 635:quantum/quantum.c **** #endif
 636:quantum/quantum.c **** 
 637:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 638:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 639:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 640:quantum/quantum.c ****         shifted = 0;
 641:quantum/quantum.c ****       }
 642:quantum/quantum.c **** #endif
 643:quantum/quantum.c **** 
 644:quantum/quantum.c ****       if (record->event.pressed) {
 645:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 646:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 647:quantum/quantum.c ****       }
 648:quantum/quantum.c ****       else {
 649:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 650:quantum/quantum.c ****       }
 651:quantum/quantum.c **** 
 652:quantum/quantum.c ****       send_keyboard_report();
 653:quantum/quantum.c ****       return false;
 654:quantum/quantum.c ****     }
 655:quantum/quantum.c **** 
 656:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 657:quantum/quantum.c ****     case BL_BRTG: {
 658:quantum/quantum.c ****       if (record->event.pressed)
 659:quantum/quantum.c ****         breathing_toggle();
 660:quantum/quantum.c ****       return false;
 661:quantum/quantum.c ****     }
 662:quantum/quantum.c **** #endif
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     default: {
 665:quantum/quantum.c ****       shift_interrupted[0] = true;
 743               		.loc 1 665 7 view .LVU117
 744               		.loc 1 665 28 is_stmt 0 view .LVU118
 745 007e 81E0      		ldi r24,lo8(1)
 746 0080 8093 0000 		sts shift_interrupted,r24
 666:quantum/quantum.c ****       shift_interrupted[1] = true;
 747               		.loc 1 666 7 is_stmt 1 view .LVU119
 748               		.loc 1 666 28 is_stmt 0 view .LVU120
 749 0084 8093 0000 		sts shift_interrupted+1,r24
 667:quantum/quantum.c ****       break;
 750               		.loc 1 667 7 is_stmt 1 view .LVU121
 751               	.L66:
 668:quantum/quantum.c ****     }
 669:quantum/quantum.c ****   }
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****   return process_action_kb(record);
 752               		.loc 1 671 3 view .LVU122
 753               		.loc 1 671 10 is_stmt 0 view .LVU123
 754 0088 C801      		movw r24,r16
 755               	/* epilogue start */
 672:quantum/quantum.c **** }
 756               		.loc 1 672 1 view .LVU124
 757 008a DF91      		pop r29
 758 008c CF91      		pop r28
 759               	.LVL50:
 760               		.loc 1 672 1 view .LVU125
 761 008e 1F91      		pop r17
 762 0090 0F91      		pop r16
 763               	.LVL51:
 671:quantum/quantum.c **** }
 764               		.loc 1 671 10 view .LVU126
 765 0092 0C94 0000 		jmp process_action_kb
 766               	.LVL52:
 767               	.L55:
 284:quantum/quantum.c ****     case RESET:
 768               		.loc 1 284 3 view .LVU127
 769 0096 C531      		cpi r28,21
 770 0098 DC45      		sbci r29,92
 771 009a 01F4      		brne .L59
 772               	.LBB24:
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 773               		.loc 1 611 7 is_stmt 1 view .LVU128
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 774               		.loc 1 611 25 is_stmt 0 view .LVU129
 775 009c 0E94 0000 		call get_mods
 776               	.LVL53:
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 777               		.loc 1 644 7 is_stmt 1 view .LVU130
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 778               		.loc 1 644 10 is_stmt 0 view .LVU131
 779 00a0 F801      		movw r30,r16
 780 00a2 9281      		ldd r25,Z+2
 781 00a4 9923      		tst r25
 782 00a6 01F4      		brne .+2
 783 00a8 00C0      		rjmp .L98
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 784               		.loc 1 611 15 view .LVU132
 785 00aa 8A7A      		andi r24,lo8(-86)
 786               	.LVL54:
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 787               		.loc 1 645 9 is_stmt 1 view .LVU133
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 788               		.loc 1 645 31 is_stmt 0 view .LVU134
 789 00ac 91E0      		ldi r25,lo8(1)
 790 00ae 01F4      		brne .L99
 791 00b0 90E0      		ldi r25,0
 792               	.L99:
 793 00b2 9093 0000 		sts grave_esc_was_shifted,r25
 646:quantum/quantum.c ****       }
 794               		.loc 1 646 9 is_stmt 1 view .LVU135
 795 00b6 8111      		cpse r24,__zero_reg__
 796 00b8 00C0      		rjmp .L103
 797 00ba 89E2      		ldi r24,lo8(41)
 798               	.LVL55:
 799               	.L100:
 646:quantum/quantum.c ****       }
 800               		.loc 1 646 9 is_stmt 0 discriminator 4 view .LVU136
 801 00bc 0E94 0000 		call add_key
 802               	.LVL56:
 803               	.L101:
 652:quantum/quantum.c ****       return false;
 804               		.loc 1 652 7 is_stmt 1 view .LVU137
 805 00c0 0E94 0000 		call send_keyboard_report
 806               	.LVL57:
 653:quantum/quantum.c ****     }
 807               		.loc 1 653 7 view .LVU138
 653:quantum/quantum.c ****     }
 808               		.loc 1 653 14 is_stmt 0 view .LVU139
 809 00c4 00C0      		rjmp .L51
 810               	.L54:
 653:quantum/quantum.c ****     }
 811               		.loc 1 653 14 view .LVU140
 812               	.LBE24:
 284:quantum/quantum.c ****     case RESET:
 813               		.loc 1 284 3 view .LVU141
 814 00c6 C83D      		cpi r28,-40
 815 00c8 8CE5      		ldi r24,92
 816 00ca D807      		cpc r29,r24
 817 00cc 01F4      		brne .+2
 818 00ce 00C0      		rjmp .L61
 819 00d0 00F4      		brsh .L62
 820 00d2 C43D      		cpi r28,-44
 821 00d4 FCE5      		ldi r31,92
 822 00d6 DF07      		cpc r29,r31
 823 00d8 01F4      		brne .+2
 824 00da 00C0      		rjmp .L63
 825 00dc C53D      		cpi r28,-43
 826 00de DC45      		sbci r29,92
 827 00e0 01F4      		brne .L59
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 828               		.loc 1 594 7 is_stmt 1 view .LVU142
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 829               		.loc 1 594 10 is_stmt 0 view .LVU143
 830 00e2 F801      		movw r30,r16
 831 00e4 8281      		ldd r24,Z+2
 832 00e6 8111      		cpse r24,__zero_reg__
 833 00e8 00C0      		rjmp .L97
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 834               		.loc 1 599 12 is_stmt 1 view .LVU144
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 835               		.loc 1 599 34 is_stmt 0 view .LVU145
 836 00ea 8091 0000 		lds r24,shift_interrupted+1
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 837               		.loc 1 599 15 view .LVU146
 838 00ee 8111      		cpse r24,__zero_reg__
 839 00f0 00C0      		rjmp .L95
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 840               		.loc 1 599 41 discriminator 1 view .LVU147
 841 00f2 8091 0000 		lds r24,scs_timer+2
 842 00f6 9091 0000 		lds r25,scs_timer+2+1
 843 00fa 0E94 0000 		call timer_elapsed
 844               	.LVL58:
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 845               		.loc 1 599 38 discriminator 1 view .LVU148
 846 00fe 8639      		cpi r24,-106
 847 0100 9105      		cpc r25,__zero_reg__
 848 0102 00F0      		brlo .+2
 849 0104 00C0      		rjmp .L95
 600:quantum/quantum.c ****         register_code(SFTENT_KEY);
 850               		.loc 1 600 9 is_stmt 1 view .LVU149
 851 0106 80E2      		ldi r24,lo8(32)
 852 0108 0E94 0000 		call unregister_mods
 853               	.LVL59:
 601:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 854               		.loc 1 601 9 view .LVU150
 855 010c 88E2      		ldi r24,lo8(40)
 856 010e 0E94 0000 		call register_code
 857               	.LVL60:
 602:quantum/quantum.c ****       }
 858               		.loc 1 602 9 view .LVU151
 859 0112 88E2      		ldi r24,lo8(40)
 860 0114 0E94 0000 		call unregister_code
 861               	.LVL61:
 862 0118 00C0      		rjmp .L51
 863               	.L62:
 284:quantum/quantum.c ****     case RESET:
 864               		.loc 1 284 3 is_stmt 0 view .LVU152
 865 011a C93D      		cpi r28,-39
 866 011c DC45      		sbci r29,92
 867 011e 01F0      		breq .+2
 868 0120 00C0      		rjmp .L59
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 869               		.loc 1 453 7 is_stmt 1 view .LVU153
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 870               		.loc 1 453 10 is_stmt 0 view .LVU154
 871 0122 F801      		movw r30,r16
 872 0124 8281      		ldd r24,Z+2
 873 0126 8823      		tst r24
 874 0128 01F0      		breq .L51
 454:quantum/quantum.c ****       }
 875               		.loc 1 454 9 is_stmt 1 view .LVU155
 876 012a 82E0      		ldi r24,lo8(2)
 877 012c 00C0      		rjmp .L127
 878               	.L57:
 286:quantum/quantum.c ****         reset_keyboard();
 879               		.loc 1 286 7 view .LVU156
 286:quantum/quantum.c ****         reset_keyboard();
 880               		.loc 1 286 10 is_stmt 0 view .LVU157
 881 012e F801      		movw r30,r16
 882 0130 8281      		ldd r24,Z+2
 883 0132 8111      		cpse r24,__zero_reg__
 287:quantum/quantum.c ****       }
 884               		.loc 1 287 9 is_stmt 1 view .LVU158
 885 0134 0E94 0000 		call reset_keyboard
 886               	.LVL62:
 887               	.L51:
 888               		.loc 1 672 1 is_stmt 0 view .LVU159
 889 0138 80E0      		ldi r24,0
 890               	/* epilogue start */
 891 013a DF91      		pop r29
 892 013c CF91      		pop r28
 893               	.LVL63:
 894               		.loc 1 672 1 view .LVU160
 895 013e 1F91      		pop r17
 896 0140 0F91      		pop r16
 897               	.LVL64:
 898               		.loc 1 672 1 view .LVU161
 899 0142 0895      		ret
 900               	.LVL65:
 901               	.L58:
 291:quantum/quantum.c ****           debug_enable = true;
 902               		.loc 1 291 7 is_stmt 1 view .LVU162
 291:quantum/quantum.c ****           debug_enable = true;
 903               		.loc 1 291 10 is_stmt 0 view .LVU163
 904 0144 F801      		movw r30,r16
 905 0146 8281      		ldd r24,Z+2
 906 0148 8823      		tst r24
 907 014a 01F0      		breq .L51
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 908               		.loc 1 292 11 is_stmt 1 view .LVU164
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 909               		.loc 1 292 24 is_stmt 0 view .LVU165
 910 014c 8091 0000 		lds r24,debug_config
 911 0150 8160      		ori r24,lo8(1<<0)
 912 0152 8093 0000 		sts debug_config,r24
 293:quantum/quantum.c ****       }
 913               		.loc 1 293 11 is_stmt 1 view .LVU166
 914               	.LBB25:
 293:quantum/quantum.c ****       }
 915               		.loc 1 293 11 view .LVU167
 293:quantum/quantum.c ****       }
 916               		.loc 1 293 11 view .LVU168
 917               	.LBE25:
 918 0156 80E0      		ldi r24,lo8(__c.3306)
 919 0158 90E0      		ldi r25,hi8(__c.3306)
 920 015a 0E94 0000 		call xputs
 921               	.LVL66:
 922 015e 00C0      		rjmp .L51
 923               	.L61:
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 924               		.loc 1 448 7 view .LVU169
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 925               		.loc 1 448 10 is_stmt 0 view .LVU170
 926 0160 F801      		movw r30,r16
 927 0162 8281      		ldd r24,Z+2
 928 0164 8823      		tst r24
 929 0166 01F0      		breq .L51
 449:quantum/quantum.c ****       }
 930               		.loc 1 449 9 is_stmt 1 view .LVU171
 931 0168 80E0      		ldi r24,0
 932               	.L127:
 454:quantum/quantum.c ****       }
 933               		.loc 1 454 9 is_stmt 0 view .LVU172
 934 016a 0E94 0000 		call set_output
 935               	.LVL67:
 936 016e 00C0      		rjmp .L51
 937               	.L56:
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 938               		.loc 1 466 7 is_stmt 1 view .LVU173
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 939               		.loc 1 466 10 is_stmt 0 view .LVU174
 940 0170 F801      		movw r30,r16
 941 0172 8281      		ldd r24,Z+2
 942 0174 8823      		tst r24
 943 0176 01F4      		brne .+2
 944 0178 00C0      		rjmp .L66
 468:quantum/quantum.c ****             eeconfig_init();
 945               		.loc 1 468 9 is_stmt 1 view .LVU175
 468:quantum/quantum.c ****             eeconfig_init();
 946               		.loc 1 468 14 is_stmt 0 view .LVU176
 947 017a 0E94 0000 		call eeconfig_is_enabled
 948               	.LVL68:
 468:quantum/quantum.c ****             eeconfig_init();
 949               		.loc 1 468 12 view .LVU177
 950 017e 8111      		cpse r24,__zero_reg__
 951 0180 00C0      		rjmp .L67
 469:quantum/quantum.c ****         }
 952               		.loc 1 469 13 is_stmt 1 view .LVU178
 953 0182 0E94 0000 		call eeconfig_init
 954               	.LVL69:
 955               	.L67:
 472:quantum/quantum.c ****         switch (keycode)
 956               		.loc 1 472 9 view .LVU179
 472:quantum/quantum.c ****         switch (keycode)
 957               		.loc 1 472 29 is_stmt 0 view .LVU180
 958 0186 0E94 0000 		call eeconfig_read_keymap
 959               	.LVL70:
 960 018a 90E0      		ldi r25,0
 961 018c 9093 0000 		sts keymap_config+1,r25
 962 0190 8093 0000 		sts keymap_config,r24
 473:quantum/quantum.c ****         {
 963               		.loc 1 473 9 is_stmt 1 view .LVU181
 964 0194 FE01      		movw r30,r28
 965 0196 E350      		subi r30,3
 966 0198 FC45      		sbci r31,92
 476:quantum/quantum.c ****             break;
 967               		.loc 1 476 49 is_stmt 0 view .LVU182
 968 019a 8091 0000 		lds r24,keymap_config
 969 019e 8160      		ori r24,lo8(1<<0)
 970 01a0 E231      		cpi r30,18
 971 01a2 F105      		cpc r31,__zero_reg__
 972 01a4 00F4      		brsh .L126
 973 01a6 E050      		subi r30,lo8(-(gs(.L70)))
 974 01a8 F040      		sbci r31,hi8(-(gs(.L70)))
 975 01aa 0C94 0000 		jmp __tablejump2__
 976               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 977               		.p2align	1
 978               	.L70:
 979 0000 0000      		.word gs(.L87)
 980 0002 0000      		.word gs(.L86)
 981 0004 0000      		.word gs(.L85)
 982 0006 0000      		.word gs(.L84)
 983 0008 0000      		.word gs(.L83)
 984 000a 0000      		.word gs(.L82)
 985 000c 0000      		.word gs(.L81)
 986 000e 0000      		.word gs(.L80)
 987 0010 0000      		.word gs(.L79)
 988 0012 0000      		.word gs(.L78)
 989 0014 0000      		.word gs(.L77)
 990 0016 0000      		.word gs(.L76)
 991 0018 0000      		.word gs(.L75)
 992 001a 0000      		.word gs(.L74)
 993 001c 0000      		.word gs(.L73)
 994 001e 0000      		.word gs(.L72)
 995 0020 0000      		.word gs(.L71)
 996 0022 0000      		.word gs(.L69)
 997               		.section	.text.process_record_quantum
 998               	.L87:
 479:quantum/quantum.c ****             break;
 999               		.loc 1 479 13 is_stmt 1 view .LVU183
 479:quantum/quantum.c ****             break;
 1000               		.loc 1 479 47 is_stmt 0 view .LVU184
 1001 01ae 8091 0000 		lds r24,keymap_config
 1002 01b2 8260      		ori r24,lo8(1<<1)
 1003               	.L126:
 538:quantum/quantum.c ****             break;
 1004               		.loc 1 538 32 view .LVU185
 1005 01b4 8093 0000 		sts keymap_config,r24
 539:quantum/quantum.c ****           default:
 1006               		.loc 1 539 13 is_stmt 1 view .LVU186
 543:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 1007               		.loc 1 543 9 view .LVU187
 1008 01b8 8091 0000 		lds r24,keymap_config
 1009 01bc 0E94 0000 		call eeconfig_update_keymap
 1010               	.LVL71:
 544:quantum/quantum.c **** 
 1011               		.loc 1 544 9 view .LVU188
 1012 01c0 0E94 0000 		call clear_keyboard
 1013               	.LVL72:
 546:quantum/quantum.c ****       }
 1014               		.loc 1 546 9 view .LVU189
 546:quantum/quantum.c ****       }
 1015               		.loc 1 546 16 is_stmt 0 view .LVU190
 1016 01c4 00C0      		rjmp .L51
 1017               	.L86:
 482:quantum/quantum.c ****             break;
 1018               		.loc 1 482 13 is_stmt 1 view .LVU191
 482:quantum/quantum.c ****             break;
 1019               		.loc 1 482 42 is_stmt 0 view .LVU192
 1020 01c6 8091 0000 		lds r24,keymap_config
 1021 01ca 8460      		ori r24,lo8(1<<2)
 1022 01cc 00C0      		rjmp .L126
 1023               	.L85:
 485:quantum/quantum.c ****             break;
 1024               		.loc 1 485 13 is_stmt 1 view .LVU193
 485:quantum/quantum.c ****             break;
 1025               		.loc 1 485 42 is_stmt 0 view .LVU194
 1026 01ce 8091 0000 		lds r24,keymap_config
 1027 01d2 8860      		ori r24,lo8(1<<3)
 1028 01d4 00C0      		rjmp .L126
 1029               	.L84:
 488:quantum/quantum.c ****             break;
 1030               		.loc 1 488 13 is_stmt 1 view .LVU195
 488:quantum/quantum.c ****             break;
 1031               		.loc 1 488 34 is_stmt 0 view .LVU196
 1032 01d6 8091 0000 		lds r24,keymap_config
 1033 01da 8061      		ori r24,lo8(1<<4)
 1034 01dc 00C0      		rjmp .L126
 1035               	.L83:
 491:quantum/quantum.c ****             break;
 1036               		.loc 1 491 13 is_stmt 1 view .LVU197
 491:quantum/quantum.c ****             break;
 1037               		.loc 1 491 42 is_stmt 0 view .LVU198
 1038 01de 8091 0000 		lds r24,keymap_config
 1039 01e2 8062      		ori r24,lo8(1<<5)
 1040 01e4 00C0      		rjmp .L126
 1041               	.L82:
 494:quantum/quantum.c ****             break;
 1042               		.loc 1 494 13 is_stmt 1 view .LVU199
 494:quantum/quantum.c ****             break;
 1043               		.loc 1 494 52 is_stmt 0 view .LVU200
 1044 01e6 8091 0000 		lds r24,keymap_config
 1045 01ea 8064      		ori r24,lo8(1<<6)
 1046 01ec 00C0      		rjmp .L126
 1047               	.L81:
 497:quantum/quantum.c ****             break;
 1048               		.loc 1 497 13 is_stmt 1 view .LVU201
 497:quantum/quantum.c ****             break;
 1049               		.loc 1 497 32 is_stmt 0 view .LVU202
 1050 01ee 8091 0000 		lds r24,keymap_config
 1051 01f2 8068      		ori r24,lo8(1<<7)
 1052 01f4 00C0      		rjmp .L126
 1053               	.L80:
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 1054               		.loc 1 500 13 is_stmt 1 view .LVU203
 501:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 1055               		.loc 1 501 13 view .LVU204
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 1056               		.loc 1 500 42 is_stmt 0 view .LVU205
 1057 01f6 8091 0000 		lds r24,keymap_config
 1058 01fa 8C60      		ori r24,lo8(12)
 1059 01fc 00C0      		rjmp .L126
 1060               	.L79:
 507:quantum/quantum.c ****             break;
 1061               		.loc 1 507 13 is_stmt 1 view .LVU206
 507:quantum/quantum.c ****             break;
 1062               		.loc 1 507 49 is_stmt 0 view .LVU207
 1063 01fe 8091 0000 		lds r24,keymap_config
 1064 0202 8E7F      		andi r24,lo8(~(1<<0))
 1065 0204 00C0      		rjmp .L126
 1066               	.L78:
 510:quantum/quantum.c ****             break;
 1067               		.loc 1 510 13 is_stmt 1 view .LVU208
 510:quantum/quantum.c ****             break;
 1068               		.loc 1 510 47 is_stmt 0 view .LVU209
 1069 0206 8091 0000 		lds r24,keymap_config
 1070 020a 8D7F      		andi r24,lo8(~(1<<1))
 1071 020c 00C0      		rjmp .L126
 1072               	.L77:
 513:quantum/quantum.c ****             break;
 1073               		.loc 1 513 13 is_stmt 1 view .LVU210
 513:quantum/quantum.c ****             break;
 1074               		.loc 1 513 42 is_stmt 0 view .LVU211
 1075 020e 8091 0000 		lds r24,keymap_config
 1076 0212 8B7F      		andi r24,lo8(~(1<<2))
 1077 0214 00C0      		rjmp .L126
 1078               	.L76:
 516:quantum/quantum.c ****             break;
 1079               		.loc 1 516 13 is_stmt 1 view .LVU212
 516:quantum/quantum.c ****             break;
 1080               		.loc 1 516 42 is_stmt 0 view .LVU213
 1081 0216 8091 0000 		lds r24,keymap_config
 1082 021a 877F      		andi r24,lo8(~(1<<3))
 1083 021c 00C0      		rjmp .L126
 1084               	.L75:
 519:quantum/quantum.c ****             break;
 1085               		.loc 1 519 13 is_stmt 1 view .LVU214
 519:quantum/quantum.c ****             break;
 1086               		.loc 1 519 34 is_stmt 0 view .LVU215
 1087 021e 8091 0000 		lds r24,keymap_config
 1088 0222 8F7E      		andi r24,lo8(~(1<<4))
 1089 0224 00C0      		rjmp .L126
 1090               	.L74:
 522:quantum/quantum.c ****             break;
 1091               		.loc 1 522 13 is_stmt 1 view .LVU216
 522:quantum/quantum.c ****             break;
 1092               		.loc 1 522 42 is_stmt 0 view .LVU217
 1093 0226 8091 0000 		lds r24,keymap_config
 1094 022a 8F7D      		andi r24,lo8(~(1<<5))
 1095 022c 00C0      		rjmp .L126
 1096               	.L73:
 525:quantum/quantum.c ****             break;
 1097               		.loc 1 525 13 is_stmt 1 view .LVU218
 525:quantum/quantum.c ****             break;
 1098               		.loc 1 525 52 is_stmt 0 view .LVU219
 1099 022e 8091 0000 		lds r24,keymap_config
 1100 0232 8F7B      		andi r24,lo8(~(1<<6))
 1101 0234 00C0      		rjmp .L126
 1102               	.L72:
 528:quantum/quantum.c ****             break;
 1103               		.loc 1 528 13 is_stmt 1 view .LVU220
 528:quantum/quantum.c ****             break;
 1104               		.loc 1 528 32 is_stmt 0 view .LVU221
 1105 0236 8091 0000 		lds r24,keymap_config
 1106 023a 8F77      		andi r24,lo8(~(1<<7))
 1107 023c 00C0      		rjmp .L126
 1108               	.L71:
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1109               		.loc 1 531 13 is_stmt 1 view .LVU222
 532:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 1110               		.loc 1 532 13 view .LVU223
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1111               		.loc 1 531 42 is_stmt 0 view .LVU224
 1112 023e 8091 0000 		lds r24,keymap_config
 1113 0242 837F      		andi r24,lo8(-13)
 1114 0244 00C0      		rjmp .L126
 1115               	.L69:
 538:quantum/quantum.c ****             break;
 1116               		.loc 1 538 13 is_stmt 1 view .LVU225
 538:quantum/quantum.c ****             break;
 1117               		.loc 1 538 48 is_stmt 0 view .LVU226
 1118 0246 9091 0000 		lds r25,keymap_config
 538:quantum/quantum.c ****             break;
 1119               		.loc 1 538 32 view .LVU227
 1120 024a 892F      		mov r24,r25
 1121 024c 97FB      		bst r25,7
 1122 024e 87F9      		bld r24,7
 1123 0250 8058      		subi r24,0x80
 1124 0252 00C0      		rjmp .L126
 1125               	.L53:
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1126               		.loc 1 550 7 is_stmt 1 view .LVU228
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1127               		.loc 1 550 24 is_stmt 0 view .LVU229
 1128 0254 F801      		movw r30,r16
 1129 0256 8281      		ldd r24,Z+2
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1130               		.loc 1 550 10 view .LVU230
 1131 0258 8823      		tst r24
 1132 025a 01F0      		breq .L89
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 1133               		.loc 1 551 9 is_stmt 1 view .LVU231
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 1134               		.loc 1 551 30 is_stmt 0 view .LVU232
 1135 025c 1092 0000 		sts shift_interrupted,__zero_reg__
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1136               		.loc 1 552 9 is_stmt 1 view .LVU233
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1137               		.loc 1 552 24 is_stmt 0 view .LVU234
 1138 0260 0E94 0000 		call timer_read
 1139               	.LVL73:
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1140               		.loc 1 552 22 view .LVU235
 1141 0264 9093 0000 		sts scs_timer+1,r25
 1142 0268 8093 0000 		sts scs_timer,r24
 553:quantum/quantum.c ****       }
 1143               		.loc 1 553 9 is_stmt 1 view .LVU236
 1144 026c 82E0      		ldi r24,lo8(2)
 1145               	.L128:
 575:quantum/quantum.c ****       }
 1146               		.loc 1 575 9 is_stmt 0 view .LVU237
 1147 026e 0E94 0000 		call register_mods
 1148               	.LVL74:
 1149 0272 00C0      		rjmp .L51
 1150               	.L89:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1151               		.loc 1 562 9 is_stmt 1 view .LVU238
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1152               		.loc 1 562 12 is_stmt 0 view .LVU239
 1153 0274 8091 0000 		lds r24,shift_interrupted
 1154 0278 8111      		cpse r24,__zero_reg__
 1155 027a 00C0      		rjmp .L91
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1156               		.loc 1 562 38 discriminator 1 view .LVU240
 1157 027c 8091 0000 		lds r24,scs_timer
 1158 0280 9091 0000 		lds r25,scs_timer+1
 1159 0284 0E94 0000 		call timer_elapsed
 1160               	.LVL75:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1161               		.loc 1 562 35 discriminator 1 view .LVU241
 1162 0288 8639      		cpi r24,-106
 1163 028a 9105      		cpc r25,__zero_reg__
 1164 028c 00F4      		brsh .L91
 563:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 1165               		.loc 1 563 11 is_stmt 1 view .LVU242
 1166 028e 86E2      		ldi r24,lo8(38)
 1167 0290 0E94 0000 		call register_code
 1168               	.LVL76:
 564:quantum/quantum.c ****         }
 1169               		.loc 1 564 11 view .LVU243
 1170 0294 86E2      		ldi r24,lo8(38)
 1171 0296 0E94 0000 		call unregister_code
 1172               	.LVL77:
 1173               	.L91:
 566:quantum/quantum.c ****       }
 1174               		.loc 1 566 9 view .LVU244
 1175 029a 82E0      		ldi r24,lo8(2)
 1176               	.L129:
 588:quantum/quantum.c ****       }
 1177               		.loc 1 588 9 is_stmt 0 view .LVU245
 1178 029c 0E94 0000 		call unregister_mods
 1179               	.LVL78:
 1180 02a0 00C0      		rjmp .L51
 1181               	.L63:
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 1182               		.loc 1 572 7 is_stmt 1 view .LVU246
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 1183               		.loc 1 572 10 is_stmt 0 view .LVU247
 1184 02a2 F801      		movw r30,r16
 1185 02a4 8281      		ldd r24,Z+2
 1186 02a6 8823      		tst r24
 1187 02a8 01F0      		breq .L93
 1188               	.L97:
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 1189               		.loc 1 573 9 is_stmt 1 view .LVU248
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 1190               		.loc 1 573 30 is_stmt 0 view .LVU249
 1191 02aa 1092 0000 		sts shift_interrupted+1,__zero_reg__
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 1192               		.loc 1 574 9 is_stmt 1 view .LVU250
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 1193               		.loc 1 574 24 is_stmt 0 view .LVU251
 1194 02ae 0E94 0000 		call timer_read
 1195               	.LVL79:
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 1196               		.loc 1 574 22 view .LVU252
 1197 02b2 9093 0000 		sts scs_timer+2+1,r25
 1198 02b6 8093 0000 		sts scs_timer+2,r24
 575:quantum/quantum.c ****       }
 1199               		.loc 1 575 9 is_stmt 1 view .LVU253
 1200 02ba 80E2      		ldi r24,lo8(32)
 1201 02bc 00C0      		rjmp .L128
 1202               	.L93:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1203               		.loc 1 584 9 view .LVU254
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1204               		.loc 1 584 12 is_stmt 0 view .LVU255
 1205 02be 8091 0000 		lds r24,shift_interrupted+1
 1206 02c2 8111      		cpse r24,__zero_reg__
 1207 02c4 00C0      		rjmp .L95
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1208               		.loc 1 584 38 discriminator 1 view .LVU256
 1209 02c6 8091 0000 		lds r24,scs_timer+2
 1210 02ca 9091 0000 		lds r25,scs_timer+2+1
 1211 02ce 0E94 0000 		call timer_elapsed
 1212               	.LVL80:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1213               		.loc 1 584 35 discriminator 1 view .LVU257
 1214 02d2 8639      		cpi r24,-106
 1215 02d4 9105      		cpc r25,__zero_reg__
 1216 02d6 00F4      		brsh .L95
 585:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 1217               		.loc 1 585 11 is_stmt 1 view .LVU258
 1218 02d8 87E2      		ldi r24,lo8(39)
 1219 02da 0E94 0000 		call register_code
 1220               	.LVL81:
 586:quantum/quantum.c ****         }
 1221               		.loc 1 586 11 view .LVU259
 1222 02de 87E2      		ldi r24,lo8(39)
 1223 02e0 0E94 0000 		call unregister_code
 1224               	.LVL82:
 1225               	.L95:
 588:quantum/quantum.c ****       }
 1226               		.loc 1 588 9 view .LVU260
 1227 02e4 80E2      		ldi r24,lo8(32)
 1228 02e6 00C0      		rjmp .L129
 1229               	.LVL83:
 1230               	.L103:
 1231               	.LBB26:
 646:quantum/quantum.c ****       }
 1232               		.loc 1 646 9 is_stmt 0 view .LVU261
 1233 02e8 85E3      		ldi r24,lo8(53)
 1234               	.LVL84:
 646:quantum/quantum.c ****       }
 1235               		.loc 1 646 9 view .LVU262
 1236 02ea 00C0      		rjmp .L100
 1237               	.LVL85:
 1238               	.L98:
 649:quantum/quantum.c ****       }
 1239               		.loc 1 649 9 is_stmt 1 view .LVU263
 1240 02ec 8091 0000 		lds r24,grave_esc_was_shifted
 1241               	.LVL86:
 649:quantum/quantum.c ****       }
 1242               		.loc 1 649 9 is_stmt 0 view .LVU264
 1243 02f0 8111      		cpse r24,__zero_reg__
 1244 02f2 00C0      		rjmp .L104
 1245 02f4 89E2      		ldi r24,lo8(41)
 1246               	.L102:
 649:quantum/quantum.c ****       }
 1247               		.loc 1 649 9 discriminator 4 view .LVU265
 1248 02f6 0E94 0000 		call del_key
 1249               	.LVL87:
 1250 02fa 00C0      		rjmp .L101
 1251               	.L104:
 649:quantum/quantum.c ****       }
 1252               		.loc 1 649 9 view .LVU266
 1253 02fc 85E3      		ldi r24,lo8(53)
 1254 02fe 00C0      		rjmp .L102
 1255               	.LBE26:
 1256               		.cfi_endproc
 1257               	.LFE39:
 1259               		.section	.text.send_char,"ax",@progbits
 1260               	.global	send_char
 1262               	send_char:
 1263               	.LVL88:
 1264               	.LFB44:
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 676:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 677:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 678:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 679:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 680:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 681:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 682:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 683:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 684:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 685:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 686:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 687:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 688:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 689:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 690:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 691:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 692:quantum/quantum.c **** };
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** __attribute__ ((weak))
 695:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 696:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 697:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 698:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 699:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 700:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 701:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 702:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 703:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 704:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 705:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 706:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 707:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 708:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 709:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 710:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 711:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 712:quantum/quantum.c **** };
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** void send_string(const char *str) {
 715:quantum/quantum.c ****   send_string_with_delay(str, 0);
 716:quantum/quantum.c **** }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** void send_string_P(const char *str) {
 719:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 720:quantum/quantum.c **** }
 721:quantum/quantum.c **** 
 722:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 723:quantum/quantum.c ****     while (1) {
 724:quantum/quantum.c ****         char ascii_code = *str;
 725:quantum/quantum.c ****         if (!ascii_code) break;
 726:quantum/quantum.c ****         if (ascii_code == 1) {
 727:quantum/quantum.c ****           // tap
 728:quantum/quantum.c ****           uint8_t keycode = *(++str);
 729:quantum/quantum.c ****           register_code(keycode);
 730:quantum/quantum.c ****           unregister_code(keycode);
 731:quantum/quantum.c ****         } else if (ascii_code == 2) {
 732:quantum/quantum.c ****           // down
 733:quantum/quantum.c ****           uint8_t keycode = *(++str);
 734:quantum/quantum.c ****           register_code(keycode);
 735:quantum/quantum.c ****         } else if (ascii_code == 3) {
 736:quantum/quantum.c ****           // up
 737:quantum/quantum.c ****           uint8_t keycode = *(++str);
 738:quantum/quantum.c ****           unregister_code(keycode);
 739:quantum/quantum.c ****         } else {
 740:quantum/quantum.c ****           send_char(ascii_code);
 741:quantum/quantum.c ****         }
 742:quantum/quantum.c ****         ++str;
 743:quantum/quantum.c ****         // interval
 744:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 745:quantum/quantum.c ****     }
 746:quantum/quantum.c **** }
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 749:quantum/quantum.c ****     while (1) {
 750:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 751:quantum/quantum.c ****         if (!ascii_code) break;
 752:quantum/quantum.c ****         if (ascii_code == 1) {
 753:quantum/quantum.c ****           // tap
 754:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 755:quantum/quantum.c ****           register_code(keycode);
 756:quantum/quantum.c ****           unregister_code(keycode);
 757:quantum/quantum.c ****         } else if (ascii_code == 2) {
 758:quantum/quantum.c ****           // down
 759:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 760:quantum/quantum.c ****           register_code(keycode);
 761:quantum/quantum.c ****         } else if (ascii_code == 3) {
 762:quantum/quantum.c ****           // up
 763:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 764:quantum/quantum.c ****           unregister_code(keycode);
 765:quantum/quantum.c ****         } else {
 766:quantum/quantum.c ****           send_char(ascii_code);
 767:quantum/quantum.c ****         }
 768:quantum/quantum.c ****         ++str;
 769:quantum/quantum.c ****         // interval
 770:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 771:quantum/quantum.c ****     }
 772:quantum/quantum.c **** }
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_char(char ascii_code) {
 1265               		.loc 1 774 33 is_stmt 1 view -0
 1266               		.cfi_startproc
 1267               		.loc 1 774 33 is_stmt 0 view .LVU268
 1268 0000 CF93      		push r28
 1269               	.LCFI12:
 1270               		.cfi_def_cfa_offset 3
 1271               		.cfi_offset 28, -2
 1272               	/* prologue: function */
 1273               	/* frame size = 0 */
 1274               	/* stack size = 1 */
 1275               	.L__stack_usage = 1
 775:quantum/quantum.c ****   uint8_t keycode;
 1276               		.loc 1 775 3 is_stmt 1 view .LVU269
 776:quantum/quantum.c ****   keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 1277               		.loc 1 776 3 view .LVU270
 1278               	.LBB27:
 1279               		.loc 1 776 13 view .LVU271
 1280 0002 90E0      		ldi r25,0
 1281               	.LVL89:
 1282               		.loc 1 776 13 view .LVU272
 1283               		.loc 1 776 13 view .LVU273
 1284 0004 FC01      		movw r30,r24
 1285 0006 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 1286 0008 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 1287               	.LVL90:
 1288               		.loc 1 776 13 is_stmt 0 view .LVU274
 1289               	/* #APP */
 1290               	 ;  776 "quantum/quantum.c" 1
 1291 000a C491      		lpm r28, Z
 1292               		
 1293               	 ;  0 "" 2
 1294               	.LVL91:
 1295               		.loc 1 776 13 is_stmt 1 view .LVU275
 1296               		.loc 1 776 13 is_stmt 0 view .LVU276
 1297               	/* #NOAPP */
 1298               	.LBE27:
 777:quantum/quantum.c ****   if (pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code])) {
 1299               		.loc 1 777 3 is_stmt 1 view .LVU277
 1300               	.LBB28:
 1301               		.loc 1 777 7 view .LVU278
 1302               		.loc 1 777 7 view .LVU279
 1303               		.loc 1 777 7 view .LVU280
 1304 000c 8050      		subi r24,lo8(-(ascii_to_shift_lut))
 1305 000e 9040      		sbci r25,hi8(-(ascii_to_shift_lut))
 1306               	.LVL92:
 1307               		.loc 1 777 7 is_stmt 0 view .LVU281
 1308 0010 FC01      		movw r30,r24
 1309               	.LVL93:
 1310               		.loc 1 777 7 view .LVU282
 1311               	/* #APP */
 1312               	 ;  777 "quantum/quantum.c" 1
 1313 0012 8491      		lpm r24, Z
 1314               		
 1315               	 ;  0 "" 2
 1316               	.LVL94:
 1317               		.loc 1 777 7 is_stmt 1 view .LVU283
 1318               	/* #NOAPP */
 1319               	.LBE28:
 1320               		.loc 1 777 6 is_stmt 0 view .LVU284
 1321 0014 8823      		tst r24
 1322 0016 01F0      		breq .L131
 778:quantum/quantum.c ****       register_code(KC_LSFT);
 1323               		.loc 1 778 7 is_stmt 1 view .LVU285
 1324 0018 81EE      		ldi r24,lo8(-31)
 1325               	.LVL95:
 1326               		.loc 1 778 7 is_stmt 0 view .LVU286
 1327 001a 0E94 0000 		call register_code
 1328               	.LVL96:
 779:quantum/quantum.c ****       register_code(keycode);
 1329               		.loc 1 779 7 is_stmt 1 view .LVU287
 1330 001e 8C2F      		mov r24,r28
 1331 0020 0E94 0000 		call register_code
 1332               	.LVL97:
 780:quantum/quantum.c ****       unregister_code(keycode);
 1333               		.loc 1 780 7 view .LVU288
 1334 0024 8C2F      		mov r24,r28
 1335 0026 0E94 0000 		call unregister_code
 1336               	.LVL98:
 781:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1337               		.loc 1 781 7 view .LVU289
 1338 002a 81EE      		ldi r24,lo8(-31)
 1339               	.L132:
 1340               	/* epilogue start */
 782:quantum/quantum.c ****   } else {
 783:quantum/quantum.c ****       register_code(keycode);
 784:quantum/quantum.c ****       unregister_code(keycode);
 785:quantum/quantum.c ****   }
 786:quantum/quantum.c **** }
 1341               		.loc 1 786 1 is_stmt 0 view .LVU290
 1342 002c CF91      		pop r28
 1343               	.LVL99:
 784:quantum/quantum.c ****   }
 1344               		.loc 1 784 7 view .LVU291
 1345 002e 0C94 0000 		jmp unregister_code
 1346               	.LVL100:
 1347               	.L131:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1348               		.loc 1 783 7 is_stmt 1 view .LVU292
 1349 0032 8C2F      		mov r24,r28
 1350               	.LVL101:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1351               		.loc 1 783 7 is_stmt 0 view .LVU293
 1352 0034 0E94 0000 		call register_code
 1353               	.LVL102:
 784:quantum/quantum.c ****   }
 1354               		.loc 1 784 7 is_stmt 1 view .LVU294
 1355 0038 8C2F      		mov r24,r28
 1356 003a 00C0      		rjmp .L132
 1357               		.cfi_endproc
 1358               	.LFE44:
 1360               		.section	.text.send_string_with_delay,"ax",@progbits
 1361               	.global	send_string_with_delay
 1363               	send_string_with_delay:
 1364               	.LVL103:
 1365               	.LFB42:
 722:quantum/quantum.c ****     while (1) {
 1366               		.loc 1 722 64 view -0
 1367               		.cfi_startproc
 722:quantum/quantum.c ****     while (1) {
 1368               		.loc 1 722 64 is_stmt 0 view .LVU296
 1369 0000 EF92      		push r14
 1370               	.LCFI13:
 1371               		.cfi_def_cfa_offset 3
 1372               		.cfi_offset 14, -2
 1373 0002 FF92      		push r15
 1374               	.LCFI14:
 1375               		.cfi_def_cfa_offset 4
 1376               		.cfi_offset 15, -3
 1377 0004 1F93      		push r17
 1378               	.LCFI15:
 1379               		.cfi_def_cfa_offset 5
 1380               		.cfi_offset 17, -4
 1381 0006 CF93      		push r28
 1382               	.LCFI16:
 1383               		.cfi_def_cfa_offset 6
 1384               		.cfi_offset 28, -5
 1385 0008 DF93      		push r29
 1386               	.LCFI17:
 1387               		.cfi_def_cfa_offset 7
 1388               		.cfi_offset 29, -6
 1389               	/* prologue: function */
 1390               	/* frame size = 0 */
 1391               	/* stack size = 5 */
 1392               	.L__stack_usage = 5
 1393 000a EC01      		movw r28,r24
 1394 000c 162F      		mov r17,r22
 1395               	.LVL104:
 1396               	.L141:
 723:quantum/quantum.c ****         char ascii_code = *str;
 1397               		.loc 1 723 5 is_stmt 1 view .LVU297
 1398               	.LBB29:
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1399               		.loc 1 724 9 view .LVU298
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1400               		.loc 1 724 14 is_stmt 0 view .LVU299
 1401 000e 8881      		ld r24,Y
 1402               	.LVL105:
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1403               		.loc 1 725 9 is_stmt 1 view .LVU300
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1404               		.loc 1 725 12 is_stmt 0 view .LVU301
 1405 0010 8823      		tst r24
 1406 0012 01F0      		breq .L133
 726:quantum/quantum.c ****           // tap
 1407               		.loc 1 726 9 is_stmt 1 view .LVU302
 1408 0014 7E01      		movw r14,r28
 1409 0016 9FEF      		ldi r25,-1
 1410 0018 E91A      		sub r14,r25
 1411 001a F90A      		sbc r15,r25
 726:quantum/quantum.c ****           // tap
 1412               		.loc 1 726 12 is_stmt 0 view .LVU303
 1413 001c 8130      		cpi r24,lo8(1)
 1414 001e 01F4      		brne .L135
 1415               	.LBB30:
 728:quantum/quantum.c ****           register_code(keycode);
 1416               		.loc 1 728 11 is_stmt 1 view .LVU304
 1417               	.LVL106:
 728:quantum/quantum.c ****           register_code(keycode);
 1418               		.loc 1 728 19 is_stmt 0 view .LVU305
 1419 0020 C981      		ldd r28,Y+1
 1420               	.LVL107:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1421               		.loc 1 729 11 is_stmt 1 view .LVU306
 1422 0022 8C2F      		mov r24,r28
 1423               	.LVL108:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1424               		.loc 1 729 11 is_stmt 0 view .LVU307
 1425 0024 0E94 0000 		call register_code
 1426               	.LVL109:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1427               		.loc 1 730 11 is_stmt 1 view .LVU308
 1428 0028 8C2F      		mov r24,r28
 1429               	.LVL110:
 1430               	.L142:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1431               		.loc 1 730 11 is_stmt 0 view .LVU309
 1432               	.LBE30:
 1433               	.LBB31:
 738:quantum/quantum.c ****         } else {
 1434               		.loc 1 738 11 view .LVU310
 1435 002a 0E94 0000 		call unregister_code
 1436               	.LVL111:
 1437               	.LBE31:
 1438 002e 00C0      		rjmp .L136
 1439               	.LVL112:
 1440               	.L135:
 731:quantum/quantum.c ****           // down
 1441               		.loc 1 731 16 is_stmt 1 view .LVU311
 731:quantum/quantum.c ****           // down
 1442               		.loc 1 731 19 is_stmt 0 view .LVU312
 1443 0030 8230      		cpi r24,lo8(2)
 1444 0032 01F4      		brne .L137
 1445               	.LBB32:
 733:quantum/quantum.c ****           register_code(keycode);
 1446               		.loc 1 733 11 is_stmt 1 view .LVU313
 1447               	.LVL113:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1448               		.loc 1 734 11 view .LVU314
 1449 0034 8981      		ldd r24,Y+1
 1450               	.LVL114:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1451               		.loc 1 734 11 is_stmt 0 view .LVU315
 1452 0036 0E94 0000 		call register_code
 1453               	.LVL115:
 1454               	.L136:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1455               		.loc 1 734 11 view .LVU316
 1456               	.LBE32:
 742:quantum/quantum.c ****         // interval
 1457               		.loc 1 742 9 is_stmt 1 view .LVU317
 1458 003a E701      		movw r28,r14
 1459 003c 2196      		adiw r28,1
 1460               	.LVL116:
 1461               	.LBB33:
 744:quantum/quantum.c ****     }
 1462               		.loc 1 744 11 view .LVU318
 744:quantum/quantum.c ****     }
 1463               		.loc 1 744 34 view .LVU319
 744:quantum/quantum.c ****     }
 1464               		.loc 1 744 19 is_stmt 0 view .LVU320
 1465 003e 812F      		mov r24,r17
 1466               	.LVL117:
 1467               	.L139:
 744:quantum/quantum.c ****     }
 1468               		.loc 1 744 40 is_stmt 1 discriminator 1 view .LVU321
 744:quantum/quantum.c ****     }
 1469               		.loc 1 744 43 is_stmt 0 discriminator 1 view .LVU322
 1470               	.LVL118:
 1471 0040 8150      		subi r24,1
 1472 0042 00F0      		brcs .L141
 744:quantum/quantum.c ****     }
 1473               		.loc 1 744 47 is_stmt 1 view .LVU323
 1474               	.LBB34:
 1475               	.LBI34:
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 1476               		.loc 3 166 1 view .LVU324
 1477               	.LBB35:
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1478               		.loc 3 168 2 view .LVU325
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1479               		.loc 3 172 2 view .LVU326
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1480               		.loc 3 173 2 view .LVU327
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 1481               		.loc 3 174 2 view .LVU328
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 1482               		.loc 3 184 3 view .LVU329
 1483               		.loc 3 187 2 view .LVU330
 1484 0044 EFE9      		ldi r30,lo8(3999)
 1485 0046 FFE0      		ldi r31,hi8(3999)
 1486 0048 3197      	1:	sbiw r30,1
 1487 004a 01F4      		brne 1b
 1488 004c 00C0      		rjmp .
 1489 004e 0000      		nop
 188:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** }
 1490               		.loc 3 210 1 is_stmt 0 view .LVU331
 1491 0050 00C0      		rjmp .L139
 1492               	.LVL119:
 1493               	.L137:
 1494               		.loc 3 210 1 view .LVU332
 1495               	.LBE35:
 1496               	.LBE34:
 1497               	.LBE33:
 735:quantum/quantum.c ****           // up
 1498               		.loc 1 735 16 is_stmt 1 view .LVU333
 735:quantum/quantum.c ****           // up
 1499               		.loc 1 735 19 is_stmt 0 view .LVU334
 1500 0052 8330      		cpi r24,lo8(3)
 1501 0054 01F4      		brne .L138
 1502               	.LBB36:
 737:quantum/quantum.c ****           unregister_code(keycode);
 1503               		.loc 1 737 11 is_stmt 1 view .LVU335
 1504               	.LVL120:
 738:quantum/quantum.c ****         } else {
 1505               		.loc 1 738 11 view .LVU336
 1506 0056 8981      		ldd r24,Y+1
 1507               	.LVL121:
 738:quantum/quantum.c ****         } else {
 1508               		.loc 1 738 11 is_stmt 0 view .LVU337
 1509 0058 00C0      		rjmp .L142
 1510               	.LVL122:
 1511               	.L138:
 738:quantum/quantum.c ****         } else {
 1512               		.loc 1 738 11 view .LVU338
 1513               	.LBE36:
 740:quantum/quantum.c ****         }
 1514               		.loc 1 740 11 is_stmt 1 view .LVU339
 1515 005a 0E94 0000 		call send_char
 1516               	.LVL123:
 740:quantum/quantum.c ****         }
 1517               		.loc 1 740 11 is_stmt 0 view .LVU340
 1518 005e 7E01      		movw r14,r28
 1519 0060 00C0      		rjmp .L136
 1520               	.LVL124:
 1521               	.L133:
 1522               	/* epilogue start */
 740:quantum/quantum.c ****         }
 1523               		.loc 1 740 11 view .LVU341
 1524               	.LBE29:
 746:quantum/quantum.c **** 
 1525               		.loc 1 746 1 view .LVU342
 1526 0062 DF91      		pop r29
 1527 0064 CF91      		pop r28
 1528               	.LVL125:
 746:quantum/quantum.c **** 
 1529               		.loc 1 746 1 view .LVU343
 1530 0066 1F91      		pop r17
 1531               	.LVL126:
 746:quantum/quantum.c **** 
 1532               		.loc 1 746 1 view .LVU344
 1533 0068 FF90      		pop r15
 1534 006a EF90      		pop r14
 1535 006c 0895      		ret
 1536               		.cfi_endproc
 1537               	.LFE42:
 1539               		.section	.text.send_string,"ax",@progbits
 1540               	.global	send_string
 1542               	send_string:
 1543               	.LVL127:
 1544               	.LFB40:
 714:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1545               		.loc 1 714 35 is_stmt 1 view -0
 1546               		.cfi_startproc
 1547               	/* prologue: function */
 1548               	/* frame size = 0 */
 1549               	/* stack size = 0 */
 1550               	.L__stack_usage = 0
 715:quantum/quantum.c **** }
 1551               		.loc 1 715 3 view .LVU346
 1552 0000 60E0      		ldi r22,0
 1553 0002 0C94 0000 		jmp send_string_with_delay
 1554               	.LVL128:
 715:quantum/quantum.c **** }
 1555               		.loc 1 715 3 is_stmt 0 view .LVU347
 1556               		.cfi_endproc
 1557               	.LFE40:
 1559               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1560               	.global	send_string_with_delay_P
 1562               	send_string_with_delay_P:
 1563               	.LVL129:
 1564               	.LFB43:
 748:quantum/quantum.c ****     while (1) {
 1565               		.loc 1 748 66 is_stmt 1 view -0
 1566               		.cfi_startproc
 748:quantum/quantum.c ****     while (1) {
 1567               		.loc 1 748 66 is_stmt 0 view .LVU349
 1568 0000 FF92      		push r15
 1569               	.LCFI18:
 1570               		.cfi_def_cfa_offset 3
 1571               		.cfi_offset 15, -2
 1572 0002 0F93      		push r16
 1573               	.LCFI19:
 1574               		.cfi_def_cfa_offset 4
 1575               		.cfi_offset 16, -3
 1576 0004 1F93      		push r17
 1577               	.LCFI20:
 1578               		.cfi_def_cfa_offset 5
 1579               		.cfi_offset 17, -4
 1580 0006 CF93      		push r28
 1581               	.LCFI21:
 1582               		.cfi_def_cfa_offset 6
 1583               		.cfi_offset 28, -5
 1584 0008 DF93      		push r29
 1585               	.LCFI22:
 1586               		.cfi_def_cfa_offset 7
 1587               		.cfi_offset 29, -6
 1588               	/* prologue: function */
 1589               	/* frame size = 0 */
 1590               	/* stack size = 5 */
 1591               	.L__stack_usage = 5
 1592 000a EC01      		movw r28,r24
 1593 000c F62E      		mov r15,r22
 1594               	.LVL130:
 1595               	.L152:
 749:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1596               		.loc 1 749 5 is_stmt 1 view .LVU350
 1597               	.LBB37:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1598               		.loc 1 750 9 view .LVU351
 1599               	.LBB38:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1600               		.loc 1 750 27 view .LVU352
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1601               		.loc 1 750 27 view .LVU353
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1602               		.loc 1 750 27 view .LVU354
 1603 000e FE01      		movw r30,r28
 1604               	/* #APP */
 1605               	 ;  750 "quantum/quantum.c" 1
 1606 0010 8491      		lpm r24, Z
 1607               		
 1608               	 ;  0 "" 2
 1609               	.LVL131:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1610               		.loc 1 750 27 view .LVU355
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1611               		.loc 1 750 27 is_stmt 0 view .LVU356
 1612               	/* #NOAPP */
 1613               	.LBE38:
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1614               		.loc 1 751 9 is_stmt 1 view .LVU357
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1615               		.loc 1 751 12 is_stmt 0 view .LVU358
 1616 0012 8823      		tst r24
 1617 0014 01F0      		breq .L144
 752:quantum/quantum.c ****           // tap
 1618               		.loc 1 752 9 is_stmt 1 view .LVU359
 1619 0016 8E01      		movw r16,r28
 1620 0018 0F5F      		subi r16,-1
 1621 001a 1F4F      		sbci r17,-1
 752:quantum/quantum.c ****           // tap
 1622               		.loc 1 752 12 is_stmt 0 view .LVU360
 1623 001c 8130      		cpi r24,lo8(1)
 1624 001e 01F4      		brne .L146
 1625               	.LBB39:
 754:quantum/quantum.c ****           register_code(keycode);
 1626               		.loc 1 754 11 is_stmt 1 view .LVU361
 1627               	.LBB40:
 754:quantum/quantum.c ****           register_code(keycode);
 1628               		.loc 1 754 29 view .LVU362
 1629               	.LVL132:
 754:quantum/quantum.c ****           register_code(keycode);
 1630               		.loc 1 754 29 view .LVU363
 754:quantum/quantum.c ****           register_code(keycode);
 1631               		.loc 1 754 29 view .LVU364
 1632 0020 F801      		movw r30,r16
 1633               	/* #APP */
 1634               	 ;  754 "quantum/quantum.c" 1
 1635 0022 C491      		lpm r28, Z
 1636               		
 1637               	 ;  0 "" 2
 1638               	.LVL133:
 754:quantum/quantum.c ****           register_code(keycode);
 1639               		.loc 1 754 29 view .LVU365
 754:quantum/quantum.c ****           register_code(keycode);
 1640               		.loc 1 754 29 is_stmt 0 view .LVU366
 1641               	/* #NOAPP */
 1642               	.LBE40:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1643               		.loc 1 755 11 is_stmt 1 view .LVU367
 1644 0024 8C2F      		mov r24,r28
 1645               	.LVL134:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1646               		.loc 1 755 11 is_stmt 0 view .LVU368
 1647 0026 0E94 0000 		call register_code
 1648               	.LVL135:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1649               		.loc 1 756 11 is_stmt 1 view .LVU369
 1650 002a 8C2F      		mov r24,r28
 1651               	.LVL136:
 1652               	.L153:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1653               		.loc 1 756 11 is_stmt 0 view .LVU370
 1654               	.LBE39:
 1655               	.LBB41:
 1656               	.LBB42:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1657               		.loc 1 763 29 is_stmt 1 view .LVU371
 763:quantum/quantum.c ****           unregister_code(keycode);
 1658               		.loc 1 763 29 is_stmt 0 view .LVU372
 1659               	.LBE42:
 764:quantum/quantum.c ****         } else {
 1660               		.loc 1 764 11 is_stmt 1 view .LVU373
 1661 002c 0E94 0000 		call unregister_code
 1662               	.LVL137:
 764:quantum/quantum.c ****         } else {
 1663               		.loc 1 764 11 is_stmt 0 view .LVU374
 1664               	.LBE41:
 1665 0030 00C0      		rjmp .L147
 1666               	.LVL138:
 1667               	.L146:
 757:quantum/quantum.c ****           // down
 1668               		.loc 1 757 16 is_stmt 1 view .LVU375
 757:quantum/quantum.c ****           // down
 1669               		.loc 1 757 19 is_stmt 0 view .LVU376
 1670 0032 8230      		cpi r24,lo8(2)
 1671 0034 01F4      		brne .L148
 1672               	.LBB44:
 759:quantum/quantum.c ****           register_code(keycode);
 1673               		.loc 1 759 11 is_stmt 1 view .LVU377
 1674               	.LBB45:
 759:quantum/quantum.c ****           register_code(keycode);
 1675               		.loc 1 759 29 view .LVU378
 1676               	.LVL139:
 759:quantum/quantum.c ****           register_code(keycode);
 1677               		.loc 1 759 29 view .LVU379
 759:quantum/quantum.c ****           register_code(keycode);
 1678               		.loc 1 759 29 view .LVU380
 1679 0036 F801      		movw r30,r16
 1680               	/* #APP */
 1681               	 ;  759 "quantum/quantum.c" 1
 1682 0038 8491      		lpm r24, Z
 1683               		
 1684               	 ;  0 "" 2
 1685               	.LVL140:
 759:quantum/quantum.c ****           register_code(keycode);
 1686               		.loc 1 759 29 view .LVU381
 759:quantum/quantum.c ****           register_code(keycode);
 1687               		.loc 1 759 29 is_stmt 0 view .LVU382
 1688               	/* #NOAPP */
 1689               	.LBE45:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1690               		.loc 1 760 11 is_stmt 1 view .LVU383
 1691 003a 0E94 0000 		call register_code
 1692               	.LVL141:
 1693               	.L147:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1694               		.loc 1 760 11 is_stmt 0 view .LVU384
 1695               	.LBE44:
 768:quantum/quantum.c ****         // interval
 1696               		.loc 1 768 9 is_stmt 1 view .LVU385
 768:quantum/quantum.c ****         // interval
 1697               		.loc 1 768 9 is_stmt 0 view .LVU386
 1698 003e E801      		movw r28,r16
 1699 0040 2196      		adiw r28,1
 1700               	.LVL142:
 1701               	.LBB46:
 770:quantum/quantum.c ****     }
 1702               		.loc 1 770 11 is_stmt 1 view .LVU387
 770:quantum/quantum.c ****     }
 1703               		.loc 1 770 34 view .LVU388
 770:quantum/quantum.c ****     }
 1704               		.loc 1 770 19 is_stmt 0 view .LVU389
 1705 0042 8F2D      		mov r24,r15
 1706               	.LVL143:
 1707               	.L150:
 770:quantum/quantum.c ****     }
 1708               		.loc 1 770 40 is_stmt 1 discriminator 1 view .LVU390
 770:quantum/quantum.c ****     }
 1709               		.loc 1 770 43 is_stmt 0 discriminator 1 view .LVU391
 1710               	.LVL144:
 1711 0044 8150      		subi r24,1
 1712 0046 00F0      		brcs .L152
 770:quantum/quantum.c ****     }
 1713               		.loc 1 770 47 is_stmt 1 view .LVU392
 1714               	.LBB47:
 1715               	.LBI47:
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 1716               		.loc 3 166 1 view .LVU393
 1717               	.LBB48:
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1718               		.loc 3 168 2 view .LVU394
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1719               		.loc 3 172 2 view .LVU395
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1720               		.loc 3 173 2 view .LVU396
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 1721               		.loc 3 174 2 view .LVU397
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 1722               		.loc 3 184 3 view .LVU398
 187:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 1723               		.loc 3 187 2 view .LVU399
 1724 0048 EFE9      		ldi r30,lo8(3999)
 1725 004a FFE0      		ldi r31,hi8(3999)
 1726 004c 3197      	1:	sbiw r30,1
 1727 004e 01F4      		brne 1b
 1728 0050 00C0      		rjmp .
 1729 0052 0000      		nop
 1730               		.loc 3 210 1 is_stmt 0 view .LVU400
 1731 0054 00C0      		rjmp .L150
 1732               	.LVL145:
 1733               	.L148:
 1734               		.loc 3 210 1 view .LVU401
 1735               	.LBE48:
 1736               	.LBE47:
 1737               	.LBE46:
 761:quantum/quantum.c ****           // up
 1738               		.loc 1 761 16 is_stmt 1 view .LVU402
 761:quantum/quantum.c ****           // up
 1739               		.loc 1 761 19 is_stmt 0 view .LVU403
 1740 0056 8330      		cpi r24,lo8(3)
 1741 0058 01F4      		brne .L149
 1742               	.LBB49:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1743               		.loc 1 763 11 is_stmt 1 view .LVU404
 1744               	.LBB43:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1745               		.loc 1 763 29 view .LVU405
 1746               	.LVL146:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1747               		.loc 1 763 29 view .LVU406
 763:quantum/quantum.c ****           unregister_code(keycode);
 1748               		.loc 1 763 29 view .LVU407
 1749 005a F801      		movw r30,r16
 1750               	/* #APP */
 1751               	 ;  763 "quantum/quantum.c" 1
 1752 005c 8491      		lpm r24, Z
 1753               		
 1754               	 ;  0 "" 2
 1755               	.LVL147:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1756               		.loc 1 763 29 is_stmt 0 view .LVU408
 1757               	/* #NOAPP */
 1758 005e 00C0      		rjmp .L153
 1759               	.LVL148:
 1760               	.L149:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1761               		.loc 1 763 29 view .LVU409
 1762               	.LBE43:
 1763               	.LBE49:
 766:quantum/quantum.c ****         }
 1764               		.loc 1 766 11 is_stmt 1 view .LVU410
 1765 0060 0E94 0000 		call send_char
 1766               	.LVL149:
 766:quantum/quantum.c ****         }
 1767               		.loc 1 766 11 is_stmt 0 view .LVU411
 1768 0064 8E01      		movw r16,r28
 1769 0066 00C0      		rjmp .L147
 1770               	.LVL150:
 1771               	.L144:
 1772               	/* epilogue start */
 766:quantum/quantum.c ****         }
 1773               		.loc 1 766 11 view .LVU412
 1774               	.LBE37:
 772:quantum/quantum.c **** 
 1775               		.loc 1 772 1 view .LVU413
 1776 0068 DF91      		pop r29
 1777 006a CF91      		pop r28
 1778               	.LVL151:
 772:quantum/quantum.c **** 
 1779               		.loc 1 772 1 view .LVU414
 1780 006c 1F91      		pop r17
 1781 006e 0F91      		pop r16
 1782 0070 FF90      		pop r15
 1783               	.LVL152:
 772:quantum/quantum.c **** 
 1784               		.loc 1 772 1 view .LVU415
 1785 0072 0895      		ret
 1786               		.cfi_endproc
 1787               	.LFE43:
 1789               		.section	.text.send_string_P,"ax",@progbits
 1790               	.global	send_string_P
 1792               	send_string_P:
 1793               	.LVL153:
 1794               	.LFB41:
 718:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1795               		.loc 1 718 37 is_stmt 1 view -0
 1796               		.cfi_startproc
 1797               	/* prologue: function */
 1798               	/* frame size = 0 */
 1799               	/* stack size = 0 */
 1800               	.L__stack_usage = 0
 719:quantum/quantum.c **** }
 1801               		.loc 1 719 3 view .LVU417
 1802 0000 60E0      		ldi r22,0
 1803 0002 0C94 0000 		jmp send_string_with_delay_P
 1804               	.LVL154:
 719:quantum/quantum.c **** }
 1805               		.loc 1 719 3 is_stmt 0 view .LVU418
 1806               		.cfi_endproc
 1807               	.LFE41:
 1809               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1810               	.global	set_single_persistent_default_layer
 1812               	set_single_persistent_default_layer:
 1813               	.LVL155:
 1814               	.LFB45:
 787:quantum/quantum.c **** 
 788:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1815               		.loc 1 788 65 is_stmt 1 view -0
 1816               		.cfi_startproc
 1817               		.loc 1 788 65 is_stmt 0 view .LVU420
 1818 0000 CF93      		push r28
 1819               	.LCFI23:
 1820               		.cfi_def_cfa_offset 3
 1821               		.cfi_offset 28, -2
 1822 0002 DF93      		push r29
 1823               	.LCFI24:
 1824               		.cfi_def_cfa_offset 4
 1825               		.cfi_offset 29, -3
 1826 0004 00D0      		rcall .
 1827 0006 00D0      		rcall .
 1828               	.LCFI25:
 1829               		.cfi_def_cfa_offset 8
 1830 0008 CDB7      		in r28,__SP_L__
 1831 000a DEB7      		in r29,__SP_H__
 1832               	.LCFI26:
 1833               		.cfi_def_cfa_register 28
 1834               	/* prologue: function */
 1835               	/* frame size = 4 */
 1836               	/* stack size = 6 */
 1837               	.L__stack_usage = 6
 789:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 790:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 791:quantum/quantum.c ****   #endif
 792:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1838               		.loc 1 792 3 is_stmt 1 view .LVU421
 1839               		.loc 1 792 35 is_stmt 0 view .LVU422
 1840 000c 21E0      		ldi r18,lo8(1)
 1841 000e 30E0      		ldi r19,0
 1842 0010 00C0      		rjmp 2f
 1843               		1:
 1844 0012 220F      		lsl r18
 1845 0014 331F      		rol r19
 1846               		2:
 1847 0016 8A95      		dec r24
 1848 0018 02F4      		brpl 1b
 1849 001a 3A83      		std Y+2,r19
 1850 001c 2983      		std Y+1,r18
 1851               		.loc 1 792 3 view .LVU423
 1852 001e 8981      		ldd r24,Y+1
 1853               	.LVL156:
 1854               		.loc 1 792 3 view .LVU424
 1855 0020 0E94 0000 		call eeconfig_update_default_layer
 1856               	.LVL157:
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1857               		.loc 1 793 3 is_stmt 1 view .LVU425
 1858 0024 A981      		ldd r26,Y+1
 1859 0026 BA81      		ldd r27,Y+2
 1860 0028 CD01      		movw r24,r26
 1861 002a B0E0      		ldi r27,0
 1862 002c A0E0      		ldi r26,0
 1863 002e 8983      		std Y+1,r24
 1864 0030 9A83      		std Y+2,r25
 1865 0032 AB83      		std Y+3,r26
 1866 0034 BC83      		std Y+4,r27
 1867 0036 BC01      		movw r22,r24
 1868 0038 CD01      		movw r24,r26
 1869               	/* epilogue start */
 794:quantum/quantum.c **** }
 1870               		.loc 1 794 1 is_stmt 0 view .LVU426
 1871 003a 0F90      		pop __tmp_reg__
 1872 003c 0F90      		pop __tmp_reg__
 1873 003e 0F90      		pop __tmp_reg__
 1874 0040 0F90      		pop __tmp_reg__
 1875 0042 DF91      		pop r29
 1876 0044 CF91      		pop r28
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1877               		.loc 1 793 3 view .LVU427
 1878 0046 0C94 0000 		jmp default_layer_set
 1879               	.LVL158:
 1880               		.cfi_endproc
 1881               	.LFE45:
 1883               		.section	.text.update_tri_layer_state,"ax",@progbits
 1884               	.global	update_tri_layer_state
 1886               	update_tri_layer_state:
 1887               	.LVL159:
 1888               	.LFB46:
 795:quantum/quantum.c **** 
 796:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1889               		.loc 1 796 97 is_stmt 1 view -0
 1890               		.cfi_startproc
 1891               		.loc 1 796 97 is_stmt 0 view .LVU429
 1892 0000 8F92      		push r8
 1893               	.LCFI27:
 1894               		.cfi_def_cfa_offset 3
 1895               		.cfi_offset 8, -2
 1896 0002 9F92      		push r9
 1897               	.LCFI28:
 1898               		.cfi_def_cfa_offset 4
 1899               		.cfi_offset 9, -3
 1900 0004 AF92      		push r10
 1901               	.LCFI29:
 1902               		.cfi_def_cfa_offset 5
 1903               		.cfi_offset 10, -4
 1904 0006 BF92      		push r11
 1905               	.LCFI30:
 1906               		.cfi_def_cfa_offset 6
 1907               		.cfi_offset 11, -5
 1908 0008 CF92      		push r12
 1909               	.LCFI31:
 1910               		.cfi_def_cfa_offset 7
 1911               		.cfi_offset 12, -6
 1912 000a DF92      		push r13
 1913               	.LCFI32:
 1914               		.cfi_def_cfa_offset 8
 1915               		.cfi_offset 13, -7
 1916 000c EF92      		push r14
 1917               	.LCFI33:
 1918               		.cfi_def_cfa_offset 9
 1919               		.cfi_offset 14, -8
 1920 000e FF92      		push r15
 1921               	.LCFI34:
 1922               		.cfi_def_cfa_offset 10
 1923               		.cfi_offset 15, -9
 1924 0010 0F93      		push r16
 1925               	.LCFI35:
 1926               		.cfi_def_cfa_offset 11
 1927               		.cfi_offset 16, -10
 1928 0012 1F93      		push r17
 1929               	.LCFI36:
 1930               		.cfi_def_cfa_offset 12
 1931               		.cfi_offset 17, -11
 1932 0014 CF93      		push r28
 1933               	.LCFI37:
 1934               		.cfi_def_cfa_offset 13
 1935               		.cfi_offset 28, -12
 1936 0016 DF93      		push r29
 1937               	.LCFI38:
 1938               		.cfi_def_cfa_offset 14
 1939               		.cfi_offset 29, -13
 1940 0018 00D0      		rcall .
 1941 001a 00D0      		rcall .
 1942               	.LCFI39:
 1943               		.cfi_def_cfa_offset 18
 1944 001c CDB7      		in r28,__SP_L__
 1945 001e DEB7      		in r29,__SP_H__
 1946               	.LCFI40:
 1947               		.cfi_def_cfa_register 28
 1948               	/* prologue: function */
 1949               	/* frame size = 4 */
 1950               	/* stack size = 16 */
 1951               	.L__stack_usage = 16
 1952 0020 6B01      		movw r12,r22
 1953 0022 7C01      		movw r14,r24
 797:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 1954               		.loc 1 797 3 is_stmt 1 view .LVU430
 1955               		.loc 1 797 26 is_stmt 0 view .LVU431
 1956 0024 81E0      		ldi r24,lo8(1)
 1957 0026 90E0      		ldi r25,0
 1958 0028 A0E0      		ldi r26,0
 1959 002a B0E0      		ldi r27,0
 1960 002c 4C01      		movw r8,r24
 1961 002e 5D01      		movw r10,r26
 1962 0030 00C0      		rjmp 2f
 1963               		1:
 1964 0032 880C      		lsl r8
 1965 0034 991C      		rol r9
 1966 0036 AA1C      		rol r10
 1967 0038 BB1C      		rol r11
 1968               		2:
 1969 003a 4A95      		dec r20
 1970 003c 02F4      		brpl 1b
 1971 003e B501      		movw r22,r10
 1972               	.LVL160:
 1973               		.loc 1 797 26 view .LVU432
 1974 0040 A401      		movw r20,r8
 1975               	.LVL161:
 1976               		.loc 1 797 44 view .LVU433
 1977 0042 4C01      		movw r8,r24
 1978 0044 5D01      		movw r10,r26
 1979 0046 00C0      		rjmp 2f
 1980               		1:
 1981 0048 880C      		lsl r8
 1982 004a 991C      		rol r9
 1983 004c AA1C      		rol r10
 1984 004e BB1C      		rol r11
 1985               		2:
 1986 0050 2A95      		dec r18
 1987 0052 02F4      		brpl 1b
 1988               		.loc 1 797 12 view .LVU434
 1989 0054 4829      		or r20,r8
 1990 0056 5929      		or r21,r9
 1991 0058 6A29      		or r22,r10
 1992 005a 7B29      		or r23,r11
 1993               	.LVL162:
 798:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 1994               		.loc 1 798 3 is_stmt 1 view .LVU435
 1995               		.loc 1 798 12 is_stmt 0 view .LVU436
 1996 005c 00C0      		rjmp 2f
 1997               		1:
 1998 005e 880F      		lsl r24
 1999 0060 991F      		rol r25
 2000 0062 AA1F      		rol r26
 2001 0064 BB1F      		rol r27
 2002               		2:
 2003 0066 0A95      		dec r16
 2004 0068 02F4      		brpl 1b
 2005               	.LVL163:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2006               		.loc 1 799 3 is_stmt 1 view .LVU437
 2007               		.loc 1 799 17 is_stmt 0 view .LVU438
 2008 006a 8A01      		movw r16,r20
 2009               	.LVL164:
 2010               		.loc 1 799 17 view .LVU439
 2011 006c 9B01      		movw r18,r22
 2012               	.LVL165:
 2013               		.loc 1 799 17 view .LVU440
 2014 006e 0C21      		and r16,r12
 2015 0070 1D21      		and r17,r13
 2016 0072 2E21      		and r18,r14
 2017 0074 3F21      		and r19,r15
 2018               		.loc 1 799 55 view .LVU441
 2019 0076 0417      		cp r16,r20
 2020 0078 1507      		cpc r17,r21
 2021 007a 2607      		cpc r18,r22
 2022 007c 3707      		cpc r19,r23
 2023 007e 01F4      		brne .L157
 2024               		.loc 1 799 55 discriminator 1 view .LVU442
 2025 0080 9C01      		movw r18,r24
 2026 0082 AD01      		movw r20,r26
 2027               	.LVL166:
 2028               		.loc 1 799 55 discriminator 1 view .LVU443
 2029 0084 2C29      		or r18,r12
 2030 0086 3D29      		or r19,r13
 2031 0088 4E29      		or r20,r14
 2032 008a 5F29      		or r21,r15
 2033 008c 2983      		std Y+1,r18
 2034 008e 3A83      		std Y+2,r19
 2035 0090 4B83      		std Y+3,r20
 2036 0092 5C83      		std Y+4,r21
 2037               	.LVL167:
 2038               	.L156:
 800:quantum/quantum.c **** }
 2039               		.loc 1 800 1 view .LVU444
 2040 0094 6981      		ldd r22,Y+1
 2041 0096 7A81      		ldd r23,Y+2
 2042 0098 8B81      		ldd r24,Y+3
 2043 009a 9C81      		ldd r25,Y+4
 2044               	/* epilogue start */
 2045 009c 0F90      		pop __tmp_reg__
 2046 009e 0F90      		pop __tmp_reg__
 2047 00a0 0F90      		pop __tmp_reg__
 2048 00a2 0F90      		pop __tmp_reg__
 2049 00a4 DF91      		pop r29
 2050 00a6 CF91      		pop r28
 2051               	.LVL168:
 2052               		.loc 1 800 1 view .LVU445
 2053 00a8 1F91      		pop r17
 2054               	.LVL169:
 2055               		.loc 1 800 1 view .LVU446
 2056 00aa 0F91      		pop r16
 2057               	.LVL170:
 2058               		.loc 1 800 1 view .LVU447
 2059 00ac FF90      		pop r15
 2060               	.LVL171:
 2061               		.loc 1 800 1 view .LVU448
 2062 00ae EF90      		pop r14
 2063               	.LVL172:
 2064               		.loc 1 800 1 view .LVU449
 2065 00b0 DF90      		pop r13
 2066               	.LVL173:
 2067               		.loc 1 800 1 view .LVU450
 2068 00b2 CF90      		pop r12
 2069               	.LVL174:
 2070               		.loc 1 800 1 view .LVU451
 2071 00b4 BF90      		pop r11
 2072               	.LVL175:
 2073               		.loc 1 800 1 view .LVU452
 2074 00b6 AF90      		pop r10
 2075               	.LVL176:
 2076               		.loc 1 800 1 view .LVU453
 2077 00b8 9F90      		pop r9
 2078               	.LVL177:
 2079               		.loc 1 800 1 view .LVU454
 2080 00ba 8F90      		pop r8
 2081               	.LVL178:
 2082               		.loc 1 800 1 view .LVU455
 2083 00bc 0895      		ret
 2084               	.LVL179:
 2085               	.L157:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2086               		.loc 1 799 66 discriminator 2 view .LVU456
 2087 00be 8095      		com r24
 2088 00c0 9095      		com r25
 2089 00c2 A095      		com r26
 2090 00c4 B095      		com r27
 2091               	.LVL180:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2092               		.loc 1 799 55 discriminator 2 view .LVU457
 2093 00c6 4C01      		movw r8,r24
 2094 00c8 5D01      		movw r10,r26
 2095 00ca 8C20      		and r8,r12
 2096 00cc 9D20      		and r9,r13
 2097 00ce AE20      		and r10,r14
 2098 00d0 BF20      		and r11,r15
 2099 00d2 8982      		std Y+1,r8
 2100 00d4 9A82      		std Y+2,r9
 2101 00d6 AB82      		std Y+3,r10
 2102 00d8 BC82      		std Y+4,r11
 2103 00da 00C0      		rjmp .L156
 2104               		.cfi_endproc
 2105               	.LFE46:
 2107               		.section	.text.update_tri_layer,"ax",@progbits
 2108               	.global	update_tri_layer
 2110               	update_tri_layer:
 2111               	.LVL181:
 2112               	.LFB47:
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 2113               		.loc 1 802 71 is_stmt 1 view -0
 2114               		.cfi_startproc
 2115               		.loc 1 802 71 is_stmt 0 view .LVU459
 2116 0000 0F93      		push r16
 2117               	.LCFI41:
 2118               		.cfi_def_cfa_offset 3
 2119               		.cfi_offset 16, -2
 2120 0002 CF93      		push r28
 2121               	.LCFI42:
 2122               		.cfi_def_cfa_offset 4
 2123               		.cfi_offset 28, -3
 2124 0004 DF93      		push r29
 2125               	.LCFI43:
 2126               		.cfi_def_cfa_offset 5
 2127               		.cfi_offset 29, -4
 2128 0006 00D0      		rcall .
 2129 0008 00D0      		rcall .
 2130               	.LCFI44:
 2131               		.cfi_def_cfa_offset 9
 2132 000a CDB7      		in r28,__SP_L__
 2133 000c DEB7      		in r29,__SP_H__
 2134               	.LCFI45:
 2135               		.cfi_def_cfa_register 28
 2136               	/* prologue: function */
 2137               	/* frame size = 4 */
 2138               	/* stack size = 7 */
 2139               	.L__stack_usage = 7
 2140 000e 262F      		mov r18,r22
 2141 0010 042F      		mov r16,r20
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2142               		.loc 1 803 3 is_stmt 1 view .LVU460
 2143 0012 4091 0000 		lds r20,layer_state
 2144 0016 5091 0000 		lds r21,layer_state+1
 2145 001a 6091 0000 		lds r22,layer_state+2
 2146 001e 7091 0000 		lds r23,layer_state+3
 2147               	.LVL182:
 2148               		.loc 1 803 3 is_stmt 0 view .LVU461
 2149 0022 4983      		std Y+1,r20
 2150 0024 5A83      		std Y+2,r21
 2151 0026 6B83      		std Y+3,r22
 2152 0028 7C83      		std Y+4,r23
 2153 002a 482F      		mov r20,r24
 2154 002c 6981      		ldd r22,Y+1
 2155 002e 7A81      		ldd r23,Y+2
 2156 0030 8B81      		ldd r24,Y+3
 2157 0032 9C81      		ldd r25,Y+4
 2158               	.LVL183:
 2159               		.loc 1 803 3 view .LVU462
 2160 0034 0E94 0000 		call update_tri_layer_state
 2161               	.LVL184:
 2162               	/* epilogue start */
 804:quantum/quantum.c **** }
 2163               		.loc 1 804 1 view .LVU463
 2164 0038 0F90      		pop __tmp_reg__
 2165 003a 0F90      		pop __tmp_reg__
 2166 003c 0F90      		pop __tmp_reg__
 2167 003e 0F90      		pop __tmp_reg__
 2168 0040 DF91      		pop r29
 2169 0042 CF91      		pop r28
 2170 0044 0F91      		pop r16
 2171               	.LVL185:
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2172               		.loc 1 803 3 view .LVU464
 2173 0046 0C94 0000 		jmp layer_state_set
 2174               	.LVL186:
 2175               		.cfi_endproc
 2176               	.LFE47:
 2178               		.section	.text.tap_random_base64,"ax",@progbits
 2179               	.global	tap_random_base64
 2181               	tap_random_base64:
 2182               	.LFB48:
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** void tap_random_base64(void) {
 2183               		.loc 1 806 30 is_stmt 1 view -0
 2184               		.cfi_startproc
 2185 0000 CF93      		push r28
 2186               	.LCFI46:
 2187               		.cfi_def_cfa_offset 3
 2188               		.cfi_offset 28, -2
 2189 0002 DF93      		push r29
 2190               	.LCFI47:
 2191               		.cfi_def_cfa_offset 4
 2192               		.cfi_offset 29, -3
 2193               	/* prologue: function */
 2194               	/* frame size = 0 */
 2195               	/* stack size = 2 */
 2196               	.L__stack_usage = 2
 807:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 808:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 2197               		.loc 1 808 5 view .LVU466
 2198               		.loc 1 808 20 is_stmt 0 view .LVU467
 2199 0004 46B5      		in r20,0x26
 2200               		.loc 1 808 28 view .LVU468
 2201 0006 2091 8400 		lds r18,132
 2202 000a 3091 8500 		lds r19,132+1
 2203               		.loc 1 808 36 view .LVU469
 2204 000e C091 9400 		lds r28,148
 2205 0012 D091 9500 		lds r29,148+1
 2206               		.loc 1 808 44 view .LVU470
 2207 0016 8091 BE00 		lds r24,190
 2208 001a 9091 BF00 		lds r25,190+1
 2209               		.loc 1 808 34 view .LVU471
 2210 001e C20F      		add r28,r18
 2211 0020 C40F      		add r28,r20
 2212               		.loc 1 808 42 view .LVU472
 2213 0022 C80F      		add r28,r24
 2214               		.loc 1 808 13 view .LVU473
 2215 0024 CF73      		andi r28,lo8(63)
 2216               	.LVL187:
 809:quantum/quantum.c ****   #else
 810:quantum/quantum.c ****     uint8_t key = rand() % 64;
 811:quantum/quantum.c ****   #endif
 812:quantum/quantum.c ****   switch (key) {
 2217               		.loc 1 812 3 is_stmt 1 view .LVU474
 2218 0026 CE33      		cpi r28,lo8(62)
 2219 0028 00F4      		brsh .L161
 2220 002a C533      		cpi r28,lo8(53)
 2221 002c 00F4      		brsh .L162
 2222 002e C433      		cpi r28,lo8(52)
 2223 0030 01F0      		breq .L163
 2224 0032 CA31      		cpi r28,lo8(26)
 2225 0034 00F0      		brlo .L168
 813:quantum/quantum.c ****     case 0 ... 25:
 814:quantum/quantum.c ****       register_code(KC_LSFT);
 815:quantum/quantum.c ****       register_code(key + KC_A);
 816:quantum/quantum.c ****       unregister_code(key + KC_A);
 817:quantum/quantum.c ****       unregister_code(KC_LSFT);
 818:quantum/quantum.c ****       break;
 819:quantum/quantum.c ****     case 26 ... 51:
 820:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 2226               		.loc 1 820 7 view .LVU475
 2227 0036 C651      		subi r28,lo8(-(-22))
 2228               	.LVL188:
 2229               	.L172:
 821:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 822:quantum/quantum.c ****       break;
 823:quantum/quantum.c ****     case 52:
 824:quantum/quantum.c ****       register_code(KC_0);
 825:quantum/quantum.c ****       unregister_code(KC_0);
 826:quantum/quantum.c ****       break;
 827:quantum/quantum.c ****     case 53 ... 61:
 828:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 2230               		.loc 1 828 7 is_stmt 0 view .LVU476
 2231 0038 8C2F      		mov r24,r28
 2232 003a 0E94 0000 		call register_code
 2233               	.LVL189:
 829:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2234               		.loc 1 829 7 is_stmt 1 view .LVU477
 2235 003e 8C2F      		mov r24,r28
 2236 0040 00C0      		rjmp .L170
 2237               	.LVL190:
 2238               	.L161:
 812:quantum/quantum.c ****     case 0 ... 25:
 2239               		.loc 1 812 3 is_stmt 0 view .LVU478
 2240 0042 CE33      		cpi r28,lo8(62)
 2241 0044 01F4      		brne .L169
 830:quantum/quantum.c ****       break;
 831:quantum/quantum.c ****     case 62:
 832:quantum/quantum.c ****       register_code(KC_LSFT);
 2242               		.loc 1 832 7 is_stmt 1 view .LVU479
 2243 0046 81EE      		ldi r24,lo8(-31)
 2244 0048 0E94 0000 		call register_code
 2245               	.LVL191:
 833:quantum/quantum.c ****       register_code(KC_EQL);
 2246               		.loc 1 833 7 view .LVU480
 2247 004c 8EE2      		ldi r24,lo8(46)
 2248 004e 0E94 0000 		call register_code
 2249               	.LVL192:
 834:quantum/quantum.c ****       unregister_code(KC_EQL);
 2250               		.loc 1 834 7 view .LVU481
 2251 0052 8EE2      		ldi r24,lo8(46)
 2252 0054 00C0      		rjmp .L171
 2253               	.L168:
 814:quantum/quantum.c ****       register_code(key + KC_A);
 2254               		.loc 1 814 7 view .LVU482
 2255 0056 81EE      		ldi r24,lo8(-31)
 2256 0058 0E94 0000 		call register_code
 2257               	.LVL193:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2258               		.loc 1 815 7 view .LVU483
 2259 005c CC5F      		subi r28,lo8(-(4))
 2260               	.LVL194:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2261               		.loc 1 815 7 is_stmt 0 view .LVU484
 2262 005e 8C2F      		mov r24,r28
 2263 0060 0E94 0000 		call register_code
 2264               	.LVL195:
 816:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2265               		.loc 1 816 7 is_stmt 1 view .LVU485
 2266 0064 8C2F      		mov r24,r28
 2267               	.LVL196:
 2268               	.L171:
 2269               		.loc 1 834 7 is_stmt 0 view .LVU486
 2270 0066 0E94 0000 		call unregister_code
 2271               	.LVL197:
 835:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2272               		.loc 1 835 7 is_stmt 1 view .LVU487
 2273 006a 81EE      		ldi r24,lo8(-31)
 2274 006c 00C0      		rjmp .L170
 2275               	.LVL198:
 2276               	.L163:
 824:quantum/quantum.c ****       unregister_code(KC_0);
 2277               		.loc 1 824 7 view .LVU488
 2278 006e 87E2      		ldi r24,lo8(39)
 2279 0070 0E94 0000 		call register_code
 2280               	.LVL199:
 825:quantum/quantum.c ****       break;
 2281               		.loc 1 825 7 view .LVU489
 2282 0074 87E2      		ldi r24,lo8(39)
 2283               	.LVL200:
 2284               	.L170:
 2285               	/* epilogue start */
 836:quantum/quantum.c ****       break;
 837:quantum/quantum.c ****     case 63:
 838:quantum/quantum.c ****       register_code(KC_SLSH);
 839:quantum/quantum.c ****       unregister_code(KC_SLSH);
 840:quantum/quantum.c ****       break;
 841:quantum/quantum.c ****   }
 842:quantum/quantum.c **** }
 2286               		.loc 1 842 1 is_stmt 0 view .LVU490
 2287 0076 DF91      		pop r29
 2288 0078 CF91      		pop r28
 839:quantum/quantum.c ****       break;
 2289               		.loc 1 839 7 view .LVU491
 2290 007a 0C94 0000 		jmp unregister_code
 2291               	.LVL201:
 2292               	.L162:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2293               		.loc 1 828 7 is_stmt 1 view .LVU492
 2294 007e C751      		subi r28,lo8(-(-23))
 2295               	.LVL202:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2296               		.loc 1 828 7 is_stmt 0 view .LVU493
 2297 0080 00C0      		rjmp .L172
 2298               	.LVL203:
 2299               	.L169:
 838:quantum/quantum.c ****       unregister_code(KC_SLSH);
 2300               		.loc 1 838 7 is_stmt 1 view .LVU494
 2301 0082 88E3      		ldi r24,lo8(56)
 2302 0084 0E94 0000 		call register_code
 2303               	.LVL204:
 839:quantum/quantum.c ****       break;
 2304               		.loc 1 839 7 view .LVU495
 2305 0088 88E3      		ldi r24,lo8(56)
 2306 008a 00C0      		rjmp .L170
 2307               		.cfi_endproc
 2308               	.LFE48:
 2310               		.section	.text.matrix_init_quantum,"ax",@progbits
 2311               	.global	matrix_init_quantum
 2313               	matrix_init_quantum:
 2314               	.LFB49:
 843:quantum/quantum.c **** 
 844:quantum/quantum.c **** void matrix_init_quantum() {
 2315               		.loc 1 844 28 view -0
 2316               		.cfi_startproc
 2317               	/* prologue: function */
 2318               	/* frame size = 0 */
 2319               	/* stack size = 0 */
 2320               	.L__stack_usage = 0
 845:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 846:quantum/quantum.c ****     backlight_init_ports();
 847:quantum/quantum.c ****   #endif
 848:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 849:quantum/quantum.c ****     audio_init();
 850:quantum/quantum.c ****   #endif
 851:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 852:quantum/quantum.c ****     rgb_matrix_init_drivers();
 853:quantum/quantum.c ****   #endif
 854:quantum/quantum.c ****   matrix_init_kb();
 2321               		.loc 1 854 3 view .LVU497
 2322 0000 0C94 0000 		jmp matrix_init_kb
 2323               	.LVL205:
 2324               		.cfi_endproc
 2325               	.LFE49:
 2327               		.section	.text.matrix_scan_quantum,"ax",@progbits
 2328               	.global	matrix_scan_quantum
 2330               	matrix_scan_quantum:
 2331               	.LFB50:
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** uint8_t rgb_matrix_task_counter = 0;
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** #ifndef RGB_MATRIX_SKIP_FRAMES
 860:quantum/quantum.c ****   #define RGB_MATRIX_SKIP_FRAMES 1
 861:quantum/quantum.c **** #endif
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** void matrix_scan_quantum() {
 2332               		.loc 1 863 28 view -0
 2333               		.cfi_startproc
 2334               	/* prologue: function */
 2335               	/* frame size = 0 */
 2336               	/* stack size = 0 */
 2337               	.L__stack_usage = 0
 864:quantum/quantum.c ****   #if defined(AUDIO_ENABLE)
 865:quantum/quantum.c ****     matrix_scan_music();
 866:quantum/quantum.c ****   #endif
 867:quantum/quantum.c **** 
 868:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 869:quantum/quantum.c ****     matrix_scan_tap_dance();
 2338               		.loc 1 869 5 view .LVU499
 2339 0000 0E94 0000 		call matrix_scan_tap_dance
 2340               	.LVL206:
 870:quantum/quantum.c ****   #endif
 871:quantum/quantum.c **** 
 872:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 873:quantum/quantum.c ****     matrix_scan_combo();
 874:quantum/quantum.c ****   #endif
 875:quantum/quantum.c **** 
 876:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 877:quantum/quantum.c ****     backlight_task();
 878:quantum/quantum.c ****   #endif
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 881:quantum/quantum.c ****     rgb_matrix_task();
 882:quantum/quantum.c ****     if (rgb_matrix_task_counter == 0) {
 883:quantum/quantum.c ****       rgb_matrix_update_pwm_buffers();
 884:quantum/quantum.c ****     }
 885:quantum/quantum.c ****     rgb_matrix_task_counter = ((rgb_matrix_task_counter + 1) % (RGB_MATRIX_SKIP_FRAMES + 1));
 886:quantum/quantum.c ****   #endif
 887:quantum/quantum.c **** 
 888:quantum/quantum.c ****   matrix_scan_kb();
 2341               		.loc 1 888 3 view .LVU500
 2342 0004 0C94 0000 		jmp matrix_scan_kb
 2343               	.LVL207:
 2344               		.cfi_endproc
 2345               	.LFE50:
 2347               		.section	.text.backlight_init_ports,"ax",@progbits
 2348               		.weak	backlight_init_ports
 2350               	backlight_init_ports:
 2351               	.LFB92:
 2352               		.cfi_startproc
 2353               	/* prologue: function */
 2354               	/* frame size = 0 */
 2355               	/* stack size = 0 */
 2356               	.L__stack_usage = 0
 2357               	/* epilogue start */
 2358 0000 0895      		ret
 2359               		.cfi_endproc
 2360               	.LFE92:
 2362               		.section	.text.send_nibble,"ax",@progbits
 2363               	.global	send_nibble
 2365               	send_nibble:
 2366               	.LVL208:
 2367               	.LFB56:
 889:quantum/quantum.c **** }
 890:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 891:quantum/quantum.c **** 
 892:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 893:quantum/quantum.c **** 
 894:quantum/quantum.c **** // depending on the pin, we use a different output compare unit
 895:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 896:quantum/quantum.c **** #  define COM1x1 COM1C1
 897:quantum/quantum.c **** #  define OCR1x  OCR1C
 898:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 899:quantum/quantum.c **** #  define COM1x1 COM1B1
 900:quantum/quantum.c **** #  define OCR1x  OCR1B
 901:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 902:quantum/quantum.c **** #  define COM1x1 COM1A1
 903:quantum/quantum.c **** #  define OCR1x  OCR1A
 904:quantum/quantum.c **** #else
 905:quantum/quantum.c **** #  define NO_HARDWARE_PWM
 906:quantum/quantum.c **** #endif
 907:quantum/quantum.c **** 
 908:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 909:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 910:quantum/quantum.c **** #endif
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM // pwm through software
 913:quantum/quantum.c **** 
 914:quantum/quantum.c **** __attribute__ ((weak))
 915:quantum/quantum.c **** void backlight_init_ports(void)
 916:quantum/quantum.c **** {
 917:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 918:quantum/quantum.c ****   // DDRx |= n
 919:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 920:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 921:quantum/quantum.c ****     // PORTx &= ~n
 922:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 923:quantum/quantum.c ****   #else
 924:quantum/quantum.c ****     // PORTx |= n
 925:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c **** }
 928:quantum/quantum.c **** 
 929:quantum/quantum.c **** __attribute__ ((weak))
 930:quantum/quantum.c **** void backlight_set(uint8_t level) {}
 931:quantum/quantum.c **** 
 932:quantum/quantum.c **** uint8_t backlight_tick = 0;
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 935:quantum/quantum.c **** void backlight_task(void) {
 936:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
 937:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 938:quantum/quantum.c ****       // PORTx &= ~n
 939:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 940:quantum/quantum.c ****     #else
 941:quantum/quantum.c ****       // PORTx |= n
 942:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 943:quantum/quantum.c ****     #endif
 944:quantum/quantum.c ****   } else {
 945:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 946:quantum/quantum.c ****       // PORTx |= n
 947:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 948:quantum/quantum.c ****     #else
 949:quantum/quantum.c ****       // PORTx &= ~n
 950:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 951:quantum/quantum.c ****     #endif
 952:quantum/quantum.c ****   }
 953:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 954:quantum/quantum.c **** }
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 958:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
 959:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** #else // pwm through timer
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
 968:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
 969:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
 970:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 971:quantum/quantum.c ****   else {
 972:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
 973:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 974:quantum/quantum.c ****     // and revert what we've done again after squaring.
 975:quantum/quantum.c ****     y = y * y * y >> 8;
 976:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 977:quantum/quantum.c ****       return 0xFFFFU;
 978:quantum/quantum.c ****     else
 979:quantum/quantum.c ****       return (uint16_t) y;
 980:quantum/quantum.c ****   }
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
 984:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
 985:quantum/quantum.c ****   OCR1x = val;
 986:quantum/quantum.c **** }
 987:quantum/quantum.c **** 
 988:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 989:quantum/quantum.c **** __attribute__ ((weak))
 990:quantum/quantum.c **** void backlight_set(uint8_t level) {
 991:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
 992:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
 993:quantum/quantum.c **** 
 994:quantum/quantum.c ****   if (level == 0) {
 995:quantum/quantum.c ****     // Turn off PWM control on backlight pin
 996:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 997:quantum/quantum.c ****   } else {
 998:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 999:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
1000:quantum/quantum.c ****   }
1001:quantum/quantum.c ****   // Set the brightness
1002:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1003:quantum/quantum.c **** }
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** void backlight_task(void) {}
1006:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1007:quantum/quantum.c **** 
1008:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1011:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1012:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1013:quantum/quantum.c **** #define BREATHING_STEPS 128
1014:quantum/quantum.c **** 
1015:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1016:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1017:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** bool is_breathing(void) {
1020:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1021:quantum/quantum.c **** }
1022:quantum/quantum.c **** 
1023:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1024:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1025:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1026:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1027:quantum/quantum.c **** 
1028:quantum/quantum.c **** void breathing_enable(void)
1029:quantum/quantum.c **** {
1030:quantum/quantum.c ****   breathing_counter = 0;
1031:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1032:quantum/quantum.c ****   breathing_interrupt_enable();
1033:quantum/quantum.c **** }
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** void breathing_pulse(void)
1036:quantum/quantum.c **** {
1037:quantum/quantum.c ****     if (get_backlight_level() == 0)
1038:quantum/quantum.c ****       breathing_min();
1039:quantum/quantum.c ****     else
1040:quantum/quantum.c ****       breathing_max();
1041:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1042:quantum/quantum.c ****     breathing_interrupt_enable();
1043:quantum/quantum.c **** }
1044:quantum/quantum.c **** 
1045:quantum/quantum.c **** void breathing_disable(void)
1046:quantum/quantum.c **** {
1047:quantum/quantum.c ****     breathing_interrupt_disable();
1048:quantum/quantum.c ****     // Restore backlight level
1049:quantum/quantum.c ****     backlight_set(get_backlight_level());
1050:quantum/quantum.c **** }
1051:quantum/quantum.c **** 
1052:quantum/quantum.c **** void breathing_self_disable(void)
1053:quantum/quantum.c **** {
1054:quantum/quantum.c ****   if (get_backlight_level() == 0)
1055:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1056:quantum/quantum.c ****   else
1057:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1058:quantum/quantum.c **** }
1059:quantum/quantum.c **** 
1060:quantum/quantum.c **** void breathing_toggle(void) {
1061:quantum/quantum.c ****   if (is_breathing())
1062:quantum/quantum.c ****     breathing_disable();
1063:quantum/quantum.c ****   else
1064:quantum/quantum.c ****     breathing_enable();
1065:quantum/quantum.c **** }
1066:quantum/quantum.c **** 
1067:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1068:quantum/quantum.c **** {
1069:quantum/quantum.c ****   if (!value)
1070:quantum/quantum.c ****     value = 1;
1071:quantum/quantum.c ****   breathing_period = value;
1072:quantum/quantum.c **** }
1073:quantum/quantum.c **** 
1074:quantum/quantum.c **** void breathing_period_default(void) {
1075:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1076:quantum/quantum.c **** }
1077:quantum/quantum.c **** 
1078:quantum/quantum.c **** void breathing_period_inc(void)
1079:quantum/quantum.c **** {
1080:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1081:quantum/quantum.c **** }
1082:quantum/quantum.c **** 
1083:quantum/quantum.c **** void breathing_period_dec(void)
1084:quantum/quantum.c **** {
1085:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1086:quantum/quantum.c **** }
1087:quantum/quantum.c **** 
1088:quantum/quantum.c **** /* To generate breathing curve in python:
1089:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1090:quantum/quantum.c ****  */
1091:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1092:quantum/quantum.c **** 
1093:quantum/quantum.c **** // Use this before the cie_lightness function.
1094:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1095:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1096:quantum/quantum.c **** }
1097:quantum/quantum.c **** 
1098:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1099:quantum/quantum.c ****  * about 244 times per second.
1100:quantum/quantum.c ****  */
1101:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1102:quantum/quantum.c **** {
1103:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1104:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1105:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1106:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1107:quantum/quantum.c **** 
1108:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1109:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1110:quantum/quantum.c ****   {
1111:quantum/quantum.c ****       breathing_interrupt_disable();
1112:quantum/quantum.c ****   }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1115:quantum/quantum.c **** }
1116:quantum/quantum.c **** 
1117:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1118:quantum/quantum.c **** 
1119:quantum/quantum.c **** __attribute__ ((weak))
1120:quantum/quantum.c **** void backlight_init_ports(void)
1121:quantum/quantum.c **** {
1122:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1123:quantum/quantum.c ****   // DDRx |= n
1124:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
1125:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
1126:quantum/quantum.c ****     // PORTx &= ~n
1127:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
1128:quantum/quantum.c ****   #else
1129:quantum/quantum.c ****     // PORTx |= n
1130:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
1131:quantum/quantum.c ****   #endif
1132:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1133:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1134:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1135:quantum/quantum.c **** 
1136:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1137:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1138:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1139:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1140:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c ****   /*
1143:quantum/quantum.c ****   14.8.3:
1144:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1145:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1146:quantum/quantum.c ****   */
1147:quantum/quantum.c **** 
1148:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
1149:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1150:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1151:quantum/quantum.c ****   ICR1 = TIMER_TOP;
1152:quantum/quantum.c **** 
1153:quantum/quantum.c ****   backlight_init();
1154:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1155:quantum/quantum.c ****     breathing_enable();
1156:quantum/quantum.c ****   #endif
1157:quantum/quantum.c **** }
1158:quantum/quantum.c **** 
1159:quantum/quantum.c **** #endif // NO_HARDWARE_PWM
1160:quantum/quantum.c **** 
1161:quantum/quantum.c **** #else // backlight
1162:quantum/quantum.c **** 
1163:quantum/quantum.c **** __attribute__ ((weak))
1164:quantum/quantum.c **** void backlight_init_ports(void) {}
1165:quantum/quantum.c **** 
1166:quantum/quantum.c **** __attribute__ ((weak))
1167:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #endif // backlight
1170:quantum/quantum.c **** 
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** // Functions for spitting out values
1173:quantum/quantum.c **** //
1174:quantum/quantum.c **** 
1175:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1176:quantum/quantum.c ****     uint16_t word = (number >> 16);
1177:quantum/quantum.c ****     send_word(word);
1178:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void send_word(uint16_t number) {
1182:quantum/quantum.c ****     uint8_t byte = number >> 8;
1183:quantum/quantum.c ****     send_byte(byte);
1184:quantum/quantum.c ****     send_byte(number & 0xFF);
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** 
1187:quantum/quantum.c **** void send_byte(uint8_t number) {
1188:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1189:quantum/quantum.c ****     send_nibble(nibble);
1190:quantum/quantum.c ****     send_nibble(number & 0xF);
1191:quantum/quantum.c **** }
1192:quantum/quantum.c **** 
1193:quantum/quantum.c **** void send_nibble(uint8_t number) {
 2368               		.loc 1 1193 34 view -0
 2369               		.cfi_startproc
 2370               		.loc 1 1193 34 is_stmt 0 view .LVU502
 2371 0000 CF93      		push r28
 2372               	.LCFI48:
 2373               		.cfi_def_cfa_offset 3
 2374               		.cfi_offset 28, -2
 2375               	/* prologue: function */
 2376               	/* frame size = 0 */
 2377               	/* stack size = 1 */
 2378               	.L__stack_usage = 1
 2379 0002 C82F      		mov r28,r24
1194:quantum/quantum.c ****     switch (number) {
 2380               		.loc 1 1194 5 is_stmt 1 view .LVU503
 2381 0004 8A30      		cpi r24,lo8(10)
 2382 0006 00F4      		brsh .L177
 2383 0008 8823      		tst r24
 2384 000a 01F0      		breq .L182
1195:quantum/quantum.c ****         case 0:
1196:quantum/quantum.c ****             register_code(KC_0);
1197:quantum/quantum.c ****             unregister_code(KC_0);
1198:quantum/quantum.c ****             break;
1199:quantum/quantum.c ****         case 1 ... 9:
1200:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 2385               		.loc 1 1200 13 view .LVU504
 2386 000c C35E      		subi r28,lo8(-(29))
 2387               	.L185:
1201:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1202:quantum/quantum.c ****             break;
1203:quantum/quantum.c ****         case 0xA ... 0xF:
1204:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2388               		.loc 1 1204 13 is_stmt 0 view .LVU505
 2389 000e 8C2F      		mov r24,r28
 2390               	.LVL209:
 2391               		.loc 1 1204 13 view .LVU506
 2392 0010 0E94 0000 		call register_code
 2393               	.LVL210:
1205:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2394               		.loc 1 1205 13 is_stmt 1 view .LVU507
 2395 0014 8C2F      		mov r24,r28
 2396 0016 00C0      		rjmp .L184
 2397               	.LVL211:
 2398               	.L177:
1194:quantum/quantum.c ****         case 0:
 2399               		.loc 1 1194 5 is_stmt 0 view .LVU508
 2400 0018 96EF      		ldi r25,lo8(-10)
 2401 001a 980F      		add r25,r24
1204:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2402               		.loc 1 1204 13 view .LVU509
 2403 001c C650      		subi r28,lo8(-(-6))
1194:quantum/quantum.c ****         case 0:
 2404               		.loc 1 1194 5 view .LVU510
 2405 001e 9630      		cpi r25,lo8(6)
 2406 0020 00F0      		brlo .L185
 2407               	/* epilogue start */
1206:quantum/quantum.c ****             break;
1207:quantum/quantum.c ****     }
1208:quantum/quantum.c **** }
 2408               		.loc 1 1208 1 view .LVU511
 2409 0022 CF91      		pop r28
 2410 0024 0895      		ret
 2411               	.L182:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2412               		.loc 1 1196 13 is_stmt 1 view .LVU512
 2413 0026 87E2      		ldi r24,lo8(39)
 2414               	.LVL212:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2415               		.loc 1 1196 13 is_stmt 0 view .LVU513
 2416 0028 0E94 0000 		call register_code
 2417               	.LVL213:
1197:quantum/quantum.c ****             break;
 2418               		.loc 1 1197 13 is_stmt 1 view .LVU514
 2419 002c 87E2      		ldi r24,lo8(39)
 2420               	.LVL214:
 2421               	.L184:
 2422               	/* epilogue start */
 2423               		.loc 1 1208 1 is_stmt 0 view .LVU515
 2424 002e CF91      		pop r28
1205:quantum/quantum.c ****             break;
 2425               		.loc 1 1205 13 view .LVU516
 2426 0030 0C94 0000 		jmp unregister_code
 2427               	.LVL215:
 2428               		.cfi_endproc
 2429               	.LFE56:
 2431               		.section	.text.send_byte,"ax",@progbits
 2432               	.global	send_byte
 2434               	send_byte:
 2435               	.LVL216:
 2436               	.LFB55:
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2437               		.loc 1 1187 32 is_stmt 1 view -0
 2438               		.cfi_startproc
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2439               		.loc 1 1187 32 is_stmt 0 view .LVU518
 2440 0000 CF93      		push r28
 2441               	.LCFI49:
 2442               		.cfi_def_cfa_offset 3
 2443               		.cfi_offset 28, -2
 2444               	/* prologue: function */
 2445               	/* frame size = 0 */
 2446               	/* stack size = 1 */
 2447               	.L__stack_usage = 1
 2448 0002 C82F      		mov r28,r24
1188:quantum/quantum.c ****     send_nibble(nibble);
 2449               		.loc 1 1188 5 is_stmt 1 view .LVU519
 2450               	.LVL217:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2451               		.loc 1 1189 5 view .LVU520
 2452 0004 8295      		swap r24
 2453               	.LVL218:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2454               		.loc 1 1189 5 is_stmt 0 view .LVU521
 2455 0006 8F70      		andi r24,lo8(15)
 2456 0008 0E94 0000 		call send_nibble
 2457               	.LVL219:
1190:quantum/quantum.c **** }
 2458               		.loc 1 1190 5 is_stmt 1 view .LVU522
 2459 000c 8C2F      		mov r24,r28
 2460 000e 8F70      		andi r24,lo8(15)
 2461               	/* epilogue start */
1191:quantum/quantum.c **** 
 2462               		.loc 1 1191 1 is_stmt 0 view .LVU523
 2463 0010 CF91      		pop r28
 2464               	.LVL220:
1190:quantum/quantum.c **** }
 2465               		.loc 1 1190 5 view .LVU524
 2466 0012 0C94 0000 		jmp send_nibble
 2467               	.LVL221:
 2468               		.cfi_endproc
 2469               	.LFE55:
 2471               		.section	.text.send_word,"ax",@progbits
 2472               	.global	send_word
 2474               	send_word:
 2475               	.LVL222:
 2476               	.LFB54:
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2477               		.loc 1 1181 33 is_stmt 1 view -0
 2478               		.cfi_startproc
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2479               		.loc 1 1181 33 is_stmt 0 view .LVU526
 2480 0000 CF93      		push r28
 2481               	.LCFI50:
 2482               		.cfi_def_cfa_offset 3
 2483               		.cfi_offset 28, -2
 2484               	/* prologue: function */
 2485               	/* frame size = 0 */
 2486               	/* stack size = 1 */
 2487               	.L__stack_usage = 1
 2488 0002 C82F      		mov r28,r24
 2489 0004 892F      		mov r24,r25
 2490               	.LVL223:
1182:quantum/quantum.c ****     send_byte(byte);
 2491               		.loc 1 1182 5 is_stmt 1 view .LVU527
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2492               		.loc 1 1183 5 view .LVU528
 2493 0006 0E94 0000 		call send_byte
 2494               	.LVL224:
1184:quantum/quantum.c **** }
 2495               		.loc 1 1184 5 view .LVU529
 2496 000a 8C2F      		mov r24,r28
 2497               	/* epilogue start */
1185:quantum/quantum.c **** 
 2498               		.loc 1 1185 1 is_stmt 0 view .LVU530
 2499 000c CF91      		pop r28
1184:quantum/quantum.c **** }
 2500               		.loc 1 1184 5 view .LVU531
 2501 000e 0C94 0000 		jmp send_byte
 2502               	.LVL225:
 2503               		.cfi_endproc
 2504               	.LFE54:
 2506               		.section	.text.send_dword,"ax",@progbits
 2507               	.global	send_dword
 2509               	send_dword:
 2510               	.LVL226:
 2511               	.LFB53:
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2512               		.loc 1 1175 34 is_stmt 1 view -0
 2513               		.cfi_startproc
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2514               		.loc 1 1175 34 is_stmt 0 view .LVU533
 2515 0000 CF93      		push r28
 2516               	.LCFI51:
 2517               		.cfi_def_cfa_offset 3
 2518               		.cfi_offset 28, -2
 2519 0002 DF93      		push r29
 2520               	.LCFI52:
 2521               		.cfi_def_cfa_offset 4
 2522               		.cfi_offset 29, -3
 2523               	/* prologue: function */
 2524               	/* frame size = 0 */
 2525               	/* stack size = 2 */
 2526               	.L__stack_usage = 2
 2527 0004 D62F      		mov r29,r22
 2528 0006 C72F      		mov r28,r23
1176:quantum/quantum.c ****     send_word(word);
 2529               		.loc 1 1176 5 is_stmt 1 view .LVU534
 2530               	.LVL227:
1177:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2531               		.loc 1 1177 5 view .LVU535
 2532 0008 0E94 0000 		call send_word
 2533               	.LVL228:
1178:quantum/quantum.c **** }
 2534               		.loc 1 1178 5 view .LVU536
 2535 000c 8D2F      		mov r24,r29
 2536 000e 9C2F      		mov r25,r28
 2537               	/* epilogue start */
1179:quantum/quantum.c **** 
 2538               		.loc 1 1179 1 is_stmt 0 view .LVU537
 2539 0010 DF91      		pop r29
1179:quantum/quantum.c **** 
 2540               		.loc 1 1179 1 view .LVU538
 2541 0012 CF91      		pop r28
1178:quantum/quantum.c **** }
 2542               		.loc 1 1178 5 view .LVU539
 2543 0014 0C94 0000 		jmp send_word
 2544               	.LVL229:
1178:quantum/quantum.c **** }
 2545               		.loc 1 1178 5 view .LVU540
 2546               		.cfi_endproc
 2547               	.LFE53:
 2549               		.section	.text.hex_to_keycode,"ax",@progbits
 2550               		.weak	hex_to_keycode
 2552               	hex_to_keycode:
 2553               	.LVL230:
 2554               	.LFB57:
1209:quantum/quantum.c **** 
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** __attribute__((weak))
1212:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1213:quantum/quantum.c **** {
 2555               		.loc 1 1213 1 is_stmt 1 view -0
 2556               		.cfi_startproc
 2557               	/* prologue: function */
 2558               	/* frame size = 0 */
 2559               	/* stack size = 0 */
 2560               	.L__stack_usage = 0
1214:quantum/quantum.c ****   hex = hex & 0xF;
 2561               		.loc 1 1214 3 view .LVU542
 2562               		.loc 1 1214 7 is_stmt 0 view .LVU543
 2563 0000 282F      		mov r18,r24
 2564 0002 2F70      		andi r18,lo8(15)
 2565               	.LVL231:
1215:quantum/quantum.c ****   if (hex == 0x0) {
 2566               		.loc 1 1215 3 is_stmt 1 view .LVU544
 2567               		.loc 1 1215 6 is_stmt 0 view .LVU545
 2568 0004 01F0      		breq .L192
1216:quantum/quantum.c ****     return KC_0;
1217:quantum/quantum.c ****   } else if (hex < 0xA) {
 2569               		.loc 1 1217 10 is_stmt 1 view .LVU546
 2570 0006 822F      		mov r24,r18
 2571 0008 90E0      		ldi r25,0
 2572               		.loc 1 1217 13 is_stmt 0 view .LVU547
 2573 000a 2A30      		cpi r18,lo8(10)
 2574 000c 00F4      		brsh .L191
1218:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2575               		.loc 1 1218 5 is_stmt 1 view .LVU548
 2576               		.loc 1 1218 17 is_stmt 0 view .LVU549
 2577 000e 4D96      		adiw r24,29
 2578 0010 0895      		ret
 2579               	.L191:
1219:quantum/quantum.c ****   } else {
1220:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2580               		.loc 1 1220 5 is_stmt 1 view .LVU550
 2581               		.loc 1 1220 17 is_stmt 0 view .LVU551
 2582 0012 0697      		sbiw r24,6
 2583 0014 0895      		ret
 2584               	.L192:
1216:quantum/quantum.c ****   } else if (hex < 0xA) {
 2585               		.loc 1 1216 12 view .LVU552
 2586 0016 87E2      		ldi r24,lo8(39)
 2587 0018 90E0      		ldi r25,0
 2588               	/* epilogue start */
1221:quantum/quantum.c ****   }
1222:quantum/quantum.c **** }
 2589               		.loc 1 1222 1 view .LVU553
 2590 001a 0895      		ret
 2591               		.cfi_endproc
 2592               	.LFE57:
 2594               		.section	.text.api_send_unicode,"ax",@progbits
 2595               	.global	api_send_unicode
 2597               	api_send_unicode:
 2598               	.LVL232:
 2599               	.LFB58:
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2600               		.loc 1 1224 41 is_stmt 1 view -0
 2601               		.cfi_startproc
 2602               	/* prologue: function */
 2603               	/* frame size = 0 */
 2604               	/* stack size = 0 */
 2605               	.L__stack_usage = 0
1225:quantum/quantum.c **** #ifdef API_ENABLE
1226:quantum/quantum.c ****     uint8_t chunk[4];
1227:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1228:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1229:quantum/quantum.c **** #endif
1230:quantum/quantum.c **** }
 2606               		.loc 1 1230 1 view .LVU555
 2607               	/* epilogue start */
 2608 0000 0895      		ret
 2609               		.cfi_endproc
 2610               	.LFE58:
 2612               		.section	.text.led_set_user,"ax",@progbits
 2613               		.weak	led_set_user
 2615               	led_set_user:
 2616               	.LVL233:
 2617               	.LFB59:
1231:quantum/quantum.c **** 
1232:quantum/quantum.c **** __attribute__ ((weak))
1233:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2618               		.loc 1 1233 36 view -0
 2619               		.cfi_startproc
 2620               	/* prologue: function */
 2621               	/* frame size = 0 */
 2622               	/* stack size = 0 */
 2623               	.L__stack_usage = 0
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** }
 2624               		.loc 1 1235 1 view .LVU557
 2625               	/* epilogue start */
 2626 0000 0895      		ret
 2627               		.cfi_endproc
 2628               	.LFE59:
 2630               		.set	led_set_user.localalias,led_set_user
 2631               		.section	.text.backlight_set,"ax",@progbits
 2632               		.weak	backlight_set
 2634               	backlight_set:
 2635               	.LFB94:
 2636               		.cfi_startproc
 2637               	/* prologue: function */
 2638               	/* frame size = 0 */
 2639               	/* stack size = 0 */
 2640               	.L__stack_usage = 0
 2641               	/* epilogue start */
 2642 0000 0895      		ret
 2643               		.cfi_endproc
 2644               	.LFE94:
 2646               		.section	.text.led_set_kb,"ax",@progbits
 2647               		.weak	led_set_kb
 2649               	led_set_kb:
 2650               	.LVL234:
 2651               	.LFB60:
1236:quantum/quantum.c **** 
1237:quantum/quantum.c **** __attribute__ ((weak))
1238:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2652               		.loc 1 1238 34 view -0
 2653               		.cfi_startproc
 2654               	/* prologue: function */
 2655               	/* frame size = 0 */
 2656               	/* stack size = 0 */
 2657               	.L__stack_usage = 0
1239:quantum/quantum.c ****     led_set_user(usb_led);
 2658               		.loc 1 1239 5 view .LVU559
 2659 0000 0C94 0000 		jmp led_set_user
 2660               	.LVL235:
 2661               		.loc 1 1239 5 is_stmt 0 view .LVU560
 2662               		.cfi_endproc
 2663               	.LFE60:
 2665               		.section	.text.led_init_ports,"ax",@progbits
 2666               		.weak	led_init_ports
 2668               	led_init_ports:
 2669               	.LFB86:
 2670               		.cfi_startproc
 2671               	/* prologue: function */
 2672               	/* frame size = 0 */
 2673               	/* stack size = 0 */
 2674               	.L__stack_usage = 0
 2675               	/* epilogue start */
 2676 0000 0895      		ret
 2677               		.cfi_endproc
 2678               	.LFE86:
 2680               		.section	.text.led_set,"ax",@progbits
 2681               		.weak	led_set
 2683               	led_set:
 2684               	.LVL236:
 2685               	.LFB62:
1240:quantum/quantum.c **** }
1241:quantum/quantum.c **** 
1242:quantum/quantum.c **** __attribute__ ((weak))
1243:quantum/quantum.c **** void led_init_ports(void)
1244:quantum/quantum.c **** {
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** }
1247:quantum/quantum.c **** 
1248:quantum/quantum.c **** __attribute__ ((weak))
1249:quantum/quantum.c **** void led_set(uint8_t usb_led)
1250:quantum/quantum.c **** {
 2686               		.loc 1 1250 1 is_stmt 1 view -0
 2687               		.cfi_startproc
 2688               	/* prologue: function */
 2689               	/* frame size = 0 */
 2690               	/* stack size = 0 */
 2691               	.L__stack_usage = 0
1251:quantum/quantum.c **** 
1252:quantum/quantum.c ****   // Example LED Code
1253:quantum/quantum.c ****   //
1254:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1255:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1256:quantum/quantum.c ****     // {
1257:quantum/quantum.c ****     //     // Output high.
1258:quantum/quantum.c ****     //     DDRE |= (1<<6);
1259:quantum/quantum.c ****     //     PORTE |= (1<<6);
1260:quantum/quantum.c ****     // }
1261:quantum/quantum.c ****     // else
1262:quantum/quantum.c ****     // {
1263:quantum/quantum.c ****     //     // Output low.
1264:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1265:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1266:quantum/quantum.c ****     // }
1267:quantum/quantum.c **** 
1268:quantum/quantum.c ****   led_set_kb(usb_led);
 2692               		.loc 1 1268 3 view .LVU562
 2693 0000 0C94 0000 		jmp led_set_kb
 2694               	.LVL237:
 2695               		.loc 1 1268 3 is_stmt 0 view .LVU563
 2696               		.cfi_endproc
 2697               	.LFE62:
 2699               		.section	.text.startup_user,"ax",@progbits
 2700               		.weak	startup_user
 2702               	startup_user:
 2703               	.LFB88:
 2704               		.cfi_startproc
 2705               	/* prologue: function */
 2706               	/* frame size = 0 */
 2707               	/* stack size = 0 */
 2708               	.L__stack_usage = 0
 2709               	/* epilogue start */
 2710 0000 0895      		ret
 2711               		.cfi_endproc
 2712               	.LFE88:
 2714               		.section	.text.shutdown_user,"ax",@progbits
 2715               		.weak	shutdown_user
 2717               	shutdown_user:
 2718               	.LFB90:
 2719               		.cfi_startproc
 2720               	/* prologue: function */
 2721               	/* frame size = 0 */
 2722               	/* stack size = 0 */
 2723               	.L__stack_usage = 0
 2724               	/* epilogue start */
 2725 0000 0895      		ret
 2726               		.cfi_endproc
 2727               	.LFE90:
 2729               		.section	.progmem.data.__c.3306,"a"
 2732               	__c.3306:
 2733 0000 4445 4255 		.string	"DEBUG: enabled.\n"
 2733      473A 2065 
 2733      6E61 626C 
 2733      6564 2E0A 
 2733      00
 2734               	.global	rgb_matrix_task_counter
 2735               		.section	.bss.rgb_matrix_task_counter,"aw",@nobits
 2738               	rgb_matrix_task_counter:
 2739 0000 00        		.zero	1
 2740               		.weak	ascii_to_keycode_lut
 2741               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2744               	ascii_to_keycode_lut:
 2745 0000 00        		.string	""
 2746 0001 00        		.string	""
 2747 0002 00        		.string	""
 2748 0003 00        		.string	""
 2749 0004 00        		.string	""
 2750 0005 00        		.string	""
 2751 0006 00        		.string	""
 2752 0007 00        		.string	""
 2753 0008 2A2B 2800 		.string	"*+("
 2754 000c 00        		.string	""
 2755 000d 00        		.string	""
 2756 000e 00        		.string	""
 2757 000f 00        		.string	""
 2758 0010 00        		.string	""
 2759 0011 00        		.string	""
 2760 0012 00        		.string	""
 2761 0013 00        		.string	""
 2762 0014 00        		.string	""
 2763 0015 00        		.string	""
 2764 0016 00        		.string	""
 2765 0017 00        		.string	""
 2766 0018 00        		.string	""
 2767 0019 00        		.string	""
 2768 001a 00        		.string	""
 2769 001b 2900      		.string	")"
 2770 001d 00        		.string	""
 2771 001e 00        		.string	""
 2772 001f 00        		.string	""
 2773 0020 2C1E 3420 		.ascii	",\0364 !\"$4&'%.6-78'\036\037 !\"#$%&336.78\037\004\005\006\007"
 2773      2122 2434 
 2773      2627 252E 
 2773      362D 3738 
 2773      271E 1F20 
 2774 0045 0809 0A0B 		.ascii	"\b\t\n\013\f\r\016\017\020\021\022\023\024\025\026\027\030\031"
 2774      0C0D 0E0F 
 2774      1011 1213 
 2774      1415 1617 
 2774      1819 
 2775 0057 1A1B 1C1D 		.ascii	"\032\033\034\035/10#-5\004\005\006\007\b\t\n\013\f\r\016\017"
 2775      2F31 3023 
 2775      2D35 0405 
 2775      0607 0809 
 2775      0A0B 0C0D 
 2776 006d 1011 1213 		.ascii	"\020\021\022\023\024\025\026\027\030\031\032\033\034\035/105"
 2776      1415 1617 
 2776      1819 1A1B 
 2776      1C1D 2F31 
 2776      3035 
 2777 007f 4C        		.ascii	"L"
 2778               		.weak	ascii_to_shift_lut
 2779               		.section	.progmem.data.ascii_to_shift_lut,"a"
 2782               	ascii_to_shift_lut:
 2783 0000 00        		.byte	0
 2784 0001 00        		.byte	0
 2785 0002 00        		.byte	0
 2786 0003 00        		.byte	0
 2787 0004 00        		.byte	0
 2788 0005 00        		.byte	0
 2789 0006 00        		.byte	0
 2790 0007 00        		.byte	0
 2791 0008 00        		.byte	0
 2792 0009 00        		.byte	0
 2793 000a 00        		.byte	0
 2794 000b 00        		.byte	0
 2795 000c 00        		.byte	0
 2796 000d 00        		.byte	0
 2797 000e 00        		.byte	0
 2798 000f 00        		.byte	0
 2799 0010 00        		.byte	0
 2800 0011 00        		.byte	0
 2801 0012 00        		.byte	0
 2802 0013 00        		.byte	0
 2803 0014 00        		.byte	0
 2804 0015 00        		.byte	0
 2805 0016 00        		.byte	0
 2806 0017 00        		.byte	0
 2807 0018 00        		.byte	0
 2808 0019 00        		.byte	0
 2809 001a 00        		.byte	0
 2810 001b 00        		.byte	0
 2811 001c 00        		.byte	0
 2812 001d 00        		.byte	0
 2813 001e 00        		.byte	0
 2814 001f 00        		.byte	0
 2815 0020 00        		.byte	0
 2816 0021 01        		.byte	1
 2817 0022 01        		.byte	1
 2818 0023 01        		.byte	1
 2819 0024 01        		.byte	1
 2820 0025 01        		.byte	1
 2821 0026 01        		.byte	1
 2822 0027 00        		.byte	0
 2823 0028 01        		.byte	1
 2824 0029 01        		.byte	1
 2825 002a 01        		.byte	1
 2826 002b 01        		.byte	1
 2827 002c 00        		.byte	0
 2828 002d 00        		.byte	0
 2829 002e 00        		.byte	0
 2830 002f 00        		.byte	0
 2831 0030 00        		.byte	0
 2832 0031 00        		.byte	0
 2833 0032 00        		.byte	0
 2834 0033 00        		.byte	0
 2835 0034 00        		.byte	0
 2836 0035 00        		.byte	0
 2837 0036 00        		.byte	0
 2838 0037 00        		.byte	0
 2839 0038 00        		.byte	0
 2840 0039 00        		.byte	0
 2841 003a 01        		.byte	1
 2842 003b 00        		.byte	0
 2843 003c 01        		.byte	1
 2844 003d 00        		.byte	0
 2845 003e 01        		.byte	1
 2846 003f 01        		.byte	1
 2847 0040 01        		.byte	1
 2848 0041 01        		.byte	1
 2849 0042 01        		.byte	1
 2850 0043 01        		.byte	1
 2851 0044 01        		.byte	1
 2852 0045 01        		.byte	1
 2853 0046 01        		.byte	1
 2854 0047 01        		.byte	1
 2855 0048 01        		.byte	1
 2856 0049 01        		.byte	1
 2857 004a 01        		.byte	1
 2858 004b 01        		.byte	1
 2859 004c 01        		.byte	1
 2860 004d 01        		.byte	1
 2861 004e 01        		.byte	1
 2862 004f 01        		.byte	1
 2863 0050 01        		.byte	1
 2864 0051 01        		.byte	1
 2865 0052 01        		.byte	1
 2866 0053 01        		.byte	1
 2867 0054 01        		.byte	1
 2868 0055 01        		.byte	1
 2869 0056 01        		.byte	1
 2870 0057 01        		.byte	1
 2871 0058 01        		.byte	1
 2872 0059 01        		.byte	1
 2873 005a 01        		.byte	1
 2874 005b 00        		.byte	0
 2875 005c 00        		.byte	0
 2876 005d 00        		.byte	0
 2877 005e 01        		.byte	1
 2878 005f 01        		.byte	1
 2879 0060 00        		.byte	0
 2880 0061 00        		.byte	0
 2881 0062 00        		.byte	0
 2882 0063 00        		.byte	0
 2883 0064 00        		.byte	0
 2884 0065 00        		.byte	0
 2885 0066 00        		.byte	0
 2886 0067 00        		.byte	0
 2887 0068 00        		.byte	0
 2888 0069 00        		.byte	0
 2889 006a 00        		.byte	0
 2890 006b 00        		.byte	0
 2891 006c 00        		.byte	0
 2892 006d 00        		.byte	0
 2893 006e 00        		.byte	0
 2894 006f 00        		.byte	0
 2895 0070 00        		.byte	0
 2896 0071 00        		.byte	0
 2897 0072 00        		.byte	0
 2898 0073 00        		.byte	0
 2899 0074 00        		.byte	0
 2900 0075 00        		.byte	0
 2901 0076 00        		.byte	0
 2902 0077 00        		.byte	0
 2903 0078 00        		.byte	0
 2904 0079 00        		.byte	0
 2905 007a 00        		.byte	0
 2906 007b 01        		.byte	1
 2907 007c 01        		.byte	1
 2908 007d 01        		.byte	1
 2909 007e 01        		.byte	1
 2910 007f 00        		.byte	0
 2911               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 2914               	grave_esc_was_shifted:
 2915 0000 00        		.zero	1
 2916               		.section	.bss.scs_timer,"aw",@nobits
 2919               	scs_timer:
 2920 0000 0000 0000 		.zero	4
 2921               		.section	.bss.shift_interrupted,"aw",@nobits
 2924               	shift_interrupted:
 2925 0000 0000      		.zero	2
 2926               		.text
 2927               	.Letext0:
 2928               		.file 4 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdint.h"
 2929               		.file 5 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/lib/avr-gcc/9/gcc/avr/9.3.0/include/stddef.h"
 2930               		.file 6 "./tmk_core/common/keyboard.h"
 2931               		.file 7 "./tmk_core/common/action.h"
 2932               		.file 8 "./tmk_core/common/report.h"
 2933               		.file 9 "./tmk_core/common/host.h"
 2934               		.file 10 "./tmk_core/common/avr/xprintf.h"
 2935               		.file 11 "./tmk_core/common/debug.h"
 2936               		.file 12 "quantum/keycode_config.h"
 2937               		.file 13 "./tmk_core/common/keycode.h"
 2938               		.file 14 "quantum/quantum_keycodes.h"
 2939               		.file 15 "quantum/keymap.h"
 2940               		.file 16 "./tmk_core/common/action_layer.h"
 2941               		.file 17 "./tmk_core/common/timer.h"
 2942               		.file 18 "./tmk_core/common/action_util.h"
 2943               		.file 19 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdlib.h"
 2944               		.file 20 "./quantum/process_keycode/process_tap_dance.h"
 2945               		.file 21 "quantum/quantum.h"
 2946               		.file 22 "./tmk_core/protocol/lufa/outputselect.h"
 2947               		.file 23 "./tmk_core/common/backlight.h"
 2948               		.file 24 "./tmk_core/common/eeconfig.h"
 2949               		.file 25 "./quantum/process_keycode/process_leader.h"
 2950               		.file 26 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:178    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:191    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:224    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:238    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:257    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:272    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:287    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:302    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:317    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:332    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:347    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:362    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:377    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:392    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:407    .text.register_code16:0000000000000000 register_code16
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:465    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:523    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:545    .text.process_record_user:0000000000000000 process_record_user
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:567    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:587    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:638    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2924   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2914   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2919   .bss.scs_timer:0000000000000000 scs_timer
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2732   .progmem.data.__c.3306:0000000000000000 __c.3306
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1262   .text.send_char:0000000000000000 send_char
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2744   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2782   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1363   .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1542   .text.send_string:0000000000000000 send_string
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1562   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1792   .text.send_string_P:0000000000000000 send_string_P
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1812   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:1886   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2110   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2181   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2313   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2330   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2350   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2365   .text.send_nibble:0000000000000000 send_nibble
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2434   .text.send_byte:0000000000000000 send_byte
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2474   .text.send_word:0000000000000000 send_word
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2509   .text.send_dword:0000000000000000 send_dword
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2552   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2597   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2615   .text.led_set_user:0000000000000000 led_set_user
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2615   .text.led_set_user:0000000000000000 led_set_user.localalias
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2634   .text.backlight_set:0000000000000000 backlight_set
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2649   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2668   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2683   .text.led_set:0000000000000000 led_set
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2702   .text.startup_user:0000000000000000 startup_user
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2717   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccmvcjV0.s:2738   .bss.rgb_matrix_task_counter:0000000000000000 rgb_matrix_task_counter

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
preprocess_tap_dance
process_tap_dance
process_leader
get_mods
add_key
timer_elapsed
unregister_mods
debug_config
xputs
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
timer_read
register_mods
del_key
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
