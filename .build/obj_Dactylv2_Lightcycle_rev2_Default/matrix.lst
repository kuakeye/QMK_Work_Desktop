   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB11:
  15               		.file 1 "keyboards/Dactylv2_Lightcycle/matrix.c"
   1:keyboards/Dactylv2_Lightcycle/matrix.c **** /*
   2:keyboards/Dactylv2_Lightcycle/matrix.c **** Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:keyboards/Dactylv2_Lightcycle/matrix.c **** 
   4:keyboards/Dactylv2_Lightcycle/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:keyboards/Dactylv2_Lightcycle/matrix.c **** it under the terms of the GNU General Public License as published by
   6:keyboards/Dactylv2_Lightcycle/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:keyboards/Dactylv2_Lightcycle/matrix.c **** (at your option) any later version.
   8:keyboards/Dactylv2_Lightcycle/matrix.c **** 
   9:keyboards/Dactylv2_Lightcycle/matrix.c **** This program is distributed in the hope that it will be useful,
  10:keyboards/Dactylv2_Lightcycle/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:keyboards/Dactylv2_Lightcycle/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:keyboards/Dactylv2_Lightcycle/matrix.c **** GNU General Public License for more details.
  13:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  14:keyboards/Dactylv2_Lightcycle/matrix.c **** You should have received a copy of the GNU General Public License
  15:keyboards/Dactylv2_Lightcycle/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:keyboards/Dactylv2_Lightcycle/matrix.c **** */
  17:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  18:keyboards/Dactylv2_Lightcycle/matrix.c **** /*
  19:keyboards/Dactylv2_Lightcycle/matrix.c ****  * scan matrix
  20:keyboards/Dactylv2_Lightcycle/matrix.c ****  */
  21:keyboards/Dactylv2_Lightcycle/matrix.c **** #include <stdint.h>
  22:keyboards/Dactylv2_Lightcycle/matrix.c **** #include <stdbool.h>
  23:keyboards/Dactylv2_Lightcycle/matrix.c **** #include <avr/io.h>
  24:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "wait.h"
  25:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "print.h"
  26:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "debug.h"
  27:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "util.h"
  28:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "matrix.h"
  29:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "split_util.h"
  30:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "pro_micro.h"
  31:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "config.h"
  32:keyboards/Dactylv2_Lightcycle/matrix.c **** #include "timer.h"
  33:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  34:keyboards/Dactylv2_Lightcycle/matrix.c **** #ifdef USE_I2C
  35:keyboards/Dactylv2_Lightcycle/matrix.c **** #  include "i2c.h"
  36:keyboards/Dactylv2_Lightcycle/matrix.c **** #else // USE_SERIAL
  37:keyboards/Dactylv2_Lightcycle/matrix.c **** #  include "serial.h"
  38:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
  39:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  40:keyboards/Dactylv2_Lightcycle/matrix.c **** #ifndef DEBOUNCING_DELAY
  41:keyboards/Dactylv2_Lightcycle/matrix.c **** #   define DEBOUNCING_DELAY 5
  42:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
  43:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  44:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DEBOUNCING_DELAY > 0)
  45:keyboards/Dactylv2_Lightcycle/matrix.c ****     static uint16_t debouncing_time;
  46:keyboards/Dactylv2_Lightcycle/matrix.c ****     static bool debouncing = false;
  47:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
  48:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  49:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (MATRIX_COLS <= 8)
  50:keyboards/Dactylv2_Lightcycle/matrix.c **** #    define print_matrix_header()  print("\nr/c 01234567\n")
  51:keyboards/Dactylv2_Lightcycle/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse8(matrix_get_row(row))
  52:keyboards/Dactylv2_Lightcycle/matrix.c **** #    define matrix_bitpop(i)       bitpop(matrix[i])
  53:keyboards/Dactylv2_Lightcycle/matrix.c **** #    define ROW_SHIFTER ((uint8_t)1)
  54:keyboards/Dactylv2_Lightcycle/matrix.c **** #else
  55:keyboards/Dactylv2_Lightcycle/matrix.c **** #    error "Currently only supports 8 COLS"
  56:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
  57:keyboards/Dactylv2_Lightcycle/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  58:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  59:keyboards/Dactylv2_Lightcycle/matrix.c **** #define ERROR_DISCONNECT_COUNT 5
  60:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  61:keyboards/Dactylv2_Lightcycle/matrix.c **** #define ROWS_PER_HAND (MATRIX_ROWS/2)
  62:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  63:keyboards/Dactylv2_Lightcycle/matrix.c **** static uint8_t error_count = 0;
  64:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  65:keyboards/Dactylv2_Lightcycle/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  66:keyboards/Dactylv2_Lightcycle/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  67:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  68:keyboards/Dactylv2_Lightcycle/matrix.c **** /* matrix state(1:on, 0:off) */
  69:keyboards/Dactylv2_Lightcycle/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  70:keyboards/Dactylv2_Lightcycle/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  71:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  72:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
  73:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void init_cols(void);
  74:keyboards/Dactylv2_Lightcycle/matrix.c ****     static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row);
  75:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void unselect_rows(void);
  76:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void select_row(uint8_t row);
  77:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void unselect_row(uint8_t row);
  78:keyboards/Dactylv2_Lightcycle/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
  79:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void init_rows(void);
  80:keyboards/Dactylv2_Lightcycle/matrix.c ****     static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col);
  81:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void unselect_cols(void);
  82:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void unselect_col(uint8_t col);
  83:keyboards/Dactylv2_Lightcycle/matrix.c ****     static void select_col(uint8_t col);
  84:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
  85:keyboards/Dactylv2_Lightcycle/matrix.c **** __attribute__ ((weak))
  86:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_init_quantum(void) {
  87:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_init_kb();
  88:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  89:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  90:keyboards/Dactylv2_Lightcycle/matrix.c **** __attribute__ ((weak))
  91:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_scan_quantum(void) {
  92:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_scan_kb();
  93:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  94:keyboards/Dactylv2_Lightcycle/matrix.c **** 
  95:keyboards/Dactylv2_Lightcycle/matrix.c **** __attribute__ ((weak))
  96:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_init_kb(void) {
  97:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_init_user();
  98:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  99:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 100:keyboards/Dactylv2_Lightcycle/matrix.c **** __attribute__ ((weak))
 101:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_scan_kb(void) {
 102:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_scan_user();
 103:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 104:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 105:keyboards/Dactylv2_Lightcycle/matrix.c **** __attribute__ ((weak))
 106:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_init_user(void) {
  16               		.loc 1 106 29 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 107:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  22               		.loc 1 107 1 view .LVU1
  23               	/* epilogue start */
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE11:
  28               		.set	matrix_init_user.localalias,matrix_init_user
  29               		.section	.text.matrix_init_kb,"ax",@progbits
  30               		.weak	matrix_init_kb
  32               	matrix_init_kb:
  33               	.LFB9:
  96:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_init_user();
  34               		.loc 1 96 27 view -0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  97:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  40               		.loc 1 97 5 view .LVU3
  41 0000 0C94 0000 		jmp matrix_init_user
  42               	.LVL0:
  43               		.cfi_endproc
  44               	.LFE9:
  46               		.section	.text.matrix_init_quantum,"ax",@progbits
  47               		.weak	matrix_init_quantum
  49               	matrix_init_quantum:
  50               	.LFB7:
  86:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_init_kb();
  51               		.loc 1 86 32 view -0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  87:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  57               		.loc 1 87 5 view .LVU5
  58 0000 0C94 0000 		jmp matrix_init_kb
  59               	.LVL1:
  60               		.cfi_endproc
  61               	.LFE7:
  63               		.section	.text.matrix_scan_user,"ax",@progbits
  64               		.weak	matrix_scan_user
  66               	matrix_scan_user:
  67               	.LFB31:
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  73               	/* epilogue start */
  74 0000 0895      		ret
  75               		.cfi_endproc
  76               	.LFE31:
  78               		.section	.text.matrix_scan_kb,"ax",@progbits
  79               		.weak	matrix_scan_kb
  81               	matrix_scan_kb:
  82               	.LFB10:
 101:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_scan_user();
  83               		.loc 1 101 27 view -0
  84               		.cfi_startproc
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
 102:keyboards/Dactylv2_Lightcycle/matrix.c **** }
  89               		.loc 1 102 5 view .LVU7
  90 0000 0C94 0000 		jmp matrix_scan_user
  91               	.LVL2:
  92               		.cfi_endproc
  93               	.LFE10:
  95               		.section	.text.matrix_scan_quantum,"ax",@progbits
  96               		.weak	matrix_scan_quantum
  98               	matrix_scan_quantum:
  99               	.LFB8:
  91:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_scan_kb();
 100               		.loc 1 91 32 view -0
 101               		.cfi_startproc
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 0 */
 105               	.L__stack_usage = 0
  92:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 106               		.loc 1 92 5 view .LVU9
 107 0000 0C94 0000 		jmp matrix_scan_kb
 108               	.LVL3:
 109               		.cfi_endproc
 110               	.LFE8:
 112               		.section	.text.matrix_rows,"ax",@progbits
 113               	.global	matrix_rows
 115               	matrix_rows:
 116               	.LFB13:
 108:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 109:keyboards/Dactylv2_Lightcycle/matrix.c **** __attribute__ ((weak))
 110:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_scan_user(void) {
 111:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 112:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 113:keyboards/Dactylv2_Lightcycle/matrix.c **** inline
 114:keyboards/Dactylv2_Lightcycle/matrix.c **** uint8_t matrix_rows(void)
 115:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 117               		.loc 1 115 1 view -0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 116:keyboards/Dactylv2_Lightcycle/matrix.c ****     return MATRIX_ROWS;
 123               		.loc 1 116 5 view .LVU11
 117:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 124               		.loc 1 117 1 is_stmt 0 view .LVU12
 125 0000 8EE0      		ldi r24,lo8(14)
 126               	/* epilogue start */
 127 0002 0895      		ret
 128               		.cfi_endproc
 129               	.LFE13:
 131               		.section	.text.matrix_cols,"ax",@progbits
 132               	.global	matrix_cols
 134               	matrix_cols:
 135               	.LFB14:
 118:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 119:keyboards/Dactylv2_Lightcycle/matrix.c **** inline
 120:keyboards/Dactylv2_Lightcycle/matrix.c **** uint8_t matrix_cols(void)
 121:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 136               		.loc 1 121 1 is_stmt 1 view -0
 137               		.cfi_startproc
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
 122:keyboards/Dactylv2_Lightcycle/matrix.c ****     return MATRIX_COLS;
 142               		.loc 1 122 5 view .LVU14
 123:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 143               		.loc 1 123 1 is_stmt 0 view .LVU15
 144 0000 86E0      		ldi r24,lo8(6)
 145               	/* epilogue start */
 146 0002 0895      		ret
 147               		.cfi_endproc
 148               	.LFE14:
 150               		.section	.text.matrix_init,"ax",@progbits
 151               	.global	matrix_init
 153               	matrix_init:
 154               	.LFB15:
 124:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 125:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_init(void)
 126:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 155               		.loc 1 126 1 is_stmt 1 view -0
 156               		.cfi_startproc
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
 127:keyboards/Dactylv2_Lightcycle/matrix.c ****     debug_enable = true;
 161               		.loc 1 127 5 view .LVU17
 128:keyboards/Dactylv2_Lightcycle/matrix.c ****     debug_matrix = true;
 162               		.loc 1 128 5 view .LVU18
 129:keyboards/Dactylv2_Lightcycle/matrix.c ****     debug_mouse = true;
 163               		.loc 1 129 5 view .LVU19
 127:keyboards/Dactylv2_Lightcycle/matrix.c ****     debug_enable = true;
 164               		.loc 1 127 18 is_stmt 0 view .LVU20
 165 0000 8091 0000 		lds r24,debug_config
 166 0004 8B60      		ori r24,lo8(11)
 167 0006 8093 0000 		sts debug_config,r24
 130:keyboards/Dactylv2_Lightcycle/matrix.c ****     // initialize row and col
 131:keyboards/Dactylv2_Lightcycle/matrix.c ****     unselect_rows();
 168               		.loc 1 131 5 is_stmt 1 view .LVU21
 169               	.LBB23:
 170               	.LBI23:
 132:keyboards/Dactylv2_Lightcycle/matrix.c ****     init_cols();
 133:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 134:keyboards/Dactylv2_Lightcycle/matrix.c ****     TX_RX_LED_INIT;
 135:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 136:keyboards/Dactylv2_Lightcycle/matrix.c ****     // initialize matrix state: all keys off
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 138:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 139:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix_debouncing[i] = 0;
 140:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 141:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 142:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_init_quantum();
 143:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 144:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 145:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 146:keyboards/Dactylv2_Lightcycle/matrix.c **** uint8_t _matrix_scan(void)
 147:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 148:keyboards/Dactylv2_Lightcycle/matrix.c ****     int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
 149:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 150:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Set row, read cols
 151:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t current_row = 0; current_row < ROWS_PER_HAND; current_row++) {
 152:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 153:keyboards/Dactylv2_Lightcycle/matrix.c ****             bool matrix_changed = read_cols_on_row(matrix_debouncing+offset, current_row);
 154:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 155:keyboards/Dactylv2_Lightcycle/matrix.c ****             if (matrix_changed) {
 156:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing = true;
 157:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing_time = timer_read();
 158:keyboards/Dactylv2_Lightcycle/matrix.c ****                 PORTD ^= (1 << 2);
 159:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 160:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 161:keyboards/Dactylv2_Lightcycle/matrix.c **** #       else
 162:keyboards/Dactylv2_Lightcycle/matrix.c ****             read_cols_on_row(matrix+offset, current_row);
 163:keyboards/Dactylv2_Lightcycle/matrix.c **** #       endif
 164:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 165:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 166:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 167:keyboards/Dactylv2_Lightcycle/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
 168:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Set col, read rows
 169:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 170:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 171:keyboards/Dactylv2_Lightcycle/matrix.c ****             bool matrix_changed = read_rows_on_col(matrix_debouncing+offset, current_col);
 172:keyboards/Dactylv2_Lightcycle/matrix.c ****             if (matrix_changed) {
 173:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing = true;
 174:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing_time = timer_read();
 175:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 176:keyboards/Dactylv2_Lightcycle/matrix.c **** #       else
 177:keyboards/Dactylv2_Lightcycle/matrix.c ****              read_rows_on_col(matrix+offset, current_col);
 178:keyboards/Dactylv2_Lightcycle/matrix.c **** #       endif
 179:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 180:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 181:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 182:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 183:keyboards/Dactylv2_Lightcycle/matrix.c **** #   if (DEBOUNCING_DELAY > 0)
 184:keyboards/Dactylv2_Lightcycle/matrix.c ****         if (debouncing && (timer_elapsed(debouncing_time) > DEBOUNCING_DELAY)) {
 185:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 186:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 187:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 188:keyboards/Dactylv2_Lightcycle/matrix.c ****             debouncing = false;
 189:keyboards/Dactylv2_Lightcycle/matrix.c ****         }
 190:keyboards/Dactylv2_Lightcycle/matrix.c **** #   endif
 191:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 192:keyboards/Dactylv2_Lightcycle/matrix.c ****     return 1;
 193:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 194:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 195:keyboards/Dactylv2_Lightcycle/matrix.c **** #ifdef USE_I2C
 196:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 197:keyboards/Dactylv2_Lightcycle/matrix.c **** // Get rows from other half over i2c
 198:keyboards/Dactylv2_Lightcycle/matrix.c **** int i2c_transaction(void) {
 199:keyboards/Dactylv2_Lightcycle/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 200:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 201:keyboards/Dactylv2_Lightcycle/matrix.c ****     int err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_WRITE);
 202:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (err) goto i2c_error;
 203:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 204:keyboards/Dactylv2_Lightcycle/matrix.c ****     // start of matrix stored at 0x00
 205:keyboards/Dactylv2_Lightcycle/matrix.c ****     err = i2c_master_write(0x00);
 206:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (err) goto i2c_error;
 207:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 208:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Start read
 209:keyboards/Dactylv2_Lightcycle/matrix.c ****     err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_READ);
 210:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (err) goto i2c_error;
 211:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 212:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (!err) {
 213:keyboards/Dactylv2_Lightcycle/matrix.c ****         int i;
 214:keyboards/Dactylv2_Lightcycle/matrix.c ****         for (i = 0; i < ROWS_PER_HAND-1; ++i) {
 215:keyboards/Dactylv2_Lightcycle/matrix.c ****             matrix[slaveOffset+i] = i2c_master_read(I2C_ACK);
 216:keyboards/Dactylv2_Lightcycle/matrix.c ****         }
 217:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = i2c_master_read(I2C_NACK);
 218:keyboards/Dactylv2_Lightcycle/matrix.c ****         i2c_master_stop();
 219:keyboards/Dactylv2_Lightcycle/matrix.c ****     } else {
 220:keyboards/Dactylv2_Lightcycle/matrix.c **** i2c_error: // the cable is disconnceted, or something else went wrong
 221:keyboards/Dactylv2_Lightcycle/matrix.c ****         i2c_reset_state();
 222:keyboards/Dactylv2_Lightcycle/matrix.c ****         return err;
 223:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 224:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 225:keyboards/Dactylv2_Lightcycle/matrix.c ****     return 0;
 226:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 227:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 228:keyboards/Dactylv2_Lightcycle/matrix.c **** #else // USE_SERIAL
 229:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 230:keyboards/Dactylv2_Lightcycle/matrix.c **** int serial_transaction(void) {
 231:keyboards/Dactylv2_Lightcycle/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 232:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 233:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (serial_update_buffers()) {
 234:keyboards/Dactylv2_Lightcycle/matrix.c ****         return 1;
 235:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 236:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 237:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 238:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 239:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 240:keyboards/Dactylv2_Lightcycle/matrix.c ****     return 0;
 241:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 242:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 243:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 244:keyboards/Dactylv2_Lightcycle/matrix.c **** uint8_t matrix_scan(void)
 245:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 246:keyboards/Dactylv2_Lightcycle/matrix.c ****     uint8_t ret = _matrix_scan();
 247:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 248:keyboards/Dactylv2_Lightcycle/matrix.c **** #ifdef USE_I2C
 249:keyboards/Dactylv2_Lightcycle/matrix.c ****     if( i2c_transaction() ) {
 250:keyboards/Dactylv2_Lightcycle/matrix.c **** #else // USE_SERIAL
 251:keyboards/Dactylv2_Lightcycle/matrix.c ****     if( serial_transaction() ) {
 252:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 253:keyboards/Dactylv2_Lightcycle/matrix.c ****         // turn on the indicator led when halves are disconnected
 254:keyboards/Dactylv2_Lightcycle/matrix.c ****         TXLED1;
 255:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 256:keyboards/Dactylv2_Lightcycle/matrix.c ****         error_count++;
 257:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 258:keyboards/Dactylv2_Lightcycle/matrix.c ****         if (error_count > ERROR_DISCONNECT_COUNT) {
 259:keyboards/Dactylv2_Lightcycle/matrix.c ****             // reset other half if disconnected
 260:keyboards/Dactylv2_Lightcycle/matrix.c ****             int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 262:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 263:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 264:keyboards/Dactylv2_Lightcycle/matrix.c ****         }
 265:keyboards/Dactylv2_Lightcycle/matrix.c ****     } else {
 266:keyboards/Dactylv2_Lightcycle/matrix.c ****         // turn off the indicator led on no error
 267:keyboards/Dactylv2_Lightcycle/matrix.c ****         TXLED0;
 268:keyboards/Dactylv2_Lightcycle/matrix.c ****         error_count = 0;
 269:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 270:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_scan_quantum();
 271:keyboards/Dactylv2_Lightcycle/matrix.c ****     return ret;
 272:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 273:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 274:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_slave_scan(void) {
 275:keyboards/Dactylv2_Lightcycle/matrix.c ****     _matrix_scan();
 276:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 277:keyboards/Dactylv2_Lightcycle/matrix.c ****     int offset = (isLeftHand) ? 0 : ROWS_PER_HAND;
 278:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 279:keyboards/Dactylv2_Lightcycle/matrix.c **** #ifdef USE_I2C
 280:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 281:keyboards/Dactylv2_Lightcycle/matrix.c ****         i2c_slave_buffer[i] = matrix[offset+i];
 282:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 283:keyboards/Dactylv2_Lightcycle/matrix.c **** #else // USE_SERIAL
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 285:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 286:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 287:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 288:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 289:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 290:keyboards/Dactylv2_Lightcycle/matrix.c **** bool matrix_is_modified(void)
 291:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 292:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (debouncing) return false;
 293:keyboards/Dactylv2_Lightcycle/matrix.c ****     return true;
 294:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 295:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 296:keyboards/Dactylv2_Lightcycle/matrix.c **** inline
 297:keyboards/Dactylv2_Lightcycle/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 298:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 299:keyboards/Dactylv2_Lightcycle/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 300:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 301:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 302:keyboards/Dactylv2_Lightcycle/matrix.c **** inline
 303:keyboards/Dactylv2_Lightcycle/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 304:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 305:keyboards/Dactylv2_Lightcycle/matrix.c ****     return matrix[row];
 306:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 307:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 308:keyboards/Dactylv2_Lightcycle/matrix.c **** void matrix_print(void)
 309:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 310:keyboards/Dactylv2_Lightcycle/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 313:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 314:keyboards/Dactylv2_Lightcycle/matrix.c ****         print("\n");
 315:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 316:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 317:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 318:keyboards/Dactylv2_Lightcycle/matrix.c **** uint8_t matrix_key_count(void)
 319:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 320:keyboards/Dactylv2_Lightcycle/matrix.c ****     uint8_t count = 0;
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 322:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 323:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 324:keyboards/Dactylv2_Lightcycle/matrix.c ****     return count;
 325:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 326:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 327:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 328:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 329:keyboards/Dactylv2_Lightcycle/matrix.c **** static void init_cols(void)
 330:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 331:keyboards/Dactylv2_Lightcycle/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 332:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = col_pins[x];
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 334:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 335:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 336:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 337:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 338:keyboards/Dactylv2_Lightcycle/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row)
 339:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 340:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Store last value of row prior to reading
 341:keyboards/Dactylv2_Lightcycle/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
 342:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 343:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Clear data in matrix row
 344:keyboards/Dactylv2_Lightcycle/matrix.c ****     current_matrix[current_row] = 0;
 345:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 346:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Select row and wait for row selecton to stabilize
 347:keyboards/Dactylv2_Lightcycle/matrix.c ****     select_row(current_row);
 348:keyboards/Dactylv2_Lightcycle/matrix.c ****     wait_us(30);
 349:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 350:keyboards/Dactylv2_Lightcycle/matrix.c ****     // For each col...
 351:keyboards/Dactylv2_Lightcycle/matrix.c ****     for(uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 352:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 353:keyboards/Dactylv2_Lightcycle/matrix.c ****         // Select the col pin to read (active low)
 354:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = col_pins[col_index];
 355:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 356:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 357:keyboards/Dactylv2_Lightcycle/matrix.c ****         // Populate the matrix row with the state of the col pin
 358:keyboards/Dactylv2_Lightcycle/matrix.c ****         current_matrix[current_row] |=  pin_state ? 0 : (ROW_SHIFTER << col_index);
 359:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 360:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 361:keyboards/Dactylv2_Lightcycle/matrix.c ****     // Unselect row
 362:keyboards/Dactylv2_Lightcycle/matrix.c ****     unselect_row(current_row);
 363:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 364:keyboards/Dactylv2_Lightcycle/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 365:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 366:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 367:keyboards/Dactylv2_Lightcycle/matrix.c **** static void select_row(uint8_t row)
 368:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 369:keyboards/Dactylv2_Lightcycle/matrix.c ****     uint8_t pin = row_pins[row];
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 371:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 372:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 373:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 374:keyboards/Dactylv2_Lightcycle/matrix.c **** static void unselect_row(uint8_t row)
 375:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 376:keyboards/Dactylv2_Lightcycle/matrix.c ****     uint8_t pin = row_pins[row];
 377:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 378:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 379:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 380:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 381:keyboards/Dactylv2_Lightcycle/matrix.c **** static void unselect_rows(void)
 171               		.loc 1 381 13 view .LVU22
 172               	.LBE23:
 382:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 383:keyboards/Dactylv2_Lightcycle/matrix.c ****     for(uint8_t x = 0; x < ROWS_PER_HAND; x++) {
 173               		.loc 1 383 5 view .LVU23
 174               	.LBB26:
 175               	.LBB24:
 176               		.loc 1 383 9 view .LVU24
 177               	.LVL4:
 178               		.loc 1 383 24 view .LVU25
 179 000a A0E0      		ldi r26,lo8(row_pins)
 180 000c B0E0      		ldi r27,hi8(row_pins)
 181               	.LBB25:
 384:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 385:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 182               		.loc 1 385 38 is_stmt 0 view .LVU26
 183 000e 61E0      		ldi r22,lo8(1)
 184 0010 70E0      		ldi r23,0
 185               	.LVL5:
 186               	.L10:
 384:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 187               		.loc 1 384 9 is_stmt 1 view .LVU27
 384:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 188               		.loc 1 384 17 is_stmt 0 view .LVU28
 189 0012 8D91      		ld r24,X+
 190               	.LVL6:
 191               		.loc 1 385 9 is_stmt 1 view .LVU29
 192               		.loc 1 385 34 is_stmt 0 view .LVU30
 193 0014 E82F      		mov r30,r24
 194 0016 E295      		swap r30
 195 0018 EF70      		andi r30,lo8(15)
 196 001a F0E0      		ldi r31,0
 197 001c 41A1      		ldd r20,Z+33
 198               		.loc 1 385 38 view .LVU31
 199 001e 8F70      		andi r24,lo8(15)
 200               	.LVL7:
 201               		.loc 1 385 38 view .LVU32
 202 0020 9B01      		movw r18,r22
 203 0022 00C0      		rjmp 2f
 204               		1:
 205 0024 220F      		lsl r18
 206               		2:
 207 0026 8A95      		dec r24
 208 0028 02F4      		brpl 1b
 209               		.loc 1 385 34 view .LVU33
 210 002a 922F      		mov r25,r18
 211 002c 9095      		com r25
 212 002e 9423      		and r25,r20
 213 0030 91A3      		std Z+33,r25
 214               	.LVL8:
 386:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 215               		.loc 1 386 9 is_stmt 1 view .LVU34
 216               		.loc 1 386 34 is_stmt 0 view .LVU35
 217 0032 82A1      		ldd r24,Z+34
 218 0034 822B      		or r24,r18
 219 0036 82A3      		std Z+34,r24
 220               	.LBE25:
 383:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 221               		.loc 1 383 43 is_stmt 1 view .LVU36
 222               	.LVL9:
 383:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 223               		.loc 1 383 24 view .LVU37
 383:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 224               		.loc 1 383 5 is_stmt 0 view .LVU38
 225 0038 80E0      		ldi r24,hi8(row_pins+7)
 226 003a A030      		cpi r26,lo8(row_pins+7)
 227 003c B807      		cpc r27,r24
 228 003e 01F4      		brne .L10
 229 0040 A0E0      		ldi r26,lo8(col_pins)
 230 0042 B0E0      		ldi r27,hi8(col_pins)
 231               	.LVL10:
 383:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = row_pins[x];
 232               		.loc 1 383 5 view .LVU39
 233               	.LBE24:
 234               	.LBE26:
 235               	.LBB27:
 236               	.LBB28:
 237               	.LBB29:
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 238               		.loc 1 333 38 view .LVU40
 239 0044 61E0      		ldi r22,lo8(1)
 240 0046 70E0      		ldi r23,0
 241               	.L11:
 242               	.LVL11:
 332:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 243               		.loc 1 332 9 is_stmt 1 view .LVU41
 332:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 244               		.loc 1 332 17 is_stmt 0 view .LVU42
 245 0048 8D91      		ld r24,X+
 246               	.LVL12:
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 247               		.loc 1 333 9 is_stmt 1 view .LVU43
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 248               		.loc 1 333 34 is_stmt 0 view .LVU44
 249 004a E82F      		mov r30,r24
 250 004c E295      		swap r30
 251 004e EF70      		andi r30,lo8(15)
 252 0050 F0E0      		ldi r31,0
 253 0052 41A1      		ldd r20,Z+33
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 254               		.loc 1 333 38 view .LVU45
 255 0054 8F70      		andi r24,lo8(15)
 256               	.LVL13:
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 257               		.loc 1 333 38 view .LVU46
 258 0056 9B01      		movw r18,r22
 259 0058 00C0      		rjmp 2f
 260               		1:
 261 005a 220F      		lsl r18
 262               		2:
 263 005c 8A95      		dec r24
 264 005e 02F4      		brpl 1b
 333:keyboards/Dactylv2_Lightcycle/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 265               		.loc 1 333 34 view .LVU47
 266 0060 922F      		mov r25,r18
 267 0062 9095      		com r25
 268 0064 9423      		and r25,r20
 269 0066 91A3      		std Z+33,r25
 270               	.LVL14:
 334:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 271               		.loc 1 334 9 is_stmt 1 view .LVU48
 334:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 272               		.loc 1 334 34 is_stmt 0 view .LVU49
 273 0068 82A1      		ldd r24,Z+34
 274 006a 822B      		or r24,r18
 275 006c 82A3      		std Z+34,r24
 276               	.LBE29:
 331:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = col_pins[x];
 277               		.loc 1 331 41 is_stmt 1 view .LVU50
 278               	.LVL15:
 331:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = col_pins[x];
 279               		.loc 1 331 24 view .LVU51
 331:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = col_pins[x];
 280               		.loc 1 331 5 is_stmt 0 view .LVU52
 281 006e 80E0      		ldi r24,hi8(col_pins+6)
 282 0070 A030      		cpi r26,lo8(col_pins+6)
 283 0072 B807      		cpc r27,r24
 284 0074 01F4      		brne .L11
 285               	.LVL16:
 331:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin = col_pins[x];
 286               		.loc 1 331 5 view .LVU53
 287               	.LBE28:
 288               	.LBE27:
 134:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 289               		.loc 1 134 5 is_stmt 1 view .LVU54
 290 0076 559A      		sbi 0xa,5
 291 0078 209A      		sbi 0x4,0
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 292               		.loc 1 137 5 view .LVU55
 293               	.LBB30:
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 294               		.loc 1 137 10 view .LVU56
 295               	.LVL17:
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 296               		.loc 1 137 23 view .LVU57
 297 007a E0E0      		ldi r30,lo8(matrix)
 298 007c F0E0      		ldi r31,hi8(matrix)
 299 007e A0E0      		ldi r26,lo8(matrix_debouncing)
 300 0080 B0E0      		ldi r27,hi8(matrix_debouncing)
 301 0082 80E0      		ldi r24,lo8(matrix+14)
 302 0084 90E0      		ldi r25,hi8(matrix+14)
 303               	.LVL18:
 304               	.L12:
 138:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix_debouncing[i] = 0;
 305               		.loc 1 138 9 discriminator 3 view .LVU58
 138:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix_debouncing[i] = 0;
 306               		.loc 1 138 19 is_stmt 0 discriminator 3 view .LVU59
 307 0086 1192      		st Z+,__zero_reg__
 308               	.LVL19:
 139:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 309               		.loc 1 139 9 is_stmt 1 discriminator 3 view .LVU60
 139:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 310               		.loc 1 139 30 is_stmt 0 discriminator 3 view .LVU61
 311 0088 1D92      		st X+,__zero_reg__
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 312               		.loc 1 137 40 is_stmt 1 discriminator 3 view .LVU62
 313               	.LVL20:
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 314               		.loc 1 137 23 discriminator 3 view .LVU63
 137:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[i] = 0;
 315               		.loc 1 137 5 is_stmt 0 discriminator 3 view .LVU64
 316 008a 8E17      		cp r24,r30
 317 008c 9F07      		cpc r25,r31
 318 008e 01F4      		brne .L12
 319               	.LBE30:
 142:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 320               		.loc 1 142 5 is_stmt 1 view .LVU65
 321 0090 0C94 0000 		jmp matrix_init_quantum
 322               	.LVL21:
 142:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 323               		.loc 1 142 5 is_stmt 0 view .LVU66
 324               		.cfi_endproc
 325               	.LFE15:
 327               		.section	.text._matrix_scan,"ax",@progbits
 328               	.global	_matrix_scan
 330               	_matrix_scan:
 331               	.LFB16:
 147:keyboards/Dactylv2_Lightcycle/matrix.c ****     int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
 332               		.loc 1 147 1 is_stmt 1 view -0
 333               		.cfi_startproc
 334 0000 3F92      		push r3
 335               	.LCFI0:
 336               		.cfi_def_cfa_offset 3
 337               		.cfi_offset 3, -2
 338 0002 4F92      		push r4
 339               	.LCFI1:
 340               		.cfi_def_cfa_offset 4
 341               		.cfi_offset 4, -3
 342 0004 5F92      		push r5
 343               	.LCFI2:
 344               		.cfi_def_cfa_offset 5
 345               		.cfi_offset 5, -4
 346 0006 6F92      		push r6
 347               	.LCFI3:
 348               		.cfi_def_cfa_offset 6
 349               		.cfi_offset 6, -5
 350 0008 7F92      		push r7
 351               	.LCFI4:
 352               		.cfi_def_cfa_offset 7
 353               		.cfi_offset 7, -6
 354 000a 8F92      		push r8
 355               	.LCFI5:
 356               		.cfi_def_cfa_offset 8
 357               		.cfi_offset 8, -7
 358 000c 9F92      		push r9
 359               	.LCFI6:
 360               		.cfi_def_cfa_offset 9
 361               		.cfi_offset 9, -8
 362 000e AF92      		push r10
 363               	.LCFI7:
 364               		.cfi_def_cfa_offset 10
 365               		.cfi_offset 10, -9
 366 0010 BF92      		push r11
 367               	.LCFI8:
 368               		.cfi_def_cfa_offset 11
 369               		.cfi_offset 11, -10
 370 0012 CF92      		push r12
 371               	.LCFI9:
 372               		.cfi_def_cfa_offset 12
 373               		.cfi_offset 12, -11
 374 0014 DF92      		push r13
 375               	.LCFI10:
 376               		.cfi_def_cfa_offset 13
 377               		.cfi_offset 13, -12
 378 0016 EF92      		push r14
 379               	.LCFI11:
 380               		.cfi_def_cfa_offset 14
 381               		.cfi_offset 14, -13
 382 0018 FF92      		push r15
 383               	.LCFI12:
 384               		.cfi_def_cfa_offset 15
 385               		.cfi_offset 15, -14
 386 001a 0F93      		push r16
 387               	.LCFI13:
 388               		.cfi_def_cfa_offset 16
 389               		.cfi_offset 16, -15
 390 001c 1F93      		push r17
 391               	.LCFI14:
 392               		.cfi_def_cfa_offset 17
 393               		.cfi_offset 17, -16
 394 001e CF93      		push r28
 395               	.LCFI15:
 396               		.cfi_def_cfa_offset 18
 397               		.cfi_offset 28, -17
 398 0020 DF93      		push r29
 399               	.LCFI16:
 400               		.cfi_def_cfa_offset 19
 401               		.cfi_offset 29, -18
 402 0022 00D0      		rcall .
 403 0024 00D0      		rcall .
 404               	.LCFI17:
 405               		.cfi_def_cfa_offset 23
 406 0026 CDB7      		in r28,__SP_L__
 407 0028 DEB7      		in r29,__SP_H__
 408               	.LCFI18:
 409               		.cfi_def_cfa_register 28
 410               	/* prologue: function */
 411               	/* frame size = 4 */
 412               	/* stack size = 21 */
 413               	.L__stack_usage = 21
 148:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 414               		.loc 1 148 5 view .LVU68
 148:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 415               		.loc 1 148 29 is_stmt 0 view .LVU69
 416 002a 8091 0000 		lds r24,isLeftHand
 148:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 417               		.loc 1 148 33 view .LVU70
 418 002e 8111      		cpse r24,__zero_reg__
 419 0030 00C0      		rjmp .L26
 420 0032 87E0      		ldi r24,lo8(7)
 421 0034 90E0      		ldi r25,0
 422 0036 9A83      		std Y+2,r25
 423 0038 8983      		std Y+1,r24
 424               	.L17:
 425               	.LVL22:
 151:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 426               		.loc 1 151 5 is_stmt 1 discriminator 4 view .LVU71
 427               	.LBB44:
 151:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 428               		.loc 1 151 10 discriminator 4 view .LVU72
 151:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 429               		.loc 1 151 35 discriminator 4 view .LVU73
 430 003a 0981      		ldd r16,Y+1
 431 003c 1A81      		ldd r17,Y+2
 432 003e 0050      		subi r16,lo8(-(matrix_debouncing))
 433 0040 1040      		sbci r17,hi8(-(matrix_debouncing))
 434 0042 80E0      		ldi r24,lo8(row_pins)
 435 0044 E82E      		mov r14,r24
 436 0046 80E0      		ldi r24,hi8(row_pins)
 437 0048 F82E      		mov r15,r24
 438               	.LBE44:
 148:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 439               		.loc 1 148 33 is_stmt 0 discriminator 4 view .LVU74
 440 004a 6801      		movw r12,r16
 441               	.LBB68:
 442               	.LBB45:
 443               	.LBB46:
 444               	.LBB47:
 445               	.LBB48:
 446               	.LBB49:
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 447               		.loc 1 370 34 discriminator 4 view .LVU75
 448 004c AA24      		clr r10
 449 004e A394      		inc r10
 450 0050 B12C      		mov r11,__zero_reg__
 451               	.LBE49:
 452               	.LBE48:
 453               	.LBE47:
 454               	.LBE46:
 156:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing_time = timer_read();
 455               		.loc 1 156 28 discriminator 4 view .LVU76
 456 0052 8824      		clr r8
 457 0054 8394      		inc r8
 158:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 458               		.loc 1 158 23 discriminator 4 view .LVU77
 459 0056 24E0      		ldi r18,lo8(4)
 460 0058 922E      		mov r9,r18
 461               	.LVL23:
 462               	.L21:
 153:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 463               		.loc 1 153 13 is_stmt 1 view .LVU78
 464               	.LBB65:
 465               	.LBI46:
 338:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 466               		.loc 1 338 13 view .LVU79
 467               	.LBB63:
 341:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 468               		.loc 1 341 5 view .LVU80
 341:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 469               		.loc 1 341 18 is_stmt 0 view .LVU81
 470 005a D601      		movw r26,r12
 471 005c 6D90      		ld r6,X+
 472 005e 6D01      		movw r12,r26
 473               	.LVL24:
 344:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 474               		.loc 1 344 5 is_stmt 1 view .LVU82
 344:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 475               		.loc 1 344 33 is_stmt 0 view .LVU83
 476 0060 FD01      		movw r30,r26
 477 0062 1292      		st -Z,__zero_reg__
 478 0064 FC83      		std Y+4,r31
 479 0066 EB83      		std Y+3,r30
 347:keyboards/Dactylv2_Lightcycle/matrix.c ****     wait_us(30);
 480               		.loc 1 347 5 is_stmt 1 view .LVU84
 481               	.LVL25:
 482               	.LBB51:
 483               	.LBI48:
 367:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 484               		.loc 1 367 13 view .LVU85
 485               	.LBB50:
 369:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 486               		.loc 1 369 5 view .LVU86
 369:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 487               		.loc 1 369 13 is_stmt 0 view .LVU87
 488 0068 D701      		movw r26,r14
 489 006a 8D91      		ld r24,X+
 490 006c 7D01      		movw r14,r26
 491               	.LVL26:
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 492               		.loc 1 370 5 is_stmt 1 view .LVU88
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 493               		.loc 1 370 30 is_stmt 0 view .LVU89
 494 006e E82F      		mov r30,r24
 495 0070 E295      		swap r30
 496 0072 EF70      		andi r30,lo8(15)
 497 0074 F0E0      		ldi r31,0
 498 0076 91A1      		ldd r25,Z+33
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 499               		.loc 1 370 34 view .LVU90
 500 0078 8F70      		andi r24,lo8(15)
 501               	.LVL27:
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 502               		.loc 1 370 34 view .LVU91
 503 007a B501      		movw r22,r10
 504 007c 00C0      		rjmp 2f
 505               		1:
 506 007e 660F      		lsl r22
 507               		2:
 508 0080 8A95      		dec r24
 509 0082 02F4      		brpl 1b
 370:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 510               		.loc 1 370 30 view .LVU92
 511 0084 892F      		mov r24,r25
 512 0086 862B      		or r24,r22
 513 0088 81A3      		std Z+33,r24
 514               	.LVL28:
 371:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 515               		.loc 1 371 5 is_stmt 1 view .LVU93
 371:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 516               		.loc 1 371 30 is_stmt 0 view .LVU94
 517 008a 82A1      		ldd r24,Z+34
 518 008c 762E      		mov r7,r22
 519 008e 7094      		com r7
 520 0090 8721      		and r24,r7
 521 0092 82A3      		std Z+34,r24
 371:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 522               		.loc 1 371 30 view .LVU95
 523               	.LBE50:
 524               	.LBE51:
 348:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 525               		.loc 1 348 5 is_stmt 1 view .LVU96
 526               	.LVL29:
 527               	.LBB52:
 528               	.LBI52:
 529               		.file 2 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_us(double __us)
 530               		.loc 2 255 1 view .LVU97
 531               	.LBB53:
 256:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
 532               		.loc 2 257 2 view .LVU98
 258:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 533               		.loc 2 261 2 view .LVU99
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 534               		.loc 2 262 2 view .LVU100
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 535               		.loc 2 263 2 view .LVU101
 264:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 536               		.loc 2 273 3 view .LVU102
 274:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 537               		.loc 2 276 2 view .LVU103
 538 0094 B0EA      		ldi r27,lo8(-96)
 539 0096 BA95      	1:	dec r27
 540 0098 01F4      		brne 1b
 541               	.LVL30:
 542               		.loc 2 276 2 is_stmt 0 view .LVU104
 543               	.LBE53:
 544               	.LBE52:
 351:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 545               		.loc 1 351 5 is_stmt 1 view .LVU105
 546               	.LBB55:
 351:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 547               		.loc 1 351 9 view .LVU106
 351:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 548               		.loc 1 351 32 view .LVU107
 549 009a 40E0      		ldi r20,lo8(col_pins)
 550 009c 50E0      		ldi r21,hi8(col_pins)
 551               	.LBE55:
 552               	.LBB58:
 553               	.LBB54:
 554               		.loc 2 276 2 is_stmt 0 view .LVU108
 555 009e 90E0      		ldi r25,0
 556 00a0 80E0      		ldi r24,0
 557               	.LVL31:
 558               	.L19:
 559               		.loc 2 276 2 view .LVU109
 560               	.LBE54:
 561               	.LBE58:
 562               	.LBB59:
 563               	.LBB56:
 354:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 564               		.loc 1 354 9 is_stmt 1 view .LVU110
 354:keyboards/Dactylv2_Lightcycle/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 565               		.loc 1 354 17 is_stmt 0 view .LVU111
 566 00a2 DA01      		movw r26,r20
 567 00a4 5D90      		ld r5,X+
 568 00a6 AD01      		movw r20,r26
 569               	.LVL32:
 355:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 570               		.loc 1 355 9 is_stmt 1 view .LVU112
 355:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 571               		.loc 1 355 30 is_stmt 0 view .LVU113
 572 00a8 252D      		mov r18,r5
 573 00aa 2295      		swap r18
 574 00ac 2F70      		andi r18,lo8(15)
 575 00ae 30E0      		ldi r19,0
 576 00b0 D901      		movw r26,r18
 577 00b2 9096      		adiw r26,32
 578 00b4 3C90      		ld r3,X
 579               	.LVL33:
 358:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 580               		.loc 1 358 9 is_stmt 1 view .LVU114
 358:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 581               		.loc 1 358 37 is_stmt 0 view .LVU115
 582 00b6 AB81      		ldd r26,Y+3
 583 00b8 BC81      		ldd r27,Y+4
 584 00ba 4C90      		ld r4,X
 355:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 585               		.loc 1 355 51 view .LVU116
 586 00bc 352D      		mov r19,r5
 587 00be 3F70      		andi r19,lo8(15)
 588               	.LVL34:
 355:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 589               		.loc 1 355 51 view .LVU117
 590 00c0 D501      		movw r26,r10
 591 00c2 00C0      		rjmp 2f
 592               		1:
 593 00c4 AA0F      		lsl r26
 594 00c6 BB1F      		rol r27
 595               		2:
 596 00c8 3A95      		dec r19
 597 00ca 02F4      		brpl 1b
 598 00cc 9D01      		movw r18,r26
 355:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 599               		.loc 1 355 49 view .LVU118
 600 00ce 2321      		and r18,r3
 358:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 601               		.loc 1 358 37 view .LVU119
 602 00d0 01F0      		breq .+2
 603 00d2 00C0      		rjmp .L27
 604 00d4 2A2D      		mov r18,r10
 605 00d6 082E      		mov r0,r24
 606 00d8 00C0      		rjmp 2f
 607               		1:
 608 00da 220F      		lsl r18
 609               		2:
 610 00dc 0A94      		dec r0
 611 00de 02F4      		brpl 1b
 612               	.L18:
 613 00e0 2429      		or r18,r4
 614 00e2 AB81      		ldd r26,Y+3
 615 00e4 BC81      		ldd r27,Y+4
 616 00e6 2C93      		st X,r18
 617               	.LBE56:
 351:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 618               		.loc 1 351 57 is_stmt 1 view .LVU120
 619               	.LVL35:
 351:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 620               		.loc 1 351 32 view .LVU121
 621 00e8 0196      		adiw r24,1
 622               	.LVL36:
 351:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 623               		.loc 1 351 5 is_stmt 0 view .LVU122
 624 00ea 8630      		cpi r24,6
 625 00ec 9105      		cpc r25,__zero_reg__
 626 00ee 01F4      		brne .L19
 627               	.LBE59:
 362:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 628               		.loc 1 362 5 is_stmt 1 view .LVU123
 629               	.LVL37:
 630               	.LBB60:
 631               	.LBI60:
 374:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 632               		.loc 1 374 13 view .LVU124
 633               	.LBB61:
 376:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 634               		.loc 1 376 5 view .LVU125
 377:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 635               		.loc 1 377 5 view .LVU126
 377:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 636               		.loc 1 377 30 is_stmt 0 view .LVU127
 637 00f0 81A1      		ldd r24,Z+33
 638               	.LVL38:
 377:keyboards/Dactylv2_Lightcycle/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 639               		.loc 1 377 30 view .LVU128
 640 00f2 7822      		and r7,r24
 641 00f4 71A2      		std Z+33,r7
 378:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 642               		.loc 1 378 5 is_stmt 1 view .LVU129
 378:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 643               		.loc 1 378 30 is_stmt 0 view .LVU130
 644 00f6 82A1      		ldd r24,Z+34
 645 00f8 682B      		or r22,r24
 646 00fa 62A3      		std Z+34,r22
 378:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 647               		.loc 1 378 30 view .LVU131
 648               	.LBE61:
 649               	.LBE60:
 364:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 650               		.loc 1 364 5 is_stmt 1 view .LVU132
 651               	.LVL39:
 364:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 652               		.loc 1 364 5 is_stmt 0 view .LVU133
 653               	.LBE63:
 654               	.LBE65:
 155:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing = true;
 655               		.loc 1 155 13 is_stmt 1 view .LVU134
 155:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing = true;
 656               		.loc 1 155 16 is_stmt 0 view .LVU135
 657 00fc 8C91      		ld r24,X
 658 00fe 6816      		cp r6,r24
 659 0100 01F0      		breq .L20
 156:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing_time = timer_read();
 660               		.loc 1 156 17 is_stmt 1 view .LVU136
 156:keyboards/Dactylv2_Lightcycle/matrix.c ****                 debouncing_time = timer_read();
 661               		.loc 1 156 28 is_stmt 0 view .LVU137
 662 0102 8092 0000 		sts debouncing,r8
 157:keyboards/Dactylv2_Lightcycle/matrix.c ****                 PORTD ^= (1 << 2);
 663               		.loc 1 157 17 is_stmt 1 view .LVU138
 157:keyboards/Dactylv2_Lightcycle/matrix.c ****                 PORTD ^= (1 << 2);
 664               		.loc 1 157 35 is_stmt 0 view .LVU139
 665 0106 0E94 0000 		call timer_read
 666               	.LVL40:
 157:keyboards/Dactylv2_Lightcycle/matrix.c ****                 PORTD ^= (1 << 2);
 667               		.loc 1 157 33 view .LVU140
 668 010a 9093 0000 		sts debouncing_time+1,r25
 669 010e 8093 0000 		sts debouncing_time,r24
 158:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 670               		.loc 1 158 17 is_stmt 1 view .LVU141
 158:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 671               		.loc 1 158 23 is_stmt 0 view .LVU142
 672 0112 8BB1      		in r24,0xb
 673 0114 8925      		eor r24,r9
 674 0116 8BB9      		out 0xb,r24
 675               	.L20:
 676               	.LBE45:
 151:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 677               		.loc 1 151 64 is_stmt 1 discriminator 2 view .LVU143
 151:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 678               		.loc 1 151 35 discriminator 2 view .LVU144
 151:keyboards/Dactylv2_Lightcycle/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 679               		.loc 1 151 5 is_stmt 0 discriminator 2 view .LVU145
 680 0118 B0E0      		ldi r27,lo8(row_pins+7)
 681 011a EB16      		cp r14,r27
 682 011c B0E0      		ldi r27,hi8(row_pins+7)
 683 011e FB06      		cpc r15,r27
 684 0120 01F0      		breq .+2
 685 0122 00C0      		rjmp .L21
 686               	.LBE68:
 184:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 687               		.loc 1 184 9 is_stmt 1 view .LVU146
 184:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 688               		.loc 1 184 12 is_stmt 0 view .LVU147
 689 0124 8091 0000 		lds r24,debouncing
 690 0128 8823      		tst r24
 691 012a 01F0      		breq .L23
 184:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 692               		.loc 1 184 28 discriminator 1 view .LVU148
 693 012c 8091 0000 		lds r24,debouncing_time
 694 0130 9091 0000 		lds r25,debouncing_time+1
 695 0134 0E94 0000 		call timer_elapsed
 696               	.LVL41:
 184:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 697               		.loc 1 184 24 discriminator 1 view .LVU149
 698 0138 0697      		sbiw r24,6
 699 013a 00F0      		brlo .L23
 700 013c E981      		ldd r30,Y+1
 701 013e FA81      		ldd r31,Y+2
 702 0140 E050      		subi r30,lo8(-(matrix))
 703 0142 F040      		sbci r31,hi8(-(matrix))
 704 0144 FA83      		std Y+2,r31
 705 0146 E983      		std Y+1,r30
 706               	.LBB69:
 185:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 707               		.loc 1 185 26 view .LVU150
 708 0148 80E0      		ldi r24,0
 709               	.L25:
 710               	.LVL42:
 186:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 711               		.loc 1 186 17 is_stmt 1 discriminator 3 view .LVU151
 186:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 712               		.loc 1 186 53 is_stmt 0 discriminator 3 view .LVU152
 713 014a D801      		movw r26,r16
 714 014c 9D91      		ld r25,X+
 715 014e 8D01      		movw r16,r26
 186:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 716               		.loc 1 186 34 discriminator 3 view .LVU153
 717 0150 E981      		ldd r30,Y+1
 718 0152 FA81      		ldd r31,Y+2
 719 0154 9193      		st Z+,r25
 720 0156 FA83      		std Y+2,r31
 721 0158 E983      		std Y+1,r30
 185:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 722               		.loc 1 185 52 is_stmt 1 discriminator 3 view .LVU154
 185:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 723               		.loc 1 185 53 is_stmt 0 discriminator 3 view .LVU155
 724 015a 8F5F      		subi r24,lo8(-(1))
 725               	.LVL43:
 185:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 726               		.loc 1 185 33 is_stmt 1 discriminator 3 view .LVU156
 185:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 727               		.loc 1 185 13 is_stmt 0 discriminator 3 view .LVU157
 728 015c 8730      		cpi r24,lo8(7)
 729 015e 01F4      		brne .L25
 730               	.LBE69:
 188:keyboards/Dactylv2_Lightcycle/matrix.c ****         }
 731               		.loc 1 188 13 is_stmt 1 view .LVU158
 188:keyboards/Dactylv2_Lightcycle/matrix.c ****         }
 732               		.loc 1 188 24 is_stmt 0 view .LVU159
 733 0160 1092 0000 		sts debouncing,__zero_reg__
 734               	.LVL44:
 735               	.L23:
 192:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 736               		.loc 1 192 5 is_stmt 1 view .LVU160
 193:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 737               		.loc 1 193 1 is_stmt 0 view .LVU161
 738 0164 81E0      		ldi r24,lo8(1)
 739               	/* epilogue start */
 740 0166 0F90      		pop __tmp_reg__
 741 0168 0F90      		pop __tmp_reg__
 742 016a 0F90      		pop __tmp_reg__
 743 016c 0F90      		pop __tmp_reg__
 744 016e DF91      		pop r29
 745 0170 CF91      		pop r28
 746 0172 1F91      		pop r17
 747 0174 0F91      		pop r16
 748 0176 FF90      		pop r15
 749 0178 EF90      		pop r14
 750 017a DF90      		pop r13
 751 017c CF90      		pop r12
 193:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 752               		.loc 1 193 1 view .LVU162
 753 017e BF90      		pop r11
 754 0180 AF90      		pop r10
 755 0182 9F90      		pop r9
 756 0184 8F90      		pop r8
 757 0186 7F90      		pop r7
 758 0188 6F90      		pop r6
 193:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 759               		.loc 1 193 1 view .LVU163
 760 018a 5F90      		pop r5
 761               	.LVL45:
 193:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 762               		.loc 1 193 1 view .LVU164
 763 018c 4F90      		pop r4
 764 018e 3F90      		pop r3
 765 0190 0895      		ret
 766               	.L26:
 148:keyboards/Dactylv2_Lightcycle/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 767               		.loc 1 148 33 view .LVU165
 768 0192 1A82      		std Y+2,__zero_reg__
 769 0194 1982      		std Y+1,__zero_reg__
 770 0196 00C0      		rjmp .L17
 771               	.LVL46:
 772               	.L27:
 773               	.LBB70:
 774               	.LBB67:
 775               	.LBB66:
 776               	.LBB64:
 777               	.LBB62:
 778               	.LBB57:
 358:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 779               		.loc 1 358 37 view .LVU166
 780 0198 20E0      		ldi r18,0
 781 019a 00C0      		rjmp .L18
 782               	.LBE57:
 783               	.LBE62:
 784               	.LBE64:
 785               	.LBE66:
 786               	.LBE67:
 787               	.LBE70:
 788               		.cfi_endproc
 789               	.LFE16:
 791               		.section	.text.serial_transaction,"ax",@progbits
 792               	.global	serial_transaction
 794               	serial_transaction:
 795               	.LFB17:
 230:keyboards/Dactylv2_Lightcycle/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 796               		.loc 1 230 30 is_stmt 1 view -0
 797               		.cfi_startproc
 798 0000 CF93      		push r28
 799               	.LCFI19:
 800               		.cfi_def_cfa_offset 3
 801               		.cfi_offset 28, -2
 802 0002 DF93      		push r29
 803               	.LCFI20:
 804               		.cfi_def_cfa_offset 4
 805               		.cfi_offset 29, -3
 806               	/* prologue: function */
 807               	/* frame size = 0 */
 808               	/* stack size = 2 */
 809               	.L__stack_usage = 2
 231:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 810               		.loc 1 231 5 view .LVU168
 231:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 811               		.loc 1 231 36 is_stmt 0 view .LVU169
 812 0004 8091 0000 		lds r24,isLeftHand
 231:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 813               		.loc 1 231 54 view .LVU170
 814 0008 D0E0      		ldi r29,0
 815 000a C0E0      		ldi r28,0
 816 000c 8823      		tst r24
 817 000e 01F0      		breq .L32
 818 0010 C7E0      		ldi r28,lo8(7)
 819 0012 D0E0      		ldi r29,0
 820               	.L32:
 821               	.LVL47:
 233:keyboards/Dactylv2_Lightcycle/matrix.c ****         return 1;
 822               		.loc 1 233 5 is_stmt 1 discriminator 4 view .LVU171
 233:keyboards/Dactylv2_Lightcycle/matrix.c ****         return 1;
 823               		.loc 1 233 9 is_stmt 0 discriminator 4 view .LVU172
 824 0014 0E94 0000 		call serial_update_buffers
 825               	.LVL48:
 233:keyboards/Dactylv2_Lightcycle/matrix.c ****         return 1;
 826               		.loc 1 233 8 discriminator 4 view .LVU173
 827 0018 0097      		sbiw r24,0
 828 001a 01F4      		brne .L36
 829 001c C050      		subi r28,lo8(-(matrix))
 830 001e D040      		sbci r29,hi8(-(matrix))
 831               	.LVL49:
 832               	.LBB71:
 237:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 833               		.loc 1 237 14 view .LVU174
 834 0020 30E0      		ldi r19,0
 835 0022 20E0      		ldi r18,0
 836               	.LVL50:
 837               	.L34:
 238:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 838               		.loc 1 238 9 is_stmt 1 discriminator 3 view .LVU175
 238:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 839               		.loc 1 238 52 is_stmt 0 discriminator 3 view .LVU176
 840 0024 F901      		movw r30,r18
 841 0026 E050      		subi r30,lo8(-(serial_slave_buffer))
 842 0028 F040      		sbci r31,hi8(-(serial_slave_buffer))
 843 002a 4081      		ld r20,Z
 238:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 844               		.loc 1 238 31 discriminator 3 view .LVU177
 845 002c 4993      		st Y+,r20
 237:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 846               		.loc 1 237 40 is_stmt 1 discriminator 3 view .LVU178
 847 002e 2F5F      		subi r18,-1
 848 0030 3F4F      		sbci r19,-1
 849               	.LVL51:
 237:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 850               		.loc 1 237 21 discriminator 3 view .LVU179
 237:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 851               		.loc 1 237 5 is_stmt 0 discriminator 3 view .LVU180
 852 0032 2730      		cpi r18,7
 853 0034 3105      		cpc r19,__zero_reg__
 854 0036 01F4      		brne .L34
 855               	.LVL52:
 856               	.L31:
 857               	/* epilogue start */
 237:keyboards/Dactylv2_Lightcycle/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 858               		.loc 1 237 5 discriminator 3 view .LVU181
 859               	.LBE71:
 241:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 860               		.loc 1 241 1 view .LVU182
 861 0038 DF91      		pop r29
 862 003a CF91      		pop r28
 863 003c 0895      		ret
 864               	.LVL53:
 865               	.L36:
 234:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 866               		.loc 1 234 16 view .LVU183
 867 003e 81E0      		ldi r24,lo8(1)
 868 0040 90E0      		ldi r25,0
 869 0042 00C0      		rjmp .L31
 870               		.cfi_endproc
 871               	.LFE17:
 873               		.section	.text.matrix_scan,"ax",@progbits
 874               	.global	matrix_scan
 876               	matrix_scan:
 877               	.LFB18:
 245:keyboards/Dactylv2_Lightcycle/matrix.c ****     uint8_t ret = _matrix_scan();
 878               		.loc 1 245 1 is_stmt 1 view -0
 879               		.cfi_startproc
 880 0000 CF93      		push r28
 881               	.LCFI21:
 882               		.cfi_def_cfa_offset 3
 883               		.cfi_offset 28, -2
 884               	/* prologue: function */
 885               	/* frame size = 0 */
 886               	/* stack size = 1 */
 887               	.L__stack_usage = 1
 246:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 888               		.loc 1 246 5 view .LVU185
 246:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 889               		.loc 1 246 19 is_stmt 0 view .LVU186
 890 0002 0E94 0000 		call _matrix_scan
 891               	.LVL54:
 892 0006 C82F      		mov r28,r24
 893               	.LVL55:
 251:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 894               		.loc 1 251 5 is_stmt 1 view .LVU187
 251:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 895               		.loc 1 251 9 is_stmt 0 view .LVU188
 896 0008 0E94 0000 		call serial_transaction
 897               	.LVL56:
 251:keyboards/Dactylv2_Lightcycle/matrix.c **** #endif
 898               		.loc 1 251 7 view .LVU189
 899 000c 892B      		or r24,r25
 900 000e 01F0      		breq .L39
 254:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 901               		.loc 1 254 9 is_stmt 1 view .LVU190
 902 0010 5D98      		cbi 0xb,5
 256:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 903               		.loc 1 256 9 view .LVU191
 256:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 904               		.loc 1 256 20 is_stmt 0 view .LVU192
 905 0012 9091 0000 		lds r25,error_count
 906 0016 9F5F      		subi r25,lo8(-(1))
 907 0018 9093 0000 		sts error_count,r25
 258:keyboards/Dactylv2_Lightcycle/matrix.c ****             // reset other half if disconnected
 908               		.loc 1 258 9 is_stmt 1 view .LVU193
 258:keyboards/Dactylv2_Lightcycle/matrix.c ****             // reset other half if disconnected
 909               		.loc 1 258 12 is_stmt 0 view .LVU194
 910 001c 9630      		cpi r25,lo8(6)
 911 001e 00F0      		brlo .L41
 912               	.LBB72:
 260:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 913               		.loc 1 260 13 is_stmt 1 view .LVU195
 260:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 914               		.loc 1 260 44 is_stmt 0 view .LVU196
 915 0020 8091 0000 		lds r24,isLeftHand
 260:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 916               		.loc 1 260 62 view .LVU197
 917 0024 F0E0      		ldi r31,0
 918 0026 E0E0      		ldi r30,0
 919 0028 8823      		tst r24
 920 002a 01F0      		breq .L42
 921 002c E7E0      		ldi r30,lo8(7)
 922 002e F0E0      		ldi r31,0
 923               	.L42:
 924               	.LVL57:
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 925               		.loc 1 261 13 is_stmt 1 discriminator 4 view .LVU198
 926               	.LBB73:
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 927               		.loc 1 261 18 discriminator 4 view .LVU199
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 928               		.loc 1 261 29 discriminator 4 view .LVU200
 929 0030 E050      		subi r30,lo8(-(matrix))
 930 0032 F040      		sbci r31,hi8(-(matrix))
 931               	.LBE73:
 260:keyboards/Dactylv2_Lightcycle/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 932               		.loc 1 260 62 is_stmt 0 discriminator 4 view .LVU201
 933 0034 87E0      		ldi r24,lo8(7)
 934 0036 90E0      		ldi r25,0
 935               	.LVL58:
 936               	.L43:
 937               	.LBB74:
 262:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 938               		.loc 1 262 17 is_stmt 1 discriminator 3 view .LVU202
 262:keyboards/Dactylv2_Lightcycle/matrix.c ****             }
 939               		.loc 1 262 39 is_stmt 0 discriminator 3 view .LVU203
 940 0038 1192      		st Z+,__zero_reg__
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 941               		.loc 1 261 48 is_stmt 1 discriminator 3 view .LVU204
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 942               		.loc 1 261 29 discriminator 3 view .LVU205
 943 003a 0197      		sbiw r24,1
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 944               		.loc 1 261 13 is_stmt 0 discriminator 3 view .LVU206
 945 003c 01F4      		brne .L43
 946               	.L41:
 261:keyboards/Dactylv2_Lightcycle/matrix.c ****                 matrix[slaveOffset+i] = 0;
 947               		.loc 1 261 13 discriminator 3 view .LVU207
 948               	.LBE74:
 949               	.LBE72:
 270:keyboards/Dactylv2_Lightcycle/matrix.c ****     return ret;
 950               		.loc 1 270 5 is_stmt 1 view .LVU208
 951 003e 0E94 0000 		call matrix_scan_quantum
 952               	.LVL59:
 271:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 953               		.loc 1 271 5 view .LVU209
 272:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 954               		.loc 1 272 1 is_stmt 0 view .LVU210
 955 0042 8C2F      		mov r24,r28
 956               	/* epilogue start */
 957 0044 CF91      		pop r28
 958               	.LVL60:
 272:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 959               		.loc 1 272 1 view .LVU211
 960 0046 0895      		ret
 961               	.LVL61:
 962               	.L39:
 267:keyboards/Dactylv2_Lightcycle/matrix.c ****         error_count = 0;
 963               		.loc 1 267 9 is_stmt 1 view .LVU212
 964 0048 5D9A      		sbi 0xb,5
 268:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 965               		.loc 1 268 9 view .LVU213
 268:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 966               		.loc 1 268 21 is_stmt 0 view .LVU214
 967 004a 1092 0000 		sts error_count,__zero_reg__
 968 004e 00C0      		rjmp .L41
 969               		.cfi_endproc
 970               	.LFE18:
 972               		.section	.text.matrix_slave_scan,"ax",@progbits
 973               	.global	matrix_slave_scan
 975               	matrix_slave_scan:
 976               	.LFB19:
 274:keyboards/Dactylv2_Lightcycle/matrix.c ****     _matrix_scan();
 977               		.loc 1 274 30 is_stmt 1 view -0
 978               		.cfi_startproc
 979               	/* prologue: function */
 980               	/* frame size = 0 */
 981               	/* stack size = 0 */
 982               	.L__stack_usage = 0
 275:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 983               		.loc 1 275 5 view .LVU216
 984 0000 0E94 0000 		call _matrix_scan
 985               	.LVL62:
 277:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 986               		.loc 1 277 5 view .LVU217
 277:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 987               		.loc 1 277 31 is_stmt 0 view .LVU218
 988 0004 8091 0000 		lds r24,isLeftHand
 277:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 989               		.loc 1 277 35 view .LVU219
 990 0008 E7E0      		ldi r30,lo8(7)
 991 000a F0E0      		ldi r31,0
 992 000c 8823      		tst r24
 993 000e 01F0      		breq .L48
 994 0010 F0E0      		ldi r31,0
 995 0012 E0E0      		ldi r30,0
 996               	.L48:
 997               	.LVL63:
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 998               		.loc 1 284 5 is_stmt 1 discriminator 4 view .LVU220
 999               	.LBB75:
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1000               		.loc 1 284 10 discriminator 4 view .LVU221
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1001               		.loc 1 284 21 discriminator 4 view .LVU222
 1002 0014 E050      		subi r30,lo8(-(matrix))
 1003 0016 F040      		sbci r31,hi8(-(matrix))
 1004               	.LVL64:
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1005               		.loc 1 284 14 is_stmt 0 discriminator 4 view .LVU223
 1006 0018 90E0      		ldi r25,0
 1007 001a 80E0      		ldi r24,0
 1008               	.LVL65:
 1009               	.L49:
 285:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1010               		.loc 1 285 9 is_stmt 1 discriminator 3 view .LVU224
 285:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1011               		.loc 1 285 40 is_stmt 0 discriminator 3 view .LVU225
 1012 001c 2191      		ld r18,Z+
 285:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1013               		.loc 1 285 32 discriminator 3 view .LVU226
 1014 001e DC01      		movw r26,r24
 1015 0020 A050      		subi r26,lo8(-(serial_slave_buffer))
 1016 0022 B040      		sbci r27,hi8(-(serial_slave_buffer))
 1017 0024 2C93      		st X,r18
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1018               		.loc 1 284 40 is_stmt 1 discriminator 3 view .LVU227
 1019 0026 0196      		adiw r24,1
 1020               	.LVL66:
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1021               		.loc 1 284 21 discriminator 3 view .LVU228
 284:keyboards/Dactylv2_Lightcycle/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1022               		.loc 1 284 5 is_stmt 0 discriminator 3 view .LVU229
 1023 0028 8730      		cpi r24,7
 1024 002a 9105      		cpc r25,__zero_reg__
 1025 002c 01F4      		brne .L49
 1026               	/* epilogue start */
 1027               	.LBE75:
 288:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1028               		.loc 1 288 1 view .LVU230
 1029 002e 0895      		ret
 1030               		.cfi_endproc
 1031               	.LFE19:
 1033               		.section	.text.matrix_is_modified,"ax",@progbits
 1034               	.global	matrix_is_modified
 1036               	matrix_is_modified:
 1037               	.LFB20:
 291:keyboards/Dactylv2_Lightcycle/matrix.c ****     if (debouncing) return false;
 1038               		.loc 1 291 1 is_stmt 1 view -0
 1039               		.cfi_startproc
 1040               	/* prologue: function */
 1041               	/* frame size = 0 */
 1042               	/* stack size = 0 */
 1043               	.L__stack_usage = 0
 292:keyboards/Dactylv2_Lightcycle/matrix.c ****     return true;
 1044               		.loc 1 292 5 view .LVU232
 292:keyboards/Dactylv2_Lightcycle/matrix.c ****     return true;
 1045               		.loc 1 292 8 is_stmt 0 view .LVU233
 1046 0000 9091 0000 		lds r25,debouncing
 294:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1047               		.loc 1 294 1 view .LVU234
 1048 0004 81E0      		ldi r24,lo8(1)
 1049 0006 8927      		eor r24,r25
 1050               	/* epilogue start */
 1051 0008 0895      		ret
 1052               		.cfi_endproc
 1053               	.LFE20:
 1055               		.section	.text.matrix_is_on,"ax",@progbits
 1056               	.global	matrix_is_on
 1058               	matrix_is_on:
 1059               	.LVL67:
 1060               	.LFB21:
 298:keyboards/Dactylv2_Lightcycle/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 1061               		.loc 1 298 1 is_stmt 1 view -0
 1062               		.cfi_startproc
 1063               	/* prologue: function */
 1064               	/* frame size = 0 */
 1065               	/* stack size = 0 */
 1066               	.L__stack_usage = 0
 299:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1067               		.loc 1 299 5 view .LVU236
 299:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1068               		.loc 1 299 19 is_stmt 0 view .LVU237
 1069 0000 E82F      		mov r30,r24
 1070 0002 F0E0      		ldi r31,0
 1071 0004 E050      		subi r30,lo8(-(matrix))
 1072 0006 F040      		sbci r31,hi8(-(matrix))
 1073 0008 2081      		ld r18,Z
 1074 000a 30E0      		ldi r19,0
 299:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1075               		.loc 1 299 43 view .LVU238
 1076 000c 81E0      		ldi r24,lo8(1)
 1077 000e 90E0      		ldi r25,0
 1078               	.LVL68:
 299:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1079               		.loc 1 299 43 view .LVU239
 1080 0010 00C0      		rjmp 2f
 1081               		1:
 1082 0012 880F      		lsl r24
 1083 0014 991F      		rol r25
 1084               		2:
 1085 0016 6A95      		dec r22
 1086 0018 02F4      		brpl 1b
 299:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1087               		.loc 1 299 25 view .LVU240
 1088 001a 2823      		and r18,r24
 1089 001c 3923      		and r19,r25
 1090 001e 81E0      		ldi r24,lo8(1)
 1091 0020 232B      		or r18,r19
 1092 0022 01F4      		brne .L54
 1093 0024 80E0      		ldi r24,0
 1094               	.L54:
 1095               	/* epilogue start */
 300:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1096               		.loc 1 300 1 view .LVU241
 1097 0026 0895      		ret
 1098               		.cfi_endproc
 1099               	.LFE21:
 1101               		.section	.text.matrix_get_row,"ax",@progbits
 1102               	.global	matrix_get_row
 1104               	matrix_get_row:
 1105               	.LVL69:
 1106               	.LFB22:
 304:keyboards/Dactylv2_Lightcycle/matrix.c ****     return matrix[row];
 1107               		.loc 1 304 1 is_stmt 1 view -0
 1108               		.cfi_startproc
 1109               	/* prologue: function */
 1110               	/* frame size = 0 */
 1111               	/* stack size = 0 */
 1112               	.L__stack_usage = 0
 305:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1113               		.loc 1 305 5 view .LVU243
 305:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1114               		.loc 1 305 18 is_stmt 0 view .LVU244
 1115 0000 E82F      		mov r30,r24
 1116 0002 F0E0      		ldi r31,0
 1117 0004 E050      		subi r30,lo8(-(matrix))
 1118 0006 F040      		sbci r31,hi8(-(matrix))
 306:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1119               		.loc 1 306 1 view .LVU245
 1120 0008 8081      		ld r24,Z
 1121               	.LVL70:
 1122               	/* epilogue start */
 306:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1123               		.loc 1 306 1 view .LVU246
 1124 000a 0895      		ret
 1125               		.cfi_endproc
 1126               	.LFE22:
 1128               		.section	.text.matrix_print,"ax",@progbits
 1129               	.global	matrix_print
 1131               	matrix_print:
 1132               	.LFB23:
 309:keyboards/Dactylv2_Lightcycle/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 1133               		.loc 1 309 1 is_stmt 1 view -0
 1134               		.cfi_startproc
 1135 0000 CF92      		push r12
 1136               	.LCFI22:
 1137               		.cfi_def_cfa_offset 3
 1138               		.cfi_offset 12, -2
 1139 0002 DF92      		push r13
 1140               	.LCFI23:
 1141               		.cfi_def_cfa_offset 4
 1142               		.cfi_offset 13, -3
 1143 0004 EF92      		push r14
 1144               	.LCFI24:
 1145               		.cfi_def_cfa_offset 5
 1146               		.cfi_offset 14, -4
 1147 0006 FF92      		push r15
 1148               	.LCFI25:
 1149               		.cfi_def_cfa_offset 6
 1150               		.cfi_offset 15, -5
 1151 0008 0F93      		push r16
 1152               	.LCFI26:
 1153               		.cfi_def_cfa_offset 7
 1154               		.cfi_offset 16, -6
 1155 000a 1F93      		push r17
 1156               	.LCFI27:
 1157               		.cfi_def_cfa_offset 8
 1158               		.cfi_offset 17, -7
 1159 000c CF93      		push r28
 1160               	.LCFI28:
 1161               		.cfi_def_cfa_offset 9
 1162               		.cfi_offset 28, -8
 1163 000e DF93      		push r29
 1164               	.LCFI29:
 1165               		.cfi_def_cfa_offset 10
 1166               		.cfi_offset 29, -9
 1167               	/* prologue: function */
 1168               	/* frame size = 0 */
 1169               	/* stack size = 8 */
 1170               	.L__stack_usage = 8
 310:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1171               		.loc 1 310 5 view .LVU248
 1172               	.LBB76:
 310:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1173               		.loc 1 310 5 view .LVU249
 310:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1174               		.loc 1 310 5 view .LVU250
 1175               	.LBE76:
 1176 0010 80E0      		ldi r24,lo8(__c.2037)
 1177 0012 90E0      		ldi r25,hi8(__c.2037)
 1178 0014 0E94 0000 		call xputs
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 1179               		.loc 1 311 5 view .LVU251
 1180               	.LBB77:
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 1181               		.loc 1 311 10 view .LVU252
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 1182               		.loc 1 311 27 view .LVU253
 1183 0018 80E0      		ldi r24,lo8(matrix)
 1184 001a E82E      		mov r14,r24
 1185 001c 80E0      		ldi r24,hi8(matrix)
 1186 001e F82E      		mov r15,r24
 1187               	.LBE77:
 310:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1188               		.loc 1 310 5 is_stmt 0 view .LVU254
 1189 0020 D0E0      		ldi r29,0
 1190 0022 C0E0      		ldi r28,0
 1191               	.LBB84:
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1192               		.loc 1 312 9 view .LVU255
 1193 0024 90E0      		ldi r25,lo8(__c.2040)
 1194 0026 C92E      		mov r12,r25
 1195 0028 90E0      		ldi r25,hi8(__c.2040)
 1196 002a D92E      		mov r13,r25
 313:keyboards/Dactylv2_Lightcycle/matrix.c ****         print("\n");
 1197               		.loc 1 313 9 view .LVU256
 1198 002c 00E0      		ldi r16,lo8(__c.2044)
 1199 002e 10E0      		ldi r17,hi8(__c.2044)
 1200               	.L57:
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1201               		.loc 1 312 9 is_stmt 1 discriminator 3 view .LVU257
 1202               	.LBB78:
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1203               		.loc 1 312 9 discriminator 3 view .LVU258
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1204               		.loc 1 312 9 discriminator 3 view .LVU259
 1205               	.LBE78:
 1206 0030 DF93      		push r29
 1207               	.LCFI30:
 1208               		.cfi_def_cfa_offset 11
 1209 0032 CF93      		push r28
 1210               	.LCFI31:
 1211               		.cfi_def_cfa_offset 12
 1212 0034 DF92      		push r13
 1213               	.LCFI32:
 1214               		.cfi_def_cfa_offset 13
 1215 0036 CF92      		push r12
 1216               	.LCFI33:
 1217               		.cfi_def_cfa_offset 14
 1218 0038 0E94 0000 		call __xprintf
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1219               		.loc 1 312 20 discriminator 3 view .LVU260
 1220               	.LBB79:
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1221               		.loc 1 312 20 discriminator 3 view .LVU261
 312:keyboards/Dactylv2_Lightcycle/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 1222               		.loc 1 312 20 discriminator 3 view .LVU262
 1223               	.LBE79:
 1224 003c 80E0      		ldi r24,lo8(__c.2042)
 1225 003e 90E0      		ldi r25,hi8(__c.2042)
 1226 0040 0E94 0000 		call xputs
 313:keyboards/Dactylv2_Lightcycle/matrix.c ****         print("\n");
 1227               		.loc 1 313 9 discriminator 3 view .LVU263
 1228               	.LBB80:
 1229               	.LBI80:
 303:keyboards/Dactylv2_Lightcycle/matrix.c **** {
 1230               		.loc 1 303 14 discriminator 3 view .LVU264
 1231               	.LBB81:
 305:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1232               		.loc 1 305 5 discriminator 3 view .LVU265
 305:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1233               		.loc 1 305 18 is_stmt 0 discriminator 3 view .LVU266
 1234 0044 F701      		movw r30,r14
 1235 0046 8191      		ld r24,Z+
 1236 0048 7F01      		movw r14,r30
 1237               	.LBE81:
 1238               	.LBE80:
 313:keyboards/Dactylv2_Lightcycle/matrix.c ****         print("\n");
 1239               		.loc 1 313 9 discriminator 3 view .LVU267
 1240 004a 90E0      		ldi r25,0
 1241 004c 0E94 0000 		call bitrev16
 1242               	.LBB82:
 313:keyboards/Dactylv2_Lightcycle/matrix.c ****         print("\n");
 1243               		.loc 1 313 9 is_stmt 1 discriminator 3 view .LVU268
 313:keyboards/Dactylv2_Lightcycle/matrix.c ****         print("\n");
 1244               		.loc 1 313 9 discriminator 3 view .LVU269
 1245               	.LBE82:
 1246 0050 9F93      		push r25
 1247               	.LCFI34:
 1248               		.cfi_def_cfa_offset 15
 1249 0052 8F93      		push r24
 1250               	.LCFI35:
 1251               		.cfi_def_cfa_offset 16
 1252 0054 1F93      		push r17
 1253               	.LCFI36:
 1254               		.cfi_def_cfa_offset 17
 1255 0056 0F93      		push r16
 1256               	.LCFI37:
 1257               		.cfi_def_cfa_offset 18
 1258 0058 0E94 0000 		call __xprintf
 314:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1259               		.loc 1 314 9 discriminator 3 view .LVU270
 1260               	.LBB83:
 314:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1261               		.loc 1 314 9 discriminator 3 view .LVU271
 314:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1262               		.loc 1 314 9 discriminator 3 view .LVU272
 1263               	.LBE83:
 1264 005c 80E0      		ldi r24,lo8(__c.2046)
 1265 005e 90E0      		ldi r25,hi8(__c.2046)
 1266 0060 0E94 0000 		call xputs
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 1267               		.loc 1 311 46 discriminator 3 view .LVU273
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 1268               		.loc 1 311 27 discriminator 3 view .LVU274
 1269 0064 2196      		adiw r28,1
 311:keyboards/Dactylv2_Lightcycle/matrix.c ****         phex(row); print(": ");
 1270               		.loc 1 311 5 is_stmt 0 discriminator 3 view .LVU275
 1271 0066 8DB7      		in r24,__SP_L__
 1272 0068 9EB7      		in r25,__SP_H__
 1273 006a 0896      		adiw r24,8
 1274 006c 0FB6      		in __tmp_reg__,__SREG__
 1275 006e F894      		cli
 1276 0070 9EBF      		out __SP_H__,r25
 1277 0072 0FBE      		out __SREG__,__tmp_reg__
 1278 0074 8DBF      		out __SP_L__,r24
 1279               	.LCFI38:
 1280               		.cfi_def_cfa_offset 10
 1281 0076 CE30      		cpi r28,14
 1282 0078 D105      		cpc r29,__zero_reg__
 1283 007a 01F4      		brne .L57
 1284               	/* epilogue start */
 1285               	.LBE84:
 316:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1286               		.loc 1 316 1 view .LVU276
 1287 007c DF91      		pop r29
 1288 007e CF91      		pop r28
 1289 0080 1F91      		pop r17
 1290 0082 0F91      		pop r16
 1291 0084 FF90      		pop r15
 1292 0086 EF90      		pop r14
 1293 0088 DF90      		pop r13
 1294 008a CF90      		pop r12
 1295 008c 0895      		ret
 1296               		.cfi_endproc
 1297               	.LFE23:
 1299               		.section	.text.matrix_key_count,"ax",@progbits
 1300               	.global	matrix_key_count
 1302               	matrix_key_count:
 1303               	.LFB24:
 319:keyboards/Dactylv2_Lightcycle/matrix.c ****     uint8_t count = 0;
 1304               		.loc 1 319 1 is_stmt 1 view -0
 1305               		.cfi_startproc
 1306 0000 0F93      		push r16
 1307               	.LCFI39:
 1308               		.cfi_def_cfa_offset 3
 1309               		.cfi_offset 16, -2
 1310 0002 1F93      		push r17
 1311               	.LCFI40:
 1312               		.cfi_def_cfa_offset 4
 1313               		.cfi_offset 17, -3
 1314 0004 CF93      		push r28
 1315               	.LCFI41:
 1316               		.cfi_def_cfa_offset 5
 1317               		.cfi_offset 28, -4
 1318               	/* prologue: function */
 1319               	/* frame size = 0 */
 1320               	/* stack size = 3 */
 1321               	.L__stack_usage = 3
 320:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1322               		.loc 1 320 5 view .LVU278
 1323               	.LVL71:
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 1324               		.loc 1 321 5 view .LVU279
 1325               	.LBB85:
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 1326               		.loc 1 321 10 view .LVU280
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 1327               		.loc 1 321 25 view .LVU281
 1328 0006 00E0      		ldi r16,lo8(matrix)
 1329 0008 10E0      		ldi r17,hi8(matrix)
 1330               	.LBE85:
 320:keyboards/Dactylv2_Lightcycle/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1331               		.loc 1 320 13 is_stmt 0 view .LVU282
 1332 000a C0E0      		ldi r28,0
 1333               	.LVL72:
 1334               	.L60:
 1335               	.LBB86:
 322:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1336               		.loc 1 322 9 is_stmt 1 discriminator 3 view .LVU283
 322:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1337               		.loc 1 322 33 is_stmt 0 discriminator 3 view .LVU284
 1338 000c F801      		movw r30,r16
 1339 000e 8191      		ld r24,Z+
 1340 0010 8F01      		movw r16,r30
 1341               	.LVL73:
 322:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1342               		.loc 1 322 18 discriminator 3 view .LVU285
 1343 0012 90E0      		ldi r25,0
 1344 0014 0E94 0000 		call bitpop16
 1345               	.LVL74:
 322:keyboards/Dactylv2_Lightcycle/matrix.c ****     }
 1346               		.loc 1 322 15 discriminator 3 view .LVU286
 1347 0018 C80F      		add r28,r24
 1348               	.LVL75:
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 1349               		.loc 1 321 42 is_stmt 1 discriminator 3 view .LVU287
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 1350               		.loc 1 321 25 discriminator 3 view .LVU288
 321:keyboards/Dactylv2_Lightcycle/matrix.c ****         count += bitpop16(matrix[i]);
 1351               		.loc 1 321 5 is_stmt 0 discriminator 3 view .LVU289
 1352 001a F0E0      		ldi r31,hi8(matrix+14)
 1353 001c 0030      		cpi r16,lo8(matrix+14)
 1354 001e 1F07      		cpc r17,r31
 1355 0020 01F4      		brne .L60
 1356               	.LBE86:
 324:keyboards/Dactylv2_Lightcycle/matrix.c **** }
 1357               		.loc 1 324 5 is_stmt 1 view .LVU290
 325:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1358               		.loc 1 325 1 is_stmt 0 view .LVU291
 1359 0022 8C2F      		mov r24,r28
 1360               	/* epilogue start */
 1361 0024 CF91      		pop r28
 1362               	.LVL76:
 325:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1363               		.loc 1 325 1 view .LVU292
 1364 0026 1F91      		pop r17
 1365 0028 0F91      		pop r16
 1366               	.LVL77:
 325:keyboards/Dactylv2_Lightcycle/matrix.c **** 
 1367               		.loc 1 325 1 view .LVU293
 1368 002a 0895      		ret
 1369               		.cfi_endproc
 1370               	.LFE24:
 1372               		.section	.progmem.data.__c.2046,"a"
 1375               	__c.2046:
 1376 0000 0A00      		.string	"\n"
 1377               		.section	.progmem.data.__c.2044,"a"
 1380               	__c.2044:
 1381 0000 2530 3136 		.string	"%016b"
 1381      6200 
 1382               		.section	.progmem.data.__c.2042,"a"
 1385               	__c.2042:
 1386 0000 3A20 00   		.string	": "
 1387               		.section	.progmem.data.__c.2040,"a"
 1390               	__c.2040:
 1391 0000 2530 3258 		.string	"%02X"
 1391      00
 1392               		.section	.progmem.data.__c.2037,"a"
 1395               	__c.2037:
 1396 0000 0A72 2F63 		.string	"\nr/c 0123456789ABCDEF\n"
 1396      2030 3132 
 1396      3334 3536 
 1396      3738 3941 
 1396      4243 4445 
 1397               		.section	.bss.matrix,"aw",@nobits
 1400               	matrix:
 1401 0000 0000 0000 		.zero	14
 1401      0000 0000 
 1401      0000 0000 
 1401      0000 
 1402               		.section	.rodata.col_pins,"a"
 1405               	col_pins:
 1406 0000 3534 C697 		.ascii	"54\306\227f\224"
 1406      6694 
 1407               		.section	.rodata.row_pins,"a"
 1410               	row_pins:
 1411 0000 F436 3233 		.string	"\3646231\367\366"
 1411      31F7 F600 
 1412 0008 0000 0000 		.zero	6
 1412      0000 
 1413               		.section	.bss.error_count,"aw",@nobits
 1416               	error_count:
 1417 0000 00        		.zero	1
 1418               		.section	.bss.matrix_debouncing,"aw",@nobits
 1421               	matrix_debouncing:
 1422 0000 0000 0000 		.zero	14
 1422      0000 0000 
 1422      0000 0000 
 1422      0000 
 1423               		.section	.bss.debouncing,"aw",@nobits
 1426               	debouncing:
 1427 0000 00        		.zero	1
 1428               		.section	.bss.debouncing_time,"aw",@nobits
 1431               	debouncing_time:
 1432 0000 0000      		.zero	2
 1433               		.text
 1434               	.Letext0:
 1435               		.file 3 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdint.h"
 1436               		.file 4 "./tmk_core/common/debug.h"
 1437               		.file 5 "./tmk_core/common/avr/xprintf.h"
 1438               		.file 6 "./tmk_core/common/matrix.h"
 1439               		.file 7 "keyboards/Dactylv2_Lightcycle/split_util.h"
 1440               		.file 8 "./drivers/avr/pro_micro.h"
 1441               		.file 9 "./tmk_core/common/timer.h"
 1442               		.file 10 "keyboards/Dactylv2_Lightcycle/serial.h"
 1443               		.file 11 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:32     .text.matrix_init_kb:0000000000000000 matrix_init_kb
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:49     .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:66     .text.matrix_scan_user:0000000000000000 matrix_scan_user
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:81     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:98     .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:115    .text.matrix_rows:0000000000000000 matrix_rows
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:134    .text.matrix_cols:0000000000000000 matrix_cols
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:153    .text.matrix_init:0000000000000000 matrix_init
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1410   .rodata.row_pins:0000000000000000 row_pins
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1405   .rodata.col_pins:0000000000000000 col_pins
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1400   .bss.matrix:0000000000000000 matrix
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1421   .bss.matrix_debouncing:0000000000000000 matrix_debouncing
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:330    .text._matrix_scan:0000000000000000 _matrix_scan
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1426   .bss.debouncing:0000000000000000 debouncing
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1431   .bss.debouncing_time:0000000000000000 debouncing_time
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:794    .text.serial_transaction:0000000000000000 serial_transaction
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:876    .text.matrix_scan:0000000000000000 matrix_scan
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1416   .bss.error_count:0000000000000000 error_count
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:975    .text.matrix_slave_scan:0000000000000000 matrix_slave_scan
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1036   .text.matrix_is_modified:0000000000000000 matrix_is_modified
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1058   .text.matrix_is_on:0000000000000000 matrix_is_on
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1104   .text.matrix_get_row:0000000000000000 matrix_get_row
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1131   .text.matrix_print:0000000000000000 matrix_print
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1395   .progmem.data.__c.2037:0000000000000000 __c.2037
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1390   .progmem.data.__c.2040:0000000000000000 __c.2040
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1380   .progmem.data.__c.2044:0000000000000000 __c.2044
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1385   .progmem.data.__c.2042:0000000000000000 __c.2042
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1375   .progmem.data.__c.2046:0000000000000000 __c.2046
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccRU7lV4.s:1302   .text.matrix_key_count:0000000000000000 matrix_key_count

UNDEFINED SYMBOLS
debug_config
isLeftHand
timer_read
timer_elapsed
serial_update_buffers
serial_slave_buffer
xputs
__xprintf
bitrev16
bitpop16
__do_copy_data
__do_clear_bss
