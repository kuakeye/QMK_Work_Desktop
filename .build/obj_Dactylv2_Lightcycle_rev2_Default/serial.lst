   1               		.file	"serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.serial_output,"ax",@progbits
  12               	serial_output:
  13               	.LFB7:
  14               		.file 1 "keyboards/Dactylv2_Lightcycle/serial.c"
   1:keyboards/Dactylv2_Lightcycle/serial.c **** /*
   2:keyboards/Dactylv2_Lightcycle/serial.c ****  * WARNING: be careful changing this code, it is very timing dependent
   3:keyboards/Dactylv2_Lightcycle/serial.c ****  */
   4:keyboards/Dactylv2_Lightcycle/serial.c **** 
   5:keyboards/Dactylv2_Lightcycle/serial.c **** #ifndef F_CPU
   6:keyboards/Dactylv2_Lightcycle/serial.c **** #define F_CPU 16000000
   7:keyboards/Dactylv2_Lightcycle/serial.c **** #endif
   8:keyboards/Dactylv2_Lightcycle/serial.c **** 
   9:keyboards/Dactylv2_Lightcycle/serial.c **** #include <avr/io.h>
  10:keyboards/Dactylv2_Lightcycle/serial.c **** #include <avr/interrupt.h>
  11:keyboards/Dactylv2_Lightcycle/serial.c **** #include <util/delay.h>
  12:keyboards/Dactylv2_Lightcycle/serial.c **** #include <stdbool.h>
  13:keyboards/Dactylv2_Lightcycle/serial.c **** #include "serial.h"
  14:keyboards/Dactylv2_Lightcycle/serial.c **** 
  15:keyboards/Dactylv2_Lightcycle/serial.c **** #ifndef USE_I2C
  16:keyboards/Dactylv2_Lightcycle/serial.c **** 
  17:keyboards/Dactylv2_Lightcycle/serial.c **** // Serial pulse period in microseconds. Its probably a bad idea to lower this
  18:keyboards/Dactylv2_Lightcycle/serial.c **** // value.
  19:keyboards/Dactylv2_Lightcycle/serial.c **** #define SERIAL_DELAY 24
  20:keyboards/Dactylv2_Lightcycle/serial.c **** 
  21:keyboards/Dactylv2_Lightcycle/serial.c **** uint8_t volatile serial_slave_buffer[SERIAL_SLAVE_BUFFER_LENGTH] = {0};
  22:keyboards/Dactylv2_Lightcycle/serial.c **** uint8_t volatile serial_master_buffer[SERIAL_MASTER_BUFFER_LENGTH] = {0};
  23:keyboards/Dactylv2_Lightcycle/serial.c **** 
  24:keyboards/Dactylv2_Lightcycle/serial.c **** #define SLAVE_DATA_CORRUPT (1<<0)
  25:keyboards/Dactylv2_Lightcycle/serial.c **** volatile uint8_t status = 0;
  26:keyboards/Dactylv2_Lightcycle/serial.c **** 
  27:keyboards/Dactylv2_Lightcycle/serial.c **** inline static
  28:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_delay(void) {
  29:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
  30:keyboards/Dactylv2_Lightcycle/serial.c **** }
  31:keyboards/Dactylv2_Lightcycle/serial.c **** 
  32:keyboards/Dactylv2_Lightcycle/serial.c **** inline static
  33:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_output(void) {
  15               		.loc 1 33 26 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  34:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_DDR |= SERIAL_PIN_MASK;
  21               		.loc 1 34 3 view .LVU1
  22               		.loc 1 34 18 is_stmt 0 view .LVU2
  23 0000 509A      		sbi 0xa,0
  24               	/* epilogue start */
  35:keyboards/Dactylv2_Lightcycle/serial.c **** }
  25               		.loc 1 35 1 view .LVU3
  26 0002 0895      		ret
  27               		.cfi_endproc
  28               	.LFE7:
  30               		.section	.text.serial_input,"ax",@progbits
  32               	serial_input:
  33               	.LFB8:
  36:keyboards/Dactylv2_Lightcycle/serial.c **** 
  37:keyboards/Dactylv2_Lightcycle/serial.c **** // make the serial pin an input with pull-up resistor
  38:keyboards/Dactylv2_Lightcycle/serial.c **** inline static
  39:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_input(void) {
  34               		.loc 1 39 25 is_stmt 1 view -0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_DDR  &= ~SERIAL_PIN_MASK;
  40               		.loc 1 40 3 view .LVU5
  41               		.loc 1 40 19 is_stmt 0 view .LVU6
  42 0000 5098      		cbi 0xa,0
  41:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
  43               		.loc 1 41 3 is_stmt 1 view .LVU7
  44               		.loc 1 41 19 is_stmt 0 view .LVU8
  45 0002 589A      		sbi 0xb,0
  46               	/* epilogue start */
  42:keyboards/Dactylv2_Lightcycle/serial.c **** }
  47               		.loc 1 42 1 view .LVU9
  48 0004 0895      		ret
  49               		.cfi_endproc
  50               	.LFE8:
  52               		.section	.text.serial_high,"ax",@progbits
  54               	serial_high:
  55               	.LFB11:
  43:keyboards/Dactylv2_Lightcycle/serial.c **** 
  44:keyboards/Dactylv2_Lightcycle/serial.c **** inline static
  45:keyboards/Dactylv2_Lightcycle/serial.c **** uint8_t serial_read_pin(void) {
  46:keyboards/Dactylv2_Lightcycle/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
  47:keyboards/Dactylv2_Lightcycle/serial.c **** }
  48:keyboards/Dactylv2_Lightcycle/serial.c **** 
  49:keyboards/Dactylv2_Lightcycle/serial.c **** inline static
  50:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_low(void) {
  51:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
  52:keyboards/Dactylv2_Lightcycle/serial.c **** }
  53:keyboards/Dactylv2_Lightcycle/serial.c **** 
  54:keyboards/Dactylv2_Lightcycle/serial.c **** inline static
  55:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_high(void) {
  56               		.loc 1 55 24 is_stmt 1 view -0
  57               		.cfi_startproc
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  56:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_PORT |= SERIAL_PIN_MASK;
  62               		.loc 1 56 3 view .LVU11
  63               		.loc 1 56 19 is_stmt 0 view .LVU12
  64 0000 589A      		sbi 0xb,0
  65               	/* epilogue start */
  57:keyboards/Dactylv2_Lightcycle/serial.c **** }
  66               		.loc 1 57 1 view .LVU13
  67 0002 0895      		ret
  68               		.cfi_endproc
  69               	.LFE11:
  71               		.section	.text.sync_recv,"ax",@progbits
  73               	sync_recv:
  74               	.LFB14:
  58:keyboards/Dactylv2_Lightcycle/serial.c **** 
  59:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_master_init(void) {
  60:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
  61:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_high();
  62:keyboards/Dactylv2_Lightcycle/serial.c **** }
  63:keyboards/Dactylv2_Lightcycle/serial.c **** 
  64:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_slave_init(void) {
  65:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input();
  66:keyboards/Dactylv2_Lightcycle/serial.c **** 
  67:keyboards/Dactylv2_Lightcycle/serial.c ****   // Enable INT0
  68:keyboards/Dactylv2_Lightcycle/serial.c ****   EIMSK |= _BV(INT0);
  69:keyboards/Dactylv2_Lightcycle/serial.c ****   // Trigger on falling edge of INT0
  70:keyboards/Dactylv2_Lightcycle/serial.c ****   EICRA &= ~(_BV(ISC00) | _BV(ISC01));
  71:keyboards/Dactylv2_Lightcycle/serial.c **** }
  72:keyboards/Dactylv2_Lightcycle/serial.c **** 
  73:keyboards/Dactylv2_Lightcycle/serial.c **** // Used by the master to synchronize timing with the slave.
  74:keyboards/Dactylv2_Lightcycle/serial.c **** static
  75:keyboards/Dactylv2_Lightcycle/serial.c **** void sync_recv(void) {
  75               		.loc 1 75 22 is_stmt 1 view -0
  76               		.cfi_startproc
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  76:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input();
  81               		.loc 1 76 3 view .LVU15
  82 0000 0E94 0000 		call serial_input
  83               	.LVL0:
  77:keyboards/Dactylv2_Lightcycle/serial.c ****   // This shouldn't hang if the slave disconnects because the
  78:keyboards/Dactylv2_Lightcycle/serial.c ****   // serial line will float to high if the slave does disconnect.
  79:keyboards/Dactylv2_Lightcycle/serial.c ****   while (!serial_read_pin());
  84               		.loc 1 79 3 view .LVU16
  85               	.L5:
  86               		.loc 1 79 29 discriminator 1 view .LVU17
  87               		.loc 1 79 9 discriminator 1 view .LVU18
  88               	.LBB56:
  89               	.LBI56:
  45:keyboards/Dactylv2_Lightcycle/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
  90               		.loc 1 45 9 discriminator 1 view .LVU19
  91               	.LBB57:
  46:keyboards/Dactylv2_Lightcycle/serial.c **** }
  92               		.loc 1 46 3 discriminator 1 view .LVU20
  93               	.LBE57:
  94               	.LBE56:
  95               		.loc 1 79 9 is_stmt 0 discriminator 1 view .LVU21
  96 0004 489B      		sbis 0x9,0
  97 0006 00C0      		rjmp .L5
  80:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_delay();
  98               		.loc 1 80 3 is_stmt 1 view .LVU22
  99               	.LBB58:
 100               	.LBI58:
  28:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
 101               		.loc 1 28 6 view .LVU23
 102               	.LBE58:
  29:keyboards/Dactylv2_Lightcycle/serial.c **** }
 103               		.loc 1 29 3 view .LVU24
 104               	.LVL1:
 105               	.LBB61:
 106               	.LBB59:
 107               	.LBI59:
 108               		.file 2 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** _delay_us(double __us)
 109               		.loc 2 255 1 view .LVU25
 110               	.LBB60:
 256:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	double __tmp ;
 111               		.loc 2 257 2 view .LVU26
 258:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 112               		.loc 2 261 2 view .LVU27
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 113               		.loc 2 262 2 view .LVU28
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 114               		.loc 2 263 2 view .LVU29
 264:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 115               		.loc 2 273 3 view .LVU30
 274:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 116               		.loc 2 276 2 view .LVU31
 117 0008 80E8      		ldi r24,lo8(-128)
 118 000a 8A95      	1:	dec r24
 119 000c 01F4      		brne 1b
 120               	.LVL2:
 121               	/* epilogue start */
 122               		.loc 2 276 2 is_stmt 0 view .LVU32
 123               	.LBE60:
 124               	.LBE59:
 125               	.LBE61:
  81:keyboards/Dactylv2_Lightcycle/serial.c **** }
 126               		.loc 1 81 1 view .LVU33
 127 000e 0895      		ret
 128               		.cfi_endproc
 129               	.LFE14:
 131               		.section	.text.serial_read_byte,"ax",@progbits
 133               	serial_read_byte:
 134               	.LFB16:
  82:keyboards/Dactylv2_Lightcycle/serial.c **** 
  83:keyboards/Dactylv2_Lightcycle/serial.c **** // Used by the slave to send a synchronization signal to the master.
  84:keyboards/Dactylv2_Lightcycle/serial.c **** static
  85:keyboards/Dactylv2_Lightcycle/serial.c **** void sync_send(void) {
  86:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
  87:keyboards/Dactylv2_Lightcycle/serial.c **** 
  88:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_low();
  89:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_delay();
  90:keyboards/Dactylv2_Lightcycle/serial.c **** 
  91:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_high();
  92:keyboards/Dactylv2_Lightcycle/serial.c **** }
  93:keyboards/Dactylv2_Lightcycle/serial.c **** 
  94:keyboards/Dactylv2_Lightcycle/serial.c **** // Reads a byte from the serial line
  95:keyboards/Dactylv2_Lightcycle/serial.c **** static
  96:keyboards/Dactylv2_Lightcycle/serial.c **** uint8_t serial_read_byte(void) {
 135               		.loc 1 96 32 is_stmt 1 view -0
 136               		.cfi_startproc
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
  97:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t byte = 0;
 141               		.loc 1 97 3 view .LVU35
 142               	.LVL3:
  98:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input();
 143               		.loc 1 98 3 view .LVU36
 144 0000 0E94 0000 		call serial_input
 145               	.LVL4:
  99:keyboards/Dactylv2_Lightcycle/serial.c ****   for ( uint8_t i = 0; i < 8; ++i) {
 146               		.loc 1 99 3 view .LVU37
 147               	.LBB62:
 148               		.loc 1 99 9 view .LVU38
 149               		.loc 1 99 24 view .LVU39
 150               	.LBE62:
  98:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input();
 151               		.loc 1 98 3 is_stmt 0 view .LVU40
 152 0004 98E0      		ldi r25,lo8(8)
  97:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t byte = 0;
 153               		.loc 1 97 11 view .LVU41
 154 0006 80E0      		ldi r24,0
 155               	.LVL5:
 156               	.L9:
 157               	.LBB71:
 100:keyboards/Dactylv2_Lightcycle/serial.c ****     byte = (byte << 1) | serial_read_pin();
 158               		.loc 1 100 5 is_stmt 1 discriminator 3 view .LVU42
 159               	.LBB63:
 160               	.LBI63:
  45:keyboards/Dactylv2_Lightcycle/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 161               		.loc 1 45 9 discriminator 3 view .LVU43
 162               	.LBB64:
  46:keyboards/Dactylv2_Lightcycle/serial.c **** }
 163               		.loc 1 46 3 discriminator 3 view .LVU44
  46:keyboards/Dactylv2_Lightcycle/serial.c **** }
 164               		.loc 1 46 13 is_stmt 0 discriminator 3 view .LVU45
 165 0008 29B1      		in r18,0x9
 166               	.LBE64:
 167               	.LBE63:
 168               		.loc 1 100 18 discriminator 3 view .LVU46
 169 000a 880F      		lsl r24
 170               	.LVL6:
 171               		.loc 1 100 26 discriminator 3 view .LVU47
 172 000c 2170      		andi r18,lo8(1)
 173               		.loc 1 100 24 discriminator 3 view .LVU48
 174 000e 822B      		or r24,r18
 175               	.LVL7:
 101:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_delay();
 176               		.loc 1 101 5 is_stmt 1 discriminator 3 view .LVU49
 177               	.LBB65:
 178               	.LBI65:
  28:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
 179               		.loc 1 28 6 discriminator 3 view .LVU50
 180               	.LBE65:
 181               	.LBE71:
  29:keyboards/Dactylv2_Lightcycle/serial.c **** }
 182               		.loc 1 29 3 discriminator 3 view .LVU51
 183               	.LBB72:
 184               	.LBB68:
 185               	.LBB66:
 186               	.LBI66:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 187               		.loc 2 255 1 discriminator 3 view .LVU52
 188               	.LBB67:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 189               		.loc 2 257 2 discriminator 3 view .LVU53
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 190               		.loc 2 261 2 discriminator 3 view .LVU54
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 191               		.loc 2 262 2 discriminator 3 view .LVU55
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 192               		.loc 2 263 2 discriminator 3 view .LVU56
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 193               		.loc 2 273 3 discriminator 3 view .LVU57
 194               		.loc 2 276 2 discriminator 3 view .LVU58
 195 0010 20E8      		ldi r18,lo8(-128)
 196 0012 2A95      	1:	dec r18
 197 0014 01F4      		brne 1b
 198               	.LVL8:
 199               		.loc 2 276 2 is_stmt 0 discriminator 3 view .LVU59
 200               	.LBE67:
 201               	.LBE66:
 202               	.LBE68:
 102:keyboards/Dactylv2_Lightcycle/serial.c ****     _delay_us(1);
 203               		.loc 1 102 5 is_stmt 1 discriminator 3 view .LVU60
 204               	.LBB69:
 205               	.LBI69:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 206               		.loc 2 255 1 discriminator 3 view .LVU61
 207               	.LBB70:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 208               		.loc 2 257 2 discriminator 3 view .LVU62
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 209               		.loc 2 261 2 discriminator 3 view .LVU63
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 210               		.loc 2 262 2 discriminator 3 view .LVU64
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 211               		.loc 2 263 2 discriminator 3 view .LVU65
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 212               		.loc 2 273 3 discriminator 3 view .LVU66
 213               		.loc 2 276 2 discriminator 3 view .LVU67
 214 0016 25E0      		ldi r18,lo8(5)
 215 0018 2A95      	1:	dec r18
 216 001a 01F4      		brne 1b
 217 001c 0000      		nop
 218               	.LVL9:
 219               		.loc 2 276 2 is_stmt 0 discriminator 3 view .LVU68
 220               	.LBE70:
 221               	.LBE69:
  99:keyboards/Dactylv2_Lightcycle/serial.c ****     byte = (byte << 1) | serial_read_pin();
 222               		.loc 1 99 31 is_stmt 1 discriminator 3 view .LVU69
  99:keyboards/Dactylv2_Lightcycle/serial.c ****     byte = (byte << 1) | serial_read_pin();
 223               		.loc 1 99 24 discriminator 3 view .LVU70
 224 001e 9150      		subi r25,lo8(-(-1))
 225               	.LVL10:
  99:keyboards/Dactylv2_Lightcycle/serial.c ****     byte = (byte << 1) | serial_read_pin();
 226               		.loc 1 99 3 is_stmt 0 discriminator 3 view .LVU71
 227 0020 01F4      		brne .L9
 228               	/* epilogue start */
 229               	.LBE72:
 103:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 104:keyboards/Dactylv2_Lightcycle/serial.c **** 
 105:keyboards/Dactylv2_Lightcycle/serial.c ****   return byte;
 106:keyboards/Dactylv2_Lightcycle/serial.c **** }
 230               		.loc 1 106 1 view .LVU72
 231 0022 0895      		ret
 232               		.cfi_endproc
 233               	.LFE16:
 235               		.section	.text.serial_write_byte,"ax",@progbits
 237               	serial_write_byte:
 238               	.LVL11:
 239               	.LFB17:
 107:keyboards/Dactylv2_Lightcycle/serial.c **** 
 108:keyboards/Dactylv2_Lightcycle/serial.c **** // Sends a byte with MSB ordering
 109:keyboards/Dactylv2_Lightcycle/serial.c **** static
 110:keyboards/Dactylv2_Lightcycle/serial.c **** void serial_write_byte(uint8_t data) {
 240               		.loc 1 110 38 is_stmt 1 view -0
 241               		.cfi_startproc
 242               		.loc 1 110 38 is_stmt 0 view .LVU74
 243 0000 1F93      		push r17
 244               	.LCFI0:
 245               		.cfi_def_cfa_offset 3
 246               		.cfi_offset 17, -2
 247 0002 CF93      		push r28
 248               	.LCFI1:
 249               		.cfi_def_cfa_offset 4
 250               		.cfi_offset 28, -3
 251 0004 DF93      		push r29
 252               	.LCFI2:
 253               		.cfi_def_cfa_offset 5
 254               		.cfi_offset 29, -4
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 3 */
 258               	.L__stack_usage = 3
 259 0006 C82F      		mov r28,r24
 111:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t b = 8;
 260               		.loc 1 111 3 is_stmt 1 view .LVU75
 261               	.LVL12:
 112:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
 262               		.loc 1 112 3 view .LVU76
 263 0008 0E94 0000 		call serial_output
 264               	.LVL13:
 113:keyboards/Dactylv2_Lightcycle/serial.c ****   while( b-- ) {
 265               		.loc 1 113 3 view .LVU77
 111:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t b = 8;
 266               		.loc 1 111 11 is_stmt 0 view .LVU78
 267 000c 18E0      		ldi r17,lo8(8)
 114:keyboards/Dactylv2_Lightcycle/serial.c ****     if(data & (1 << b)) {
 268               		.loc 1 114 8 view .LVU79
 269 000e D0E0      		ldi r29,0
 270               	.LVL14:
 271               	.L12:
 113:keyboards/Dactylv2_Lightcycle/serial.c ****   while( b-- ) {
 272               		.loc 1 113 8 is_stmt 1 view .LVU80
 113:keyboards/Dactylv2_Lightcycle/serial.c ****   while( b-- ) {
 273               		.loc 1 113 11 is_stmt 0 view .LVU81
 274               	.LVL15:
 275 0010 1150      		subi r17,1
 276 0012 00F4      		brcc .L15
 277               	/* epilogue start */
 115:keyboards/Dactylv2_Lightcycle/serial.c ****       serial_high();
 116:keyboards/Dactylv2_Lightcycle/serial.c ****     } else {
 117:keyboards/Dactylv2_Lightcycle/serial.c ****       serial_low();
 118:keyboards/Dactylv2_Lightcycle/serial.c ****     }
 119:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_delay();
 120:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 121:keyboards/Dactylv2_Lightcycle/serial.c **** }
 278               		.loc 1 121 1 view .LVU82
 279 0014 DF91      		pop r29
 280 0016 CF91      		pop r28
 281               	.LVL16:
 282               		.loc 1 121 1 view .LVU83
 283 0018 1F91      		pop r17
 284               	.LVL17:
 285               		.loc 1 121 1 view .LVU84
 286 001a 0895      		ret
 287               	.LVL18:
 288               	.L15:
 114:keyboards/Dactylv2_Lightcycle/serial.c ****     if(data & (1 << b)) {
 289               		.loc 1 114 5 is_stmt 1 view .LVU85
 114:keyboards/Dactylv2_Lightcycle/serial.c ****     if(data & (1 << b)) {
 290               		.loc 1 114 8 is_stmt 0 view .LVU86
 291 001c CE01      		movw r24,r28
 292 001e 012E      		mov r0,r17
 293 0020 00C0      		rjmp 2f
 294               		1:
 295 0022 9595      		asr r25
 296 0024 8795      		ror r24
 297               		2:
 298 0026 0A94      		dec r0
 299 0028 02F4      		brpl 1b
 114:keyboards/Dactylv2_Lightcycle/serial.c ****     if(data & (1 << b)) {
 300               		.loc 1 114 7 view .LVU87
 301 002a 80FF      		sbrs r24,0
 302 002c 00C0      		rjmp .L13
 115:keyboards/Dactylv2_Lightcycle/serial.c ****       serial_high();
 303               		.loc 1 115 7 is_stmt 1 view .LVU88
 304 002e 0E94 0000 		call serial_high
 305               	.LVL19:
 306               	.L14:
 119:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 307               		.loc 1 119 5 view .LVU89
 308               	.LBB79:
 309               	.LBI79:
  28:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
 310               		.loc 1 28 6 view .LVU90
 311               	.LBB80:
  29:keyboards/Dactylv2_Lightcycle/serial.c **** }
 312               		.loc 1 29 3 view .LVU91
 313               	.LBB81:
 314               	.LBI81:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 315               		.loc 2 255 1 view .LVU92
 316               	.LBB82:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 317               		.loc 2 257 2 view .LVU93
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 318               		.loc 2 261 2 view .LVU94
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 319               		.loc 2 262 2 view .LVU95
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 320               		.loc 2 263 2 view .LVU96
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 321               		.loc 2 273 3 view .LVU97
 322               		.loc 2 276 2 view .LVU98
 323 0032 80E8      		ldi r24,lo8(-128)
 324 0034 8A95      	1:	dec r24
 325 0036 01F4      		brne 1b
 326               	.LVL20:
 327               		.loc 2 276 2 is_stmt 0 view .LVU99
 328               	.LBE82:
 329               	.LBE81:
  30:keyboards/Dactylv2_Lightcycle/serial.c **** 
 330               		.loc 1 30 1 view .LVU100
 331 0038 00C0      		rjmp .L12
 332               	.L13:
  30:keyboards/Dactylv2_Lightcycle/serial.c **** 
 333               		.loc 1 30 1 view .LVU101
 334               	.LBE80:
 335               	.LBE79:
 117:keyboards/Dactylv2_Lightcycle/serial.c ****     }
 336               		.loc 1 117 7 is_stmt 1 view .LVU102
 337               	.LBB83:
 338               	.LBI83:
  50:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 339               		.loc 1 50 6 view .LVU103
 340               	.LBB84:
  51:keyboards/Dactylv2_Lightcycle/serial.c **** }
 341               		.loc 1 51 3 view .LVU104
  51:keyboards/Dactylv2_Lightcycle/serial.c **** }
 342               		.loc 1 51 19 is_stmt 0 view .LVU105
 343 003a 5898      		cbi 0xb,0
  52:keyboards/Dactylv2_Lightcycle/serial.c **** 
 344               		.loc 1 52 1 view .LVU106
 345 003c 00C0      		rjmp .L14
 346               	.LBE84:
 347               	.LBE83:
 348               		.cfi_endproc
 349               	.LFE17:
 351               		.section	.text.sync_send,"ax",@progbits
 353               	sync_send:
 354               	.LFB15:
  85:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
 355               		.loc 1 85 22 is_stmt 1 view -0
 356               		.cfi_startproc
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 0 */
 360               	.L__stack_usage = 0
  86:keyboards/Dactylv2_Lightcycle/serial.c **** 
 361               		.loc 1 86 3 view .LVU108
 362 0000 0E94 0000 		call serial_output
 363               	.LVL21:
  88:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_delay();
 364               		.loc 1 88 3 view .LVU109
 365               	.LBB90:
 366               	.LBI90:
  50:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 367               		.loc 1 50 6 view .LVU110
 368               	.LBB91:
  51:keyboards/Dactylv2_Lightcycle/serial.c **** }
 369               		.loc 1 51 3 view .LVU111
  51:keyboards/Dactylv2_Lightcycle/serial.c **** }
 370               		.loc 1 51 19 is_stmt 0 view .LVU112
 371 0004 5898      		cbi 0xb,0
 372               	.LBE91:
 373               	.LBE90:
  89:keyboards/Dactylv2_Lightcycle/serial.c **** 
 374               		.loc 1 89 3 is_stmt 1 view .LVU113
 375               	.LBB92:
 376               	.LBI92:
  28:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
 377               		.loc 1 28 6 view .LVU114
 378               	.LBE92:
  29:keyboards/Dactylv2_Lightcycle/serial.c **** }
 379               		.loc 1 29 3 view .LVU115
 380               	.LVL22:
 381               	.LBB95:
 382               	.LBB93:
 383               	.LBI93:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 384               		.loc 2 255 1 view .LVU116
 385               	.LBB94:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 386               		.loc 2 257 2 view .LVU117
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 387               		.loc 2 261 2 view .LVU118
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 388               		.loc 2 262 2 view .LVU119
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 389               		.loc 2 263 2 view .LVU120
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 390               		.loc 2 273 3 view .LVU121
 391               		.loc 2 276 2 view .LVU122
 392 0006 80E8      		ldi r24,lo8(-128)
 393 0008 8A95      	1:	dec r24
 394 000a 01F4      		brne 1b
 395               	.LVL23:
 396               		.loc 2 276 2 is_stmt 0 view .LVU123
 397               	.LBE94:
 398               	.LBE93:
 399               	.LBE95:
  91:keyboards/Dactylv2_Lightcycle/serial.c **** }
 400               		.loc 1 91 3 is_stmt 1 view .LVU124
 401 000c 0C94 0000 		jmp serial_high
 402               	.LVL24:
 403               		.cfi_endproc
 404               	.LFE15:
 406               		.section	.text.serial_master_init,"ax",@progbits
 407               	.global	serial_master_init
 409               	serial_master_init:
 410               	.LFB12:
  59:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
 411               		.loc 1 59 31 view -0
 412               		.cfi_startproc
 413               	/* prologue: function */
 414               	/* frame size = 0 */
 415               	/* stack size = 0 */
 416               	.L__stack_usage = 0
  60:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_high();
 417               		.loc 1 60 3 view .LVU126
 418 0000 0E94 0000 		call serial_output
 419               	.LVL25:
  61:keyboards/Dactylv2_Lightcycle/serial.c **** }
 420               		.loc 1 61 3 view .LVU127
 421 0004 0C94 0000 		jmp serial_high
 422               	.LVL26:
 423               		.cfi_endproc
 424               	.LFE12:
 426               		.section	.text.serial_slave_init,"ax",@progbits
 427               	.global	serial_slave_init
 429               	serial_slave_init:
 430               	.LFB13:
  64:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input();
 431               		.loc 1 64 30 view -0
 432               		.cfi_startproc
 433               	/* prologue: function */
 434               	/* frame size = 0 */
 435               	/* stack size = 0 */
 436               	.L__stack_usage = 0
  65:keyboards/Dactylv2_Lightcycle/serial.c **** 
 437               		.loc 1 65 3 view .LVU129
 438 0000 0E94 0000 		call serial_input
 439               	.LVL27:
  68:keyboards/Dactylv2_Lightcycle/serial.c ****   // Trigger on falling edge of INT0
 440               		.loc 1 68 3 view .LVU130
  68:keyboards/Dactylv2_Lightcycle/serial.c ****   // Trigger on falling edge of INT0
 441               		.loc 1 68 9 is_stmt 0 view .LVU131
 442 0004 E89A      		sbi 0x1d,0
  70:keyboards/Dactylv2_Lightcycle/serial.c **** }
 443               		.loc 1 70 3 is_stmt 1 view .LVU132
  70:keyboards/Dactylv2_Lightcycle/serial.c **** }
 444               		.loc 1 70 9 is_stmt 0 view .LVU133
 445 0006 E9E6      		ldi r30,lo8(105)
 446 0008 F0E0      		ldi r31,0
 447 000a 8081      		ld r24,Z
 448 000c 8C7F      		andi r24,lo8(-4)
 449 000e 8083      		st Z,r24
 450               	/* epilogue start */
  71:keyboards/Dactylv2_Lightcycle/serial.c **** 
 451               		.loc 1 71 1 view .LVU134
 452 0010 0895      		ret
 453               		.cfi_endproc
 454               	.LFE13:
 456               		.section	.text.__vector_1,"ax",@progbits
 457               	.global	__vector_1
 459               	__vector_1:
 460               	.LFB18:
 122:keyboards/Dactylv2_Lightcycle/serial.c **** 
 123:keyboards/Dactylv2_Lightcycle/serial.c **** // interrupt handle to be used by the slave device
 124:keyboards/Dactylv2_Lightcycle/serial.c **** ISR(SERIAL_PIN_INTERRUPT) {
 461               		.loc 1 124 27 is_stmt 1 view -0
 462               		.cfi_startproc
 463 0000 1F92      		push r1
 464               	.LCFI3:
 465               		.cfi_def_cfa_offset 3
 466               		.cfi_offset 1, -2
 467 0002 0F92      		push r0
 468               	.LCFI4:
 469               		.cfi_def_cfa_offset 4
 470               		.cfi_offset 0, -3
 471 0004 0FB6      		in r0,__SREG__
 472 0006 0F92      		push r0
 473 0008 1124      		clr __zero_reg__
 474 000a EF92      		push r14
 475               	.LCFI5:
 476               		.cfi_def_cfa_offset 5
 477               		.cfi_offset 14, -4
 478 000c FF92      		push r15
 479               	.LCFI6:
 480               		.cfi_def_cfa_offset 6
 481               		.cfi_offset 15, -5
 482 000e 1F93      		push r17
 483               	.LCFI7:
 484               		.cfi_def_cfa_offset 7
 485               		.cfi_offset 17, -6
 486 0010 2F93      		push r18
 487               	.LCFI8:
 488               		.cfi_def_cfa_offset 8
 489               		.cfi_offset 18, -7
 490 0012 3F93      		push r19
 491               	.LCFI9:
 492               		.cfi_def_cfa_offset 9
 493               		.cfi_offset 19, -8
 494 0014 4F93      		push r20
 495               	.LCFI10:
 496               		.cfi_def_cfa_offset 10
 497               		.cfi_offset 20, -9
 498 0016 5F93      		push r21
 499               	.LCFI11:
 500               		.cfi_def_cfa_offset 11
 501               		.cfi_offset 21, -10
 502 0018 6F93      		push r22
 503               	.LCFI12:
 504               		.cfi_def_cfa_offset 12
 505               		.cfi_offset 22, -11
 506 001a 7F93      		push r23
 507               	.LCFI13:
 508               		.cfi_def_cfa_offset 13
 509               		.cfi_offset 23, -12
 510 001c 8F93      		push r24
 511               	.LCFI14:
 512               		.cfi_def_cfa_offset 14
 513               		.cfi_offset 24, -13
 514 001e 9F93      		push r25
 515               	.LCFI15:
 516               		.cfi_def_cfa_offset 15
 517               		.cfi_offset 25, -14
 518 0020 AF93      		push r26
 519               	.LCFI16:
 520               		.cfi_def_cfa_offset 16
 521               		.cfi_offset 26, -15
 522 0022 BF93      		push r27
 523               	.LCFI17:
 524               		.cfi_def_cfa_offset 17
 525               		.cfi_offset 27, -16
 526 0024 CF93      		push r28
 527               	.LCFI18:
 528               		.cfi_def_cfa_offset 18
 529               		.cfi_offset 28, -17
 530 0026 DF93      		push r29
 531               	.LCFI19:
 532               		.cfi_def_cfa_offset 19
 533               		.cfi_offset 29, -18
 534 0028 EF93      		push r30
 535               	.LCFI20:
 536               		.cfi_def_cfa_offset 20
 537               		.cfi_offset 30, -19
 538 002a FF93      		push r31
 539               	.LCFI21:
 540               		.cfi_def_cfa_offset 21
 541               		.cfi_offset 31, -20
 542               	/* prologue: Signal */
 543               	/* frame size = 0 */
 544               	/* stack size = 20 */
 545               	.L__stack_usage = 20
 125:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_send();
 546               		.loc 1 125 3 view .LVU136
 547 002c 0E94 0000 		call sync_send
 548               	.LVL28:
 126:keyboards/Dactylv2_Lightcycle/serial.c **** 
 127:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t checksum = 0;
 549               		.loc 1 127 3 view .LVU137
 128:keyboards/Dactylv2_Lightcycle/serial.c ****   for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
 550               		.loc 1 128 3 view .LVU138
 551               	.LBB96:
 552               		.loc 1 128 8 view .LVU139
 553               		.loc 1 128 19 view .LVU140
 554               		.loc 1 128 12 is_stmt 0 view .LVU141
 555 0030 D0E0      		ldi r29,0
 556 0032 C0E0      		ldi r28,0
 557               	.LBE96:
 127:keyboards/Dactylv2_Lightcycle/serial.c ****   for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
 558               		.loc 1 127 11 view .LVU142
 559 0034 10E0      		ldi r17,0
 560               	.LVL29:
 561               	.L20:
 562               	.LBB97:
 129:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_slave_buffer[i]);
 563               		.loc 1 129 5 is_stmt 1 discriminator 3 view .LVU143
 564 0036 CE01      		movw r24,r28
 565 0038 8050      		subi r24,lo8(-(serial_slave_buffer))
 566 003a 9040      		sbci r25,hi8(-(serial_slave_buffer))
 567 003c 7C01      		movw r14,r24
 568 003e FC01      		movw r30,r24
 569 0040 8081      		ld r24,Z
 570 0042 0E94 0000 		call serial_write_byte
 571               	.LVL30:
 130:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_send();
 572               		.loc 1 130 5 discriminator 3 view .LVU144
 573 0046 0E94 0000 		call sync_send
 574               	.LVL31:
 131:keyboards/Dactylv2_Lightcycle/serial.c ****     checksum += serial_slave_buffer[i];
 575               		.loc 1 131 5 discriminator 3 view .LVU145
 576               		.loc 1 131 36 is_stmt 0 discriminator 3 view .LVU146
 577 004a F701      		movw r30,r14
 578 004c 8081      		ld r24,Z
 579               		.loc 1 131 14 discriminator 3 view .LVU147
 580 004e 180F      		add r17,r24
 581               	.LVL32:
 128:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_slave_buffer[i]);
 582               		.loc 1 128 51 is_stmt 1 discriminator 3 view .LVU148
 583 0050 2196      		adiw r28,1
 584               	.LVL33:
 128:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_slave_buffer[i]);
 585               		.loc 1 128 19 discriminator 3 view .LVU149
 128:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_slave_buffer[i]);
 586               		.loc 1 128 3 is_stmt 0 discriminator 3 view .LVU150
 587 0052 C730      		cpi r28,7
 588 0054 D105      		cpc r29,__zero_reg__
 589 0056 01F4      		brne .L20
 590               	.LBE97:
 132:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 133:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_write_byte(checksum);
 591               		.loc 1 133 3 is_stmt 1 view .LVU151
 592 0058 812F      		mov r24,r17
 593 005a 0E94 0000 		call serial_write_byte
 594               	.LVL34:
 134:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_send();
 595               		.loc 1 134 3 view .LVU152
 596 005e 0E94 0000 		call sync_send
 597               	.LVL35:
 135:keyboards/Dactylv2_Lightcycle/serial.c **** 
 136:keyboards/Dactylv2_Lightcycle/serial.c ****   // wait for the sync to finish sending
 137:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_delay();
 598               		.loc 1 137 3 view .LVU153
 599               	.LBB98:
 600               	.LBI98:
  28:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
 601               		.loc 1 28 6 view .LVU154
 602               	.LBE98:
  29:keyboards/Dactylv2_Lightcycle/serial.c **** }
 603               		.loc 1 29 3 view .LVU155
 604               	.LBB101:
 605               	.LBB99:
 606               	.LBI99:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 607               		.loc 2 255 1 view .LVU156
 608               	.LBB100:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 609               		.loc 2 257 2 view .LVU157
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 610               		.loc 2 261 2 view .LVU158
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 611               		.loc 2 262 2 view .LVU159
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 612               		.loc 2 263 2 view .LVU160
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 613               		.loc 2 273 3 view .LVU161
 614               		.loc 2 276 2 view .LVU162
 615 0062 F0E8      		ldi r31,lo8(-128)
 616 0064 FA95      	1:	dec r31
 617 0066 01F4      		brne 1b
 618               	.LVL36:
 619               		.loc 2 276 2 is_stmt 0 view .LVU163
 620               	.LBE100:
 621               	.LBE99:
 622               	.LBE101:
 138:keyboards/Dactylv2_Lightcycle/serial.c **** 
 139:keyboards/Dactylv2_Lightcycle/serial.c ****   // read the middle of pulses
 140:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY/2);
 623               		.loc 1 140 3 is_stmt 1 view .LVU164
 624               	.LBB102:
 625               	.LBI102:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 626               		.loc 2 255 1 view .LVU165
 627               	.LBB103:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 628               		.loc 2 257 2 view .LVU166
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 629               		.loc 2 261 2 view .LVU167
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 630               		.loc 2 262 2 view .LVU168
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 631               		.loc 2 263 2 view .LVU169
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 632               		.loc 2 273 3 view .LVU170
 633               		.loc 2 276 2 view .LVU171
 634 0068 80E4      		ldi r24,lo8(64)
 635 006a 8A95      	1:	dec r24
 636 006c 01F4      		brne 1b
 637               	.LVL37:
 638               		.loc 2 276 2 is_stmt 0 view .LVU172
 639               	.LBE103:
 640               	.LBE102:
 141:keyboards/Dactylv2_Lightcycle/serial.c **** 
 142:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t checksum_computed = 0;
 641               		.loc 1 142 3 is_stmt 1 view .LVU173
 143:keyboards/Dactylv2_Lightcycle/serial.c ****   for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
 642               		.loc 1 143 3 view .LVU174
 643               	.LBB104:
 644               		.loc 1 143 8 view .LVU175
 645               		.loc 1 143 19 view .LVU176
 144:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_master_buffer[i] = serial_read_byte();
 646               		.loc 1 144 5 view .LVU177
 647               		.loc 1 144 31 is_stmt 0 view .LVU178
 648 006e 0E94 0000 		call serial_read_byte
 649               	.LVL38:
 650               		.loc 1 144 29 view .LVU179
 651 0072 8093 0000 		sts serial_master_buffer,r24
 145:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_send();
 652               		.loc 1 145 5 is_stmt 1 view .LVU180
 653 0076 0E94 0000 		call sync_send
 654               	.LVL39:
 146:keyboards/Dactylv2_Lightcycle/serial.c ****     checksum_computed += serial_master_buffer[i];
 655               		.loc 1 146 5 view .LVU181
 656               		.loc 1 146 46 is_stmt 0 view .LVU182
 657 007a D091 0000 		lds r29,serial_master_buffer
 658               	.LVL40:
 143:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_master_buffer[i] = serial_read_byte();
 659               		.loc 1 143 52 is_stmt 1 view .LVU183
 143:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_master_buffer[i] = serial_read_byte();
 660               		.loc 1 143 19 view .LVU184
 661               	.LBE104:
 147:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 148:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t checksum_received = serial_read_byte();
 662               		.loc 1 148 3 view .LVU185
 663               		.loc 1 148 31 is_stmt 0 view .LVU186
 664 007e 0E94 0000 		call serial_read_byte
 665               	.LVL41:
 666 0082 C82F      		mov r28,r24
 667               	.LVL42:
 149:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_send();
 668               		.loc 1 149 3 is_stmt 1 view .LVU187
 669 0084 0E94 0000 		call sync_send
 670               	.LVL43:
 150:keyboards/Dactylv2_Lightcycle/serial.c **** 
 151:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input(); // end transaction
 671               		.loc 1 151 3 view .LVU188
 672 0088 0E94 0000 		call serial_input
 673               	.LVL44:
 152:keyboards/Dactylv2_Lightcycle/serial.c **** 
 153:keyboards/Dactylv2_Lightcycle/serial.c ****   if ( checksum_computed != checksum_received ) {
 674               		.loc 1 153 3 view .LVU189
 154:keyboards/Dactylv2_Lightcycle/serial.c ****     status |= SLAVE_DATA_CORRUPT;
 675               		.loc 1 154 12 is_stmt 0 view .LVU190
 676 008c 8091 0000 		lds r24,status
 153:keyboards/Dactylv2_Lightcycle/serial.c ****     status |= SLAVE_DATA_CORRUPT;
 677               		.loc 1 153 6 view .LVU191
 678 0090 CD17      		cp r28,r29
 679 0092 01F0      		breq .L21
 680               		.loc 1 154 5 is_stmt 1 view .LVU192
 681               		.loc 1 154 12 is_stmt 0 view .LVU193
 682 0094 8160      		ori r24,lo8(1)
 683               	.L24:
 155:keyboards/Dactylv2_Lightcycle/serial.c ****   } else {
 156:keyboards/Dactylv2_Lightcycle/serial.c ****     status &= ~SLAVE_DATA_CORRUPT;
 684               		.loc 1 156 12 view .LVU194
 685 0096 8093 0000 		sts status,r24
 686               	/* epilogue start */
 157:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 158:keyboards/Dactylv2_Lightcycle/serial.c **** }
 687               		.loc 1 158 1 view .LVU195
 688 009a FF91      		pop r31
 689 009c EF91      		pop r30
 690 009e DF91      		pop r29
 691               	.LVL45:
 692               		.loc 1 158 1 view .LVU196
 693 00a0 CF91      		pop r28
 694               	.LVL46:
 695               		.loc 1 158 1 view .LVU197
 696 00a2 BF91      		pop r27
 697 00a4 AF91      		pop r26
 698 00a6 9F91      		pop r25
 699 00a8 8F91      		pop r24
 700 00aa 7F91      		pop r23
 701 00ac 6F91      		pop r22
 702 00ae 5F91      		pop r21
 703 00b0 4F91      		pop r20
 704 00b2 3F91      		pop r19
 705 00b4 2F91      		pop r18
 706 00b6 1F91      		pop r17
 707               	.LVL47:
 708               		.loc 1 158 1 view .LVU198
 709 00b8 FF90      		pop r15
 710 00ba EF90      		pop r14
 711               	.LVL48:
 712               		.loc 1 158 1 view .LVU199
 713 00bc 0F90      		pop r0
 714 00be 0FBE      		out __SREG__,r0
 715 00c0 0F90      		pop r0
 716 00c2 1F90      		pop r1
 717 00c4 1895      		reti
 718               	.LVL49:
 719               	.L21:
 156:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 720               		.loc 1 156 5 is_stmt 1 view .LVU200
 156:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 721               		.loc 1 156 12 is_stmt 0 view .LVU201
 722 00c6 8E7F      		andi r24,lo8(-2)
 723 00c8 00C0      		rjmp .L24
 724               		.cfi_endproc
 725               	.LFE18:
 727               		.section	.text.serial_update_buffers,"ax",@progbits
 728               	.global	serial_update_buffers
 730               	serial_update_buffers:
 731               	.LFB20:
 159:keyboards/Dactylv2_Lightcycle/serial.c **** 
 160:keyboards/Dactylv2_Lightcycle/serial.c **** inline
 161:keyboards/Dactylv2_Lightcycle/serial.c **** bool serial_slave_DATA_CORRUPT(void) {
 162:keyboards/Dactylv2_Lightcycle/serial.c ****   return status & SLAVE_DATA_CORRUPT;
 163:keyboards/Dactylv2_Lightcycle/serial.c **** }
 164:keyboards/Dactylv2_Lightcycle/serial.c **** 
 165:keyboards/Dactylv2_Lightcycle/serial.c **** // Copies the serial_slave_buffer to the master and sends the
 166:keyboards/Dactylv2_Lightcycle/serial.c **** // serial_master_buffer to the slave.
 167:keyboards/Dactylv2_Lightcycle/serial.c **** //
 168:keyboards/Dactylv2_Lightcycle/serial.c **** // Returns:
 169:keyboards/Dactylv2_Lightcycle/serial.c **** // 0 => no error
 170:keyboards/Dactylv2_Lightcycle/serial.c **** // 1 => slave did not respond
 171:keyboards/Dactylv2_Lightcycle/serial.c **** int serial_update_buffers(void) {
 732               		.loc 1 171 33 is_stmt 1 view -0
 733               		.cfi_startproc
 734 0000 EF92      		push r14
 735               	.LCFI22:
 736               		.cfi_def_cfa_offset 3
 737               		.cfi_offset 14, -2
 738 0002 FF92      		push r15
 739               	.LCFI23:
 740               		.cfi_def_cfa_offset 4
 741               		.cfi_offset 15, -3
 742 0004 1F93      		push r17
 743               	.LCFI24:
 744               		.cfi_def_cfa_offset 5
 745               		.cfi_offset 17, -4
 746 0006 CF93      		push r28
 747               	.LCFI25:
 748               		.cfi_def_cfa_offset 6
 749               		.cfi_offset 28, -5
 750 0008 DF93      		push r29
 751               	.LCFI26:
 752               		.cfi_def_cfa_offset 7
 753               		.cfi_offset 29, -6
 754               	/* prologue: function */
 755               	/* frame size = 0 */
 756               	/* stack size = 5 */
 757               	.L__stack_usage = 5
 172:keyboards/Dactylv2_Lightcycle/serial.c ****   // this code is very time dependent, so we need to disable interrupts
 173:keyboards/Dactylv2_Lightcycle/serial.c ****   cli();
 758               		.loc 1 173 3 view .LVU203
 759               	/* #APP */
 760               	 ;  173 "keyboards/Dactylv2_Lightcycle/serial.c" 1
 761 000a F894      		cli
 762               	 ;  0 "" 2
 174:keyboards/Dactylv2_Lightcycle/serial.c **** 
 175:keyboards/Dactylv2_Lightcycle/serial.c ****   // signal to the slave that we want to start a transaction
 176:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
 763               		.loc 1 176 3 view .LVU204
 764               	/* #NOAPP */
 765 000c 0E94 0000 		call serial_output
 766               	.LVL50:
 177:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_low();
 767               		.loc 1 177 3 view .LVU205
 768               	.LBB115:
 769               	.LBI115:
  50:keyboards/Dactylv2_Lightcycle/serial.c ****   SERIAL_PIN_PORT &= ~SERIAL_PIN_MASK;
 770               		.loc 1 50 6 view .LVU206
 771               	.LBB116:
  51:keyboards/Dactylv2_Lightcycle/serial.c **** }
 772               		.loc 1 51 3 view .LVU207
  51:keyboards/Dactylv2_Lightcycle/serial.c **** }
 773               		.loc 1 51 19 is_stmt 0 view .LVU208
 774 0010 5898      		cbi 0xb,0
 775               	.LBE116:
 776               	.LBE115:
 178:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(1);
 777               		.loc 1 178 3 is_stmt 1 view .LVU209
 778               	.LVL51:
 779               	.LBB117:
 780               	.LBI117:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 781               		.loc 2 255 1 view .LVU210
 782               	.LBB118:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 783               		.loc 2 257 2 view .LVU211
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 784               		.loc 2 261 2 view .LVU212
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 785               		.loc 2 262 2 view .LVU213
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 786               		.loc 2 263 2 view .LVU214
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 787               		.loc 2 273 3 view .LVU215
 788               		.loc 2 276 2 view .LVU216
 789 0012 25E0      		ldi r18,lo8(5)
 790 0014 2A95      	1:	dec r18
 791 0016 01F4      		brne 1b
 792 0018 0000      		nop
 793               	.LVL52:
 794               		.loc 2 276 2 is_stmt 0 view .LVU217
 795               	.LBE118:
 796               	.LBE117:
 179:keyboards/Dactylv2_Lightcycle/serial.c **** 
 180:keyboards/Dactylv2_Lightcycle/serial.c ****   // wait for the slaves response
 181:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_input();
 797               		.loc 1 181 3 is_stmt 1 view .LVU218
 798 001a 0E94 0000 		call serial_input
 799               	.LVL53:
 182:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_high();
 800               		.loc 1 182 3 view .LVU219
 801 001e 0E94 0000 		call serial_high
 802               	.LVL54:
 183:keyboards/Dactylv2_Lightcycle/serial.c ****   _delay_us(SERIAL_DELAY);
 803               		.loc 1 183 3 view .LVU220
 804               	.LBB119:
 805               	.LBI119:
 255:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** {
 806               		.loc 2 255 1 view .LVU221
 807               	.LBB120:
 257:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 808               		.loc 2 257 2 view .LVU222
 261:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 809               		.loc 2 261 2 view .LVU223
 262:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 810               		.loc 2 262 2 view .LVU224
 263:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 
 811               		.loc 2 263 2 view .LVU225
 273:/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/util/delay.h **** 	#endif
 812               		.loc 2 273 3 view .LVU226
 813               		.loc 2 276 2 view .LVU227
 814 0022 30E8      		ldi r19,lo8(-128)
 815 0024 3A95      	1:	dec r19
 816 0026 01F4      		brne 1b
 817               	.LVL55:
 818               		.loc 2 276 2 is_stmt 0 view .LVU228
 819               	.LBE120:
 820               	.LBE119:
 184:keyboards/Dactylv2_Lightcycle/serial.c **** 
 185:keyboards/Dactylv2_Lightcycle/serial.c ****   // check if the slave is present
 186:keyboards/Dactylv2_Lightcycle/serial.c ****   if (serial_read_pin()) {
 821               		.loc 1 186 3 is_stmt 1 view .LVU229
 822               	.LBB121:
 823               	.LBI121:
  45:keyboards/Dactylv2_Lightcycle/serial.c ****   return !!(SERIAL_PIN_INPUT & SERIAL_PIN_MASK);
 824               		.loc 1 45 9 view .LVU230
 825               	.LBB122:
  46:keyboards/Dactylv2_Lightcycle/serial.c **** }
 826               		.loc 1 46 3 view .LVU231
  46:keyboards/Dactylv2_Lightcycle/serial.c **** }
 827               		.loc 1 46 13 is_stmt 0 view .LVU232
 828 0028 89B1      		in r24,0x9
 829               	.LBE122:
 830               	.LBE121:
 831               		.loc 1 186 6 view .LVU233
 832 002a 182F      		mov r17,r24
 833 002c 1170      		andi r17,lo8(1)
 834 002e 80FF      		sbrs r24,0
 835 0030 00C0      		rjmp .L26
 836               	.L31:
 187:keyboards/Dactylv2_Lightcycle/serial.c ****     // slave failed to pull the line low, assume not present
 188:keyboards/Dactylv2_Lightcycle/serial.c ****     sei();
 189:keyboards/Dactylv2_Lightcycle/serial.c ****     return 1;
 190:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 191:keyboards/Dactylv2_Lightcycle/serial.c **** 
 192:keyboards/Dactylv2_Lightcycle/serial.c ****   // if the slave is present syncronize with it
 193:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_recv();
 194:keyboards/Dactylv2_Lightcycle/serial.c **** 
 195:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t checksum_computed = 0;
 196:keyboards/Dactylv2_Lightcycle/serial.c ****   // receive data from the slave
 197:keyboards/Dactylv2_Lightcycle/serial.c ****   for (int i = 0; i < SERIAL_SLAVE_BUFFER_LENGTH; ++i) {
 198:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 199:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_recv();
 200:keyboards/Dactylv2_Lightcycle/serial.c ****     checksum_computed += serial_slave_buffer[i];
 201:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 202:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t checksum_received = serial_read_byte();
 203:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_recv();
 204:keyboards/Dactylv2_Lightcycle/serial.c **** 
 205:keyboards/Dactylv2_Lightcycle/serial.c ****   if (checksum_computed != checksum_received) {
 206:keyboards/Dactylv2_Lightcycle/serial.c ****     sei();
 837               		.loc 1 206 5 is_stmt 1 view .LVU234
 838               	/* #APP */
 839               	 ;  206 "keyboards/Dactylv2_Lightcycle/serial.c" 1
 840 0032 7894      		sei
 841               	 ;  0 "" 2
 207:keyboards/Dactylv2_Lightcycle/serial.c ****     return 1;
 842               		.loc 1 207 5 view .LVU235
 843               		.loc 1 207 12 is_stmt 0 view .LVU236
 844               	/* #NOAPP */
 845 0034 81E0      		ldi r24,lo8(1)
 846 0036 90E0      		ldi r25,0
 847               	.L25:
 848               	/* epilogue start */
 208:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 209:keyboards/Dactylv2_Lightcycle/serial.c **** 
 210:keyboards/Dactylv2_Lightcycle/serial.c ****   uint8_t checksum = 0;
 211:keyboards/Dactylv2_Lightcycle/serial.c ****   // send data to the slave
 212:keyboards/Dactylv2_Lightcycle/serial.c ****   for (int i = 0; i < SERIAL_MASTER_BUFFER_LENGTH; ++i) {
 213:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_master_buffer[i]);
 214:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_recv();
 215:keyboards/Dactylv2_Lightcycle/serial.c ****     checksum += serial_master_buffer[i];
 216:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 217:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_write_byte(checksum);
 218:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_recv();
 219:keyboards/Dactylv2_Lightcycle/serial.c **** 
 220:keyboards/Dactylv2_Lightcycle/serial.c ****   // always, release the line when not in use
 221:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_output();
 222:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_high();
 223:keyboards/Dactylv2_Lightcycle/serial.c **** 
 224:keyboards/Dactylv2_Lightcycle/serial.c ****   sei();
 225:keyboards/Dactylv2_Lightcycle/serial.c ****   return 0;
 226:keyboards/Dactylv2_Lightcycle/serial.c **** }
 849               		.loc 1 226 1 view .LVU237
 850 0038 DF91      		pop r29
 851 003a CF91      		pop r28
 852 003c 1F91      		pop r17
 853 003e FF90      		pop r15
 854 0040 EF90      		pop r14
 855 0042 0895      		ret
 856               	.L26:
 193:keyboards/Dactylv2_Lightcycle/serial.c **** 
 857               		.loc 1 193 3 is_stmt 1 view .LVU238
 858 0044 0E94 0000 		call sync_recv
 859               	.LVL56:
 195:keyboards/Dactylv2_Lightcycle/serial.c ****   // receive data from the slave
 860               		.loc 1 195 3 view .LVU239
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 861               		.loc 1 197 3 view .LVU240
 862               	.LBB123:
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 863               		.loc 1 197 8 view .LVU241
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 864               		.loc 1 197 19 view .LVU242
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 865               		.loc 1 197 12 is_stmt 0 view .LVU243
 866 0048 D0E0      		ldi r29,0
 867 004a C0E0      		ldi r28,0
 868               	.LVL57:
 869               	.L28:
 198:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_recv();
 870               		.loc 1 198 5 is_stmt 1 discriminator 3 view .LVU244
 198:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_recv();
 871               		.loc 1 198 30 is_stmt 0 discriminator 3 view .LVU245
 872 004c 0E94 0000 		call serial_read_byte
 873               	.LVL58:
 198:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_recv();
 874               		.loc 1 198 28 discriminator 3 view .LVU246
 875 0050 FE01      		movw r30,r28
 876 0052 E050      		subi r30,lo8(-(serial_slave_buffer))
 877 0054 F040      		sbci r31,hi8(-(serial_slave_buffer))
 878 0056 7F01      		movw r14,r30
 879 0058 8083      		st Z,r24
 199:keyboards/Dactylv2_Lightcycle/serial.c ****     checksum_computed += serial_slave_buffer[i];
 880               		.loc 1 199 5 is_stmt 1 discriminator 3 view .LVU247
 881 005a 0E94 0000 		call sync_recv
 882               	.LVL59:
 200:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 883               		.loc 1 200 5 discriminator 3 view .LVU248
 200:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 884               		.loc 1 200 45 is_stmt 0 discriminator 3 view .LVU249
 885 005e F701      		movw r30,r14
 886 0060 8081      		ld r24,Z
 200:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 887               		.loc 1 200 23 discriminator 3 view .LVU250
 888 0062 180F      		add r17,r24
 889               	.LVL60:
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 890               		.loc 1 197 51 is_stmt 1 discriminator 3 view .LVU251
 891 0064 2196      		adiw r28,1
 892               	.LVL61:
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 893               		.loc 1 197 19 discriminator 3 view .LVU252
 197:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_slave_buffer[i] = serial_read_byte();
 894               		.loc 1 197 3 is_stmt 0 discriminator 3 view .LVU253
 895 0066 C730      		cpi r28,7
 896 0068 D105      		cpc r29,__zero_reg__
 897 006a 01F4      		brne .L28
 898               	.LBE123:
 202:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_recv();
 899               		.loc 1 202 3 is_stmt 1 view .LVU254
 202:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_recv();
 900               		.loc 1 202 31 is_stmt 0 view .LVU255
 901 006c 0E94 0000 		call serial_read_byte
 902               	.LVL62:
 903 0070 C82F      		mov r28,r24
 904               	.LVL63:
 203:keyboards/Dactylv2_Lightcycle/serial.c **** 
 905               		.loc 1 203 3 is_stmt 1 view .LVU256
 906 0072 0E94 0000 		call sync_recv
 907               	.LVL64:
 205:keyboards/Dactylv2_Lightcycle/serial.c ****     sei();
 908               		.loc 1 205 3 view .LVU257
 205:keyboards/Dactylv2_Lightcycle/serial.c ****     sei();
 909               		.loc 1 205 6 is_stmt 0 view .LVU258
 910 0076 C113      		cpse r28,r17
 911 0078 00C0      		rjmp .L31
 912               	.LVL65:
 913               	.LBB124:
 212:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_master_buffer[i]);
 914               		.loc 1 212 19 is_stmt 1 discriminator 1 view .LVU259
 213:keyboards/Dactylv2_Lightcycle/serial.c ****     sync_recv();
 915               		.loc 1 213 5 discriminator 1 view .LVU260
 916 007a 8091 0000 		lds r24,serial_master_buffer
 917 007e 0E94 0000 		call serial_write_byte
 918               	.LVL66:
 214:keyboards/Dactylv2_Lightcycle/serial.c ****     checksum += serial_master_buffer[i];
 919               		.loc 1 214 5 discriminator 1 view .LVU261
 920 0082 0E94 0000 		call sync_recv
 921               	.LVL67:
 215:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 922               		.loc 1 215 5 discriminator 1 view .LVU262
 215:keyboards/Dactylv2_Lightcycle/serial.c ****   }
 923               		.loc 1 215 37 is_stmt 0 discriminator 1 view .LVU263
 924 0086 8091 0000 		lds r24,serial_master_buffer
 925               	.LVL68:
 212:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_master_buffer[i]);
 926               		.loc 1 212 52 is_stmt 1 discriminator 1 view .LVU264
 212:keyboards/Dactylv2_Lightcycle/serial.c ****     serial_write_byte(serial_master_buffer[i]);
 927               		.loc 1 212 19 discriminator 1 view .LVU265
 928               	.LBE124:
 217:keyboards/Dactylv2_Lightcycle/serial.c ****   sync_recv();
 929               		.loc 1 217 3 discriminator 1 view .LVU266
 930 008a 0E94 0000 		call serial_write_byte
 931               	.LVL69:
 218:keyboards/Dactylv2_Lightcycle/serial.c **** 
 932               		.loc 1 218 3 discriminator 1 view .LVU267
 933 008e 0E94 0000 		call sync_recv
 934               	.LVL70:
 221:keyboards/Dactylv2_Lightcycle/serial.c ****   serial_high();
 935               		.loc 1 221 3 discriminator 1 view .LVU268
 936 0092 0E94 0000 		call serial_output
 937               	.LVL71:
 222:keyboards/Dactylv2_Lightcycle/serial.c **** 
 938               		.loc 1 222 3 discriminator 1 view .LVU269
 939 0096 0E94 0000 		call serial_high
 940               	.LVL72:
 224:keyboards/Dactylv2_Lightcycle/serial.c ****   return 0;
 941               		.loc 1 224 3 discriminator 1 view .LVU270
 942               	/* #APP */
 943               	 ;  224 "keyboards/Dactylv2_Lightcycle/serial.c" 1
 944 009a 7894      		sei
 945               	 ;  0 "" 2
 225:keyboards/Dactylv2_Lightcycle/serial.c **** }
 946               		.loc 1 225 3 discriminator 1 view .LVU271
 225:keyboards/Dactylv2_Lightcycle/serial.c **** }
 947               		.loc 1 225 10 is_stmt 0 discriminator 1 view .LVU272
 948               	/* #NOAPP */
 949 009c 90E0      		ldi r25,0
 950 009e 80E0      		ldi r24,0
 951 00a0 00C0      		rjmp .L25
 952               		.cfi_endproc
 953               	.LFE20:
 955               	.global	status
 956               		.section	.bss.status,"aw",@nobits
 959               	status:
 960 0000 00        		.zero	1
 961               	.global	serial_master_buffer
 962               		.section	.bss.serial_master_buffer,"aw",@nobits
 965               	serial_master_buffer:
 966 0000 00        		.zero	1
 967               	.global	serial_slave_buffer
 968               		.section	.bss.serial_slave_buffer,"aw",@nobits
 971               	serial_slave_buffer:
 972 0000 0000 0000 		.zero	7
 972      0000 00
 973               		.text
 974               	.Letext0:
 975               		.file 3 "/usr/local/Cellar/avr-gcc@9/9.3.0_3/avr/include/stdint.h"
 976               		.file 4 "keyboards/Dactylv2_Lightcycle/serial.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial.c
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:4      *ABS*:000000000000003f __SREG__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:12     .text.serial_output:0000000000000000 serial_output
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:32     .text.serial_input:0000000000000000 serial_input
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:54     .text.serial_high:0000000000000000 serial_high
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:73     .text.sync_recv:0000000000000000 sync_recv
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:133    .text.serial_read_byte:0000000000000000 serial_read_byte
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:237    .text.serial_write_byte:0000000000000000 serial_write_byte
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:353    .text.sync_send:0000000000000000 sync_send
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:409    .text.serial_master_init:0000000000000000 serial_master_init
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:429    .text.serial_slave_init:0000000000000000 serial_slave_init
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:459    .text.__vector_1:0000000000000000 __vector_1
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:971    .bss.serial_slave_buffer:0000000000000000 serial_slave_buffer
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:965    .bss.serial_master_buffer:0000000000000000 serial_master_buffer
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:959    .bss.status:0000000000000000 status
/var/folders/_p/hcjbsmwn4x14x6mnhxrqw_c80000gn/T//ccYL5U3F.s:730    .text.serial_update_buffers:0000000000000000 serial_update_buffers

UNDEFINED SYMBOLS
__do_clear_bss
