   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB11:
  15               		.file 1 "keyboards/RentalCar6Column/matrix.c"
   1:keyboards/RentalCar6Column/matrix.c **** /*
   2:keyboards/RentalCar6Column/matrix.c **** Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:keyboards/RentalCar6Column/matrix.c **** 
   4:keyboards/RentalCar6Column/matrix.c **** This program is free software: you can redistribute it and/or modify
   5:keyboards/RentalCar6Column/matrix.c **** it under the terms of the GNU General Public License as published by
   6:keyboards/RentalCar6Column/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   7:keyboards/RentalCar6Column/matrix.c **** (at your option) any later version.
   8:keyboards/RentalCar6Column/matrix.c **** 
   9:keyboards/RentalCar6Column/matrix.c **** This program is distributed in the hope that it will be useful,
  10:keyboards/RentalCar6Column/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:keyboards/RentalCar6Column/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:keyboards/RentalCar6Column/matrix.c **** GNU General Public License for more details.
  13:keyboards/RentalCar6Column/matrix.c **** 
  14:keyboards/RentalCar6Column/matrix.c **** You should have received a copy of the GNU General Public License
  15:keyboards/RentalCar6Column/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:keyboards/RentalCar6Column/matrix.c **** */
  17:keyboards/RentalCar6Column/matrix.c **** 
  18:keyboards/RentalCar6Column/matrix.c **** /*
  19:keyboards/RentalCar6Column/matrix.c ****  * scan matrix
  20:keyboards/RentalCar6Column/matrix.c ****  */
  21:keyboards/RentalCar6Column/matrix.c **** #include <stdint.h>
  22:keyboards/RentalCar6Column/matrix.c **** #include <stdbool.h>
  23:keyboards/RentalCar6Column/matrix.c **** #include <avr/io.h>
  24:keyboards/RentalCar6Column/matrix.c **** #include "wait.h"
  25:keyboards/RentalCar6Column/matrix.c **** #include "print.h"
  26:keyboards/RentalCar6Column/matrix.c **** #include "debug.h"
  27:keyboards/RentalCar6Column/matrix.c **** #include "util.h"
  28:keyboards/RentalCar6Column/matrix.c **** #include "matrix.h"
  29:keyboards/RentalCar6Column/matrix.c **** #include "split_util.h"
  30:keyboards/RentalCar6Column/matrix.c **** #include "pro_micro.h"
  31:keyboards/RentalCar6Column/matrix.c **** #include "config.h"
  32:keyboards/RentalCar6Column/matrix.c **** #include "timer.h"
  33:keyboards/RentalCar6Column/matrix.c **** 
  34:keyboards/RentalCar6Column/matrix.c **** #ifdef USE_I2C
  35:keyboards/RentalCar6Column/matrix.c **** #  include "i2c.h"
  36:keyboards/RentalCar6Column/matrix.c **** #else // USE_SERIAL
  37:keyboards/RentalCar6Column/matrix.c **** #  include "serial.h"
  38:keyboards/RentalCar6Column/matrix.c **** #endif
  39:keyboards/RentalCar6Column/matrix.c **** 
  40:keyboards/RentalCar6Column/matrix.c **** #ifndef DEBOUNCING_DELAY
  41:keyboards/RentalCar6Column/matrix.c **** #   define DEBOUNCING_DELAY 5
  42:keyboards/RentalCar6Column/matrix.c **** #endif
  43:keyboards/RentalCar6Column/matrix.c **** 
  44:keyboards/RentalCar6Column/matrix.c **** #if (DEBOUNCING_DELAY > 0)
  45:keyboards/RentalCar6Column/matrix.c ****     static uint16_t debouncing_time;
  46:keyboards/RentalCar6Column/matrix.c ****     static bool debouncing = false;
  47:keyboards/RentalCar6Column/matrix.c **** #endif
  48:keyboards/RentalCar6Column/matrix.c **** 
  49:keyboards/RentalCar6Column/matrix.c **** #if (MATRIX_COLS <= 8)
  50:keyboards/RentalCar6Column/matrix.c **** #    define print_matrix_header()  print("\nr/c 01234567\n")
  51:keyboards/RentalCar6Column/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse8(matrix_get_row(row))
  52:keyboards/RentalCar6Column/matrix.c **** #    define matrix_bitpop(i)       bitpop(matrix[i])
  53:keyboards/RentalCar6Column/matrix.c **** #    define ROW_SHIFTER ((uint8_t)1)
  54:keyboards/RentalCar6Column/matrix.c **** #else
  55:keyboards/RentalCar6Column/matrix.c **** #    error "Currently only supports 8 COLS"
  56:keyboards/RentalCar6Column/matrix.c **** #endif
  57:keyboards/RentalCar6Column/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  58:keyboards/RentalCar6Column/matrix.c **** 
  59:keyboards/RentalCar6Column/matrix.c **** #define ERROR_DISCONNECT_COUNT 5
  60:keyboards/RentalCar6Column/matrix.c **** 
  61:keyboards/RentalCar6Column/matrix.c **** #define ROWS_PER_HAND (MATRIX_ROWS/2)
  62:keyboards/RentalCar6Column/matrix.c **** 
  63:keyboards/RentalCar6Column/matrix.c **** static uint8_t error_count = 0;
  64:keyboards/RentalCar6Column/matrix.c **** 
  65:keyboards/RentalCar6Column/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  66:keyboards/RentalCar6Column/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  67:keyboards/RentalCar6Column/matrix.c **** 
  68:keyboards/RentalCar6Column/matrix.c **** /* matrix state(1:on, 0:off) */
  69:keyboards/RentalCar6Column/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  70:keyboards/RentalCar6Column/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  71:keyboards/RentalCar6Column/matrix.c **** 
  72:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
  73:keyboards/RentalCar6Column/matrix.c ****     static void init_cols(void);
  74:keyboards/RentalCar6Column/matrix.c ****     static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row);
  75:keyboards/RentalCar6Column/matrix.c ****     static void unselect_rows(void);
  76:keyboards/RentalCar6Column/matrix.c ****     static void select_row(uint8_t row);
  77:keyboards/RentalCar6Column/matrix.c ****     static void unselect_row(uint8_t row);
  78:keyboards/RentalCar6Column/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
  79:keyboards/RentalCar6Column/matrix.c ****     static void init_rows(void);
  80:keyboards/RentalCar6Column/matrix.c ****     static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col);
  81:keyboards/RentalCar6Column/matrix.c ****     static void unselect_cols(void);
  82:keyboards/RentalCar6Column/matrix.c ****     static void unselect_col(uint8_t col);
  83:keyboards/RentalCar6Column/matrix.c ****     static void select_col(uint8_t col);
  84:keyboards/RentalCar6Column/matrix.c **** #endif
  85:keyboards/RentalCar6Column/matrix.c **** __attribute__ ((weak))
  86:keyboards/RentalCar6Column/matrix.c **** void matrix_init_quantum(void) {
  87:keyboards/RentalCar6Column/matrix.c ****     matrix_init_kb();
  88:keyboards/RentalCar6Column/matrix.c **** }
  89:keyboards/RentalCar6Column/matrix.c **** 
  90:keyboards/RentalCar6Column/matrix.c **** __attribute__ ((weak))
  91:keyboards/RentalCar6Column/matrix.c **** void matrix_scan_quantum(void) {
  92:keyboards/RentalCar6Column/matrix.c ****     matrix_scan_kb();
  93:keyboards/RentalCar6Column/matrix.c **** }
  94:keyboards/RentalCar6Column/matrix.c **** 
  95:keyboards/RentalCar6Column/matrix.c **** __attribute__ ((weak))
  96:keyboards/RentalCar6Column/matrix.c **** void matrix_init_kb(void) {
  97:keyboards/RentalCar6Column/matrix.c ****     matrix_init_user();
  98:keyboards/RentalCar6Column/matrix.c **** }
  99:keyboards/RentalCar6Column/matrix.c **** 
 100:keyboards/RentalCar6Column/matrix.c **** __attribute__ ((weak))
 101:keyboards/RentalCar6Column/matrix.c **** void matrix_scan_kb(void) {
 102:keyboards/RentalCar6Column/matrix.c ****     matrix_scan_user();
 103:keyboards/RentalCar6Column/matrix.c **** }
 104:keyboards/RentalCar6Column/matrix.c **** 
 105:keyboards/RentalCar6Column/matrix.c **** __attribute__ ((weak))
 106:keyboards/RentalCar6Column/matrix.c **** void matrix_init_user(void) {
  16               		.loc 1 106 29 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 107:keyboards/RentalCar6Column/matrix.c **** }
  22               		.loc 1 107 1 view .LVU1
  23               	/* epilogue start */
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE11:
  28               		.set	matrix_init_user.localalias.0,matrix_init_user
  29               		.section	.text.matrix_init_kb,"ax",@progbits
  30               		.weak	matrix_init_kb
  32               	matrix_init_kb:
  33               	.LFB9:
  96:keyboards/RentalCar6Column/matrix.c ****     matrix_init_user();
  34               		.loc 1 96 27 view -0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  97:keyboards/RentalCar6Column/matrix.c **** }
  40               		.loc 1 97 5 view .LVU3
  41 0000 0C94 0000 		jmp matrix_init_user
  42               	.LVL0:
  43               		.cfi_endproc
  44               	.LFE9:
  46               		.section	.text.matrix_init_quantum,"ax",@progbits
  47               		.weak	matrix_init_quantum
  49               	matrix_init_quantum:
  50               	.LFB7:
  86:keyboards/RentalCar6Column/matrix.c ****     matrix_init_kb();
  51               		.loc 1 86 32 view -0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  87:keyboards/RentalCar6Column/matrix.c **** }
  57               		.loc 1 87 5 view .LVU5
  58 0000 0C94 0000 		jmp matrix_init_kb
  59               	.LVL1:
  60               		.cfi_endproc
  61               	.LFE7:
  63               		.section	.text.matrix_scan_user,"ax",@progbits
  64               		.weak	matrix_scan_user
  66               	matrix_scan_user:
  67               	.LFB31:
  68               		.cfi_startproc
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  73               	/* epilogue start */
  74 0000 0895      		ret
  75               		.cfi_endproc
  76               	.LFE31:
  78               		.section	.text.matrix_scan_kb,"ax",@progbits
  79               		.weak	matrix_scan_kb
  81               	matrix_scan_kb:
  82               	.LFB10:
 101:keyboards/RentalCar6Column/matrix.c ****     matrix_scan_user();
  83               		.loc 1 101 27 view -0
  84               		.cfi_startproc
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
 102:keyboards/RentalCar6Column/matrix.c **** }
  89               		.loc 1 102 5 view .LVU7
  90 0000 0C94 0000 		jmp matrix_scan_user
  91               	.LVL2:
  92               		.cfi_endproc
  93               	.LFE10:
  95               		.section	.text.matrix_scan_quantum,"ax",@progbits
  96               		.weak	matrix_scan_quantum
  98               	matrix_scan_quantum:
  99               	.LFB8:
  91:keyboards/RentalCar6Column/matrix.c ****     matrix_scan_kb();
 100               		.loc 1 91 32 view -0
 101               		.cfi_startproc
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 0 */
 105               	.L__stack_usage = 0
  92:keyboards/RentalCar6Column/matrix.c **** }
 106               		.loc 1 92 5 view .LVU9
 107 0000 0C94 0000 		jmp matrix_scan_kb
 108               	.LVL3:
 109               		.cfi_endproc
 110               	.LFE8:
 112               		.section	.text.matrix_rows,"ax",@progbits
 113               	.global	matrix_rows
 115               	matrix_rows:
 116               	.LFB13:
 108:keyboards/RentalCar6Column/matrix.c **** 
 109:keyboards/RentalCar6Column/matrix.c **** __attribute__ ((weak))
 110:keyboards/RentalCar6Column/matrix.c **** void matrix_scan_user(void) {
 111:keyboards/RentalCar6Column/matrix.c **** }
 112:keyboards/RentalCar6Column/matrix.c **** 
 113:keyboards/RentalCar6Column/matrix.c **** inline
 114:keyboards/RentalCar6Column/matrix.c **** uint8_t matrix_rows(void)
 115:keyboards/RentalCar6Column/matrix.c **** {
 117               		.loc 1 115 1 view -0
 118               		.cfi_startproc
 119               	/* prologue: function */
 120               	/* frame size = 0 */
 121               	/* stack size = 0 */
 122               	.L__stack_usage = 0
 116:keyboards/RentalCar6Column/matrix.c ****     return MATRIX_ROWS;
 123               		.loc 1 116 5 view .LVU11
 117:keyboards/RentalCar6Column/matrix.c **** }
 124               		.loc 1 117 1 is_stmt 0 view .LVU12
 125 0000 8CE0      		ldi r24,lo8(12)
 126               	/* epilogue start */
 127 0002 0895      		ret
 128               		.cfi_endproc
 129               	.LFE13:
 131               		.section	.text.matrix_cols,"ax",@progbits
 132               	.global	matrix_cols
 134               	matrix_cols:
 135               	.LFB14:
 118:keyboards/RentalCar6Column/matrix.c **** 
 119:keyboards/RentalCar6Column/matrix.c **** inline
 120:keyboards/RentalCar6Column/matrix.c **** uint8_t matrix_cols(void)
 121:keyboards/RentalCar6Column/matrix.c **** {
 136               		.loc 1 121 1 is_stmt 1 view -0
 137               		.cfi_startproc
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
 122:keyboards/RentalCar6Column/matrix.c ****     return MATRIX_COLS;
 142               		.loc 1 122 5 view .LVU14
 123:keyboards/RentalCar6Column/matrix.c **** }
 143               		.loc 1 123 1 is_stmt 0 view .LVU15
 144 0000 86E0      		ldi r24,lo8(6)
 145               	/* epilogue start */
 146 0002 0895      		ret
 147               		.cfi_endproc
 148               	.LFE14:
 150               		.section	.text.matrix_init,"ax",@progbits
 151               	.global	matrix_init
 153               	matrix_init:
 154               	.LFB15:
 124:keyboards/RentalCar6Column/matrix.c **** 
 125:keyboards/RentalCar6Column/matrix.c **** void matrix_init(void)
 126:keyboards/RentalCar6Column/matrix.c **** {
 155               		.loc 1 126 1 is_stmt 1 view -0
 156               		.cfi_startproc
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
 127:keyboards/RentalCar6Column/matrix.c ****     debug_enable = true;
 161               		.loc 1 127 5 view .LVU17
 128:keyboards/RentalCar6Column/matrix.c ****     debug_matrix = true;
 162               		.loc 1 128 5 view .LVU18
 129:keyboards/RentalCar6Column/matrix.c ****     debug_mouse = true;
 163               		.loc 1 129 5 view .LVU19
 127:keyboards/RentalCar6Column/matrix.c ****     debug_enable = true;
 164               		.loc 1 127 18 is_stmt 0 view .LVU20
 165 0000 8091 0000 		lds r24,debug_config
 166 0004 8B60      		ori r24,lo8(11)
 167 0006 8093 0000 		sts debug_config,r24
 130:keyboards/RentalCar6Column/matrix.c ****     // initialize row and col
 131:keyboards/RentalCar6Column/matrix.c ****     unselect_rows();
 168               		.loc 1 131 5 is_stmt 1 view .LVU21
 169               	.LBB15:
 170               	.LBI15:
 132:keyboards/RentalCar6Column/matrix.c ****     init_cols();
 133:keyboards/RentalCar6Column/matrix.c **** 
 134:keyboards/RentalCar6Column/matrix.c ****     TX_RX_LED_INIT;
 135:keyboards/RentalCar6Column/matrix.c **** 
 136:keyboards/RentalCar6Column/matrix.c ****     // initialize matrix state: all keys off
 137:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 138:keyboards/RentalCar6Column/matrix.c ****         matrix[i] = 0;
 139:keyboards/RentalCar6Column/matrix.c ****         matrix_debouncing[i] = 0;
 140:keyboards/RentalCar6Column/matrix.c ****     }
 141:keyboards/RentalCar6Column/matrix.c **** 
 142:keyboards/RentalCar6Column/matrix.c ****     matrix_init_quantum();
 143:keyboards/RentalCar6Column/matrix.c **** 
 144:keyboards/RentalCar6Column/matrix.c **** }
 145:keyboards/RentalCar6Column/matrix.c **** 
 146:keyboards/RentalCar6Column/matrix.c **** uint8_t _matrix_scan(void)
 147:keyboards/RentalCar6Column/matrix.c **** {
 148:keyboards/RentalCar6Column/matrix.c ****     int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
 149:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 150:keyboards/RentalCar6Column/matrix.c ****     // Set row, read cols
 151:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t current_row = 0; current_row < ROWS_PER_HAND; current_row++) {
 152:keyboards/RentalCar6Column/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 153:keyboards/RentalCar6Column/matrix.c ****             bool matrix_changed = read_cols_on_row(matrix_debouncing+offset, current_row);
 154:keyboards/RentalCar6Column/matrix.c **** 
 155:keyboards/RentalCar6Column/matrix.c ****             if (matrix_changed) {
 156:keyboards/RentalCar6Column/matrix.c ****                 debouncing = true;
 157:keyboards/RentalCar6Column/matrix.c ****                 debouncing_time = timer_read();
 158:keyboards/RentalCar6Column/matrix.c ****                 PORTD ^= (1 << 2);
 159:keyboards/RentalCar6Column/matrix.c ****             }
 160:keyboards/RentalCar6Column/matrix.c **** 
 161:keyboards/RentalCar6Column/matrix.c **** #       else
 162:keyboards/RentalCar6Column/matrix.c ****             read_cols_on_row(matrix+offset, current_row);
 163:keyboards/RentalCar6Column/matrix.c **** #       endif
 164:keyboards/RentalCar6Column/matrix.c **** 
 165:keyboards/RentalCar6Column/matrix.c ****     }
 166:keyboards/RentalCar6Column/matrix.c **** 
 167:keyboards/RentalCar6Column/matrix.c **** #elif (DIODE_DIRECTION == ROW2COL)
 168:keyboards/RentalCar6Column/matrix.c ****     // Set col, read rows
 169:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 170:keyboards/RentalCar6Column/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 171:keyboards/RentalCar6Column/matrix.c ****             bool matrix_changed = read_rows_on_col(matrix_debouncing+offset, current_col);
 172:keyboards/RentalCar6Column/matrix.c ****             if (matrix_changed) {
 173:keyboards/RentalCar6Column/matrix.c ****                 debouncing = true;
 174:keyboards/RentalCar6Column/matrix.c ****                 debouncing_time = timer_read();
 175:keyboards/RentalCar6Column/matrix.c ****             }
 176:keyboards/RentalCar6Column/matrix.c **** #       else
 177:keyboards/RentalCar6Column/matrix.c ****              read_rows_on_col(matrix+offset, current_col);
 178:keyboards/RentalCar6Column/matrix.c **** #       endif
 179:keyboards/RentalCar6Column/matrix.c **** 
 180:keyboards/RentalCar6Column/matrix.c ****     }
 181:keyboards/RentalCar6Column/matrix.c **** #endif
 182:keyboards/RentalCar6Column/matrix.c **** 
 183:keyboards/RentalCar6Column/matrix.c **** #   if (DEBOUNCING_DELAY > 0)
 184:keyboards/RentalCar6Column/matrix.c ****         if (debouncing && (timer_elapsed(debouncing_time) > DEBOUNCING_DELAY)) {
 185:keyboards/RentalCar6Column/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 186:keyboards/RentalCar6Column/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 187:keyboards/RentalCar6Column/matrix.c ****             }
 188:keyboards/RentalCar6Column/matrix.c ****             debouncing = false;
 189:keyboards/RentalCar6Column/matrix.c ****         }
 190:keyboards/RentalCar6Column/matrix.c **** #   endif
 191:keyboards/RentalCar6Column/matrix.c **** 
 192:keyboards/RentalCar6Column/matrix.c ****     return 1;
 193:keyboards/RentalCar6Column/matrix.c **** }
 194:keyboards/RentalCar6Column/matrix.c **** 
 195:keyboards/RentalCar6Column/matrix.c **** #ifdef USE_I2C
 196:keyboards/RentalCar6Column/matrix.c **** 
 197:keyboards/RentalCar6Column/matrix.c **** // Get rows from other half over i2c
 198:keyboards/RentalCar6Column/matrix.c **** int i2c_transaction(void) {
 199:keyboards/RentalCar6Column/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 200:keyboards/RentalCar6Column/matrix.c **** 
 201:keyboards/RentalCar6Column/matrix.c ****     int err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_WRITE);
 202:keyboards/RentalCar6Column/matrix.c ****     if (err) goto i2c_error;
 203:keyboards/RentalCar6Column/matrix.c **** 
 204:keyboards/RentalCar6Column/matrix.c ****     // start of matrix stored at 0x00
 205:keyboards/RentalCar6Column/matrix.c ****     err = i2c_master_write(0x00);
 206:keyboards/RentalCar6Column/matrix.c ****     if (err) goto i2c_error;
 207:keyboards/RentalCar6Column/matrix.c **** 
 208:keyboards/RentalCar6Column/matrix.c ****     // Start read
 209:keyboards/RentalCar6Column/matrix.c ****     err = i2c_master_start(SLAVE_I2C_ADDRESS + I2C_READ);
 210:keyboards/RentalCar6Column/matrix.c ****     if (err) goto i2c_error;
 211:keyboards/RentalCar6Column/matrix.c **** 
 212:keyboards/RentalCar6Column/matrix.c ****     if (!err) {
 213:keyboards/RentalCar6Column/matrix.c ****         int i;
 214:keyboards/RentalCar6Column/matrix.c ****         for (i = 0; i < ROWS_PER_HAND-1; ++i) {
 215:keyboards/RentalCar6Column/matrix.c ****             matrix[slaveOffset+i] = i2c_master_read(I2C_ACK);
 216:keyboards/RentalCar6Column/matrix.c ****         }
 217:keyboards/RentalCar6Column/matrix.c ****         matrix[slaveOffset+i] = i2c_master_read(I2C_NACK);
 218:keyboards/RentalCar6Column/matrix.c ****         i2c_master_stop();
 219:keyboards/RentalCar6Column/matrix.c ****     } else {
 220:keyboards/RentalCar6Column/matrix.c **** i2c_error: // the cable is disconnceted, or something else went wrong
 221:keyboards/RentalCar6Column/matrix.c ****         i2c_reset_state();
 222:keyboards/RentalCar6Column/matrix.c ****         return err;
 223:keyboards/RentalCar6Column/matrix.c ****     }
 224:keyboards/RentalCar6Column/matrix.c **** 
 225:keyboards/RentalCar6Column/matrix.c ****     return 0;
 226:keyboards/RentalCar6Column/matrix.c **** }
 227:keyboards/RentalCar6Column/matrix.c **** 
 228:keyboards/RentalCar6Column/matrix.c **** #else // USE_SERIAL
 229:keyboards/RentalCar6Column/matrix.c **** 
 230:keyboards/RentalCar6Column/matrix.c **** int serial_transaction(void) {
 231:keyboards/RentalCar6Column/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 232:keyboards/RentalCar6Column/matrix.c **** 
 233:keyboards/RentalCar6Column/matrix.c ****     if (serial_update_buffers()) {
 234:keyboards/RentalCar6Column/matrix.c ****         return 1;
 235:keyboards/RentalCar6Column/matrix.c ****     }
 236:keyboards/RentalCar6Column/matrix.c **** 
 237:keyboards/RentalCar6Column/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 238:keyboards/RentalCar6Column/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 239:keyboards/RentalCar6Column/matrix.c ****     }
 240:keyboards/RentalCar6Column/matrix.c ****     return 0;
 241:keyboards/RentalCar6Column/matrix.c **** }
 242:keyboards/RentalCar6Column/matrix.c **** #endif
 243:keyboards/RentalCar6Column/matrix.c **** 
 244:keyboards/RentalCar6Column/matrix.c **** uint8_t matrix_scan(void)
 245:keyboards/RentalCar6Column/matrix.c **** {
 246:keyboards/RentalCar6Column/matrix.c ****     uint8_t ret = _matrix_scan();
 247:keyboards/RentalCar6Column/matrix.c **** 
 248:keyboards/RentalCar6Column/matrix.c **** #ifdef USE_I2C
 249:keyboards/RentalCar6Column/matrix.c ****     if( i2c_transaction() ) {
 250:keyboards/RentalCar6Column/matrix.c **** #else // USE_SERIAL
 251:keyboards/RentalCar6Column/matrix.c ****     if( serial_transaction() ) {
 252:keyboards/RentalCar6Column/matrix.c **** #endif
 253:keyboards/RentalCar6Column/matrix.c ****         // turn on the indicator led when halves are disconnected
 254:keyboards/RentalCar6Column/matrix.c ****         TXLED1;
 255:keyboards/RentalCar6Column/matrix.c **** 
 256:keyboards/RentalCar6Column/matrix.c ****         error_count++;
 257:keyboards/RentalCar6Column/matrix.c **** 
 258:keyboards/RentalCar6Column/matrix.c ****         if (error_count > ERROR_DISCONNECT_COUNT) {
 259:keyboards/RentalCar6Column/matrix.c ****             // reset other half if disconnected
 260:keyboards/RentalCar6Column/matrix.c ****             int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 261:keyboards/RentalCar6Column/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 262:keyboards/RentalCar6Column/matrix.c ****                 matrix[slaveOffset+i] = 0;
 263:keyboards/RentalCar6Column/matrix.c ****             }
 264:keyboards/RentalCar6Column/matrix.c ****         }
 265:keyboards/RentalCar6Column/matrix.c ****     } else {
 266:keyboards/RentalCar6Column/matrix.c ****         // turn off the indicator led on no error
 267:keyboards/RentalCar6Column/matrix.c ****         TXLED0;
 268:keyboards/RentalCar6Column/matrix.c ****         error_count = 0;
 269:keyboards/RentalCar6Column/matrix.c ****     }
 270:keyboards/RentalCar6Column/matrix.c ****     matrix_scan_quantum();
 271:keyboards/RentalCar6Column/matrix.c ****     return ret;
 272:keyboards/RentalCar6Column/matrix.c **** }
 273:keyboards/RentalCar6Column/matrix.c **** 
 274:keyboards/RentalCar6Column/matrix.c **** void matrix_slave_scan(void) {
 275:keyboards/RentalCar6Column/matrix.c ****     _matrix_scan();
 276:keyboards/RentalCar6Column/matrix.c **** 
 277:keyboards/RentalCar6Column/matrix.c ****     int offset = (isLeftHand) ? 0 : ROWS_PER_HAND;
 278:keyboards/RentalCar6Column/matrix.c **** 
 279:keyboards/RentalCar6Column/matrix.c **** #ifdef USE_I2C
 280:keyboards/RentalCar6Column/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 281:keyboards/RentalCar6Column/matrix.c ****         i2c_slave_buffer[i] = matrix[offset+i];
 282:keyboards/RentalCar6Column/matrix.c ****     }
 283:keyboards/RentalCar6Column/matrix.c **** #else // USE_SERIAL
 284:keyboards/RentalCar6Column/matrix.c ****     for (int i = 0; i < ROWS_PER_HAND; ++i) {
 285:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 286:keyboards/RentalCar6Column/matrix.c ****     }
 287:keyboards/RentalCar6Column/matrix.c **** #endif
 288:keyboards/RentalCar6Column/matrix.c **** }
 289:keyboards/RentalCar6Column/matrix.c **** 
 290:keyboards/RentalCar6Column/matrix.c **** bool matrix_is_modified(void)
 291:keyboards/RentalCar6Column/matrix.c **** {
 292:keyboards/RentalCar6Column/matrix.c ****     if (debouncing) return false;
 293:keyboards/RentalCar6Column/matrix.c ****     return true;
 294:keyboards/RentalCar6Column/matrix.c **** }
 295:keyboards/RentalCar6Column/matrix.c **** 
 296:keyboards/RentalCar6Column/matrix.c **** inline
 297:keyboards/RentalCar6Column/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 298:keyboards/RentalCar6Column/matrix.c **** {
 299:keyboards/RentalCar6Column/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 300:keyboards/RentalCar6Column/matrix.c **** }
 301:keyboards/RentalCar6Column/matrix.c **** 
 302:keyboards/RentalCar6Column/matrix.c **** inline
 303:keyboards/RentalCar6Column/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 304:keyboards/RentalCar6Column/matrix.c **** {
 305:keyboards/RentalCar6Column/matrix.c ****     return matrix[row];
 306:keyboards/RentalCar6Column/matrix.c **** }
 307:keyboards/RentalCar6Column/matrix.c **** 
 308:keyboards/RentalCar6Column/matrix.c **** void matrix_print(void)
 309:keyboards/RentalCar6Column/matrix.c **** {
 310:keyboards/RentalCar6Column/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 311:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 312:keyboards/RentalCar6Column/matrix.c ****         phex(row); print(": ");
 313:keyboards/RentalCar6Column/matrix.c ****         pbin_reverse16(matrix_get_row(row));
 314:keyboards/RentalCar6Column/matrix.c ****         print("\n");
 315:keyboards/RentalCar6Column/matrix.c ****     }
 316:keyboards/RentalCar6Column/matrix.c **** }
 317:keyboards/RentalCar6Column/matrix.c **** 
 318:keyboards/RentalCar6Column/matrix.c **** uint8_t matrix_key_count(void)
 319:keyboards/RentalCar6Column/matrix.c **** {
 320:keyboards/RentalCar6Column/matrix.c ****     uint8_t count = 0;
 321:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 322:keyboards/RentalCar6Column/matrix.c ****         count += bitpop16(matrix[i]);
 323:keyboards/RentalCar6Column/matrix.c ****     }
 324:keyboards/RentalCar6Column/matrix.c ****     return count;
 325:keyboards/RentalCar6Column/matrix.c **** }
 326:keyboards/RentalCar6Column/matrix.c **** 
 327:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 328:keyboards/RentalCar6Column/matrix.c **** 
 329:keyboards/RentalCar6Column/matrix.c **** static void init_cols(void)
 330:keyboards/RentalCar6Column/matrix.c **** {
 331:keyboards/RentalCar6Column/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 332:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = col_pins[x];
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 334:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 335:keyboards/RentalCar6Column/matrix.c ****     }
 336:keyboards/RentalCar6Column/matrix.c **** }
 337:keyboards/RentalCar6Column/matrix.c **** 
 338:keyboards/RentalCar6Column/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row)
 339:keyboards/RentalCar6Column/matrix.c **** {
 340:keyboards/RentalCar6Column/matrix.c ****     // Store last value of row prior to reading
 341:keyboards/RentalCar6Column/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
 342:keyboards/RentalCar6Column/matrix.c **** 
 343:keyboards/RentalCar6Column/matrix.c ****     // Clear data in matrix row
 344:keyboards/RentalCar6Column/matrix.c ****     current_matrix[current_row] = 0;
 345:keyboards/RentalCar6Column/matrix.c **** 
 346:keyboards/RentalCar6Column/matrix.c ****     // Select row and wait for row selecton to stabilize
 347:keyboards/RentalCar6Column/matrix.c ****     select_row(current_row);
 348:keyboards/RentalCar6Column/matrix.c ****     wait_us(30);
 349:keyboards/RentalCar6Column/matrix.c **** 
 350:keyboards/RentalCar6Column/matrix.c ****     // For each col...
 351:keyboards/RentalCar6Column/matrix.c ****     for(uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 352:keyboards/RentalCar6Column/matrix.c **** 
 353:keyboards/RentalCar6Column/matrix.c ****         // Select the col pin to read (active low)
 354:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = col_pins[col_index];
 355:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 356:keyboards/RentalCar6Column/matrix.c **** 
 357:keyboards/RentalCar6Column/matrix.c ****         // Populate the matrix row with the state of the col pin
 358:keyboards/RentalCar6Column/matrix.c ****         current_matrix[current_row] |=  pin_state ? 0 : (ROW_SHIFTER << col_index);
 359:keyboards/RentalCar6Column/matrix.c ****     }
 360:keyboards/RentalCar6Column/matrix.c **** 
 361:keyboards/RentalCar6Column/matrix.c ****     // Unselect row
 362:keyboards/RentalCar6Column/matrix.c ****     unselect_row(current_row);
 363:keyboards/RentalCar6Column/matrix.c **** 
 364:keyboards/RentalCar6Column/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 365:keyboards/RentalCar6Column/matrix.c **** }
 366:keyboards/RentalCar6Column/matrix.c **** 
 367:keyboards/RentalCar6Column/matrix.c **** static void select_row(uint8_t row)
 368:keyboards/RentalCar6Column/matrix.c **** {
 369:keyboards/RentalCar6Column/matrix.c ****     uint8_t pin = row_pins[row];
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 371:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 372:keyboards/RentalCar6Column/matrix.c **** }
 373:keyboards/RentalCar6Column/matrix.c **** 
 374:keyboards/RentalCar6Column/matrix.c **** static void unselect_row(uint8_t row)
 375:keyboards/RentalCar6Column/matrix.c **** {
 376:keyboards/RentalCar6Column/matrix.c ****     uint8_t pin = row_pins[row];
 377:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 378:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 379:keyboards/RentalCar6Column/matrix.c **** }
 380:keyboards/RentalCar6Column/matrix.c **** 
 381:keyboards/RentalCar6Column/matrix.c **** static void unselect_rows(void)
 171               		.loc 1 381 13 view .LVU22
 172               	.LBE15:
 382:keyboards/RentalCar6Column/matrix.c **** {
 383:keyboards/RentalCar6Column/matrix.c ****     for(uint8_t x = 0; x < ROWS_PER_HAND; x++) {
 173               		.loc 1 383 5 view .LVU23
 174               	.LBB18:
 175               	.LBB16:
 176               		.loc 1 383 9 view .LVU24
 177               	.LVL4:
 178               		.loc 1 383 9 is_stmt 0 view .LVU25
 179 000a A0E0      		ldi r26,lo8(row_pins)
 180 000c B0E0      		ldi r27,hi8(row_pins)
 181               	.LBB17:
 384:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = row_pins[x];
 385:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 182               		.loc 1 385 38 view .LVU26
 183 000e 61E0      		ldi r22,lo8(1)
 184 0010 70E0      		ldi r23,0
 185               	.LVL5:
 186               	.L10:
 384:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = row_pins[x];
 187               		.loc 1 384 9 is_stmt 1 view .LVU27
 384:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = row_pins[x];
 188               		.loc 1 384 17 is_stmt 0 view .LVU28
 189 0012 8D91      		ld r24,X+
 190               	.LVL6:
 191               		.loc 1 385 9 is_stmt 1 view .LVU29
 192               		.loc 1 385 34 is_stmt 0 view .LVU30
 193 0014 E82F      		mov r30,r24
 194 0016 E295      		swap r30
 195 0018 EF70      		andi r30,lo8(15)
 196 001a F0E0      		ldi r31,0
 197 001c 41A1      		ldd r20,Z+33
 198               		.loc 1 385 38 view .LVU31
 199 001e 8F70      		andi r24,lo8(15)
 200               	.LVL7:
 201               		.loc 1 385 38 view .LVU32
 202 0020 9B01      		movw r18,r22
 203 0022 00C0      		rjmp 2f
 204               		1:
 205 0024 220F      		lsl r18
 206               		2:
 207 0026 8A95      		dec r24
 208 0028 02F4      		brpl 1b
 209               		.loc 1 385 34 view .LVU33
 210 002a 922F      		mov r25,r18
 211 002c 9095      		com r25
 212 002e 9423      		and r25,r20
 213 0030 91A3      		std Z+33,r25
 214               	.LVL8:
 386:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 215               		.loc 1 386 9 is_stmt 1 view .LVU34
 216               		.loc 1 386 34 is_stmt 0 view .LVU35
 217 0032 82A1      		ldd r24,Z+34
 218 0034 822B      		or r24,r18
 219 0036 82A3      		std Z+34,r24
 220               	.LVL9:
 221               		.loc 1 386 34 view .LVU36
 222               	.LBE17:
 383:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = row_pins[x];
 223               		.loc 1 383 5 view .LVU37
 224 0038 80E0      		ldi r24,hi8(row_pins+6)
 225 003a A030      		cpi r26,lo8(row_pins+6)
 226 003c B807      		cpc r27,r24
 227 003e 01F4      		brne .L10
 228 0040 A0E0      		ldi r26,lo8(col_pins)
 229 0042 B0E0      		ldi r27,hi8(col_pins)
 230               	.LVL10:
 383:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = row_pins[x];
 231               		.loc 1 383 5 view .LVU38
 232               	.LBE16:
 233               	.LBE18:
 234               	.LBB19:
 235               	.LBB20:
 236               	.LBB21:
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 237               		.loc 1 333 38 view .LVU39
 238 0044 61E0      		ldi r22,lo8(1)
 239 0046 70E0      		ldi r23,0
 240               	.L11:
 241               	.LVL11:
 332:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 242               		.loc 1 332 9 is_stmt 1 view .LVU40
 332:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 243               		.loc 1 332 17 is_stmt 0 view .LVU41
 244 0048 8D91      		ld r24,X+
 245               	.LVL12:
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 246               		.loc 1 333 9 is_stmt 1 view .LVU42
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 247               		.loc 1 333 34 is_stmt 0 view .LVU43
 248 004a E82F      		mov r30,r24
 249 004c E295      		swap r30
 250 004e EF70      		andi r30,lo8(15)
 251 0050 F0E0      		ldi r31,0
 252 0052 41A1      		ldd r20,Z+33
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 253               		.loc 1 333 38 view .LVU44
 254 0054 8F70      		andi r24,lo8(15)
 255               	.LVL13:
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 256               		.loc 1 333 38 view .LVU45
 257 0056 9B01      		movw r18,r22
 258 0058 00C0      		rjmp 2f
 259               		1:
 260 005a 220F      		lsl r18
 261               		2:
 262 005c 8A95      		dec r24
 263 005e 02F4      		brpl 1b
 333:keyboards/RentalCar6Column/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 264               		.loc 1 333 34 view .LVU46
 265 0060 922F      		mov r25,r18
 266 0062 9095      		com r25
 267 0064 9423      		and r25,r20
 268 0066 91A3      		std Z+33,r25
 269               	.LVL14:
 334:keyboards/RentalCar6Column/matrix.c ****     }
 270               		.loc 1 334 9 is_stmt 1 view .LVU47
 334:keyboards/RentalCar6Column/matrix.c ****     }
 271               		.loc 1 334 34 is_stmt 0 view .LVU48
 272 0068 82A1      		ldd r24,Z+34
 273 006a 822B      		or r24,r18
 274 006c 82A3      		std Z+34,r24
 275               	.LVL15:
 334:keyboards/RentalCar6Column/matrix.c ****     }
 276               		.loc 1 334 34 view .LVU49
 277               	.LBE21:
 331:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = col_pins[x];
 278               		.loc 1 331 5 view .LVU50
 279 006e 80E0      		ldi r24,hi8(col_pins+6)
 280 0070 A030      		cpi r26,lo8(col_pins+6)
 281 0072 B807      		cpc r27,r24
 282 0074 01F4      		brne .L11
 283               	.LVL16:
 331:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin = col_pins[x];
 284               		.loc 1 331 5 view .LVU51
 285               	.LBE20:
 286               	.LBE19:
 134:keyboards/RentalCar6Column/matrix.c **** 
 287               		.loc 1 134 5 is_stmt 1 view .LVU52
 288 0076 559A      		sbi 0xa,5
 289 0078 209A      		sbi 0x4,0
 137:keyboards/RentalCar6Column/matrix.c ****         matrix[i] = 0;
 290               		.loc 1 137 5 view .LVU53
 291               	.LBB22:
 137:keyboards/RentalCar6Column/matrix.c ****         matrix[i] = 0;
 292               		.loc 1 137 10 view .LVU54
 293               	.LVL17:
 137:keyboards/RentalCar6Column/matrix.c ****         matrix[i] = 0;
 294               		.loc 1 137 10 is_stmt 0 view .LVU55
 295 007a E0E0      		ldi r30,lo8(matrix)
 296 007c F0E0      		ldi r31,hi8(matrix)
 297 007e A0E0      		ldi r26,lo8(matrix_debouncing)
 298 0080 B0E0      		ldi r27,hi8(matrix_debouncing)
 299 0082 80E0      		ldi r24,lo8(matrix+12)
 300 0084 90E0      		ldi r25,hi8(matrix+12)
 301               	.LVL18:
 302               	.L12:
 138:keyboards/RentalCar6Column/matrix.c ****         matrix_debouncing[i] = 0;
 303               		.loc 1 138 9 is_stmt 1 discriminator 3 view .LVU56
 138:keyboards/RentalCar6Column/matrix.c ****         matrix_debouncing[i] = 0;
 304               		.loc 1 138 19 is_stmt 0 discriminator 3 view .LVU57
 305 0086 1192      		st Z+,__zero_reg__
 306               	.LVL19:
 139:keyboards/RentalCar6Column/matrix.c ****     }
 307               		.loc 1 139 9 is_stmt 1 discriminator 3 view .LVU58
 139:keyboards/RentalCar6Column/matrix.c ****     }
 308               		.loc 1 139 30 is_stmt 0 discriminator 3 view .LVU59
 309 0088 1D92      		st X+,__zero_reg__
 310               	.LVL20:
 137:keyboards/RentalCar6Column/matrix.c ****         matrix[i] = 0;
 311               		.loc 1 137 5 discriminator 3 view .LVU60
 312 008a 8E17      		cp r24,r30
 313 008c 9F07      		cpc r25,r31
 314 008e 01F4      		brne .L12
 315               	.LBE22:
 142:keyboards/RentalCar6Column/matrix.c **** 
 316               		.loc 1 142 5 is_stmt 1 view .LVU61
 317 0090 0C94 0000 		jmp matrix_init_quantum
 318               	.LVL21:
 142:keyboards/RentalCar6Column/matrix.c **** 
 319               		.loc 1 142 5 is_stmt 0 view .LVU62
 320               		.cfi_endproc
 321               	.LFE15:
 323               		.section	.text._matrix_scan,"ax",@progbits
 324               	.global	_matrix_scan
 326               	_matrix_scan:
 327               	.LFB16:
 147:keyboards/RentalCar6Column/matrix.c ****     int offset = isLeftHand ? 0 : (ROWS_PER_HAND);
 328               		.loc 1 147 1 is_stmt 1 view -0
 329               		.cfi_startproc
 330 0000 3F92      		push r3
 331               	.LCFI0:
 332               		.cfi_def_cfa_offset 3
 333               		.cfi_offset 3, -2
 334 0002 4F92      		push r4
 335               	.LCFI1:
 336               		.cfi_def_cfa_offset 4
 337               		.cfi_offset 4, -3
 338 0004 5F92      		push r5
 339               	.LCFI2:
 340               		.cfi_def_cfa_offset 5
 341               		.cfi_offset 5, -4
 342 0006 6F92      		push r6
 343               	.LCFI3:
 344               		.cfi_def_cfa_offset 6
 345               		.cfi_offset 6, -5
 346 0008 7F92      		push r7
 347               	.LCFI4:
 348               		.cfi_def_cfa_offset 7
 349               		.cfi_offset 7, -6
 350 000a 8F92      		push r8
 351               	.LCFI5:
 352               		.cfi_def_cfa_offset 8
 353               		.cfi_offset 8, -7
 354 000c 9F92      		push r9
 355               	.LCFI6:
 356               		.cfi_def_cfa_offset 9
 357               		.cfi_offset 9, -8
 358 000e AF92      		push r10
 359               	.LCFI7:
 360               		.cfi_def_cfa_offset 10
 361               		.cfi_offset 10, -9
 362 0010 BF92      		push r11
 363               	.LCFI8:
 364               		.cfi_def_cfa_offset 11
 365               		.cfi_offset 11, -10
 366 0012 CF92      		push r12
 367               	.LCFI9:
 368               		.cfi_def_cfa_offset 12
 369               		.cfi_offset 12, -11
 370 0014 DF92      		push r13
 371               	.LCFI10:
 372               		.cfi_def_cfa_offset 13
 373               		.cfi_offset 13, -12
 374 0016 EF92      		push r14
 375               	.LCFI11:
 376               		.cfi_def_cfa_offset 14
 377               		.cfi_offset 14, -13
 378 0018 FF92      		push r15
 379               	.LCFI12:
 380               		.cfi_def_cfa_offset 15
 381               		.cfi_offset 15, -14
 382 001a 0F93      		push r16
 383               	.LCFI13:
 384               		.cfi_def_cfa_offset 16
 385               		.cfi_offset 16, -15
 386 001c 1F93      		push r17
 387               	.LCFI14:
 388               		.cfi_def_cfa_offset 17
 389               		.cfi_offset 17, -16
 390 001e CF93      		push r28
 391               	.LCFI15:
 392               		.cfi_def_cfa_offset 18
 393               		.cfi_offset 28, -17
 394 0020 DF93      		push r29
 395               	.LCFI16:
 396               		.cfi_def_cfa_offset 19
 397               		.cfi_offset 29, -18
 398 0022 00D0      		rcall .
 399 0024 00D0      		rcall .
 400               	.LCFI17:
 401               		.cfi_def_cfa_offset 23
 402 0026 CDB7      		in r28,__SP_L__
 403 0028 DEB7      		in r29,__SP_H__
 404               	.LCFI18:
 405               		.cfi_def_cfa_register 28
 406               	/* prologue: function */
 407               	/* frame size = 4 */
 408               	/* stack size = 21 */
 409               	.L__stack_usage = 21
 148:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 410               		.loc 1 148 5 view .LVU64
 148:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 411               		.loc 1 148 29 is_stmt 0 view .LVU65
 412 002a 8091 0000 		lds r24,isLeftHand
 148:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 413               		.loc 1 148 33 view .LVU66
 414 002e 8111      		cpse r24,__zero_reg__
 415 0030 00C0      		rjmp .L26
 416 0032 86E0      		ldi r24,lo8(6)
 417 0034 90E0      		ldi r25,0
 418 0036 9A83      		std Y+2,r25
 419 0038 8983      		std Y+1,r24
 420               	.L17:
 421               	.LVL22:
 151:keyboards/RentalCar6Column/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 422               		.loc 1 151 5 is_stmt 1 discriminator 4 view .LVU67
 423               	.LBB36:
 151:keyboards/RentalCar6Column/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 424               		.loc 1 151 10 discriminator 4 view .LVU68
 151:keyboards/RentalCar6Column/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 425               		.loc 1 151 10 is_stmt 0 discriminator 4 view .LVU69
 426 003a 0981      		ldd r16,Y+1
 427 003c 1A81      		ldd r17,Y+2
 428 003e 0050      		subi r16,lo8(-(matrix_debouncing))
 429 0040 1040      		sbci r17,hi8(-(matrix_debouncing))
 430 0042 80E0      		ldi r24,lo8(row_pins)
 431 0044 E82E      		mov r14,r24
 432 0046 80E0      		ldi r24,hi8(row_pins)
 433 0048 F82E      		mov r15,r24
 434               	.LBE36:
 148:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 435               		.loc 1 148 33 discriminator 4 view .LVU70
 436 004a 6801      		movw r12,r16
 437               	.LBB60:
 438               	.LBB37:
 439               	.LBB38:
 440               	.LBB39:
 441               	.LBB40:
 442               	.LBB41:
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 443               		.loc 1 370 34 discriminator 4 view .LVU71
 444 004c AA24      		clr r10
 445 004e A394      		inc r10
 446 0050 B12C      		mov r11,__zero_reg__
 447               	.LBE41:
 448               	.LBE40:
 449               	.LBE39:
 450               	.LBE38:
 156:keyboards/RentalCar6Column/matrix.c ****                 debouncing_time = timer_read();
 451               		.loc 1 156 28 discriminator 4 view .LVU72
 452 0052 8824      		clr r8
 453 0054 8394      		inc r8
 158:keyboards/RentalCar6Column/matrix.c ****             }
 454               		.loc 1 158 23 discriminator 4 view .LVU73
 455 0056 24E0      		ldi r18,lo8(4)
 456 0058 922E      		mov r9,r18
 457               	.LVL23:
 458               	.L21:
 153:keyboards/RentalCar6Column/matrix.c **** 
 459               		.loc 1 153 13 is_stmt 1 view .LVU74
 460               	.LBB57:
 461               	.LBI38:
 338:keyboards/RentalCar6Column/matrix.c **** {
 462               		.loc 1 338 13 view .LVU75
 463               	.LBB55:
 341:keyboards/RentalCar6Column/matrix.c **** 
 464               		.loc 1 341 5 view .LVU76
 341:keyboards/RentalCar6Column/matrix.c **** 
 465               		.loc 1 341 18 is_stmt 0 view .LVU77
 466 005a D601      		movw r26,r12
 467 005c 6D90      		ld r6,X+
 468 005e 6D01      		movw r12,r26
 469               	.LVL24:
 344:keyboards/RentalCar6Column/matrix.c **** 
 470               		.loc 1 344 5 is_stmt 1 view .LVU78
 344:keyboards/RentalCar6Column/matrix.c **** 
 471               		.loc 1 344 33 is_stmt 0 view .LVU79
 472 0060 FD01      		movw r30,r26
 473 0062 1292      		st -Z,__zero_reg__
 474 0064 FC83      		std Y+4,r31
 475 0066 EB83      		std Y+3,r30
 347:keyboards/RentalCar6Column/matrix.c ****     wait_us(30);
 476               		.loc 1 347 5 is_stmt 1 view .LVU80
 477               	.LVL25:
 478               	.LBB43:
 479               	.LBI40:
 367:keyboards/RentalCar6Column/matrix.c **** {
 480               		.loc 1 367 13 view .LVU81
 481               	.LBB42:
 369:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 482               		.loc 1 369 5 view .LVU82
 369:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 483               		.loc 1 369 13 is_stmt 0 view .LVU83
 484 0068 D701      		movw r26,r14
 485 006a 8D91      		ld r24,X+
 486 006c 7D01      		movw r14,r26
 487               	.LVL26:
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 488               		.loc 1 370 5 is_stmt 1 view .LVU84
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 489               		.loc 1 370 30 is_stmt 0 view .LVU85
 490 006e E82F      		mov r30,r24
 491 0070 E295      		swap r30
 492 0072 EF70      		andi r30,lo8(15)
 493 0074 F0E0      		ldi r31,0
 494 0076 91A1      		ldd r25,Z+33
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 495               		.loc 1 370 34 view .LVU86
 496 0078 8F70      		andi r24,lo8(15)
 497               	.LVL27:
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 498               		.loc 1 370 34 view .LVU87
 499 007a B501      		movw r22,r10
 500 007c 00C0      		rjmp 2f
 501               		1:
 502 007e 660F      		lsl r22
 503               		2:
 504 0080 8A95      		dec r24
 505 0082 02F4      		brpl 1b
 370:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 506               		.loc 1 370 30 view .LVU88
 507 0084 892F      		mov r24,r25
 508 0086 862B      		or r24,r22
 509 0088 81A3      		std Z+33,r24
 510               	.LVL28:
 371:keyboards/RentalCar6Column/matrix.c **** }
 511               		.loc 1 371 5 is_stmt 1 view .LVU89
 371:keyboards/RentalCar6Column/matrix.c **** }
 512               		.loc 1 371 30 is_stmt 0 view .LVU90
 513 008a 82A1      		ldd r24,Z+34
 514 008c 762E      		mov r7,r22
 515 008e 7094      		com r7
 516 0090 8721      		and r24,r7
 517 0092 82A3      		std Z+34,r24
 371:keyboards/RentalCar6Column/matrix.c **** }
 518               		.loc 1 371 30 view .LVU91
 519               	.LBE42:
 520               	.LBE43:
 348:keyboards/RentalCar6Column/matrix.c **** 
 521               		.loc 1 348 5 is_stmt 1 view .LVU92
 522               	.LVL29:
 523               	.LBB44:
 524               	.LBI44:
 525               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_us(double __us)
 526               		.loc 2 255 1 view .LVU93
 527               	.LBB45:
 256:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 528               		.loc 2 257 2 view .LVU94
 258:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 529               		.loc 2 261 2 view .LVU95
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 530               		.loc 2 262 2 view .LVU96
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 531               		.loc 2 263 2 view .LVU97
 264:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 532               		.loc 2 273 3 view .LVU98
 274:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 533               		.loc 2 276 2 view .LVU99
 534 0094 B0EA      		ldi r27,lo8(-96)
 535 0096 BA95      	1:	dec r27
 536 0098 01F4      		brne 1b
 537               	.LVL30:
 538               		.loc 2 276 2 is_stmt 0 view .LVU100
 539               	.LBE45:
 540               	.LBE44:
 351:keyboards/RentalCar6Column/matrix.c **** 
 541               		.loc 1 351 5 is_stmt 1 view .LVU101
 542               	.LBB47:
 351:keyboards/RentalCar6Column/matrix.c **** 
 543               		.loc 1 351 9 view .LVU102
 351:keyboards/RentalCar6Column/matrix.c **** 
 544               		.loc 1 351 9 is_stmt 0 view .LVU103
 545 009a 40E0      		ldi r20,lo8(col_pins)
 546 009c 50E0      		ldi r21,hi8(col_pins)
 547               	.LBE47:
 548               	.LBB50:
 549               	.LBB46:
 550               		.loc 2 276 2 view .LVU104
 551 009e 90E0      		ldi r25,0
 552 00a0 80E0      		ldi r24,0
 553               	.LVL31:
 554               	.L19:
 555               		.loc 2 276 2 view .LVU105
 556               	.LBE46:
 557               	.LBE50:
 558               	.LBB51:
 559               	.LBB48:
 354:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 560               		.loc 1 354 9 is_stmt 1 view .LVU106
 354:keyboards/RentalCar6Column/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 561               		.loc 1 354 17 is_stmt 0 view .LVU107
 562 00a2 DA01      		movw r26,r20
 563 00a4 5D90      		ld r5,X+
 564 00a6 AD01      		movw r20,r26
 565               	.LVL32:
 355:keyboards/RentalCar6Column/matrix.c **** 
 566               		.loc 1 355 9 is_stmt 1 view .LVU108
 355:keyboards/RentalCar6Column/matrix.c **** 
 567               		.loc 1 355 30 is_stmt 0 view .LVU109
 568 00a8 252D      		mov r18,r5
 569 00aa 2295      		swap r18
 570 00ac 2F70      		andi r18,lo8(15)
 571 00ae 30E0      		ldi r19,0
 572 00b0 D901      		movw r26,r18
 573 00b2 9096      		adiw r26,32
 574 00b4 3C90      		ld r3,X
 575               	.LVL33:
 358:keyboards/RentalCar6Column/matrix.c ****     }
 576               		.loc 1 358 9 is_stmt 1 view .LVU110
 358:keyboards/RentalCar6Column/matrix.c ****     }
 577               		.loc 1 358 37 is_stmt 0 view .LVU111
 578 00b6 AB81      		ldd r26,Y+3
 579 00b8 BC81      		ldd r27,Y+4
 580 00ba 4C90      		ld r4,X
 355:keyboards/RentalCar6Column/matrix.c **** 
 581               		.loc 1 355 51 view .LVU112
 582 00bc 352D      		mov r19,r5
 583 00be 3F70      		andi r19,lo8(15)
 584               	.LVL34:
 355:keyboards/RentalCar6Column/matrix.c **** 
 585               		.loc 1 355 51 view .LVU113
 586 00c0 D501      		movw r26,r10
 587 00c2 00C0      		rjmp 2f
 588               		1:
 589 00c4 AA0F      		lsl r26
 590 00c6 BB1F      		rol r27
 591               		2:
 592 00c8 3A95      		dec r19
 593 00ca 02F4      		brpl 1b
 594 00cc 9D01      		movw r18,r26
 355:keyboards/RentalCar6Column/matrix.c **** 
 595               		.loc 1 355 49 view .LVU114
 596 00ce 2321      		and r18,r3
 358:keyboards/RentalCar6Column/matrix.c ****     }
 597               		.loc 1 358 37 view .LVU115
 598 00d0 01F0      		breq .+2
 599 00d2 00C0      		rjmp .L27
 600 00d4 2A2D      		mov r18,r10
 601 00d6 082E      		mov r0,r24
 602 00d8 00C0      		rjmp 2f
 603               		1:
 604 00da 220F      		lsl r18
 605               		2:
 606 00dc 0A94      		dec r0
 607 00de 02F4      		brpl 1b
 608               	.L18:
 609 00e0 2429      		or r18,r4
 610 00e2 AB81      		ldd r26,Y+3
 611 00e4 BC81      		ldd r27,Y+4
 612 00e6 2C93      		st X,r18
 613               	.LVL35:
 358:keyboards/RentalCar6Column/matrix.c ****     }
 614               		.loc 1 358 37 view .LVU116
 615 00e8 0196      		adiw r24,1
 616               	.LVL36:
 358:keyboards/RentalCar6Column/matrix.c ****     }
 617               		.loc 1 358 37 view .LVU117
 618               	.LBE48:
 351:keyboards/RentalCar6Column/matrix.c **** 
 619               		.loc 1 351 5 view .LVU118
 620 00ea 8630      		cpi r24,6
 621 00ec 9105      		cpc r25,__zero_reg__
 622 00ee 01F4      		brne .L19
 623               	.LBE51:
 362:keyboards/RentalCar6Column/matrix.c **** 
 624               		.loc 1 362 5 is_stmt 1 view .LVU119
 625               	.LVL37:
 626               	.LBB52:
 627               	.LBI52:
 374:keyboards/RentalCar6Column/matrix.c **** {
 628               		.loc 1 374 13 view .LVU120
 629               	.LBB53:
 376:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 630               		.loc 1 376 5 view .LVU121
 377:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 631               		.loc 1 377 5 view .LVU122
 377:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 632               		.loc 1 377 30 is_stmt 0 view .LVU123
 633 00f0 81A1      		ldd r24,Z+33
 634               	.LVL38:
 377:keyboards/RentalCar6Column/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 635               		.loc 1 377 30 view .LVU124
 636 00f2 7822      		and r7,r24
 637 00f4 71A2      		std Z+33,r7
 378:keyboards/RentalCar6Column/matrix.c **** }
 638               		.loc 1 378 5 is_stmt 1 view .LVU125
 378:keyboards/RentalCar6Column/matrix.c **** }
 639               		.loc 1 378 30 is_stmt 0 view .LVU126
 640 00f6 82A1      		ldd r24,Z+34
 641 00f8 682B      		or r22,r24
 642 00fa 62A3      		std Z+34,r22
 378:keyboards/RentalCar6Column/matrix.c **** }
 643               		.loc 1 378 30 view .LVU127
 644               	.LBE53:
 645               	.LBE52:
 364:keyboards/RentalCar6Column/matrix.c **** }
 646               		.loc 1 364 5 is_stmt 1 view .LVU128
 647               	.LVL39:
 364:keyboards/RentalCar6Column/matrix.c **** }
 648               		.loc 1 364 5 is_stmt 0 view .LVU129
 649               	.LBE55:
 650               	.LBE57:
 155:keyboards/RentalCar6Column/matrix.c ****                 debouncing = true;
 651               		.loc 1 155 13 is_stmt 1 view .LVU130
 155:keyboards/RentalCar6Column/matrix.c ****                 debouncing = true;
 652               		.loc 1 155 16 is_stmt 0 view .LVU131
 653 00fc 8C91      		ld r24,X
 654 00fe 6816      		cp r6,r24
 655 0100 01F0      		breq .L20
 156:keyboards/RentalCar6Column/matrix.c ****                 debouncing_time = timer_read();
 656               		.loc 1 156 17 is_stmt 1 view .LVU132
 156:keyboards/RentalCar6Column/matrix.c ****                 debouncing_time = timer_read();
 657               		.loc 1 156 28 is_stmt 0 view .LVU133
 658 0102 8092 0000 		sts debouncing,r8
 157:keyboards/RentalCar6Column/matrix.c ****                 PORTD ^= (1 << 2);
 659               		.loc 1 157 17 is_stmt 1 view .LVU134
 157:keyboards/RentalCar6Column/matrix.c ****                 PORTD ^= (1 << 2);
 660               		.loc 1 157 35 is_stmt 0 view .LVU135
 661 0106 0E94 0000 		call timer_read
 662               	.LVL40:
 157:keyboards/RentalCar6Column/matrix.c ****                 PORTD ^= (1 << 2);
 663               		.loc 1 157 33 view .LVU136
 664 010a 9093 0000 		sts debouncing_time+1,r25
 665 010e 8093 0000 		sts debouncing_time,r24
 158:keyboards/RentalCar6Column/matrix.c ****             }
 666               		.loc 1 158 17 is_stmt 1 view .LVU137
 158:keyboards/RentalCar6Column/matrix.c ****             }
 667               		.loc 1 158 23 is_stmt 0 view .LVU138
 668 0112 8BB1      		in r24,0xb
 669 0114 8925      		eor r24,r9
 670 0116 8BB9      		out 0xb,r24
 671               	.L20:
 158:keyboards/RentalCar6Column/matrix.c ****             }
 672               		.loc 1 158 23 view .LVU139
 673               	.LBE37:
 151:keyboards/RentalCar6Column/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 674               		.loc 1 151 5 discriminator 2 view .LVU140
 675 0118 B0E0      		ldi r27,lo8(row_pins+6)
 676 011a EB16      		cp r14,r27
 677 011c B0E0      		ldi r27,hi8(row_pins+6)
 678 011e FB06      		cpc r15,r27
 679 0120 01F0      		breq .+2
 680 0122 00C0      		rjmp .L21
 681               	.LBE60:
 184:keyboards/RentalCar6Column/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 682               		.loc 1 184 9 is_stmt 1 view .LVU141
 184:keyboards/RentalCar6Column/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 683               		.loc 1 184 12 is_stmt 0 view .LVU142
 684 0124 8091 0000 		lds r24,debouncing
 685 0128 8823      		tst r24
 686 012a 01F0      		breq .L23
 184:keyboards/RentalCar6Column/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 687               		.loc 1 184 28 discriminator 1 view .LVU143
 688 012c 8091 0000 		lds r24,debouncing_time
 689 0130 9091 0000 		lds r25,debouncing_time+1
 690 0134 0E94 0000 		call timer_elapsed
 691               	.LVL41:
 184:keyboards/RentalCar6Column/matrix.c ****             for (uint8_t i = 0; i < ROWS_PER_HAND; i++) {
 692               		.loc 1 184 24 discriminator 1 view .LVU144
 693 0138 0697      		sbiw r24,6
 694 013a 00F0      		brlo .L23
 695 013c E981      		ldd r30,Y+1
 696 013e FA81      		ldd r31,Y+2
 697 0140 E050      		subi r30,lo8(-(matrix))
 698 0142 F040      		sbci r31,hi8(-(matrix))
 699 0144 FA83      		std Y+2,r31
 700 0146 E983      		std Y+1,r30
 701               	.LBB61:
 185:keyboards/RentalCar6Column/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 702               		.loc 1 185 26 view .LVU145
 703 0148 80E0      		ldi r24,0
 704               	.L25:
 705               	.LVL42:
 186:keyboards/RentalCar6Column/matrix.c ****             }
 706               		.loc 1 186 17 is_stmt 1 discriminator 3 view .LVU146
 186:keyboards/RentalCar6Column/matrix.c ****             }
 707               		.loc 1 186 53 is_stmt 0 discriminator 3 view .LVU147
 708 014a D801      		movw r26,r16
 709 014c 9D91      		ld r25,X+
 710 014e 8D01      		movw r16,r26
 186:keyboards/RentalCar6Column/matrix.c ****             }
 711               		.loc 1 186 34 discriminator 3 view .LVU148
 712 0150 E981      		ldd r30,Y+1
 713 0152 FA81      		ldd r31,Y+2
 714 0154 9193      		st Z+,r25
 715 0156 FA83      		std Y+2,r31
 716 0158 E983      		std Y+1,r30
 185:keyboards/RentalCar6Column/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 717               		.loc 1 185 53 discriminator 3 view .LVU149
 718 015a 8F5F      		subi r24,lo8(-(1))
 719               	.LVL43:
 185:keyboards/RentalCar6Column/matrix.c ****                 matrix[i+offset] = matrix_debouncing[i+offset];
 720               		.loc 1 185 13 discriminator 3 view .LVU150
 721 015c 8630      		cpi r24,lo8(6)
 722 015e 01F4      		brne .L25
 723               	.LBE61:
 188:keyboards/RentalCar6Column/matrix.c ****         }
 724               		.loc 1 188 13 is_stmt 1 view .LVU151
 188:keyboards/RentalCar6Column/matrix.c ****         }
 725               		.loc 1 188 24 is_stmt 0 view .LVU152
 726 0160 1092 0000 		sts debouncing,__zero_reg__
 727               	.LVL44:
 728               	.L23:
 192:keyboards/RentalCar6Column/matrix.c **** }
 729               		.loc 1 192 5 is_stmt 1 view .LVU153
 193:keyboards/RentalCar6Column/matrix.c **** 
 730               		.loc 1 193 1 is_stmt 0 view .LVU154
 731 0164 81E0      		ldi r24,lo8(1)
 732               	/* epilogue start */
 733 0166 0F90      		pop __tmp_reg__
 734 0168 0F90      		pop __tmp_reg__
 735 016a 0F90      		pop __tmp_reg__
 736 016c 0F90      		pop __tmp_reg__
 737 016e DF91      		pop r29
 738 0170 CF91      		pop r28
 739 0172 1F91      		pop r17
 740 0174 0F91      		pop r16
 741 0176 FF90      		pop r15
 742 0178 EF90      		pop r14
 743 017a DF90      		pop r13
 744 017c CF90      		pop r12
 193:keyboards/RentalCar6Column/matrix.c **** 
 745               		.loc 1 193 1 view .LVU155
 746 017e BF90      		pop r11
 747 0180 AF90      		pop r10
 748 0182 9F90      		pop r9
 749 0184 8F90      		pop r8
 750 0186 7F90      		pop r7
 751 0188 6F90      		pop r6
 193:keyboards/RentalCar6Column/matrix.c **** 
 752               		.loc 1 193 1 view .LVU156
 753 018a 5F90      		pop r5
 754               	.LVL45:
 193:keyboards/RentalCar6Column/matrix.c **** 
 755               		.loc 1 193 1 view .LVU157
 756 018c 4F90      		pop r4
 757 018e 3F90      		pop r3
 758 0190 0895      		ret
 759               	.L26:
 148:keyboards/RentalCar6Column/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 760               		.loc 1 148 33 view .LVU158
 761 0192 1A82      		std Y+2,__zero_reg__
 762 0194 1982      		std Y+1,__zero_reg__
 763 0196 00C0      		rjmp .L17
 764               	.LVL46:
 765               	.L27:
 766               	.LBB62:
 767               	.LBB59:
 768               	.LBB58:
 769               	.LBB56:
 770               	.LBB54:
 771               	.LBB49:
 358:keyboards/RentalCar6Column/matrix.c ****     }
 772               		.loc 1 358 37 view .LVU159
 773 0198 20E0      		ldi r18,0
 774 019a 00C0      		rjmp .L18
 775               	.LBE49:
 776               	.LBE54:
 777               	.LBE56:
 778               	.LBE58:
 779               	.LBE59:
 780               	.LBE62:
 781               		.cfi_endproc
 782               	.LFE16:
 784               		.section	.text.serial_transaction,"ax",@progbits
 785               	.global	serial_transaction
 787               	serial_transaction:
 788               	.LFB17:
 230:keyboards/RentalCar6Column/matrix.c ****     int slaveOffset = (isLeftHand) ? (ROWS_PER_HAND) : 0;
 789               		.loc 1 230 30 is_stmt 1 view -0
 790               		.cfi_startproc
 791 0000 CF93      		push r28
 792               	.LCFI19:
 793               		.cfi_def_cfa_offset 3
 794               		.cfi_offset 28, -2
 795 0002 DF93      		push r29
 796               	.LCFI20:
 797               		.cfi_def_cfa_offset 4
 798               		.cfi_offset 29, -3
 799               	/* prologue: function */
 800               	/* frame size = 0 */
 801               	/* stack size = 2 */
 802               	.L__stack_usage = 2
 231:keyboards/RentalCar6Column/matrix.c **** 
 803               		.loc 1 231 5 view .LVU161
 231:keyboards/RentalCar6Column/matrix.c **** 
 804               		.loc 1 231 36 is_stmt 0 view .LVU162
 805 0004 8091 0000 		lds r24,isLeftHand
 231:keyboards/RentalCar6Column/matrix.c **** 
 806               		.loc 1 231 54 view .LVU163
 807 0008 D0E0      		ldi r29,0
 808 000a C0E0      		ldi r28,0
 809 000c 8823      		tst r24
 810 000e 01F0      		breq .L32
 811 0010 C6E0      		ldi r28,lo8(6)
 812 0012 D0E0      		ldi r29,0
 813               	.L32:
 814               	.LVL47:
 233:keyboards/RentalCar6Column/matrix.c ****         return 1;
 815               		.loc 1 233 5 is_stmt 1 discriminator 4 view .LVU164
 233:keyboards/RentalCar6Column/matrix.c ****         return 1;
 816               		.loc 1 233 9 is_stmt 0 discriminator 4 view .LVU165
 817 0014 0E94 0000 		call serial_update_buffers
 818               	.LVL48:
 233:keyboards/RentalCar6Column/matrix.c ****         return 1;
 819               		.loc 1 233 8 discriminator 4 view .LVU166
 820 0018 0097      		sbiw r24,0
 821 001a 01F4      		brne .L36
 822 001c C050      		subi r28,lo8(-(matrix))
 823 001e D040      		sbci r29,hi8(-(matrix))
 824               	.LVL49:
 825               	.LBB63:
 237:keyboards/RentalCar6Column/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 826               		.loc 1 237 14 view .LVU167
 827 0020 30E0      		ldi r19,0
 828 0022 20E0      		ldi r18,0
 829               	.LVL50:
 830               	.L34:
 238:keyboards/RentalCar6Column/matrix.c ****     }
 831               		.loc 1 238 9 is_stmt 1 discriminator 3 view .LVU168
 238:keyboards/RentalCar6Column/matrix.c ****     }
 832               		.loc 1 238 52 is_stmt 0 discriminator 3 view .LVU169
 833 0024 F901      		movw r30,r18
 834 0026 E050      		subi r30,lo8(-(serial_slave_buffer))
 835 0028 F040      		sbci r31,hi8(-(serial_slave_buffer))
 836 002a 4081      		ld r20,Z
 238:keyboards/RentalCar6Column/matrix.c ****     }
 837               		.loc 1 238 31 discriminator 3 view .LVU170
 838 002c 4993      		st Y+,r20
 237:keyboards/RentalCar6Column/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 839               		.loc 1 237 40 discriminator 3 view .LVU171
 840 002e 2F5F      		subi r18,-1
 841 0030 3F4F      		sbci r19,-1
 842               	.LVL51:
 237:keyboards/RentalCar6Column/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 843               		.loc 1 237 5 discriminator 3 view .LVU172
 844 0032 2630      		cpi r18,6
 845 0034 3105      		cpc r19,__zero_reg__
 846 0036 01F4      		brne .L34
 847               	.LVL52:
 848               	.L31:
 849               	/* epilogue start */
 237:keyboards/RentalCar6Column/matrix.c ****         matrix[slaveOffset+i] = serial_slave_buffer[i];
 850               		.loc 1 237 5 discriminator 3 view .LVU173
 851               	.LBE63:
 241:keyboards/RentalCar6Column/matrix.c **** #endif
 852               		.loc 1 241 1 view .LVU174
 853 0038 DF91      		pop r29
 854 003a CF91      		pop r28
 855 003c 0895      		ret
 856               	.LVL53:
 857               	.L36:
 234:keyboards/RentalCar6Column/matrix.c ****     }
 858               		.loc 1 234 16 view .LVU175
 859 003e 81E0      		ldi r24,lo8(1)
 860 0040 90E0      		ldi r25,0
 861 0042 00C0      		rjmp .L31
 862               		.cfi_endproc
 863               	.LFE17:
 865               		.section	.text.matrix_scan,"ax",@progbits
 866               	.global	matrix_scan
 868               	matrix_scan:
 869               	.LFB18:
 245:keyboards/RentalCar6Column/matrix.c ****     uint8_t ret = _matrix_scan();
 870               		.loc 1 245 1 is_stmt 1 view -0
 871               		.cfi_startproc
 872 0000 CF93      		push r28
 873               	.LCFI21:
 874               		.cfi_def_cfa_offset 3
 875               		.cfi_offset 28, -2
 876               	/* prologue: function */
 877               	/* frame size = 0 */
 878               	/* stack size = 1 */
 879               	.L__stack_usage = 1
 246:keyboards/RentalCar6Column/matrix.c **** 
 880               		.loc 1 246 5 view .LVU177
 246:keyboards/RentalCar6Column/matrix.c **** 
 881               		.loc 1 246 19 is_stmt 0 view .LVU178
 882 0002 0E94 0000 		call _matrix_scan
 883               	.LVL54:
 884 0006 C82F      		mov r28,r24
 885               	.LVL55:
 251:keyboards/RentalCar6Column/matrix.c **** #endif
 886               		.loc 1 251 5 is_stmt 1 view .LVU179
 251:keyboards/RentalCar6Column/matrix.c **** #endif
 887               		.loc 1 251 9 is_stmt 0 view .LVU180
 888 0008 0E94 0000 		call serial_transaction
 889               	.LVL56:
 251:keyboards/RentalCar6Column/matrix.c **** #endif
 890               		.loc 1 251 7 view .LVU181
 891 000c 892B      		or r24,r25
 892 000e 01F0      		breq .L39
 254:keyboards/RentalCar6Column/matrix.c **** 
 893               		.loc 1 254 9 is_stmt 1 view .LVU182
 894 0010 5D98      		cbi 0xb,5
 256:keyboards/RentalCar6Column/matrix.c **** 
 895               		.loc 1 256 9 view .LVU183
 256:keyboards/RentalCar6Column/matrix.c **** 
 896               		.loc 1 256 20 is_stmt 0 view .LVU184
 897 0012 8091 0000 		lds r24,error_count
 898 0016 8F5F      		subi r24,lo8(-(1))
 899 0018 8093 0000 		sts error_count,r24
 258:keyboards/RentalCar6Column/matrix.c ****             // reset other half if disconnected
 900               		.loc 1 258 9 is_stmt 1 view .LVU185
 258:keyboards/RentalCar6Column/matrix.c ****             // reset other half if disconnected
 901               		.loc 1 258 12 is_stmt 0 view .LVU186
 902 001c 8630      		cpi r24,lo8(6)
 903 001e 00F0      		brlo .L41
 904               	.LBB64:
 260:keyboards/RentalCar6Column/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 905               		.loc 1 260 13 is_stmt 1 view .LVU187
 260:keyboards/RentalCar6Column/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 906               		.loc 1 260 44 is_stmt 0 view .LVU188
 907 0020 8091 0000 		lds r24,isLeftHand
 260:keyboards/RentalCar6Column/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 908               		.loc 1 260 62 view .LVU189
 909 0024 F0E0      		ldi r31,0
 910 0026 E0E0      		ldi r30,0
 911 0028 8823      		tst r24
 912 002a 01F0      		breq .L42
 913 002c E6E0      		ldi r30,lo8(6)
 914 002e F0E0      		ldi r31,0
 915               	.L42:
 916               	.LVL57:
 261:keyboards/RentalCar6Column/matrix.c ****                 matrix[slaveOffset+i] = 0;
 917               		.loc 1 261 13 is_stmt 1 discriminator 4 view .LVU190
 918               	.LBB65:
 261:keyboards/RentalCar6Column/matrix.c ****                 matrix[slaveOffset+i] = 0;
 919               		.loc 1 261 18 discriminator 4 view .LVU191
 261:keyboards/RentalCar6Column/matrix.c ****                 matrix[slaveOffset+i] = 0;
 920               		.loc 1 261 18 is_stmt 0 discriminator 4 view .LVU192
 921 0030 E050      		subi r30,lo8(-(matrix))
 922 0032 F040      		sbci r31,hi8(-(matrix))
 923               	.LBE65:
 260:keyboards/RentalCar6Column/matrix.c ****             for (int i = 0; i < ROWS_PER_HAND; ++i) {
 924               		.loc 1 260 62 discriminator 4 view .LVU193
 925 0034 86E0      		ldi r24,lo8(6)
 926 0036 90E0      		ldi r25,0
 927               	.LVL58:
 928               	.L43:
 929               	.LBB66:
 262:keyboards/RentalCar6Column/matrix.c ****             }
 930               		.loc 1 262 17 is_stmt 1 discriminator 3 view .LVU194
 262:keyboards/RentalCar6Column/matrix.c ****             }
 931               		.loc 1 262 39 is_stmt 0 discriminator 3 view .LVU195
 932 0038 1192      		st Z+,__zero_reg__
 262:keyboards/RentalCar6Column/matrix.c ****             }
 933               		.loc 1 262 39 discriminator 3 view .LVU196
 934 003a 0197      		sbiw r24,1
 261:keyboards/RentalCar6Column/matrix.c ****                 matrix[slaveOffset+i] = 0;
 935               		.loc 1 261 13 discriminator 3 view .LVU197
 936 003c 01F4      		brne .L43
 937               	.L41:
 261:keyboards/RentalCar6Column/matrix.c ****                 matrix[slaveOffset+i] = 0;
 938               		.loc 1 261 13 discriminator 3 view .LVU198
 939               	.LBE66:
 940               	.LBE64:
 270:keyboards/RentalCar6Column/matrix.c ****     return ret;
 941               		.loc 1 270 5 is_stmt 1 view .LVU199
 942 003e 0E94 0000 		call matrix_scan_quantum
 943               	.LVL59:
 271:keyboards/RentalCar6Column/matrix.c **** }
 944               		.loc 1 271 5 view .LVU200
 272:keyboards/RentalCar6Column/matrix.c **** 
 945               		.loc 1 272 1 is_stmt 0 view .LVU201
 946 0042 8C2F      		mov r24,r28
 947               	/* epilogue start */
 948 0044 CF91      		pop r28
 949               	.LVL60:
 272:keyboards/RentalCar6Column/matrix.c **** 
 950               		.loc 1 272 1 view .LVU202
 951 0046 0895      		ret
 952               	.LVL61:
 953               	.L39:
 267:keyboards/RentalCar6Column/matrix.c ****         error_count = 0;
 954               		.loc 1 267 9 is_stmt 1 view .LVU203
 955 0048 5D9A      		sbi 0xb,5
 268:keyboards/RentalCar6Column/matrix.c ****     }
 956               		.loc 1 268 9 view .LVU204
 268:keyboards/RentalCar6Column/matrix.c ****     }
 957               		.loc 1 268 21 is_stmt 0 view .LVU205
 958 004a 1092 0000 		sts error_count,__zero_reg__
 959 004e 00C0      		rjmp .L41
 960               		.cfi_endproc
 961               	.LFE18:
 963               		.section	.text.matrix_slave_scan,"ax",@progbits
 964               	.global	matrix_slave_scan
 966               	matrix_slave_scan:
 967               	.LFB19:
 274:keyboards/RentalCar6Column/matrix.c ****     _matrix_scan();
 968               		.loc 1 274 30 is_stmt 1 view -0
 969               		.cfi_startproc
 970               	/* prologue: function */
 971               	/* frame size = 0 */
 972               	/* stack size = 0 */
 973               	.L__stack_usage = 0
 275:keyboards/RentalCar6Column/matrix.c **** 
 974               		.loc 1 275 5 view .LVU207
 975 0000 0E94 0000 		call _matrix_scan
 976               	.LVL62:
 277:keyboards/RentalCar6Column/matrix.c **** 
 977               		.loc 1 277 5 view .LVU208
 277:keyboards/RentalCar6Column/matrix.c **** 
 978               		.loc 1 277 31 is_stmt 0 view .LVU209
 979 0004 8091 0000 		lds r24,isLeftHand
 277:keyboards/RentalCar6Column/matrix.c **** 
 980               		.loc 1 277 35 view .LVU210
 981 0008 E6E0      		ldi r30,lo8(6)
 982 000a F0E0      		ldi r31,0
 983 000c 8823      		tst r24
 984 000e 01F0      		breq .L48
 985 0010 F0E0      		ldi r31,0
 986 0012 E0E0      		ldi r30,0
 987               	.L48:
 988               	.LVL63:
 284:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 989               		.loc 1 284 5 is_stmt 1 discriminator 4 view .LVU211
 990               	.LBB67:
 284:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 991               		.loc 1 284 10 discriminator 4 view .LVU212
 284:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 992               		.loc 1 284 10 is_stmt 0 discriminator 4 view .LVU213
 993 0014 E050      		subi r30,lo8(-(matrix))
 994 0016 F040      		sbci r31,hi8(-(matrix))
 995               	.LVL64:
 284:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 996               		.loc 1 284 14 discriminator 4 view .LVU214
 997 0018 90E0      		ldi r25,0
 998 001a 80E0      		ldi r24,0
 999               	.LVL65:
 1000               	.L49:
 285:keyboards/RentalCar6Column/matrix.c ****     }
 1001               		.loc 1 285 9 is_stmt 1 discriminator 3 view .LVU215
 285:keyboards/RentalCar6Column/matrix.c ****     }
 1002               		.loc 1 285 40 is_stmt 0 discriminator 3 view .LVU216
 1003 001c 2191      		ld r18,Z+
 285:keyboards/RentalCar6Column/matrix.c ****     }
 1004               		.loc 1 285 32 discriminator 3 view .LVU217
 1005 001e DC01      		movw r26,r24
 1006 0020 A050      		subi r26,lo8(-(serial_slave_buffer))
 1007 0022 B040      		sbci r27,hi8(-(serial_slave_buffer))
 1008 0024 2C93      		st X,r18
 284:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1009               		.loc 1 284 40 discriminator 3 view .LVU218
 1010 0026 0196      		adiw r24,1
 1011               	.LVL66:
 284:keyboards/RentalCar6Column/matrix.c ****         serial_slave_buffer[i] = matrix[offset+i];
 1012               		.loc 1 284 5 discriminator 3 view .LVU219
 1013 0028 8630      		cpi r24,6
 1014 002a 9105      		cpc r25,__zero_reg__
 1015 002c 01F4      		brne .L49
 1016               	/* epilogue start */
 1017               	.LBE67:
 288:keyboards/RentalCar6Column/matrix.c **** 
 1018               		.loc 1 288 1 view .LVU220
 1019 002e 0895      		ret
 1020               		.cfi_endproc
 1021               	.LFE19:
 1023               		.section	.text.matrix_is_modified,"ax",@progbits
 1024               	.global	matrix_is_modified
 1026               	matrix_is_modified:
 1027               	.LFB20:
 291:keyboards/RentalCar6Column/matrix.c ****     if (debouncing) return false;
 1028               		.loc 1 291 1 is_stmt 1 view -0
 1029               		.cfi_startproc
 1030               	/* prologue: function */
 1031               	/* frame size = 0 */
 1032               	/* stack size = 0 */
 1033               	.L__stack_usage = 0
 292:keyboards/RentalCar6Column/matrix.c ****     return true;
 1034               		.loc 1 292 5 view .LVU222
 292:keyboards/RentalCar6Column/matrix.c ****     return true;
 1035               		.loc 1 292 8 is_stmt 0 view .LVU223
 1036 0000 9091 0000 		lds r25,debouncing
 294:keyboards/RentalCar6Column/matrix.c **** 
 1037               		.loc 1 294 1 view .LVU224
 1038 0004 81E0      		ldi r24,lo8(1)
 1039 0006 8927      		eor r24,r25
 1040               	/* epilogue start */
 1041 0008 0895      		ret
 1042               		.cfi_endproc
 1043               	.LFE20:
 1045               		.section	.text.matrix_is_on,"ax",@progbits
 1046               	.global	matrix_is_on
 1048               	matrix_is_on:
 1049               	.LVL67:
 1050               	.LFB21:
 298:keyboards/RentalCar6Column/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<<col));
 1051               		.loc 1 298 1 is_stmt 1 view -0
 1052               		.cfi_startproc
 1053               	/* prologue: function */
 1054               	/* frame size = 0 */
 1055               	/* stack size = 0 */
 1056               	.L__stack_usage = 0
 299:keyboards/RentalCar6Column/matrix.c **** }
 1057               		.loc 1 299 5 view .LVU226
 299:keyboards/RentalCar6Column/matrix.c **** }
 1058               		.loc 1 299 19 is_stmt 0 view .LVU227
 1059 0000 E82F      		mov r30,r24
 1060 0002 F0E0      		ldi r31,0
 1061 0004 E050      		subi r30,lo8(-(matrix))
 1062 0006 F040      		sbci r31,hi8(-(matrix))
 1063 0008 2081      		ld r18,Z
 1064 000a 30E0      		ldi r19,0
 299:keyboards/RentalCar6Column/matrix.c **** }
 1065               		.loc 1 299 43 view .LVU228
 1066 000c 81E0      		ldi r24,lo8(1)
 1067 000e 90E0      		ldi r25,0
 1068               	.LVL68:
 299:keyboards/RentalCar6Column/matrix.c **** }
 1069               		.loc 1 299 43 view .LVU229
 1070 0010 00C0      		rjmp 2f
 1071               		1:
 1072 0012 880F      		lsl r24
 1073 0014 991F      		rol r25
 1074               		2:
 1075 0016 6A95      		dec r22
 1076 0018 02F4      		brpl 1b
 299:keyboards/RentalCar6Column/matrix.c **** }
 1077               		.loc 1 299 25 view .LVU230
 1078 001a 2823      		and r18,r24
 1079 001c 3923      		and r19,r25
 1080 001e 81E0      		ldi r24,lo8(1)
 1081 0020 232B      		or r18,r19
 1082 0022 01F4      		brne .L54
 1083 0024 80E0      		ldi r24,0
 1084               	.L54:
 1085               	/* epilogue start */
 300:keyboards/RentalCar6Column/matrix.c **** 
 1086               		.loc 1 300 1 view .LVU231
 1087 0026 0895      		ret
 1088               		.cfi_endproc
 1089               	.LFE21:
 1091               		.section	.text.matrix_get_row,"ax",@progbits
 1092               	.global	matrix_get_row
 1094               	matrix_get_row:
 1095               	.LVL69:
 1096               	.LFB22:
 304:keyboards/RentalCar6Column/matrix.c ****     return matrix[row];
 1097               		.loc 1 304 1 is_stmt 1 view -0
 1098               		.cfi_startproc
 1099               	/* prologue: function */
 1100               	/* frame size = 0 */
 1101               	/* stack size = 0 */
 1102               	.L__stack_usage = 0
 305:keyboards/RentalCar6Column/matrix.c **** }
 1103               		.loc 1 305 5 view .LVU233
 305:keyboards/RentalCar6Column/matrix.c **** }
 1104               		.loc 1 305 18 is_stmt 0 view .LVU234
 1105 0000 E82F      		mov r30,r24
 1106 0002 F0E0      		ldi r31,0
 1107 0004 E050      		subi r30,lo8(-(matrix))
 1108 0006 F040      		sbci r31,hi8(-(matrix))
 306:keyboards/RentalCar6Column/matrix.c **** 
 1109               		.loc 1 306 1 view .LVU235
 1110 0008 8081      		ld r24,Z
 1111               	.LVL70:
 1112               	/* epilogue start */
 306:keyboards/RentalCar6Column/matrix.c **** 
 1113               		.loc 1 306 1 view .LVU236
 1114 000a 0895      		ret
 1115               		.cfi_endproc
 1116               	.LFE22:
 1118               		.section	.text.matrix_print,"ax",@progbits
 1119               	.global	matrix_print
 1121               	matrix_print:
 1122               	.LFB23:
 309:keyboards/RentalCar6Column/matrix.c ****     print("\nr/c 0123456789ABCDEF\n");
 1123               		.loc 1 309 1 is_stmt 1 view -0
 1124               		.cfi_startproc
 1125               	/* prologue: function */
 1126               	/* frame size = 0 */
 1127               	/* stack size = 0 */
 1128               	.L__stack_usage = 0
 310:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 1129               		.loc 1 310 38 view .LVU238
 311:keyboards/RentalCar6Column/matrix.c ****         phex(row); print(": ");
 1130               		.loc 1 311 5 view .LVU239
 311:keyboards/RentalCar6Column/matrix.c ****         phex(row); print(": ");
 1131               		.loc 1 311 10 view .LVU240
 1132               	.LVL71:
 1133               	/* epilogue start */
 316:keyboards/RentalCar6Column/matrix.c **** 
 1134               		.loc 1 316 1 is_stmt 0 view .LVU241
 1135 0000 0895      		ret
 1136               		.cfi_endproc
 1137               	.LFE23:
 1139               		.section	.text.matrix_key_count,"ax",@progbits
 1140               	.global	matrix_key_count
 1142               	matrix_key_count:
 1143               	.LFB24:
 319:keyboards/RentalCar6Column/matrix.c ****     uint8_t count = 0;
 1144               		.loc 1 319 1 is_stmt 1 view -0
 1145               		.cfi_startproc
 1146 0000 0F93      		push r16
 1147               	.LCFI22:
 1148               		.cfi_def_cfa_offset 3
 1149               		.cfi_offset 16, -2
 1150 0002 1F93      		push r17
 1151               	.LCFI23:
 1152               		.cfi_def_cfa_offset 4
 1153               		.cfi_offset 17, -3
 1154 0004 CF93      		push r28
 1155               	.LCFI24:
 1156               		.cfi_def_cfa_offset 5
 1157               		.cfi_offset 28, -4
 1158               	/* prologue: function */
 1159               	/* frame size = 0 */
 1160               	/* stack size = 3 */
 1161               	.L__stack_usage = 3
 320:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1162               		.loc 1 320 5 view .LVU243
 1163               	.LVL72:
 321:keyboards/RentalCar6Column/matrix.c ****         count += bitpop16(matrix[i]);
 1164               		.loc 1 321 5 view .LVU244
 1165               	.LBB68:
 321:keyboards/RentalCar6Column/matrix.c ****         count += bitpop16(matrix[i]);
 1166               		.loc 1 321 10 view .LVU245
 321:keyboards/RentalCar6Column/matrix.c ****         count += bitpop16(matrix[i]);
 1167               		.loc 1 321 10 is_stmt 0 view .LVU246
 1168 0006 00E0      		ldi r16,lo8(matrix)
 1169 0008 10E0      		ldi r17,hi8(matrix)
 1170               	.LBE68:
 320:keyboards/RentalCar6Column/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 1171               		.loc 1 320 13 view .LVU247
 1172 000a C0E0      		ldi r28,0
 1173               	.LVL73:
 1174               	.L58:
 1175               	.LBB69:
 322:keyboards/RentalCar6Column/matrix.c ****     }
 1176               		.loc 1 322 9 is_stmt 1 discriminator 3 view .LVU248
 322:keyboards/RentalCar6Column/matrix.c ****     }
 1177               		.loc 1 322 33 is_stmt 0 discriminator 3 view .LVU249
 1178 000c F801      		movw r30,r16
 1179 000e 8191      		ld r24,Z+
 1180 0010 8F01      		movw r16,r30
 1181               	.LVL74:
 322:keyboards/RentalCar6Column/matrix.c ****     }
 1182               		.loc 1 322 18 discriminator 3 view .LVU250
 1183 0012 90E0      		ldi r25,0
 1184 0014 0E94 0000 		call bitpop16
 1185               	.LVL75:
 322:keyboards/RentalCar6Column/matrix.c ****     }
 1186               		.loc 1 322 15 discriminator 3 view .LVU251
 1187 0018 C80F      		add r28,r24
 1188               	.LVL76:
 321:keyboards/RentalCar6Column/matrix.c ****         count += bitpop16(matrix[i]);
 1189               		.loc 1 321 5 discriminator 3 view .LVU252
 1190 001a F0E0      		ldi r31,hi8(matrix+12)
 1191 001c 0030      		cpi r16,lo8(matrix+12)
 1192 001e 1F07      		cpc r17,r31
 1193 0020 01F4      		brne .L58
 1194               	.LBE69:
 324:keyboards/RentalCar6Column/matrix.c **** }
 1195               		.loc 1 324 5 is_stmt 1 view .LVU253
 325:keyboards/RentalCar6Column/matrix.c **** 
 1196               		.loc 1 325 1 is_stmt 0 view .LVU254
 1197 0022 8C2F      		mov r24,r28
 1198               	/* epilogue start */
 1199 0024 CF91      		pop r28
 1200               	.LVL77:
 325:keyboards/RentalCar6Column/matrix.c **** 
 1201               		.loc 1 325 1 view .LVU255
 1202 0026 1F91      		pop r17
 1203 0028 0F91      		pop r16
 1204               	.LVL78:
 325:keyboards/RentalCar6Column/matrix.c **** 
 1205               		.loc 1 325 1 view .LVU256
 1206 002a 0895      		ret
 1207               		.cfi_endproc
 1208               	.LFE24:
 1210               		.section	.bss.matrix,"aw",@nobits
 1213               	matrix:
 1214 0000 0000 0000 		.zero	12
 1214      0000 0000 
 1214      0000 0000 
 1215               		.section	.rodata.col_pins,"a"
 1218               	col_pins:
 1219 0000 35        		.byte	53
 1220 0001 34        		.byte	52
 1221 0002 C6        		.byte	-58
 1222 0003 97        		.byte	-105
 1223 0004 66        		.byte	102
 1224 0005 00        		.zero	1
 1225               		.section	.rodata.row_pins,"a"
 1228               	row_pins:
 1229 0000 36        		.byte	54
 1230 0001 32        		.byte	50
 1231 0002 33        		.byte	51
 1232 0003 31        		.byte	49
 1233 0004 F7        		.byte	-9
 1234 0005 0000 0000 		.zero	7
 1234      0000 00
 1235               		.section	.bss.error_count,"aw",@nobits
 1238               	error_count:
 1239 0000 00        		.zero	1
 1240               		.section	.bss.matrix_debouncing,"aw",@nobits
 1243               	matrix_debouncing:
 1244 0000 0000 0000 		.zero	12
 1244      0000 0000 
 1244      0000 0000 
 1245               		.section	.bss.debouncing,"aw",@nobits
 1248               	debouncing:
 1249 0000 00        		.zero	1
 1250               		.section	.bss.debouncing_time,"aw",@nobits
 1253               	debouncing_time:
 1254 0000 0000      		.zero	2
 1255               		.text
 1256               	.Letext0:
 1257               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 1258               		.file 4 "./tmk_core/common/debug.h"
 1259               		.file 5 "./tmk_core/common/matrix.h"
 1260               		.file 6 "keyboards/RentalCar6Column/split_util.h"
 1261               		.file 7 "./drivers/avr/pro_micro.h"
 1262               		.file 8 "./tmk_core/common/timer.h"
 1263               		.file 9 "keyboards/RentalCar6Column/serial.h"
 1264               		.file 10 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 matrix.c
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:13     .text.matrix_init_user:0000000000000000 matrix_init_user.localalias.0
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:32     .text.matrix_init_kb:0000000000000000 matrix_init_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:49     .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:66     .text.matrix_scan_user:0000000000000000 matrix_scan_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:81     .text.matrix_scan_kb:0000000000000000 matrix_scan_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:98     .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:115    .text.matrix_rows:0000000000000000 matrix_rows
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:134    .text.matrix_cols:0000000000000000 matrix_cols
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:153    .text.matrix_init:0000000000000000 matrix_init
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1228   .rodata.row_pins:0000000000000000 row_pins
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1218   .rodata.col_pins:0000000000000000 col_pins
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1213   .bss.matrix:0000000000000000 matrix
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1243   .bss.matrix_debouncing:0000000000000000 matrix_debouncing
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:326    .text._matrix_scan:0000000000000000 _matrix_scan
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1248   .bss.debouncing:0000000000000000 debouncing
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1253   .bss.debouncing_time:0000000000000000 debouncing_time
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:787    .text.serial_transaction:0000000000000000 serial_transaction
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:868    .text.matrix_scan:0000000000000000 matrix_scan
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1238   .bss.error_count:0000000000000000 error_count
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:966    .text.matrix_slave_scan:0000000000000000 matrix_slave_scan
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1026   .text.matrix_is_modified:0000000000000000 matrix_is_modified
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1048   .text.matrix_is_on:0000000000000000 matrix_is_on
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1094   .text.matrix_get_row:0000000000000000 matrix_get_row
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1121   .text.matrix_print:0000000000000000 matrix_print
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cczcTbGT.s:1142   .text.matrix_key_count:0000000000000000 matrix_key_count

UNDEFINED SYMBOLS
debug_config
isLeftHand
timer_read
timer_elapsed
serial_update_buffers
serial_slave_buffer
bitpop16
__do_copy_data
__do_clear_bss
