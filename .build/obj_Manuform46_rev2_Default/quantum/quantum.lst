   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB28:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  19:quantum/quantum.c **** #include "outputselect.h"
  20:quantum/quantum.c **** #endif
  21:quantum/quantum.c **** 
  22:quantum/quantum.c **** #ifndef TAPPING_TERM
  23:quantum/quantum.c **** #define TAPPING_TERM 200
  24:quantum/quantum.c **** #endif
  25:quantum/quantum.c **** 
  26:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  27:quantum/quantum.c **** #define BREATHING_PERIOD 6
  28:quantum/quantum.c **** #endif
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** #include "backlight.h"
  31:quantum/quantum.c **** extern backlight_config_t backlight_config;
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  34:quantum/quantum.c **** #include "fauxclicky.h"
  35:quantum/quantum.c **** #endif
  36:quantum/quantum.c **** 
  37:quantum/quantum.c **** #ifdef API_ENABLE
  38:quantum/quantum.c **** #include "api.h"
  39:quantum/quantum.c **** #endif
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** #ifdef MIDI_ENABLE
  42:quantum/quantum.c **** #include "process_midi.h"
  43:quantum/quantum.c **** #endif
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  46:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  47:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  48:quantum/quantum.c ****   #endif
  49:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  50:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  51:quantum/quantum.c ****   #endif
  52:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  53:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  54:quantum/quantum.c ****   #endif
  55:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  56:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  57:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  58:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  59:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  60:quantum/quantum.c ****   #endif
  61:quantum/quantum.c **** #endif
  62:quantum/quantum.c **** 
  63:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 63 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 63 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  64:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 64 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 64 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  65:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  66:quantum/quantum.c ****     break;
  48               		.loc 1 66 5 is_stmt 1 view .LVU4
  67:quantum/quantum.c ****   default:
  68:quantum/quantum.c ****     return;
  69:quantum/quantum.c ****   }
  70:quantum/quantum.c **** 
  71:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 71 3 view .LVU5
  50               		.loc 1 71 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  72:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 72 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  73:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 73 3 view .LVU8
  60               		.loc 1 73 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  74:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 74 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  75:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 75 3 view .LVU11
  70               		.loc 1 75 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  76:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 76 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  77:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 77 3 view .LVU14
  80               		.loc 1 77 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  78:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 78 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  79:quantum/quantum.c **** 
  80:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 80 3 view .LVU17
  90               		.loc 1 80 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  81:quantum/quantum.c **** 
  82:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 82 3 is_stmt 1 view .LVU19
  83:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 83 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  84:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 84 3 view .LVU21
  85:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 85 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  86:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 86 3 view .LVU23
  87:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 87 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  88:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 88 3 view .LVU25
  89:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 89 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  90:quantum/quantum.c **** }
 117               		.loc 1 90 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 90 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  89:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 89 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 90 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 90 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 90 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE28:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB29:
  91:quantum/quantum.c **** 
  92:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 92 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  93:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 93 5 view .LVU34
 155               		.loc 1 93 19 is_stmt 0 view .LVU35
 156 0000 8770      		andi r24,lo8(7)
 157               	.LVL15:
 158               		.loc 1 93 5 view .LVU36
 159 0002 91E0      		ldi r25,lo8(1)
 160 0004 00C0      		rjmp 2f
 161               		1:
 162 0006 990F      		lsl r25
 163               		2:
 164 0008 8A95      		dec r24
 165 000a 02F4      		brpl 1b
 166 000c 892F      		mov r24,r25
 167 000e 0E94 0000 		call add_weak_mods
 168               	.LVL16:
  94:quantum/quantum.c ****     send_keyboard_report();
 169               		.loc 1 94 5 is_stmt 1 view .LVU37
 170 0012 0C94 0000 		jmp send_keyboard_report
 171               	.LVL17:
 172               		.cfi_endproc
 173               	.LFE29:
 175               		.section	.text.qk_register_mods,"ax",@progbits
 177               	qk_register_mods:
 178               	.LFB96:
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184 0000 0C94 0000 		jmp qk_register_weak_mods
 185               		.cfi_endproc
 186               	.LFE96:
 188               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 190               	qk_unregister_weak_mods:
 191               	.LVL18:
 192               	.LFB30:
  95:quantum/quantum.c **** }
  96:quantum/quantum.c **** 
  97:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 193               		.loc 1 97 56 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
  98:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 199               		.loc 1 98 5 view .LVU39
 200               		.loc 1 98 19 is_stmt 0 view .LVU40
 201 0000 8770      		andi r24,lo8(7)
 202               	.LVL19:
 203               		.loc 1 98 5 view .LVU41
 204 0002 91E0      		ldi r25,lo8(1)
 205 0004 00C0      		rjmp 2f
 206               		1:
 207 0006 990F      		lsl r25
 208               		2:
 209 0008 8A95      		dec r24
 210 000a 02F4      		brpl 1b
 211 000c 892F      		mov r24,r25
 212 000e 0E94 0000 		call del_weak_mods
 213               	.LVL20:
  99:quantum/quantum.c ****     send_keyboard_report();
 214               		.loc 1 99 5 is_stmt 1 view .LVU42
 215 0012 0C94 0000 		jmp send_keyboard_report
 216               	.LVL21:
 217               		.cfi_endproc
 218               	.LFE30:
 220               		.section	.text.qk_unregister_mods,"ax",@progbits
 222               	qk_unregister_mods:
 223               	.LFB98:
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229 0000 0C94 0000 		jmp qk_unregister_weak_mods
 230               		.cfi_endproc
 231               	.LFE98:
 233               		.section	.text.rgblight_toggle,"ax",@progbits
 234               		.weak	rgblight_toggle
 236               	rgblight_toggle:
 237               	.LFB10:
 238               		.file 2 "quantum/rgb.h"
   1:quantum/rgb.h **** /* Copyright 2017 Jack Humbert
   2:quantum/rgb.h ****  *
   3:quantum/rgb.h ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgb.h ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgb.h ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgb.h ****  * (at your option) any later version.
   7:quantum/rgb.h ****  *
   8:quantum/rgb.h ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgb.h ****  * GNU General Public License for more details.
  12:quantum/rgb.h ****  *
  13:quantum/rgb.h ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgb.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgb.h ****  */
  16:quantum/rgb.h **** 
  17:quantum/rgb.h **** #ifndef RGB_H
  18:quantum/rgb.h **** #define RGB_H
  19:quantum/rgb.h **** 
  20:quantum/rgb.h **** __attribute__((weak))
  21:quantum/rgb.h **** void rgblight_toggle(void) {};
 239               		.loc 2 21 28 view -0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
 245               		.loc 2 21 29 view .LVU44
 246               	/* epilogue start */
 247               		.loc 2 21 1 is_stmt 0 view .LVU45
 248 0000 0895      		ret
 249               		.cfi_endproc
 250               	.LFE10:
 252               		.section	.text.rgblight_step,"ax",@progbits
 253               		.weak	rgblight_step
 255               	rgblight_step:
 256               	.LFB66:
 257               		.cfi_startproc
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 0 */
 261               	.L__stack_usage = 0
 262               	/* epilogue start */
 263 0000 0895      		ret
 264               		.cfi_endproc
 265               	.LFE66:
 267               		.section	.text.rgblight_step_reverse,"ax",@progbits
 268               		.weak	rgblight_step_reverse
 270               	rgblight_step_reverse:
 271               	.LFB68:
 272               		.cfi_startproc
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 277               	/* epilogue start */
 278 0000 0895      		ret
 279               		.cfi_endproc
 280               	.LFE68:
 282               		.section	.text.rgblight_increase_hue,"ax",@progbits
 283               		.weak	rgblight_increase_hue
 285               	rgblight_increase_hue:
 286               	.LFB70:
 287               		.cfi_startproc
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 0 */
 291               	.L__stack_usage = 0
 292               	/* epilogue start */
 293 0000 0895      		ret
 294               		.cfi_endproc
 295               	.LFE70:
 297               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 298               		.weak	rgblight_decrease_hue
 300               	rgblight_decrease_hue:
 301               	.LFB72:
 302               		.cfi_startproc
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 0 */
 306               	.L__stack_usage = 0
 307               	/* epilogue start */
 308 0000 0895      		ret
 309               		.cfi_endproc
 310               	.LFE72:
 312               		.section	.text.rgblight_increase_sat,"ax",@progbits
 313               		.weak	rgblight_increase_sat
 315               	rgblight_increase_sat:
 316               	.LFB74:
 317               		.cfi_startproc
 318               	/* prologue: function */
 319               	/* frame size = 0 */
 320               	/* stack size = 0 */
 321               	.L__stack_usage = 0
 322               	/* epilogue start */
 323 0000 0895      		ret
 324               		.cfi_endproc
 325               	.LFE74:
 327               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 328               		.weak	rgblight_decrease_sat
 330               	rgblight_decrease_sat:
 331               	.LFB76:
 332               		.cfi_startproc
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 0 */
 336               	.L__stack_usage = 0
 337               	/* epilogue start */
 338 0000 0895      		ret
 339               		.cfi_endproc
 340               	.LFE76:
 342               		.section	.text.rgblight_increase_val,"ax",@progbits
 343               		.weak	rgblight_increase_val
 345               	rgblight_increase_val:
 346               	.LFB78:
 347               		.cfi_startproc
 348               	/* prologue: function */
 349               	/* frame size = 0 */
 350               	/* stack size = 0 */
 351               	.L__stack_usage = 0
 352               	/* epilogue start */
 353 0000 0895      		ret
 354               		.cfi_endproc
 355               	.LFE78:
 357               		.section	.text.rgblight_decrease_val,"ax",@progbits
 358               		.weak	rgblight_decrease_val
 360               	rgblight_decrease_val:
 361               	.LFB80:
 362               		.cfi_startproc
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 0 */
 366               	.L__stack_usage = 0
 367               	/* epilogue start */
 368 0000 0895      		ret
 369               		.cfi_endproc
 370               	.LFE80:
 372               		.section	.text.rgblight_increase_speed,"ax",@progbits
 373               		.weak	rgblight_increase_speed
 375               	rgblight_increase_speed:
 376               	.LFB82:
 377               		.cfi_startproc
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 0 */
 381               	.L__stack_usage = 0
 382               	/* epilogue start */
 383 0000 0895      		ret
 384               		.cfi_endproc
 385               	.LFE82:
 387               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 388               		.weak	rgblight_decrease_speed
 390               	rgblight_decrease_speed:
 391               	.LFB84:
 392               		.cfi_startproc
 393               	/* prologue: function */
 394               	/* frame size = 0 */
 395               	/* stack size = 0 */
 396               	.L__stack_usage = 0
 397               	/* epilogue start */
 398 0000 0895      		ret
 399               		.cfi_endproc
 400               	.LFE84:
 402               		.section	.text.register_code16,"ax",@progbits
 403               	.global	register_code16
 405               	register_code16:
 406               	.LVL22:
 407               	.LFB33:
 100:quantum/quantum.c **** }
 101:quantum/quantum.c **** 
 102:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 103:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 104:quantum/quantum.c ****     send_keyboard_report();
 105:quantum/quantum.c **** }
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 108:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 109:quantum/quantum.c ****     send_keyboard_report();
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** void register_code16 (uint16_t code) {
 408               		.loc 1 112 38 is_stmt 1 view -0
 409               		.cfi_startproc
 410               		.loc 1 112 38 is_stmt 0 view .LVU47
 411 0000 CF93      		push r28
 412               	.LCFI4:
 413               		.cfi_def_cfa_offset 3
 414               		.cfi_offset 28, -2
 415 0002 DF93      		push r29
 416               	.LCFI5:
 417               		.cfi_def_cfa_offset 4
 418               		.cfi_offset 29, -3
 419               	/* prologue: function */
 420               	/* frame size = 0 */
 421               	/* stack size = 2 */
 422               	.L__stack_usage = 2
 423 0004 EC01      		movw r28,r24
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 424               		.loc 1 113 3 is_stmt 1 view .LVU48
 425               		.loc 1 113 7 is_stmt 0 view .LVU49
 426 0006 805E      		subi r24,-32
 427 0008 9109      		sbc r25,__zero_reg__
 428               	.LVL23:
 429               		.loc 1 113 6 view .LVU50
 430 000a 0897      		sbiw r24,8
 431 000c 00F0      		brlo .L37
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 115:quantum/quantum.c ****   } else {
 116:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 432               		.loc 1 116 7 discriminator 1 view .LVU51
 433 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 434 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 435               		.loc 1 113 20 discriminator 1 view .LVU52
 436 0012 2097      		sbiw r28,0
 437 0014 01F4      		brne .L40
 438               	.L37:
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 439               		.loc 1 114 7 is_stmt 1 view .LVU53
 440 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 441 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 442               	.L40:
 443               		.loc 1 116 7 is_stmt 0 view .LVU54
 444 001a CE01      		movw r24,r28
 445 001c 0E94 0000 		call do_code16
 446               	.LVL24:
 117:quantum/quantum.c ****   }
 118:quantum/quantum.c ****   register_code (code);
 447               		.loc 1 118 3 is_stmt 1 view .LVU55
 448 0020 8C2F      		mov r24,r28
 449               	/* epilogue start */
 119:quantum/quantum.c **** }
 450               		.loc 1 119 1 is_stmt 0 view .LVU56
 451 0022 DF91      		pop r29
 452 0024 CF91      		pop r28
 453               	.LVL25:
 118:quantum/quantum.c **** }
 454               		.loc 1 118 3 view .LVU57
 455 0026 0C94 0000 		jmp register_code
 456               	.LVL26:
 457               		.cfi_endproc
 458               	.LFE33:
 460               		.section	.text.unregister_code16,"ax",@progbits
 461               	.global	unregister_code16
 463               	unregister_code16:
 464               	.LVL27:
 465               	.LFB34:
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 466               		.loc 1 121 40 is_stmt 1 view -0
 467               		.cfi_startproc
 468               		.loc 1 121 40 is_stmt 0 view .LVU59
 469 0000 CF93      		push r28
 470               	.LCFI6:
 471               		.cfi_def_cfa_offset 3
 472               		.cfi_offset 28, -2
 473 0002 DF93      		push r29
 474               	.LCFI7:
 475               		.cfi_def_cfa_offset 4
 476               		.cfi_offset 29, -3
 477               	/* prologue: function */
 478               	/* frame size = 0 */
 479               	/* stack size = 2 */
 480               	.L__stack_usage = 2
 481 0004 EC01      		movw r28,r24
 122:quantum/quantum.c ****   unregister_code (code);
 482               		.loc 1 122 3 is_stmt 1 view .LVU60
 483 0006 0E94 0000 		call unregister_code
 484               	.LVL28:
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 485               		.loc 1 123 3 view .LVU61
 486               		.loc 1 123 7 is_stmt 0 view .LVU62
 487 000a CE01      		movw r24,r28
 488 000c 805E      		subi r24,-32
 489 000e 9109      		sbc r25,__zero_reg__
 490               		.loc 1 123 6 view .LVU63
 491 0010 0897      		sbiw r24,8
 492 0012 00F0      		brlo .L42
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 125:quantum/quantum.c ****   } else {
 126:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 493               		.loc 1 126 7 discriminator 1 view .LVU64
 494 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 495 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 496               		.loc 1 123 20 discriminator 1 view .LVU65
 497 0018 2097      		sbiw r28,0
 498 001a 01F4      		brne .L44
 499               	.L42:
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 500               		.loc 1 124 7 is_stmt 1 view .LVU66
 501 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 502 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 503               	.L44:
 504               		.loc 1 126 7 is_stmt 0 view .LVU67
 505 0020 CE01      		movw r24,r28
 506               	/* epilogue start */
 127:quantum/quantum.c ****   }
 128:quantum/quantum.c **** }
 507               		.loc 1 128 1 view .LVU68
 508 0022 DF91      		pop r29
 509 0024 CF91      		pop r28
 510               	.LVL29:
 126:quantum/quantum.c ****   }
 511               		.loc 1 126 7 view .LVU69
 512 0026 0C94 0000 		jmp do_code16
 513               	.LVL30:
 126:quantum/quantum.c ****   }
 514               		.loc 1 126 7 view .LVU70
 515               		.cfi_endproc
 516               	.LFE34:
 518               		.section	.text.process_action_kb,"ax",@progbits
 519               		.weak	process_action_kb
 521               	process_action_kb:
 522               	.LVL31:
 523               	.LFB35:
 129:quantum/quantum.c **** 
 130:quantum/quantum.c **** __attribute__ ((weak))
 131:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 524               		.loc 1 131 45 is_stmt 1 view -0
 525               		.cfi_startproc
 526               	/* prologue: function */
 527               	/* frame size = 0 */
 528               	/* stack size = 0 */
 529               	.L__stack_usage = 0
 132:quantum/quantum.c ****   return true;
 530               		.loc 1 132 3 view .LVU72
 133:quantum/quantum.c **** }
 531               		.loc 1 133 1 is_stmt 0 view .LVU73
 532 0000 81E0      		ldi r24,lo8(1)
 533               	.LVL32:
 534               	/* epilogue start */
 535               		.loc 1 133 1 view .LVU74
 536 0002 0895      		ret
 537               		.cfi_endproc
 538               	.LFE35:
 540               		.section	.text.process_record_user,"ax",@progbits
 541               		.weak	process_record_user
 543               	process_record_user:
 544               	.LVL33:
 545               	.LFB37:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__ ((weak))
 136:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 137:quantum/quantum.c ****   return process_record_user(keycode, record);
 138:quantum/quantum.c **** }
 139:quantum/quantum.c **** 
 140:quantum/quantum.c **** __attribute__ ((weak))
 141:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 546               		.loc 1 141 65 is_stmt 1 view -0
 547               		.cfi_startproc
 548               	/* prologue: function */
 549               	/* frame size = 0 */
 550               	/* stack size = 0 */
 551               	.L__stack_usage = 0
 142:quantum/quantum.c ****   return true;
 552               		.loc 1 142 3 view .LVU76
 143:quantum/quantum.c **** }
 553               		.loc 1 143 1 is_stmt 0 view .LVU77
 554 0000 81E0      		ldi r24,lo8(1)
 555               	.LVL34:
 556               	/* epilogue start */
 557               		.loc 1 143 1 view .LVU78
 558 0002 0895      		ret
 559               		.cfi_endproc
 560               	.LFE37:
 562               		.section	.text.process_record_kb,"ax",@progbits
 563               		.weak	process_record_kb
 565               	process_record_kb:
 566               	.LVL35:
 567               	.LFB36:
 136:quantum/quantum.c ****   return process_record_user(keycode, record);
 568               		.loc 1 136 63 is_stmt 1 view -0
 569               		.cfi_startproc
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 137:quantum/quantum.c **** }
 574               		.loc 1 137 3 view .LVU80
 137:quantum/quantum.c **** }
 575               		.loc 1 137 10 is_stmt 0 view .LVU81
 576 0000 0C94 0000 		jmp process_record_user
 577               	.LVL36:
 137:quantum/quantum.c **** }
 578               		.loc 1 137 10 view .LVU82
 579               		.cfi_endproc
 580               	.LFE36:
 582               		.section	.text.reset_keyboard,"ax",@progbits
 583               	.global	reset_keyboard
 585               	reset_keyboard:
 586               	.LFB38:
 144:quantum/quantum.c **** 
 145:quantum/quantum.c **** void reset_keyboard(void) {
 587               		.loc 1 145 27 is_stmt 1 view -0
 588               		.cfi_startproc
 589               	/* prologue: function */
 590               	/* frame size = 0 */
 591               	/* stack size = 0 */
 592               	.L__stack_usage = 0
 146:quantum/quantum.c ****   clear_keyboard();
 593               		.loc 1 146 3 view .LVU84
 594 0000 0E94 0000 		call clear_keyboard
 595               	.LVL37:
 147:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 148:quantum/quantum.c ****   process_midi_all_notes_off();
 149:quantum/quantum.c **** #endif
 150:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 151:quantum/quantum.c ****   music_all_notes_off();
 152:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 153:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 154:quantum/quantum.c ****   shutdown_user();
 155:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 156:quantum/quantum.c ****     wait_ms(1);
 157:quantum/quantum.c ****   stop_all_notes();
 158:quantum/quantum.c **** #else
 159:quantum/quantum.c ****   wait_ms(250);
 596               		.loc 1 159 3 view .LVU85
 597               	.LBB22:
 598               	.LBI22:
 599               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 600               		.loc 3 166 1 view .LVU86
 601               	.LBB23:
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 602               		.loc 3 168 2 view .LVU87
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 603               		.loc 3 172 2 view .LVU88
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 604               		.loc 3 173 2 view .LVU89
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 605               		.loc 3 174 2 view .LVU90
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 606               		.loc 3 184 3 view .LVU91
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 607               		.loc 3 187 2 view .LVU92
 608 0004 2FEF      		ldi r18,lo8(799999)
 609 0006 84E3      		ldi r24,hi8(799999)
 610 0008 9CE0      		ldi r25,hlo8(799999)
 611 000a 2150      	1:	subi r18,1
 612 000c 8040      		sbci r24,0
 613 000e 9040      		sbci r25,0
 614 0010 01F4      		brne 1b
 615 0012 00C0      		rjmp .
 616 0014 0000      		nop
 617               	.LVL38:
 618               		.loc 3 187 2 is_stmt 0 view .LVU93
 619               	.LBE23:
 620               	.LBE22:
 160:quantum/quantum.c **** #endif
 161:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 162:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 163:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 621               		.loc 1 163 3 is_stmt 1 view .LVU94
 622               		.loc 1 163 23 is_stmt 0 view .LVU95
 623 0016 87E7      		ldi r24,lo8(119)
 624 0018 97E7      		ldi r25,lo8(119)
 625 001a 9093 0108 		sts 2048+1,r25
 626 001e 8093 0008 		sts 2048,r24
 164:quantum/quantum.c **** #endif
 165:quantum/quantum.c ****   bootloader_jump();
 627               		.loc 1 165 3 is_stmt 1 view .LVU96
 628 0022 0C94 0000 		jmp bootloader_jump
 629               	.LVL39:
 630               		.cfi_endproc
 631               	.LFE38:
 633               		.section	.text.process_record_quantum,"ax",@progbits
 634               	.global	process_record_quantum
 636               	process_record_quantum:
 637               	.LVL40:
 638               	.LFB39:
 166:quantum/quantum.c **** }
 167:quantum/quantum.c **** 
 168:quantum/quantum.c **** // Shift / paren setup
 169:quantum/quantum.c **** 
 170:quantum/quantum.c **** #ifndef LSPO_KEY
 171:quantum/quantum.c ****   #define LSPO_KEY KC_9
 172:quantum/quantum.c **** #endif
 173:quantum/quantum.c **** #ifndef RSPC_KEY
 174:quantum/quantum.c ****   #define RSPC_KEY KC_0
 175:quantum/quantum.c **** #endif
 176:quantum/quantum.c **** 
 177:quantum/quantum.c **** // Shift / Enter setup
 178:quantum/quantum.c **** #ifndef SFTENT_KEY
 179:quantum/quantum.c ****   #define SFTENT_KEY KC_ENT
 180:quantum/quantum.c **** #endif
 181:quantum/quantum.c **** 
 182:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 183:quantum/quantum.c **** static uint16_t scs_timer[2] = {0, 0};
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 639               		.loc 1 190 50 view -0
 640               		.cfi_startproc
 641               		.loc 1 190 50 is_stmt 0 view .LVU98
 642 0000 0F93      		push r16
 643               	.LCFI8:
 644               		.cfi_def_cfa_offset 3
 645               		.cfi_offset 16, -2
 646 0002 1F93      		push r17
 647               	.LCFI9:
 648               		.cfi_def_cfa_offset 4
 649               		.cfi_offset 17, -3
 650 0004 CF93      		push r28
 651               	.LCFI10:
 652               		.cfi_def_cfa_offset 5
 653               		.cfi_offset 28, -4
 654 0006 DF93      		push r29
 655               	.LCFI11:
 656               		.cfi_def_cfa_offset 6
 657               		.cfi_offset 29, -5
 658               	/* prologue: function */
 659               	/* frame size = 0 */
 660               	/* stack size = 4 */
 661               	.L__stack_usage = 4
 662 0008 8C01      		movw r16,r24
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 193:quantum/quantum.c ****   keypos_t key = record->event.key;
 663               		.loc 1 193 3 is_stmt 1 view .LVU99
 664               		.loc 1 193 12 is_stmt 0 view .LVU100
 665 000a FC01      		movw r30,r24
 666 000c C081      		ld r28,Z
 667 000e D181      		ldd r29,Z+1
 668               	.LVL41:
 194:quantum/quantum.c ****   uint16_t keycode;
 669               		.loc 1 194 3 is_stmt 1 view .LVU101
 195:quantum/quantum.c **** 
 196:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 197:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 198:quantum/quantum.c ****     if (!disable_action_cache) {
 199:quantum/quantum.c ****       uint8_t layer;
 200:quantum/quantum.c **** 
 201:quantum/quantum.c ****       if (record->event.pressed) {
 202:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 203:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 204:quantum/quantum.c ****       } else {
 205:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 206:quantum/quantum.c ****       }
 207:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 208:quantum/quantum.c ****     } else
 209:quantum/quantum.c ****   #endif
 210:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 670               		.loc 1 210 5 view .LVU102
 671               		.loc 1 210 37 is_stmt 0 view .LVU103
 672 0010 CE01      		movw r24,r28
 673               	.LVL42:
 674               		.loc 1 210 37 view .LVU104
 675 0012 0E94 0000 		call layer_switch_get_layer
 676               	.LVL43:
 677               		.loc 1 210 15 view .LVU105
 678 0016 BE01      		movw r22,r28
 679 0018 0E94 0000 		call keymap_key_to_keycode
 680               	.LVL44:
 681 001c EC01      		movw r28,r24
 682               	.LVL45:
 211:quantum/quantum.c **** 
 212:quantum/quantum.c ****     // This is how you use actions here
 213:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 214:quantum/quantum.c ****     //   action_t action;
 215:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 216:quantum/quantum.c ****     //   process_action(record, action);
 217:quantum/quantum.c ****     //   return false;
 218:quantum/quantum.c ****     // }
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 221:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 683               		.loc 1 221 5 is_stmt 1 view .LVU106
 684 001e B801      		movw r22,r16
 685 0020 0E94 0000 		call preprocess_tap_dance
 686               	.LVL46:
 222:quantum/quantum.c ****   #endif
 223:quantum/quantum.c **** 
 224:quantum/quantum.c ****   if (!(
 687               		.loc 1 224 3 view .LVU107
 225:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 226:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 227:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 228:quantum/quantum.c ****   #endif
 229:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****       process_clicky(keycode, record) &&
 231:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 232:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 688               		.loc 1 232 5 is_stmt 0 view .LVU108
 689 0024 B801      		movw r22,r16
 690 0026 CE01      		movw r24,r28
 691 0028 0E94 0000 		call process_record_kb
 692               	.LVL47:
 233:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 234:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 235:quantum/quantum.c ****   #endif
 236:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 237:quantum/quantum.c ****     process_midi(keycode, record) &&
 238:quantum/quantum.c ****   #endif
 239:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 240:quantum/quantum.c ****     process_audio(keycode, record) &&
 241:quantum/quantum.c ****   #endif
 242:quantum/quantum.c ****   #ifdef STENO_ENABLE
 243:quantum/quantum.c ****     process_steno(keycode, record) &&
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c ****   #if ( defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSI
 246:quantum/quantum.c ****     process_music(keycode, record) &&
 247:quantum/quantum.c ****   #endif
 248:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 249:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 693               		.loc 1 249 40 view .LVU109
 694 002c 8823      		tst r24
 695 002e 01F4      		brne .+2
 696 0030 00C0      		rjmp .L49
 697               		.loc 1 249 5 discriminator 2 view .LVU110
 698 0032 B801      		movw r22,r16
 699 0034 CE01      		movw r24,r28
 700 0036 0E94 0000 		call process_tap_dance
 701               	.LVL48:
 232:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 702               		.loc 1 232 40 discriminator 2 view .LVU111
 703 003a 8823      		tst r24
 704 003c 01F4      		brne .+2
 705 003e 00C0      		rjmp .L49
 250:quantum/quantum.c ****   #endif
 251:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 252:quantum/quantum.c ****     process_leader(keycode, record) &&
 706               		.loc 1 252 5 discriminator 3 view .LVU112
 707 0040 B801      		movw r22,r16
 708 0042 CE01      		movw r24,r28
 709 0044 0E94 0000 		call process_leader
 710               	.LVL49:
 249:quantum/quantum.c ****   #endif
 711               		.loc 1 249 40 discriminator 3 view .LVU113
 712 0048 8823      		tst r24
 713 004a 01F4      		brne .+2
 714 004c 00C0      		rjmp .L49
 253:quantum/quantum.c ****   #endif
 254:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 255:quantum/quantum.c ****     process_chording(keycode, record) &&
 256:quantum/quantum.c ****   #endif
 257:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 258:quantum/quantum.c ****     process_combo(keycode, record) &&
 259:quantum/quantum.c ****   #endif
 260:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 261:quantum/quantum.c ****     process_unicode(keycode, record) &&
 262:quantum/quantum.c ****   #endif
 263:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 264:quantum/quantum.c ****     process_ucis(keycode, record) &&
 265:quantum/quantum.c ****   #endif
 266:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 267:quantum/quantum.c ****     process_printer(keycode, record) &&
 268:quantum/quantum.c ****   #endif
 269:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 270:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 271:quantum/quantum.c ****   #endif
 272:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 273:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 274:quantum/quantum.c ****   #endif
 275:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 276:quantum/quantum.c ****     process_terminal(keycode, record) &&
 277:quantum/quantum.c ****   #endif
 278:quantum/quantum.c ****       true)) {
 279:quantum/quantum.c ****     return false;
 280:quantum/quantum.c ****   }
 281:quantum/quantum.c **** 
 282:quantum/quantum.c ****   // Shift / paren setup
 283:quantum/quantum.c **** 
 284:quantum/quantum.c ****   switch(keycode) {
 715               		.loc 1 284 3 is_stmt 1 view .LVU114
 716 004e C531      		cpi r28,21
 717 0050 FCE5      		ldi r31,92
 718 0052 DF07      		cpc r29,r31
 719 0054 01F4      		brne .+2
 720 0056 00C0      		rjmp .L53
 721 0058 00F4      		brsh .L54
 722 005a C130      		cpi r28,1
 723 005c ECE5      		ldi r30,92
 724 005e DE07      		cpc r29,r30
 725 0060 01F4      		brne .+2
 726 0062 00C0      		rjmp .L55
 727 0064 00F0      		brlo .+2
 728 0066 00C0      		rjmp .L56
 729 0068 C115      		cp r28,__zero_reg__
 730 006a DC45      		sbci r29,92
 731 006c 01F0      		breq .L57
 732               	.L58:
 285:quantum/quantum.c ****     case RESET:
 286:quantum/quantum.c ****       if (record->event.pressed) {
 287:quantum/quantum.c ****         reset_keyboard();
 288:quantum/quantum.c ****       }
 289:quantum/quantum.c ****     return false;
 290:quantum/quantum.c ****     case DEBUG:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****           debug_enable = true;
 293:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 294:quantum/quantum.c ****       }
 295:quantum/quantum.c ****     return false;
 296:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 297:quantum/quantum.c ****   case FC_TOG:
 298:quantum/quantum.c ****     if (record->event.pressed) {
 299:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 300:quantum/quantum.c ****     }
 301:quantum/quantum.c ****     return false;
 302:quantum/quantum.c ****   case FC_ON:
 303:quantum/quantum.c ****     if (record->event.pressed) {
 304:quantum/quantum.c ****       FAUXCLICKY_ON;
 305:quantum/quantum.c ****     }
 306:quantum/quantum.c ****     return false;
 307:quantum/quantum.c ****   case FC_OFF:
 308:quantum/quantum.c ****     if (record->event.pressed) {
 309:quantum/quantum.c ****       FAUXCLICKY_OFF;
 310:quantum/quantum.c ****     }
 311:quantum/quantum.c ****     return false;
 312:quantum/quantum.c ****   #endif
 313:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 314:quantum/quantum.c ****   case RGB_TOG:
 315:quantum/quantum.c ****     if (record->event.pressed) {
 316:quantum/quantum.c ****       rgblight_toggle();
 317:quantum/quantum.c ****     }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 320:quantum/quantum.c ****     if (record->event.pressed) {
 321:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 322:quantum/quantum.c ****       if(shifted) {
 323:quantum/quantum.c ****         rgblight_step_reverse();
 324:quantum/quantum.c ****       }
 325:quantum/quantum.c ****       else {
 326:quantum/quantum.c ****         rgblight_step();
 327:quantum/quantum.c ****       }
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****       if(shifted) {
 334:quantum/quantum.c ****         rgblight_step();
 335:quantum/quantum.c ****       }
 336:quantum/quantum.c ****       else {
 337:quantum/quantum.c ****         rgblight_step_reverse();
 338:quantum/quantum.c ****       }
 339:quantum/quantum.c ****     }
 340:quantum/quantum.c ****     return false;
 341:quantum/quantum.c ****   case RGB_HUI:
 342:quantum/quantum.c ****     if (record->event.pressed) {
 343:quantum/quantum.c ****       rgblight_increase_hue();
 344:quantum/quantum.c ****     }
 345:quantum/quantum.c ****     return false;
 346:quantum/quantum.c ****   case RGB_HUD:
 347:quantum/quantum.c ****     if (record->event.pressed) {
 348:quantum/quantum.c ****       rgblight_decrease_hue();
 349:quantum/quantum.c ****     }
 350:quantum/quantum.c ****     return false;
 351:quantum/quantum.c ****   case RGB_SAI:
 352:quantum/quantum.c ****     if (record->event.pressed) {
 353:quantum/quantum.c ****       rgblight_increase_sat();
 354:quantum/quantum.c ****     }
 355:quantum/quantum.c ****     return false;
 356:quantum/quantum.c ****   case RGB_SAD:
 357:quantum/quantum.c ****     if (record->event.pressed) {
 358:quantum/quantum.c ****       rgblight_decrease_sat();
 359:quantum/quantum.c ****     }
 360:quantum/quantum.c ****     return false;
 361:quantum/quantum.c ****   case RGB_VAI:
 362:quantum/quantum.c ****     if (record->event.pressed) {
 363:quantum/quantum.c ****       rgblight_increase_val();
 364:quantum/quantum.c ****     }
 365:quantum/quantum.c ****     return false;
 366:quantum/quantum.c ****   case RGB_VAD:
 367:quantum/quantum.c ****     if (record->event.pressed) {
 368:quantum/quantum.c ****       rgblight_decrease_val();
 369:quantum/quantum.c ****     }
 370:quantum/quantum.c ****     return false;
 371:quantum/quantum.c ****   case RGB_SPI:
 372:quantum/quantum.c ****     if (record->event.pressed) {
 373:quantum/quantum.c ****       rgblight_increase_speed();
 374:quantum/quantum.c ****     }
 375:quantum/quantum.c ****     return false;
 376:quantum/quantum.c ****   case RGB_SPD:
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****       rgblight_decrease_speed();
 379:quantum/quantum.c ****     }
 380:quantum/quantum.c ****     return false;
 381:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 382:quantum/quantum.c ****     if (record->event.pressed) {
 383:quantum/quantum.c ****       rgblight_mode(1);
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 389:quantum/quantum.c ****         rgblight_step();
 390:quantum/quantum.c ****       } else {
 391:quantum/quantum.c ****         rgblight_mode(2);
 392:quantum/quantum.c ****       }
 393:quantum/quantum.c ****     }
 394:quantum/quantum.c ****     return false;
 395:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 396:quantum/quantum.c ****     if (record->event.pressed) {
 397:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 398:quantum/quantum.c ****         rgblight_step();
 399:quantum/quantum.c ****       } else {
 400:quantum/quantum.c ****         rgblight_mode(6);
 401:quantum/quantum.c ****       }
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 405:quantum/quantum.c ****     if (record->event.pressed) {
 406:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 407:quantum/quantum.c ****         rgblight_step();
 408:quantum/quantum.c ****       } else {
 409:quantum/quantum.c ****         rgblight_mode(9);
 410:quantum/quantum.c ****       }
 411:quantum/quantum.c ****     }
 412:quantum/quantum.c ****     return false;
 413:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 414:quantum/quantum.c ****     if (record->event.pressed) {
 415:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 416:quantum/quantum.c ****         rgblight_step();
 417:quantum/quantum.c ****       } else {
 418:quantum/quantum.c ****         rgblight_mode(15);
 419:quantum/quantum.c ****       }
 420:quantum/quantum.c ****     }
 421:quantum/quantum.c ****     return false;
 422:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 423:quantum/quantum.c ****     if (record->event.pressed) {
 424:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 425:quantum/quantum.c ****         rgblight_step();
 426:quantum/quantum.c ****       } else {
 427:quantum/quantum.c ****         rgblight_mode(21);
 428:quantum/quantum.c ****       }
 429:quantum/quantum.c ****     }
 430:quantum/quantum.c ****     return false;
 431:quantum/quantum.c ****   case RGB_MODE_XMAS:
 432:quantum/quantum.c ****     if (record->event.pressed) {
 433:quantum/quantum.c ****       rgblight_mode(24);
 434:quantum/quantum.c ****     }
 435:quantum/quantum.c ****     return false;
 436:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 437:quantum/quantum.c ****     if (record->event.pressed) {
 438:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 439:quantum/quantum.c ****         rgblight_step();
 440:quantum/quantum.c ****       } else {
 441:quantum/quantum.c ****         rgblight_mode(25);
 442:quantum/quantum.c ****       }
 443:quantum/quantum.c ****     }
 444:quantum/quantum.c ****     return false;
 445:quantum/quantum.c ****   #endif
 446:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 447:quantum/quantum.c ****     case OUT_AUTO:
 448:quantum/quantum.c ****       if (record->event.pressed) {
 449:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 450:quantum/quantum.c ****       }
 451:quantum/quantum.c ****       return false;
 452:quantum/quantum.c ****     case OUT_USB:
 453:quantum/quantum.c ****       if (record->event.pressed) {
 454:quantum/quantum.c ****         set_output(OUTPUT_USB);
 455:quantum/quantum.c ****       }
 456:quantum/quantum.c ****       return false;
 457:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 458:quantum/quantum.c ****     case OUT_BT:
 459:quantum/quantum.c ****       if (record->event.pressed) {
 460:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 461:quantum/quantum.c ****       }
 462:quantum/quantum.c ****       return false;
 463:quantum/quantum.c ****     #endif
 464:quantum/quantum.c ****     #endif
 465:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 466:quantum/quantum.c ****       if (record->event.pressed) {
 467:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 468:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 469:quantum/quantum.c ****             eeconfig_init();
 470:quantum/quantum.c ****         }
 471:quantum/quantum.c ****         /* keymap config */
 472:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 473:quantum/quantum.c ****         switch (keycode)
 474:quantum/quantum.c ****         {
 475:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 476:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 477:quantum/quantum.c ****             break;
 478:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 479:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 480:quantum/quantum.c ****             break;
 481:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 482:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 483:quantum/quantum.c ****             break;
 484:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 485:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 486:quantum/quantum.c ****             break;
 487:quantum/quantum.c ****           case MAGIC_NO_GUI:
 488:quantum/quantum.c ****             keymap_config.no_gui = true;
 489:quantum/quantum.c ****             break;
 490:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 491:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 492:quantum/quantum.c ****             break;
 493:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 494:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 495:quantum/quantum.c ****             break;
 496:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 497:quantum/quantum.c ****             keymap_config.nkro = true;
 498:quantum/quantum.c ****             break;
 499:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 500:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 501:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 502:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 503:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 504:quantum/quantum.c ****             #endif
 505:quantum/quantum.c ****             break;
 506:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 507:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 508:quantum/quantum.c ****             break;
 509:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 510:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 511:quantum/quantum.c ****             break;
 512:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 513:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 514:quantum/quantum.c ****             break;
 515:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 516:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 517:quantum/quantum.c ****             break;
 518:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 519:quantum/quantum.c ****             keymap_config.no_gui = false;
 520:quantum/quantum.c ****             break;
 521:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 522:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 523:quantum/quantum.c ****             break;
 524:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 525:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 526:quantum/quantum.c ****             break;
 527:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 528:quantum/quantum.c ****             keymap_config.nkro = false;
 529:quantum/quantum.c ****             break;
 530:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 531:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 532:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 533:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 534:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 535:quantum/quantum.c ****             #endif
 536:quantum/quantum.c ****             break;
 537:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 538:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 539:quantum/quantum.c ****             break;
 540:quantum/quantum.c ****           default:
 541:quantum/quantum.c ****             break;
 542:quantum/quantum.c ****         }
 543:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 544:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 545:quantum/quantum.c **** 
 546:quantum/quantum.c ****         return false;
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       break;
 549:quantum/quantum.c ****     case KC_LSPO: {
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         shift_interrupted[0] = false;
 552:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 553:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 554:quantum/quantum.c ****       }
 555:quantum/quantum.c ****       else {
 556:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 557:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 558:quantum/quantum.c ****             shift_interrupted[0] = true;
 559:quantum/quantum.c ****             shift_interrupted[1] = true;
 560:quantum/quantum.c ****           }
 561:quantum/quantum.c ****         #endif
 562:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer[0]) < TAPPING_TERM) {
 563:quantum/quantum.c ****           register_code(LSPO_KEY);
 564:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 565:quantum/quantum.c ****         }
 566:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 567:quantum/quantum.c ****       }
 568:quantum/quantum.c ****       return false;
 569:quantum/quantum.c ****     }
 570:quantum/quantum.c **** 
 571:quantum/quantum.c ****     case KC_RSPC: {
 572:quantum/quantum.c ****       if (record->event.pressed) {
 573:quantum/quantum.c ****         shift_interrupted[1] = false;
 574:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 575:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 576:quantum/quantum.c ****       }
 577:quantum/quantum.c ****       else {
 578:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 579:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 580:quantum/quantum.c ****             shift_interrupted[0] = true;
 581:quantum/quantum.c ****             shift_interrupted[1] = true;
 582:quantum/quantum.c ****           }
 583:quantum/quantum.c ****         #endif
 584:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 585:quantum/quantum.c ****           register_code(RSPC_KEY);
 586:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 587:quantum/quantum.c ****         }
 588:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 589:quantum/quantum.c ****       }
 590:quantum/quantum.c ****       return false;
 591:quantum/quantum.c ****     }
 592:quantum/quantum.c **** 
 593:quantum/quantum.c ****     case KC_SFTENT: {
 594:quantum/quantum.c ****       if (record->event.pressed) {
 595:quantum/quantum.c ****         shift_interrupted[1] = false;
 596:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 597:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 598:quantum/quantum.c ****       }
 599:quantum/quantum.c ****       else if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 600:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 601:quantum/quantum.c ****         register_code(SFTENT_KEY);
 602:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 603:quantum/quantum.c ****       }
 604:quantum/quantum.c ****       else {
 605:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 606:quantum/quantum.c ****       }
 607:quantum/quantum.c ****       return false;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c **** 
 610:quantum/quantum.c ****     case GRAVE_ESC: {
 611:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 612:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 615:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 616:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 617:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 618:quantum/quantum.c ****         shifted = 0;
 619:quantum/quantum.c ****       }
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c **** 
 622:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 623:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 624:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 625:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 626:quantum/quantum.c ****         shifted = 0;
 627:quantum/quantum.c ****       }
 628:quantum/quantum.c **** #endif
 629:quantum/quantum.c **** 
 630:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 631:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 632:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 633:quantum/quantum.c ****         shifted = 0;
 634:quantum/quantum.c ****       }
 635:quantum/quantum.c **** #endif
 636:quantum/quantum.c **** 
 637:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 638:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 639:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 640:quantum/quantum.c ****         shifted = 0;
 641:quantum/quantum.c ****       }
 642:quantum/quantum.c **** #endif
 643:quantum/quantum.c **** 
 644:quantum/quantum.c ****       if (record->event.pressed) {
 645:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 646:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 647:quantum/quantum.c ****       }
 648:quantum/quantum.c ****       else {
 649:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 650:quantum/quantum.c ****       }
 651:quantum/quantum.c **** 
 652:quantum/quantum.c ****       send_keyboard_report();
 653:quantum/quantum.c ****       return false;
 654:quantum/quantum.c ****     }
 655:quantum/quantum.c **** 
 656:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 657:quantum/quantum.c ****     case BL_BRTG: {
 658:quantum/quantum.c ****       if (record->event.pressed)
 659:quantum/quantum.c ****         breathing_toggle();
 660:quantum/quantum.c ****       return false;
 661:quantum/quantum.c ****     }
 662:quantum/quantum.c **** #endif
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     default: {
 665:quantum/quantum.c ****       shift_interrupted[0] = true;
 733               		.loc 1 665 7 view .LVU115
 734               		.loc 1 665 28 is_stmt 0 view .LVU116
 735 006e 81E0      		ldi r24,lo8(1)
 736 0070 8093 0000 		sts shift_interrupted,r24
 666:quantum/quantum.c ****       shift_interrupted[1] = true;
 737               		.loc 1 666 7 is_stmt 1 view .LVU117
 738               		.loc 1 666 28 is_stmt 0 view .LVU118
 739 0074 8093 0000 		sts shift_interrupted+1,r24
 667:quantum/quantum.c ****       break;
 740               		.loc 1 667 7 is_stmt 1 view .LVU119
 741               	.L65:
 668:quantum/quantum.c ****     }
 669:quantum/quantum.c ****   }
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****   return process_action_kb(record);
 742               		.loc 1 671 3 view .LVU120
 743               		.loc 1 671 10 is_stmt 0 view .LVU121
 744 0078 C801      		movw r24,r16
 745               	/* epilogue start */
 672:quantum/quantum.c **** }
 746               		.loc 1 672 1 view .LVU122
 747 007a DF91      		pop r29
 748 007c CF91      		pop r28
 749               	.LVL50:
 750               		.loc 1 672 1 view .LVU123
 751 007e 1F91      		pop r17
 752 0080 0F91      		pop r16
 753               	.LVL51:
 671:quantum/quantum.c **** }
 754               		.loc 1 671 10 view .LVU124
 755 0082 0C94 0000 		jmp process_action_kb
 756               	.LVL52:
 757               	.L54:
 284:quantum/quantum.c ****     case RESET:
 758               		.loc 1 284 3 view .LVU125
 759 0086 C53D      		cpi r28,-43
 760 0088 ECE5      		ldi r30,92
 761 008a DE07      		cpc r29,r30
 762 008c 01F4      		brne .+2
 763 008e 00C0      		rjmp .L59
 764 0090 00F4      		brsh .L60
 765 0092 C33D      		cpi r28,-45
 766 0094 8CE5      		ldi r24,92
 767 0096 D807      		cpc r29,r24
 768 0098 01F4      		brne .+2
 769 009a 00C0      		rjmp .L61
 770 009c C43D      		cpi r28,-44
 771 009e DC45      		sbci r29,92
 772 00a0 01F4      		brne .L58
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 773               		.loc 1 572 7 is_stmt 1 view .LVU126
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 774               		.loc 1 572 10 is_stmt 0 view .LVU127
 775 00a2 F801      		movw r30,r16
 776 00a4 8281      		ldd r24,Z+2
 777 00a6 8823      		tst r24
 778 00a8 01F4      		brne .+2
 779 00aa 00C0      		rjmp .L92
 780               	.L96:
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 781               		.loc 1 573 9 is_stmt 1 view .LVU128
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 782               		.loc 1 573 30 is_stmt 0 view .LVU129
 783 00ac 1092 0000 		sts shift_interrupted+1,__zero_reg__
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 784               		.loc 1 574 9 is_stmt 1 view .LVU130
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 785               		.loc 1 574 24 is_stmt 0 view .LVU131
 786 00b0 0E94 0000 		call timer_read
 787               	.LVL53:
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 788               		.loc 1 574 22 view .LVU132
 789 00b4 9093 0000 		sts scs_timer+2+1,r25
 790 00b8 8093 0000 		sts scs_timer+2,r24
 575:quantum/quantum.c ****       }
 791               		.loc 1 575 9 is_stmt 1 view .LVU133
 792 00bc 80E2      		ldi r24,lo8(32)
 793 00be 00C0      		rjmp .L127
 794               	.L60:
 284:quantum/quantum.c ****     case RESET:
 795               		.loc 1 284 3 is_stmt 0 view .LVU134
 796 00c0 C83D      		cpi r28,-40
 797 00c2 FCE5      		ldi r31,92
 798 00c4 DF07      		cpc r29,r31
 799 00c6 01F0      		breq .L63
 800 00c8 C93D      		cpi r28,-39
 801 00ca DC45      		sbci r29,92
 802 00cc 01F4      		brne .L58
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 803               		.loc 1 453 7 is_stmt 1 view .LVU135
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 804               		.loc 1 453 10 is_stmt 0 view .LVU136
 805 00ce F801      		movw r30,r16
 806 00d0 8281      		ldd r24,Z+2
 807 00d2 8823      		tst r24
 808 00d4 01F0      		breq .L49
 454:quantum/quantum.c ****       }
 809               		.loc 1 454 9 is_stmt 1 view .LVU137
 810 00d6 82E0      		ldi r24,lo8(2)
 811 00d8 00C0      		rjmp .L126
 812               	.L57:
 286:quantum/quantum.c ****         reset_keyboard();
 813               		.loc 1 286 7 view .LVU138
 286:quantum/quantum.c ****         reset_keyboard();
 814               		.loc 1 286 10 is_stmt 0 view .LVU139
 815 00da F801      		movw r30,r16
 816 00dc 8281      		ldd r24,Z+2
 817 00de 8111      		cpse r24,__zero_reg__
 287:quantum/quantum.c ****       }
 818               		.loc 1 287 9 is_stmt 1 view .LVU140
 819 00e0 0E94 0000 		call reset_keyboard
 820               	.LVL54:
 821               	.L49:
 822               		.loc 1 672 1 is_stmt 0 view .LVU141
 823 00e4 80E0      		ldi r24,0
 824               	/* epilogue start */
 825 00e6 DF91      		pop r29
 826 00e8 CF91      		pop r28
 827               	.LVL55:
 828               		.loc 1 672 1 view .LVU142
 829 00ea 1F91      		pop r17
 830 00ec 0F91      		pop r16
 831               	.LVL56:
 832               		.loc 1 672 1 view .LVU143
 833 00ee 0895      		ret
 834               	.LVL57:
 835               	.L55:
 291:quantum/quantum.c ****           debug_enable = true;
 836               		.loc 1 291 7 is_stmt 1 view .LVU144
 291:quantum/quantum.c ****           debug_enable = true;
 837               		.loc 1 291 10 is_stmt 0 view .LVU145
 838 00f0 F801      		movw r30,r16
 839 00f2 8281      		ldd r24,Z+2
 840 00f4 8823      		tst r24
 841 00f6 01F0      		breq .L49
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 842               		.loc 1 292 11 is_stmt 1 view .LVU146
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 843               		.loc 1 292 24 is_stmt 0 view .LVU147
 844 00f8 8091 0000 		lds r24,debug_config
 845 00fc 8160      		ori r24,lo8(1<<0)
 846 00fe 8093 0000 		sts debug_config,r24
 847 0102 00C0      		rjmp .L49
 848               	.L63:
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 849               		.loc 1 448 7 is_stmt 1 view .LVU148
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 850               		.loc 1 448 10 is_stmt 0 view .LVU149
 851 0104 F801      		movw r30,r16
 852 0106 8281      		ldd r24,Z+2
 853 0108 8823      		tst r24
 854 010a 01F0      		breq .L49
 449:quantum/quantum.c ****       }
 855               		.loc 1 449 9 is_stmt 1 view .LVU150
 856 010c 80E0      		ldi r24,0
 857               	.L126:
 454:quantum/quantum.c ****       }
 858               		.loc 1 454 9 is_stmt 0 view .LVU151
 859 010e 0E94 0000 		call set_output
 860               	.LVL58:
 861 0112 00C0      		rjmp .L49
 862               	.L56:
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 863               		.loc 1 466 7 is_stmt 1 view .LVU152
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 864               		.loc 1 466 10 is_stmt 0 view .LVU153
 865 0114 F801      		movw r30,r16
 866 0116 8281      		ldd r24,Z+2
 867 0118 8823      		tst r24
 868 011a 01F4      		brne .+2
 869 011c 00C0      		rjmp .L65
 468:quantum/quantum.c ****             eeconfig_init();
 870               		.loc 1 468 9 is_stmt 1 view .LVU154
 468:quantum/quantum.c ****             eeconfig_init();
 871               		.loc 1 468 14 is_stmt 0 view .LVU155
 872 011e 0E94 0000 		call eeconfig_is_enabled
 873               	.LVL59:
 468:quantum/quantum.c ****             eeconfig_init();
 874               		.loc 1 468 12 view .LVU156
 875 0122 8111      		cpse r24,__zero_reg__
 876 0124 00C0      		rjmp .L66
 469:quantum/quantum.c ****         }
 877               		.loc 1 469 13 is_stmt 1 view .LVU157
 878 0126 0E94 0000 		call eeconfig_init
 879               	.LVL60:
 880               	.L66:
 472:quantum/quantum.c ****         switch (keycode)
 881               		.loc 1 472 9 view .LVU158
 472:quantum/quantum.c ****         switch (keycode)
 882               		.loc 1 472 29 is_stmt 0 view .LVU159
 883 012a 0E94 0000 		call eeconfig_read_keymap
 884               	.LVL61:
 885 012e 90E0      		ldi r25,0
 886 0130 9093 0000 		sts keymap_config+1,r25
 887 0134 8093 0000 		sts keymap_config,r24
 473:quantum/quantum.c ****         {
 888               		.loc 1 473 9 is_stmt 1 view .LVU160
 889 0138 FE01      		movw r30,r28
 890 013a E350      		subi r30,3
 891 013c FC45      		sbci r31,92
 476:quantum/quantum.c ****             break;
 892               		.loc 1 476 49 is_stmt 0 view .LVU161
 893 013e 8091 0000 		lds r24,keymap_config
 894 0142 8160      		ori r24,lo8(1<<0)
 895 0144 E231      		cpi r30,18
 896 0146 F105      		cpc r31,__zero_reg__
 897 0148 00F4      		brsh .L125
 898 014a E050      		subi r30,lo8(-(gs(.L69)))
 899 014c F040      		sbci r31,hi8(-(gs(.L69)))
 900 014e 0C94 0000 		jmp __tablejump2__
 901               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 902               		.p2align	1
 903               	.L69:
 904 0000 0000      		.word gs(.L86)
 905 0002 0000      		.word gs(.L85)
 906 0004 0000      		.word gs(.L84)
 907 0006 0000      		.word gs(.L83)
 908 0008 0000      		.word gs(.L82)
 909 000a 0000      		.word gs(.L81)
 910 000c 0000      		.word gs(.L80)
 911 000e 0000      		.word gs(.L79)
 912 0010 0000      		.word gs(.L78)
 913 0012 0000      		.word gs(.L77)
 914 0014 0000      		.word gs(.L76)
 915 0016 0000      		.word gs(.L75)
 916 0018 0000      		.word gs(.L74)
 917 001a 0000      		.word gs(.L73)
 918 001c 0000      		.word gs(.L72)
 919 001e 0000      		.word gs(.L71)
 920 0020 0000      		.word gs(.L70)
 921 0022 0000      		.word gs(.L68)
 922               		.section	.text.process_record_quantum
 923               	.L86:
 479:quantum/quantum.c ****             break;
 924               		.loc 1 479 13 is_stmt 1 view .LVU162
 479:quantum/quantum.c ****             break;
 925               		.loc 1 479 47 is_stmt 0 view .LVU163
 926 0152 8091 0000 		lds r24,keymap_config
 927 0156 8260      		ori r24,lo8(1<<1)
 928               	.L125:
 538:quantum/quantum.c ****             break;
 929               		.loc 1 538 32 view .LVU164
 930 0158 8093 0000 		sts keymap_config,r24
 539:quantum/quantum.c ****           default:
 931               		.loc 1 539 13 is_stmt 1 view .LVU165
 543:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 932               		.loc 1 543 9 view .LVU166
 933 015c 8091 0000 		lds r24,keymap_config
 934 0160 0E94 0000 		call eeconfig_update_keymap
 935               	.LVL62:
 544:quantum/quantum.c **** 
 936               		.loc 1 544 9 view .LVU167
 937 0164 0E94 0000 		call clear_keyboard
 938               	.LVL63:
 546:quantum/quantum.c ****       }
 939               		.loc 1 546 9 view .LVU168
 546:quantum/quantum.c ****       }
 940               		.loc 1 546 16 is_stmt 0 view .LVU169
 941 0168 00C0      		rjmp .L49
 942               	.L85:
 482:quantum/quantum.c ****             break;
 943               		.loc 1 482 13 is_stmt 1 view .LVU170
 482:quantum/quantum.c ****             break;
 944               		.loc 1 482 42 is_stmt 0 view .LVU171
 945 016a 8091 0000 		lds r24,keymap_config
 946 016e 8460      		ori r24,lo8(1<<2)
 947 0170 00C0      		rjmp .L125
 948               	.L84:
 485:quantum/quantum.c ****             break;
 949               		.loc 1 485 13 is_stmt 1 view .LVU172
 485:quantum/quantum.c ****             break;
 950               		.loc 1 485 42 is_stmt 0 view .LVU173
 951 0172 8091 0000 		lds r24,keymap_config
 952 0176 8860      		ori r24,lo8(1<<3)
 953 0178 00C0      		rjmp .L125
 954               	.L83:
 488:quantum/quantum.c ****             break;
 955               		.loc 1 488 13 is_stmt 1 view .LVU174
 488:quantum/quantum.c ****             break;
 956               		.loc 1 488 34 is_stmt 0 view .LVU175
 957 017a 8091 0000 		lds r24,keymap_config
 958 017e 8061      		ori r24,lo8(1<<4)
 959 0180 00C0      		rjmp .L125
 960               	.L82:
 491:quantum/quantum.c ****             break;
 961               		.loc 1 491 13 is_stmt 1 view .LVU176
 491:quantum/quantum.c ****             break;
 962               		.loc 1 491 42 is_stmt 0 view .LVU177
 963 0182 8091 0000 		lds r24,keymap_config
 964 0186 8062      		ori r24,lo8(1<<5)
 965 0188 00C0      		rjmp .L125
 966               	.L81:
 494:quantum/quantum.c ****             break;
 967               		.loc 1 494 13 is_stmt 1 view .LVU178
 494:quantum/quantum.c ****             break;
 968               		.loc 1 494 52 is_stmt 0 view .LVU179
 969 018a 8091 0000 		lds r24,keymap_config
 970 018e 8064      		ori r24,lo8(1<<6)
 971 0190 00C0      		rjmp .L125
 972               	.L80:
 497:quantum/quantum.c ****             break;
 973               		.loc 1 497 13 is_stmt 1 view .LVU180
 497:quantum/quantum.c ****             break;
 974               		.loc 1 497 32 is_stmt 0 view .LVU181
 975 0192 8091 0000 		lds r24,keymap_config
 976 0196 8068      		ori r24,lo8(1<<7)
 977 0198 00C0      		rjmp .L125
 978               	.L79:
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 979               		.loc 1 500 13 is_stmt 1 view .LVU182
 501:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 980               		.loc 1 501 13 view .LVU183
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 981               		.loc 1 500 42 is_stmt 0 view .LVU184
 982 019a 8091 0000 		lds r24,keymap_config
 983 019e 8C60      		ori r24,lo8(12)
 984 01a0 00C0      		rjmp .L125
 985               	.L78:
 507:quantum/quantum.c ****             break;
 986               		.loc 1 507 13 is_stmt 1 view .LVU185
 507:quantum/quantum.c ****             break;
 987               		.loc 1 507 49 is_stmt 0 view .LVU186
 988 01a2 8091 0000 		lds r24,keymap_config
 989 01a6 8E7F      		andi r24,lo8(~(1<<0))
 990 01a8 00C0      		rjmp .L125
 991               	.L77:
 510:quantum/quantum.c ****             break;
 992               		.loc 1 510 13 is_stmt 1 view .LVU187
 510:quantum/quantum.c ****             break;
 993               		.loc 1 510 47 is_stmt 0 view .LVU188
 994 01aa 8091 0000 		lds r24,keymap_config
 995 01ae 8D7F      		andi r24,lo8(~(1<<1))
 996 01b0 00C0      		rjmp .L125
 997               	.L76:
 513:quantum/quantum.c ****             break;
 998               		.loc 1 513 13 is_stmt 1 view .LVU189
 513:quantum/quantum.c ****             break;
 999               		.loc 1 513 42 is_stmt 0 view .LVU190
 1000 01b2 8091 0000 		lds r24,keymap_config
 1001 01b6 8B7F      		andi r24,lo8(~(1<<2))
 1002 01b8 00C0      		rjmp .L125
 1003               	.L75:
 516:quantum/quantum.c ****             break;
 1004               		.loc 1 516 13 is_stmt 1 view .LVU191
 516:quantum/quantum.c ****             break;
 1005               		.loc 1 516 42 is_stmt 0 view .LVU192
 1006 01ba 8091 0000 		lds r24,keymap_config
 1007 01be 877F      		andi r24,lo8(~(1<<3))
 1008 01c0 00C0      		rjmp .L125
 1009               	.L74:
 519:quantum/quantum.c ****             break;
 1010               		.loc 1 519 13 is_stmt 1 view .LVU193
 519:quantum/quantum.c ****             break;
 1011               		.loc 1 519 34 is_stmt 0 view .LVU194
 1012 01c2 8091 0000 		lds r24,keymap_config
 1013 01c6 8F7E      		andi r24,lo8(~(1<<4))
 1014 01c8 00C0      		rjmp .L125
 1015               	.L73:
 522:quantum/quantum.c ****             break;
 1016               		.loc 1 522 13 is_stmt 1 view .LVU195
 522:quantum/quantum.c ****             break;
 1017               		.loc 1 522 42 is_stmt 0 view .LVU196
 1018 01ca 8091 0000 		lds r24,keymap_config
 1019 01ce 8F7D      		andi r24,lo8(~(1<<5))
 1020 01d0 00C0      		rjmp .L125
 1021               	.L72:
 525:quantum/quantum.c ****             break;
 1022               		.loc 1 525 13 is_stmt 1 view .LVU197
 525:quantum/quantum.c ****             break;
 1023               		.loc 1 525 52 is_stmt 0 view .LVU198
 1024 01d2 8091 0000 		lds r24,keymap_config
 1025 01d6 8F7B      		andi r24,lo8(~(1<<6))
 1026 01d8 00C0      		rjmp .L125
 1027               	.L71:
 528:quantum/quantum.c ****             break;
 1028               		.loc 1 528 13 is_stmt 1 view .LVU199
 528:quantum/quantum.c ****             break;
 1029               		.loc 1 528 32 is_stmt 0 view .LVU200
 1030 01da 8091 0000 		lds r24,keymap_config
 1031 01de 8F77      		andi r24,lo8(~(1<<7))
 1032 01e0 00C0      		rjmp .L125
 1033               	.L70:
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1034               		.loc 1 531 13 is_stmt 1 view .LVU201
 532:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 1035               		.loc 1 532 13 view .LVU202
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1036               		.loc 1 531 42 is_stmt 0 view .LVU203
 1037 01e2 8091 0000 		lds r24,keymap_config
 1038 01e6 837F      		andi r24,lo8(-13)
 1039 01e8 00C0      		rjmp .L125
 1040               	.L68:
 538:quantum/quantum.c ****             break;
 1041               		.loc 1 538 13 is_stmt 1 view .LVU204
 538:quantum/quantum.c ****             break;
 1042               		.loc 1 538 48 is_stmt 0 view .LVU205
 1043 01ea 9091 0000 		lds r25,keymap_config
 538:quantum/quantum.c ****             break;
 1044               		.loc 1 538 32 view .LVU206
 1045 01ee 892F      		mov r24,r25
 1046 01f0 97FB      		bst r25,7
 1047 01f2 87F9      		bld r24,7
 1048 01f4 8058      		subi r24,0x80
 1049 01f6 00C0      		rjmp .L125
 1050               	.L61:
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1051               		.loc 1 550 7 is_stmt 1 view .LVU207
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1052               		.loc 1 550 24 is_stmt 0 view .LVU208
 1053 01f8 F801      		movw r30,r16
 1054 01fa 8281      		ldd r24,Z+2
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 1055               		.loc 1 550 10 view .LVU209
 1056 01fc 8823      		tst r24
 1057 01fe 01F0      		breq .L88
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 1058               		.loc 1 551 9 is_stmt 1 view .LVU210
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 1059               		.loc 1 551 30 is_stmt 0 view .LVU211
 1060 0200 1092 0000 		sts shift_interrupted,__zero_reg__
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1061               		.loc 1 552 9 is_stmt 1 view .LVU212
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1062               		.loc 1 552 24 is_stmt 0 view .LVU213
 1063 0204 0E94 0000 		call timer_read
 1064               	.LVL64:
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 1065               		.loc 1 552 22 view .LVU214
 1066 0208 9093 0000 		sts scs_timer+1,r25
 1067 020c 8093 0000 		sts scs_timer,r24
 553:quantum/quantum.c ****       }
 1068               		.loc 1 553 9 is_stmt 1 view .LVU215
 1069 0210 82E0      		ldi r24,lo8(2)
 1070               	.L127:
 575:quantum/quantum.c ****       }
 1071               		.loc 1 575 9 is_stmt 0 view .LVU216
 1072 0212 0E94 0000 		call register_mods
 1073               	.LVL65:
 1074 0216 00C0      		rjmp .L49
 1075               	.L88:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1076               		.loc 1 562 9 is_stmt 1 view .LVU217
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1077               		.loc 1 562 12 is_stmt 0 view .LVU218
 1078 0218 8091 0000 		lds r24,shift_interrupted
 1079 021c 8111      		cpse r24,__zero_reg__
 1080 021e 00C0      		rjmp .L90
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1081               		.loc 1 562 38 discriminator 1 view .LVU219
 1082 0220 8091 0000 		lds r24,scs_timer
 1083 0224 9091 0000 		lds r25,scs_timer+1
 1084 0228 0E94 0000 		call timer_elapsed
 1085               	.LVL66:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1086               		.loc 1 562 35 discriminator 1 view .LVU220
 1087 022c 8639      		cpi r24,-106
 1088 022e 9105      		cpc r25,__zero_reg__
 1089 0230 00F4      		brsh .L90
 563:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 1090               		.loc 1 563 11 is_stmt 1 view .LVU221
 1091 0232 86E2      		ldi r24,lo8(38)
 1092 0234 0E94 0000 		call register_code
 1093               	.LVL67:
 564:quantum/quantum.c ****         }
 1094               		.loc 1 564 11 view .LVU222
 1095 0238 86E2      		ldi r24,lo8(38)
 1096 023a 0E94 0000 		call unregister_code
 1097               	.LVL68:
 1098               	.L90:
 566:quantum/quantum.c ****       }
 1099               		.loc 1 566 9 view .LVU223
 1100 023e 82E0      		ldi r24,lo8(2)
 1101               	.L128:
 588:quantum/quantum.c ****       }
 1102               		.loc 1 588 9 is_stmt 0 view .LVU224
 1103 0240 0E94 0000 		call unregister_mods
 1104               	.LVL69:
 1105 0244 00C0      		rjmp .L49
 1106               	.L92:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1107               		.loc 1 584 9 is_stmt 1 view .LVU225
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1108               		.loc 1 584 12 is_stmt 0 view .LVU226
 1109 0246 8091 0000 		lds r24,shift_interrupted+1
 1110 024a 8111      		cpse r24,__zero_reg__
 1111 024c 00C0      		rjmp .L94
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1112               		.loc 1 584 38 discriminator 1 view .LVU227
 1113 024e 8091 0000 		lds r24,scs_timer+2
 1114 0252 9091 0000 		lds r25,scs_timer+2+1
 1115 0256 0E94 0000 		call timer_elapsed
 1116               	.LVL70:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1117               		.loc 1 584 35 discriminator 1 view .LVU228
 1118 025a 8639      		cpi r24,-106
 1119 025c 9105      		cpc r25,__zero_reg__
 1120 025e 00F4      		brsh .L94
 585:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 1121               		.loc 1 585 11 is_stmt 1 view .LVU229
 1122 0260 87E2      		ldi r24,lo8(39)
 1123 0262 0E94 0000 		call register_code
 1124               	.LVL71:
 586:quantum/quantum.c ****         }
 1125               		.loc 1 586 11 view .LVU230
 1126 0266 87E2      		ldi r24,lo8(39)
 1127 0268 0E94 0000 		call unregister_code
 1128               	.LVL72:
 1129               	.L94:
 588:quantum/quantum.c ****       }
 1130               		.loc 1 588 9 view .LVU231
 1131 026c 80E2      		ldi r24,lo8(32)
 1132 026e 00C0      		rjmp .L128
 1133               	.L59:
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 1134               		.loc 1 594 7 view .LVU232
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 1135               		.loc 1 594 10 is_stmt 0 view .LVU233
 1136 0270 F801      		movw r30,r16
 1137 0272 8281      		ldd r24,Z+2
 1138 0274 8111      		cpse r24,__zero_reg__
 1139 0276 00C0      		rjmp .L96
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1140               		.loc 1 599 12 is_stmt 1 view .LVU234
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1141               		.loc 1 599 34 is_stmt 0 view .LVU235
 1142 0278 8091 0000 		lds r24,shift_interrupted+1
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1143               		.loc 1 599 15 view .LVU236
 1144 027c 8111      		cpse r24,__zero_reg__
 1145 027e 00C0      		rjmp .L94
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1146               		.loc 1 599 41 discriminator 1 view .LVU237
 1147 0280 8091 0000 		lds r24,scs_timer+2
 1148 0284 9091 0000 		lds r25,scs_timer+2+1
 1149 0288 0E94 0000 		call timer_elapsed
 1150               	.LVL73:
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 1151               		.loc 1 599 38 discriminator 1 view .LVU238
 1152 028c 8639      		cpi r24,-106
 1153 028e 9105      		cpc r25,__zero_reg__
 1154 0290 00F4      		brsh .L94
 600:quantum/quantum.c ****         register_code(SFTENT_KEY);
 1155               		.loc 1 600 9 is_stmt 1 view .LVU239
 1156 0292 80E2      		ldi r24,lo8(32)
 1157 0294 0E94 0000 		call unregister_mods
 1158               	.LVL74:
 601:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 1159               		.loc 1 601 9 view .LVU240
 1160 0298 88E2      		ldi r24,lo8(40)
 1161 029a 0E94 0000 		call register_code
 1162               	.LVL75:
 602:quantum/quantum.c ****       }
 1163               		.loc 1 602 9 view .LVU241
 1164 029e 88E2      		ldi r24,lo8(40)
 1165 02a0 0E94 0000 		call unregister_code
 1166               	.LVL76:
 1167 02a4 00C0      		rjmp .L49
 1168               	.L53:
 1169               	.LBB24:
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1170               		.loc 1 611 7 view .LVU242
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1171               		.loc 1 611 25 is_stmt 0 view .LVU243
 1172 02a6 0E94 0000 		call get_mods
 1173               	.LVL77:
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1174               		.loc 1 644 7 is_stmt 1 view .LVU244
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1175               		.loc 1 644 10 is_stmt 0 view .LVU245
 1176 02aa F801      		movw r30,r16
 1177 02ac 9281      		ldd r25,Z+2
 1178 02ae 9923      		tst r25
 1179 02b0 01F0      		breq .L97
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1180               		.loc 1 611 15 view .LVU246
 1181 02b2 8A7A      		andi r24,lo8(-86)
 1182               	.LVL78:
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1183               		.loc 1 645 9 is_stmt 1 view .LVU247
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1184               		.loc 1 645 31 is_stmt 0 view .LVU248
 1185 02b4 91E0      		ldi r25,lo8(1)
 1186 02b6 01F4      		brne .L98
 1187 02b8 90E0      		ldi r25,0
 1188               	.L98:
 1189 02ba 9093 0000 		sts grave_esc_was_shifted,r25
 646:quantum/quantum.c ****       }
 1190               		.loc 1 646 9 is_stmt 1 view .LVU249
 1191 02be 8111      		cpse r24,__zero_reg__
 1192 02c0 00C0      		rjmp .L102
 1193 02c2 89E2      		ldi r24,lo8(41)
 1194               	.LVL79:
 1195               	.L99:
 646:quantum/quantum.c ****       }
 1196               		.loc 1 646 9 is_stmt 0 discriminator 4 view .LVU250
 1197 02c4 0E94 0000 		call add_key
 1198               	.LVL80:
 1199               	.L100:
 652:quantum/quantum.c ****       return false;
 1200               		.loc 1 652 7 is_stmt 1 view .LVU251
 1201 02c8 0E94 0000 		call send_keyboard_report
 1202               	.LVL81:
 653:quantum/quantum.c ****     }
 1203               		.loc 1 653 7 view .LVU252
 653:quantum/quantum.c ****     }
 1204               		.loc 1 653 14 is_stmt 0 view .LVU253
 1205 02cc 00C0      		rjmp .L49
 1206               	.LVL82:
 1207               	.L102:
 646:quantum/quantum.c ****       }
 1208               		.loc 1 646 9 view .LVU254
 1209 02ce 85E3      		ldi r24,lo8(53)
 1210               	.LVL83:
 646:quantum/quantum.c ****       }
 1211               		.loc 1 646 9 view .LVU255
 1212 02d0 00C0      		rjmp .L99
 1213               	.LVL84:
 1214               	.L97:
 649:quantum/quantum.c ****       }
 1215               		.loc 1 649 9 is_stmt 1 view .LVU256
 1216 02d2 8091 0000 		lds r24,grave_esc_was_shifted
 1217               	.LVL85:
 649:quantum/quantum.c ****       }
 1218               		.loc 1 649 9 is_stmt 0 view .LVU257
 1219 02d6 8111      		cpse r24,__zero_reg__
 1220 02d8 00C0      		rjmp .L103
 1221 02da 89E2      		ldi r24,lo8(41)
 1222               	.L101:
 649:quantum/quantum.c ****       }
 1223               		.loc 1 649 9 discriminator 4 view .LVU258
 1224 02dc 0E94 0000 		call del_key
 1225               	.LVL86:
 1226 02e0 00C0      		rjmp .L100
 1227               	.L103:
 649:quantum/quantum.c ****       }
 1228               		.loc 1 649 9 view .LVU259
 1229 02e2 85E3      		ldi r24,lo8(53)
 1230 02e4 00C0      		rjmp .L101
 1231               	.LBE24:
 1232               		.cfi_endproc
 1233               	.LFE39:
 1235               		.section	.text.send_char,"ax",@progbits
 1236               	.global	send_char
 1238               	send_char:
 1239               	.LVL87:
 1240               	.LFB44:
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 676:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 677:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 678:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 679:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 680:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 681:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 682:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 683:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 684:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 685:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 686:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 687:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 688:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 689:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 690:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 691:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 692:quantum/quantum.c **** };
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** __attribute__ ((weak))
 695:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 696:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 697:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 698:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 699:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 700:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 701:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 702:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 703:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 704:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 705:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 706:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 707:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 708:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 709:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 710:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 711:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 712:quantum/quantum.c **** };
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** void send_string(const char *str) {
 715:quantum/quantum.c ****   send_string_with_delay(str, 0);
 716:quantum/quantum.c **** }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** void send_string_P(const char *str) {
 719:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 720:quantum/quantum.c **** }
 721:quantum/quantum.c **** 
 722:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 723:quantum/quantum.c ****     while (1) {
 724:quantum/quantum.c ****         char ascii_code = *str;
 725:quantum/quantum.c ****         if (!ascii_code) break;
 726:quantum/quantum.c ****         if (ascii_code == 1) {
 727:quantum/quantum.c ****           // tap
 728:quantum/quantum.c ****           uint8_t keycode = *(++str);
 729:quantum/quantum.c ****           register_code(keycode);
 730:quantum/quantum.c ****           unregister_code(keycode);
 731:quantum/quantum.c ****         } else if (ascii_code == 2) {
 732:quantum/quantum.c ****           // down
 733:quantum/quantum.c ****           uint8_t keycode = *(++str);
 734:quantum/quantum.c ****           register_code(keycode);
 735:quantum/quantum.c ****         } else if (ascii_code == 3) {
 736:quantum/quantum.c ****           // up
 737:quantum/quantum.c ****           uint8_t keycode = *(++str);
 738:quantum/quantum.c ****           unregister_code(keycode);
 739:quantum/quantum.c ****         } else {
 740:quantum/quantum.c ****           send_char(ascii_code);
 741:quantum/quantum.c ****         }
 742:quantum/quantum.c ****         ++str;
 743:quantum/quantum.c ****         // interval
 744:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 745:quantum/quantum.c ****     }
 746:quantum/quantum.c **** }
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 749:quantum/quantum.c ****     while (1) {
 750:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 751:quantum/quantum.c ****         if (!ascii_code) break;
 752:quantum/quantum.c ****         if (ascii_code == 1) {
 753:quantum/quantum.c ****           // tap
 754:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 755:quantum/quantum.c ****           register_code(keycode);
 756:quantum/quantum.c ****           unregister_code(keycode);
 757:quantum/quantum.c ****         } else if (ascii_code == 2) {
 758:quantum/quantum.c ****           // down
 759:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 760:quantum/quantum.c ****           register_code(keycode);
 761:quantum/quantum.c ****         } else if (ascii_code == 3) {
 762:quantum/quantum.c ****           // up
 763:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 764:quantum/quantum.c ****           unregister_code(keycode);
 765:quantum/quantum.c ****         } else {
 766:quantum/quantum.c ****           send_char(ascii_code);
 767:quantum/quantum.c ****         }
 768:quantum/quantum.c ****         ++str;
 769:quantum/quantum.c ****         // interval
 770:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 771:quantum/quantum.c ****     }
 772:quantum/quantum.c **** }
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_char(char ascii_code) {
 1241               		.loc 1 774 33 is_stmt 1 view -0
 1242               		.cfi_startproc
 1243               		.loc 1 774 33 is_stmt 0 view .LVU261
 1244 0000 CF93      		push r28
 1245               	.LCFI12:
 1246               		.cfi_def_cfa_offset 3
 1247               		.cfi_offset 28, -2
 1248               	/* prologue: function */
 1249               	/* frame size = 0 */
 1250               	/* stack size = 1 */
 1251               	.L__stack_usage = 1
 775:quantum/quantum.c ****   uint8_t keycode;
 1252               		.loc 1 775 3 is_stmt 1 view .LVU262
 776:quantum/quantum.c ****   keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 1253               		.loc 1 776 3 view .LVU263
 1254               	.LBB25:
 1255               		.loc 1 776 13 view .LVU264
 1256 0002 90E0      		ldi r25,0
 1257               	.LVL88:
 1258               		.loc 1 776 13 view .LVU265
 1259               		.loc 1 776 13 view .LVU266
 1260 0004 FC01      		movw r30,r24
 1261 0006 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 1262 0008 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 1263               	.LVL89:
 1264               		.loc 1 776 13 is_stmt 0 view .LVU267
 1265               	/* #APP */
 1266               	 ;  776 "quantum/quantum.c" 1
 1267 000a C491      		lpm r28, Z
 1268               		
 1269               	 ;  0 "" 2
 1270               	.LVL90:
 1271               		.loc 1 776 13 is_stmt 1 view .LVU268
 1272               		.loc 1 776 13 is_stmt 0 view .LVU269
 1273               	/* #NOAPP */
 1274               	.LBE25:
 777:quantum/quantum.c ****   if (pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code])) {
 1275               		.loc 1 777 3 is_stmt 1 view .LVU270
 1276               	.LBB26:
 1277               		.loc 1 777 7 view .LVU271
 1278               		.loc 1 777 7 view .LVU272
 1279               		.loc 1 777 7 view .LVU273
 1280 000c 8050      		subi r24,lo8(-(ascii_to_shift_lut))
 1281 000e 9040      		sbci r25,hi8(-(ascii_to_shift_lut))
 1282               	.LVL91:
 1283               		.loc 1 777 7 is_stmt 0 view .LVU274
 1284 0010 FC01      		movw r30,r24
 1285               	.LVL92:
 1286               		.loc 1 777 7 view .LVU275
 1287               	/* #APP */
 1288               	 ;  777 "quantum/quantum.c" 1
 1289 0012 8491      		lpm r24, Z
 1290               		
 1291               	 ;  0 "" 2
 1292               	.LVL93:
 1293               		.loc 1 777 7 is_stmt 1 view .LVU276
 1294               	/* #NOAPP */
 1295               	.LBE26:
 1296               		.loc 1 777 6 is_stmt 0 view .LVU277
 1297 0014 8823      		tst r24
 1298 0016 01F0      		breq .L130
 778:quantum/quantum.c ****       register_code(KC_LSFT);
 1299               		.loc 1 778 7 is_stmt 1 view .LVU278
 1300 0018 81EE      		ldi r24,lo8(-31)
 1301               	.LVL94:
 1302               		.loc 1 778 7 is_stmt 0 view .LVU279
 1303 001a 0E94 0000 		call register_code
 1304               	.LVL95:
 779:quantum/quantum.c ****       register_code(keycode);
 1305               		.loc 1 779 7 is_stmt 1 view .LVU280
 1306 001e 8C2F      		mov r24,r28
 1307 0020 0E94 0000 		call register_code
 1308               	.LVL96:
 780:quantum/quantum.c ****       unregister_code(keycode);
 1309               		.loc 1 780 7 view .LVU281
 1310 0024 8C2F      		mov r24,r28
 1311 0026 0E94 0000 		call unregister_code
 1312               	.LVL97:
 781:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1313               		.loc 1 781 7 view .LVU282
 1314 002a 81EE      		ldi r24,lo8(-31)
 1315               	.L131:
 1316               	/* epilogue start */
 782:quantum/quantum.c ****   } else {
 783:quantum/quantum.c ****       register_code(keycode);
 784:quantum/quantum.c ****       unregister_code(keycode);
 785:quantum/quantum.c ****   }
 786:quantum/quantum.c **** }
 1317               		.loc 1 786 1 is_stmt 0 view .LVU283
 1318 002c CF91      		pop r28
 1319               	.LVL98:
 784:quantum/quantum.c ****   }
 1320               		.loc 1 784 7 view .LVU284
 1321 002e 0C94 0000 		jmp unregister_code
 1322               	.LVL99:
 1323               	.L130:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1324               		.loc 1 783 7 is_stmt 1 view .LVU285
 1325 0032 8C2F      		mov r24,r28
 1326               	.LVL100:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1327               		.loc 1 783 7 is_stmt 0 view .LVU286
 1328 0034 0E94 0000 		call register_code
 1329               	.LVL101:
 784:quantum/quantum.c ****   }
 1330               		.loc 1 784 7 is_stmt 1 view .LVU287
 1331 0038 8C2F      		mov r24,r28
 1332 003a 00C0      		rjmp .L131
 1333               		.cfi_endproc
 1334               	.LFE44:
 1336               		.section	.text.send_string_with_delay,"ax",@progbits
 1337               	.global	send_string_with_delay
 1339               	send_string_with_delay:
 1340               	.LVL102:
 1341               	.LFB42:
 722:quantum/quantum.c ****     while (1) {
 1342               		.loc 1 722 64 view -0
 1343               		.cfi_startproc
 722:quantum/quantum.c ****     while (1) {
 1344               		.loc 1 722 64 is_stmt 0 view .LVU289
 1345 0000 FF92      		push r15
 1346               	.LCFI13:
 1347               		.cfi_def_cfa_offset 3
 1348               		.cfi_offset 15, -2
 1349 0002 0F93      		push r16
 1350               	.LCFI14:
 1351               		.cfi_def_cfa_offset 4
 1352               		.cfi_offset 16, -3
 1353 0004 1F93      		push r17
 1354               	.LCFI15:
 1355               		.cfi_def_cfa_offset 5
 1356               		.cfi_offset 17, -4
 1357 0006 CF93      		push r28
 1358               	.LCFI16:
 1359               		.cfi_def_cfa_offset 6
 1360               		.cfi_offset 28, -5
 1361 0008 DF93      		push r29
 1362               	.LCFI17:
 1363               		.cfi_def_cfa_offset 7
 1364               		.cfi_offset 29, -6
 1365               	/* prologue: function */
 1366               	/* frame size = 0 */
 1367               	/* stack size = 5 */
 1368               	.L__stack_usage = 5
 1369 000a EC01      		movw r28,r24
 1370 000c F62E      		mov r15,r22
 1371               	.LVL103:
 1372               	.L140:
 723:quantum/quantum.c ****         char ascii_code = *str;
 1373               		.loc 1 723 5 is_stmt 1 view .LVU290
 1374               	.LBB27:
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1375               		.loc 1 724 9 view .LVU291
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1376               		.loc 1 724 14 is_stmt 0 view .LVU292
 1377 000e 8881      		ld r24,Y
 1378               	.LVL104:
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1379               		.loc 1 725 9 is_stmt 1 view .LVU293
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1380               		.loc 1 725 12 is_stmt 0 view .LVU294
 1381 0010 8823      		tst r24
 1382 0012 01F0      		breq .L132
 726:quantum/quantum.c ****           // tap
 1383               		.loc 1 726 9 is_stmt 1 view .LVU295
 1384 0014 8E01      		movw r16,r28
 1385 0016 0F5F      		subi r16,-1
 1386 0018 1F4F      		sbci r17,-1
 726:quantum/quantum.c ****           // tap
 1387               		.loc 1 726 12 is_stmt 0 view .LVU296
 1388 001a 8130      		cpi r24,lo8(1)
 1389 001c 01F4      		brne .L134
 1390               	.LBB28:
 728:quantum/quantum.c ****           register_code(keycode);
 1391               		.loc 1 728 11 is_stmt 1 view .LVU297
 1392               	.LVL105:
 728:quantum/quantum.c ****           register_code(keycode);
 1393               		.loc 1 728 19 is_stmt 0 view .LVU298
 1394 001e C981      		ldd r28,Y+1
 1395               	.LVL106:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1396               		.loc 1 729 11 is_stmt 1 view .LVU299
 1397 0020 8C2F      		mov r24,r28
 1398               	.LVL107:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1399               		.loc 1 729 11 is_stmt 0 view .LVU300
 1400 0022 0E94 0000 		call register_code
 1401               	.LVL108:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1402               		.loc 1 730 11 is_stmt 1 view .LVU301
 1403 0026 8C2F      		mov r24,r28
 1404               	.LVL109:
 1405               	.L141:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1406               		.loc 1 730 11 is_stmt 0 view .LVU302
 1407               	.LBE28:
 1408               	.LBB29:
 738:quantum/quantum.c ****         } else {
 1409               		.loc 1 738 11 view .LVU303
 1410 0028 0E94 0000 		call unregister_code
 1411               	.LVL110:
 1412               	.LBE29:
 1413 002c 00C0      		rjmp .L135
 1414               	.LVL111:
 1415               	.L134:
 731:quantum/quantum.c ****           // down
 1416               		.loc 1 731 16 is_stmt 1 view .LVU304
 731:quantum/quantum.c ****           // down
 1417               		.loc 1 731 19 is_stmt 0 view .LVU305
 1418 002e 8230      		cpi r24,lo8(2)
 1419 0030 01F4      		brne .L136
 1420               	.LBB30:
 733:quantum/quantum.c ****           register_code(keycode);
 1421               		.loc 1 733 11 is_stmt 1 view .LVU306
 1422               	.LVL112:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1423               		.loc 1 734 11 view .LVU307
 1424 0032 8981      		ldd r24,Y+1
 1425               	.LVL113:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1426               		.loc 1 734 11 is_stmt 0 view .LVU308
 1427 0034 0E94 0000 		call register_code
 1428               	.LVL114:
 1429               	.L135:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1430               		.loc 1 734 11 view .LVU309
 1431               	.LBE30:
 742:quantum/quantum.c ****         // interval
 1432               		.loc 1 742 9 is_stmt 1 view .LVU310
 1433 0038 E801      		movw r28,r16
 1434 003a 2196      		adiw r28,1
 1435               	.LVL115:
 1436               	.LBB31:
 744:quantum/quantum.c ****     }
 1437               		.loc 1 744 11 view .LVU311
 744:quantum/quantum.c ****     }
 1438               		.loc 1 744 34 view .LVU312
 744:quantum/quantum.c ****     }
 1439               		.loc 1 744 19 is_stmt 0 view .LVU313
 1440 003c 8F2D      		mov r24,r15
 1441               	.LVL116:
 1442               	.L138:
 744:quantum/quantum.c ****     }
 1443               		.loc 1 744 43 discriminator 1 view .LVU314
 1444               	.LVL117:
 1445 003e 8150      		subi r24,1
 1446 0040 00F0      		brcs .L140
 744:quantum/quantum.c ****     }
 1447               		.loc 1 744 47 is_stmt 1 view .LVU315
 1448               	.LBB32:
 1449               	.LBI32:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1450               		.loc 3 166 1 view .LVU316
 1451               	.LBB33:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1452               		.loc 3 168 2 view .LVU317
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1453               		.loc 3 172 2 view .LVU318
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1454               		.loc 3 173 2 view .LVU319
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1455               		.loc 3 174 2 view .LVU320
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1456               		.loc 3 184 3 view .LVU321
 1457               		.loc 3 187 2 view .LVU322
 1458 0042 EFE9      		ldi r30,lo8(3999)
 1459 0044 FFE0      		ldi r31,hi8(3999)
 1460 0046 3197      	1:	sbiw r30,1
 1461 0048 01F4      		brne 1b
 1462 004a 00C0      		rjmp .
 1463 004c 0000      		nop
 1464 004e 00C0      		rjmp .L138
 1465               	.LVL118:
 1466               	.L136:
 1467               		.loc 3 187 2 is_stmt 0 view .LVU323
 1468               	.LBE33:
 1469               	.LBE32:
 1470               	.LBE31:
 735:quantum/quantum.c ****           // up
 1471               		.loc 1 735 16 is_stmt 1 view .LVU324
 735:quantum/quantum.c ****           // up
 1472               		.loc 1 735 19 is_stmt 0 view .LVU325
 1473 0050 8330      		cpi r24,lo8(3)
 1474 0052 01F4      		brne .L137
 1475               	.LBB34:
 737:quantum/quantum.c ****           unregister_code(keycode);
 1476               		.loc 1 737 11 is_stmt 1 view .LVU326
 1477               	.LVL119:
 738:quantum/quantum.c ****         } else {
 1478               		.loc 1 738 11 view .LVU327
 1479 0054 8981      		ldd r24,Y+1
 1480               	.LVL120:
 738:quantum/quantum.c ****         } else {
 1481               		.loc 1 738 11 is_stmt 0 view .LVU328
 1482 0056 00C0      		rjmp .L141
 1483               	.LVL121:
 1484               	.L137:
 738:quantum/quantum.c ****         } else {
 1485               		.loc 1 738 11 view .LVU329
 1486               	.LBE34:
 740:quantum/quantum.c ****         }
 1487               		.loc 1 740 11 is_stmt 1 view .LVU330
 1488 0058 0E94 0000 		call send_char
 1489               	.LVL122:
 740:quantum/quantum.c ****         }
 1490               		.loc 1 740 11 is_stmt 0 view .LVU331
 1491 005c 8E01      		movw r16,r28
 1492 005e 00C0      		rjmp .L135
 1493               	.LVL123:
 1494               	.L132:
 1495               	/* epilogue start */
 740:quantum/quantum.c ****         }
 1496               		.loc 1 740 11 view .LVU332
 1497               	.LBE27:
 746:quantum/quantum.c **** 
 1498               		.loc 1 746 1 view .LVU333
 1499 0060 DF91      		pop r29
 1500 0062 CF91      		pop r28
 1501               	.LVL124:
 746:quantum/quantum.c **** 
 1502               		.loc 1 746 1 view .LVU334
 1503 0064 1F91      		pop r17
 1504 0066 0F91      		pop r16
 1505 0068 FF90      		pop r15
 1506               	.LVL125:
 746:quantum/quantum.c **** 
 1507               		.loc 1 746 1 view .LVU335
 1508 006a 0895      		ret
 1509               		.cfi_endproc
 1510               	.LFE42:
 1512               		.section	.text.send_string,"ax",@progbits
 1513               	.global	send_string
 1515               	send_string:
 1516               	.LVL126:
 1517               	.LFB40:
 714:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1518               		.loc 1 714 35 is_stmt 1 view -0
 1519               		.cfi_startproc
 1520               	/* prologue: function */
 1521               	/* frame size = 0 */
 1522               	/* stack size = 0 */
 1523               	.L__stack_usage = 0
 715:quantum/quantum.c **** }
 1524               		.loc 1 715 3 view .LVU337
 1525 0000 60E0      		ldi r22,0
 1526 0002 0C94 0000 		jmp send_string_with_delay
 1527               	.LVL127:
 715:quantum/quantum.c **** }
 1528               		.loc 1 715 3 is_stmt 0 view .LVU338
 1529               		.cfi_endproc
 1530               	.LFE40:
 1532               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1533               	.global	send_string_with_delay_P
 1535               	send_string_with_delay_P:
 1536               	.LVL128:
 1537               	.LFB43:
 748:quantum/quantum.c ****     while (1) {
 1538               		.loc 1 748 66 is_stmt 1 view -0
 1539               		.cfi_startproc
 748:quantum/quantum.c ****     while (1) {
 1540               		.loc 1 748 66 is_stmt 0 view .LVU340
 1541 0000 FF92      		push r15
 1542               	.LCFI18:
 1543               		.cfi_def_cfa_offset 3
 1544               		.cfi_offset 15, -2
 1545 0002 0F93      		push r16
 1546               	.LCFI19:
 1547               		.cfi_def_cfa_offset 4
 1548               		.cfi_offset 16, -3
 1549 0004 1F93      		push r17
 1550               	.LCFI20:
 1551               		.cfi_def_cfa_offset 5
 1552               		.cfi_offset 17, -4
 1553 0006 CF93      		push r28
 1554               	.LCFI21:
 1555               		.cfi_def_cfa_offset 6
 1556               		.cfi_offset 28, -5
 1557 0008 DF93      		push r29
 1558               	.LCFI22:
 1559               		.cfi_def_cfa_offset 7
 1560               		.cfi_offset 29, -6
 1561               	/* prologue: function */
 1562               	/* frame size = 0 */
 1563               	/* stack size = 5 */
 1564               	.L__stack_usage = 5
 1565 000a 8C01      		movw r16,r24
 1566 000c F62E      		mov r15,r22
 1567               	.LVL129:
 1568               	.L151:
 749:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1569               		.loc 1 749 5 is_stmt 1 view .LVU341
 1570               	.LBB35:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1571               		.loc 1 750 9 view .LVU342
 1572               	.LBB36:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1573               		.loc 1 750 27 view .LVU343
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1574               		.loc 1 750 27 view .LVU344
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1575               		.loc 1 750 27 view .LVU345
 1576 000e F801      		movw r30,r16
 1577               	/* #APP */
 1578               	 ;  750 "quantum/quantum.c" 1
 1579 0010 8491      		lpm r24, Z
 1580               		
 1581               	 ;  0 "" 2
 1582               	.LVL130:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1583               		.loc 1 750 27 view .LVU346
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1584               		.loc 1 750 27 is_stmt 0 view .LVU347
 1585               	/* #NOAPP */
 1586               	.LBE36:
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1587               		.loc 1 751 9 is_stmt 1 view .LVU348
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1588               		.loc 1 751 12 is_stmt 0 view .LVU349
 1589 0012 8823      		tst r24
 1590 0014 01F0      		breq .L143
 752:quantum/quantum.c ****           // tap
 1591               		.loc 1 752 9 is_stmt 1 view .LVU350
 1592 0016 E801      		movw r28,r16
 1593 0018 2196      		adiw r28,1
 752:quantum/quantum.c ****           // tap
 1594               		.loc 1 752 12 is_stmt 0 view .LVU351
 1595 001a 8130      		cpi r24,lo8(1)
 1596 001c 01F4      		brne .L145
 1597               	.LBB37:
 754:quantum/quantum.c ****           register_code(keycode);
 1598               		.loc 1 754 11 is_stmt 1 view .LVU352
 1599               	.LBB38:
 754:quantum/quantum.c ****           register_code(keycode);
 1600               		.loc 1 754 29 view .LVU353
 1601               	.LVL131:
 754:quantum/quantum.c ****           register_code(keycode);
 1602               		.loc 1 754 29 view .LVU354
 754:quantum/quantum.c ****           register_code(keycode);
 1603               		.loc 1 754 29 view .LVU355
 1604 001e FE01      		movw r30,r28
 1605               	/* #APP */
 1606               	 ;  754 "quantum/quantum.c" 1
 1607 0020 1491      		lpm r17, Z
 1608               		
 1609               	 ;  0 "" 2
 1610               	.LVL132:
 754:quantum/quantum.c ****           register_code(keycode);
 1611               		.loc 1 754 29 view .LVU356
 754:quantum/quantum.c ****           register_code(keycode);
 1612               		.loc 1 754 29 is_stmt 0 view .LVU357
 1613               	/* #NOAPP */
 1614               	.LBE38:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1615               		.loc 1 755 11 is_stmt 1 view .LVU358
 1616 0022 812F      		mov r24,r17
 1617               	.LVL133:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1618               		.loc 1 755 11 is_stmt 0 view .LVU359
 1619 0024 0E94 0000 		call register_code
 1620               	.LVL134:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1621               		.loc 1 756 11 is_stmt 1 view .LVU360
 1622 0028 812F      		mov r24,r17
 1623               	.LVL135:
 1624               	.L152:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1625               		.loc 1 756 11 is_stmt 0 view .LVU361
 1626               	.LBE37:
 1627               	.LBB39:
 1628               	.LBB40:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1629               		.loc 1 763 29 is_stmt 1 view .LVU362
 763:quantum/quantum.c ****           unregister_code(keycode);
 1630               		.loc 1 763 29 is_stmt 0 view .LVU363
 1631               	.LBE40:
 764:quantum/quantum.c ****         } else {
 1632               		.loc 1 764 11 is_stmt 1 view .LVU364
 1633 002a 0E94 0000 		call unregister_code
 1634               	.LVL136:
 764:quantum/quantum.c ****         } else {
 1635               		.loc 1 764 11 is_stmt 0 view .LVU365
 1636               	.LBE39:
 1637 002e 00C0      		rjmp .L146
 1638               	.LVL137:
 1639               	.L145:
 757:quantum/quantum.c ****           // down
 1640               		.loc 1 757 16 is_stmt 1 view .LVU366
 757:quantum/quantum.c ****           // down
 1641               		.loc 1 757 19 is_stmt 0 view .LVU367
 1642 0030 8230      		cpi r24,lo8(2)
 1643 0032 01F4      		brne .L147
 1644               	.LBB42:
 759:quantum/quantum.c ****           register_code(keycode);
 1645               		.loc 1 759 11 is_stmt 1 view .LVU368
 1646               	.LBB43:
 759:quantum/quantum.c ****           register_code(keycode);
 1647               		.loc 1 759 29 view .LVU369
 1648               	.LVL138:
 759:quantum/quantum.c ****           register_code(keycode);
 1649               		.loc 1 759 29 view .LVU370
 759:quantum/quantum.c ****           register_code(keycode);
 1650               		.loc 1 759 29 view .LVU371
 1651 0034 FE01      		movw r30,r28
 1652               	/* #APP */
 1653               	 ;  759 "quantum/quantum.c" 1
 1654 0036 8491      		lpm r24, Z
 1655               		
 1656               	 ;  0 "" 2
 1657               	.LVL139:
 759:quantum/quantum.c ****           register_code(keycode);
 1658               		.loc 1 759 29 view .LVU372
 759:quantum/quantum.c ****           register_code(keycode);
 1659               		.loc 1 759 29 is_stmt 0 view .LVU373
 1660               	/* #NOAPP */
 1661               	.LBE43:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1662               		.loc 1 760 11 is_stmt 1 view .LVU374
 1663 0038 0E94 0000 		call register_code
 1664               	.LVL140:
 1665               	.L146:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1666               		.loc 1 760 11 is_stmt 0 view .LVU375
 1667               	.LBE42:
 768:quantum/quantum.c ****         // interval
 1668               		.loc 1 768 9 is_stmt 1 view .LVU376
 768:quantum/quantum.c ****         // interval
 1669               		.loc 1 768 9 is_stmt 0 view .LVU377
 1670 003c 8E01      		movw r16,r28
 1671 003e 0F5F      		subi r16,-1
 1672 0040 1F4F      		sbci r17,-1
 1673               	.LVL141:
 1674               	.LBB44:
 770:quantum/quantum.c ****     }
 1675               		.loc 1 770 11 is_stmt 1 view .LVU378
 770:quantum/quantum.c ****     }
 1676               		.loc 1 770 34 view .LVU379
 770:quantum/quantum.c ****     }
 1677               		.loc 1 770 19 is_stmt 0 view .LVU380
 1678 0042 8F2D      		mov r24,r15
 1679               	.LVL142:
 1680               	.L149:
 770:quantum/quantum.c ****     }
 1681               		.loc 1 770 43 discriminator 1 view .LVU381
 1682               	.LVL143:
 1683 0044 8150      		subi r24,1
 1684 0046 00F0      		brcs .L151
 770:quantum/quantum.c ****     }
 1685               		.loc 1 770 47 is_stmt 1 view .LVU382
 1686               	.LBB45:
 1687               	.LBI45:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1688               		.loc 3 166 1 view .LVU383
 1689               	.LBB46:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1690               		.loc 3 168 2 view .LVU384
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1691               		.loc 3 172 2 view .LVU385
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1692               		.loc 3 173 2 view .LVU386
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1693               		.loc 3 174 2 view .LVU387
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1694               		.loc 3 184 3 view .LVU388
 1695               		.loc 3 187 2 view .LVU389
 1696 0048 EFE9      		ldi r30,lo8(3999)
 1697 004a FFE0      		ldi r31,hi8(3999)
 1698 004c 3197      	1:	sbiw r30,1
 1699 004e 01F4      		brne 1b
 1700 0050 00C0      		rjmp .
 1701 0052 0000      		nop
 1702 0054 00C0      		rjmp .L149
 1703               	.LVL144:
 1704               	.L147:
 1705               		.loc 3 187 2 is_stmt 0 view .LVU390
 1706               	.LBE46:
 1707               	.LBE45:
 1708               	.LBE44:
 761:quantum/quantum.c ****           // up
 1709               		.loc 1 761 16 is_stmt 1 view .LVU391
 761:quantum/quantum.c ****           // up
 1710               		.loc 1 761 19 is_stmt 0 view .LVU392
 1711 0056 8330      		cpi r24,lo8(3)
 1712 0058 01F4      		brne .L148
 1713               	.LBB47:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1714               		.loc 1 763 11 is_stmt 1 view .LVU393
 1715               	.LBB41:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1716               		.loc 1 763 29 view .LVU394
 1717               	.LVL145:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1718               		.loc 1 763 29 view .LVU395
 763:quantum/quantum.c ****           unregister_code(keycode);
 1719               		.loc 1 763 29 view .LVU396
 1720 005a FE01      		movw r30,r28
 1721               	/* #APP */
 1722               	 ;  763 "quantum/quantum.c" 1
 1723 005c 8491      		lpm r24, Z
 1724               		
 1725               	 ;  0 "" 2
 1726               	.LVL146:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1727               		.loc 1 763 29 is_stmt 0 view .LVU397
 1728               	/* #NOAPP */
 1729 005e 00C0      		rjmp .L152
 1730               	.LVL147:
 1731               	.L148:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1732               		.loc 1 763 29 view .LVU398
 1733               	.LBE41:
 1734               	.LBE47:
 766:quantum/quantum.c ****         }
 1735               		.loc 1 766 11 is_stmt 1 view .LVU399
 1736 0060 0E94 0000 		call send_char
 1737               	.LVL148:
 766:quantum/quantum.c ****         }
 1738               		.loc 1 766 11 is_stmt 0 view .LVU400
 1739 0064 E801      		movw r28,r16
 1740 0066 00C0      		rjmp .L146
 1741               	.LVL149:
 1742               	.L143:
 1743               	/* epilogue start */
 766:quantum/quantum.c ****         }
 1744               		.loc 1 766 11 view .LVU401
 1745               	.LBE35:
 772:quantum/quantum.c **** 
 1746               		.loc 1 772 1 view .LVU402
 1747 0068 DF91      		pop r29
 1748 006a CF91      		pop r28
 1749 006c 1F91      		pop r17
 1750 006e 0F91      		pop r16
 1751               	.LVL150:
 772:quantum/quantum.c **** 
 1752               		.loc 1 772 1 view .LVU403
 1753 0070 FF90      		pop r15
 1754               	.LVL151:
 772:quantum/quantum.c **** 
 1755               		.loc 1 772 1 view .LVU404
 1756 0072 0895      		ret
 1757               		.cfi_endproc
 1758               	.LFE43:
 1760               		.section	.text.send_string_P,"ax",@progbits
 1761               	.global	send_string_P
 1763               	send_string_P:
 1764               	.LVL152:
 1765               	.LFB41:
 718:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 1766               		.loc 1 718 37 is_stmt 1 view -0
 1767               		.cfi_startproc
 1768               	/* prologue: function */
 1769               	/* frame size = 0 */
 1770               	/* stack size = 0 */
 1771               	.L__stack_usage = 0
 719:quantum/quantum.c **** }
 1772               		.loc 1 719 3 view .LVU406
 1773 0000 60E0      		ldi r22,0
 1774 0002 0C94 0000 		jmp send_string_with_delay_P
 1775               	.LVL153:
 719:quantum/quantum.c **** }
 1776               		.loc 1 719 3 is_stmt 0 view .LVU407
 1777               		.cfi_endproc
 1778               	.LFE41:
 1780               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 1781               	.global	set_single_persistent_default_layer
 1783               	set_single_persistent_default_layer:
 1784               	.LVL154:
 1785               	.LFB45:
 787:quantum/quantum.c **** 
 788:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1786               		.loc 1 788 65 is_stmt 1 view -0
 1787               		.cfi_startproc
 1788               		.loc 1 788 65 is_stmt 0 view .LVU409
 1789 0000 CF93      		push r28
 1790               	.LCFI23:
 1791               		.cfi_def_cfa_offset 3
 1792               		.cfi_offset 28, -2
 1793 0002 DF93      		push r29
 1794               	.LCFI24:
 1795               		.cfi_def_cfa_offset 4
 1796               		.cfi_offset 29, -3
 1797               	/* prologue: function */
 1798               	/* frame size = 0 */
 1799               	/* stack size = 2 */
 1800               	.L__stack_usage = 2
 789:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 790:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 791:quantum/quantum.c ****   #endif
 792:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 1801               		.loc 1 792 3 is_stmt 1 view .LVU410
 1802               		.loc 1 792 35 is_stmt 0 view .LVU411
 1803 0004 C1E0      		ldi r28,lo8(1)
 1804 0006 D0E0      		ldi r29,0
 1805 0008 00C0      		rjmp 2f
 1806               		1:
 1807 000a CC0F      		lsl r28
 1808 000c DD1F      		rol r29
 1809               		2:
 1810 000e 8A95      		dec r24
 1811 0010 02F4      		brpl 1b
 1812               		.loc 1 792 3 view .LVU412
 1813 0012 8C2F      		mov r24,r28
 1814               	.LVL155:
 1815               		.loc 1 792 3 view .LVU413
 1816 0014 0E94 0000 		call eeconfig_update_default_layer
 1817               	.LVL156:
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1818               		.loc 1 793 3 is_stmt 1 view .LVU414
 1819 0018 BE01      		movw r22,r28
 1820 001a 90E0      		ldi r25,0
 1821 001c 80E0      		ldi r24,0
 1822               	/* epilogue start */
 794:quantum/quantum.c **** }
 1823               		.loc 1 794 1 is_stmt 0 view .LVU415
 1824 001e DF91      		pop r29
 1825 0020 CF91      		pop r28
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 1826               		.loc 1 793 3 view .LVU416
 1827 0022 0C94 0000 		jmp default_layer_set
 1828               	.LVL157:
 1829               		.cfi_endproc
 1830               	.LFE45:
 1832               		.section	.text.update_tri_layer_state,"ax",@progbits
 1833               	.global	update_tri_layer_state
 1835               	update_tri_layer_state:
 1836               	.LVL158:
 1837               	.LFB46:
 795:quantum/quantum.c **** 
 796:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 1838               		.loc 1 796 97 is_stmt 1 view -0
 1839               		.cfi_startproc
 1840               		.loc 1 796 97 is_stmt 0 view .LVU418
 1841 0000 8F92      		push r8
 1842               	.LCFI25:
 1843               		.cfi_def_cfa_offset 3
 1844               		.cfi_offset 8, -2
 1845 0002 9F92      		push r9
 1846               	.LCFI26:
 1847               		.cfi_def_cfa_offset 4
 1848               		.cfi_offset 9, -3
 1849 0004 AF92      		push r10
 1850               	.LCFI27:
 1851               		.cfi_def_cfa_offset 5
 1852               		.cfi_offset 10, -4
 1853 0006 BF92      		push r11
 1854               	.LCFI28:
 1855               		.cfi_def_cfa_offset 6
 1856               		.cfi_offset 11, -5
 1857 0008 CF92      		push r12
 1858               	.LCFI29:
 1859               		.cfi_def_cfa_offset 7
 1860               		.cfi_offset 12, -6
 1861 000a DF92      		push r13
 1862               	.LCFI30:
 1863               		.cfi_def_cfa_offset 8
 1864               		.cfi_offset 13, -7
 1865 000c EF92      		push r14
 1866               	.LCFI31:
 1867               		.cfi_def_cfa_offset 9
 1868               		.cfi_offset 14, -8
 1869 000e FF92      		push r15
 1870               	.LCFI32:
 1871               		.cfi_def_cfa_offset 10
 1872               		.cfi_offset 15, -9
 1873 0010 0F93      		push r16
 1874               	.LCFI33:
 1875               		.cfi_def_cfa_offset 11
 1876               		.cfi_offset 16, -10
 1877 0012 1F93      		push r17
 1878               	.LCFI34:
 1879               		.cfi_def_cfa_offset 12
 1880               		.cfi_offset 17, -11
 1881               	/* prologue: function */
 1882               	/* frame size = 0 */
 1883               	/* stack size = 10 */
 1884               	.L__stack_usage = 10
 1885 0014 6B01      		movw r12,r22
 1886 0016 7C01      		movw r14,r24
 797:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 1887               		.loc 1 797 3 is_stmt 1 view .LVU419
 1888               		.loc 1 797 26 is_stmt 0 view .LVU420
 1889 0018 81E0      		ldi r24,lo8(1)
 1890 001a 90E0      		ldi r25,0
 1891 001c A0E0      		ldi r26,0
 1892 001e B0E0      		ldi r27,0
 1893 0020 4C01      		movw r8,r24
 1894 0022 5D01      		movw r10,r26
 1895 0024 00C0      		rjmp 2f
 1896               		1:
 1897 0026 880C      		lsl r8
 1898 0028 991C      		rol r9
 1899 002a AA1C      		rol r10
 1900 002c BB1C      		rol r11
 1901               		2:
 1902 002e 4A95      		dec r20
 1903 0030 02F4      		brpl 1b
 1904 0032 B501      		movw r22,r10
 1905               	.LVL159:
 1906               		.loc 1 797 26 view .LVU421
 1907 0034 A401      		movw r20,r8
 1908               	.LVL160:
 1909               		.loc 1 797 44 view .LVU422
 1910 0036 4C01      		movw r8,r24
 1911 0038 5D01      		movw r10,r26
 1912 003a 00C0      		rjmp 2f
 1913               		1:
 1914 003c 880C      		lsl r8
 1915 003e 991C      		rol r9
 1916 0040 AA1C      		rol r10
 1917 0042 BB1C      		rol r11
 1918               		2:
 1919 0044 2A95      		dec r18
 1920 0046 02F4      		brpl 1b
 1921               		.loc 1 797 12 view .LVU423
 1922 0048 4829      		or r20,r8
 1923 004a 5929      		or r21,r9
 1924 004c 6A29      		or r22,r10
 1925 004e 7B29      		or r23,r11
 1926               	.LVL161:
 798:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 1927               		.loc 1 798 3 is_stmt 1 view .LVU424
 1928               		.loc 1 798 12 is_stmt 0 view .LVU425
 1929 0050 00C0      		rjmp 2f
 1930               		1:
 1931 0052 880F      		lsl r24
 1932 0054 991F      		rol r25
 1933 0056 AA1F      		rol r26
 1934 0058 BB1F      		rol r27
 1935               		2:
 1936 005a 0A95      		dec r16
 1937 005c 02F4      		brpl 1b
 1938               	.LVL162:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1939               		.loc 1 799 3 is_stmt 1 view .LVU426
 1940               		.loc 1 799 17 is_stmt 0 view .LVU427
 1941 005e 8A01      		movw r16,r20
 1942               	.LVL163:
 1943               		.loc 1 799 17 view .LVU428
 1944 0060 9B01      		movw r18,r22
 1945               	.LVL164:
 1946               		.loc 1 799 17 view .LVU429
 1947 0062 0C21      		and r16,r12
 1948 0064 1D21      		and r17,r13
 1949 0066 2E21      		and r18,r14
 1950 0068 3F21      		and r19,r15
 1951               		.loc 1 799 55 view .LVU430
 1952 006a 0417      		cp r16,r20
 1953 006c 1507      		cpc r17,r21
 1954 006e 2607      		cpc r18,r22
 1955 0070 3707      		cpc r19,r23
 1956 0072 01F4      		brne .L156
 1957               		.loc 1 799 55 discriminator 1 view .LVU431
 1958 0074 8C29      		or r24,r12
 1959               	.LVL165:
 1960               		.loc 1 799 55 discriminator 1 view .LVU432
 1961 0076 9D29      		or r25,r13
 1962 0078 AE29      		or r26,r14
 1963 007a BF29      		or r27,r15
 1964               	.L155:
 800:quantum/quantum.c **** }
 1965               		.loc 1 800 1 view .LVU433
 1966 007c BC01      		movw r22,r24
 1967 007e CD01      		movw r24,r26
 1968               	/* epilogue start */
 1969 0080 1F91      		pop r17
 1970               	.LVL166:
 1971               		.loc 1 800 1 view .LVU434
 1972 0082 0F91      		pop r16
 1973               	.LVL167:
 1974               		.loc 1 800 1 view .LVU435
 1975 0084 FF90      		pop r15
 1976 0086 EF90      		pop r14
 1977 0088 DF90      		pop r13
 1978 008a CF90      		pop r12
 1979 008c BF90      		pop r11
 1980 008e AF90      		pop r10
 1981 0090 9F90      		pop r9
 1982 0092 8F90      		pop r8
 1983               	.LVL168:
 1984               		.loc 1 800 1 view .LVU436
 1985 0094 0895      		ret
 1986               	.LVL169:
 1987               	.L156:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1988               		.loc 1 799 66 discriminator 2 view .LVU437
 1989 0096 8095      		com r24
 1990 0098 9095      		com r25
 1991 009a A095      		com r26
 1992 009c B095      		com r27
 1993               	.LVL170:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1994               		.loc 1 799 55 discriminator 2 view .LVU438
 1995 009e 8C21      		and r24,r12
 1996               	.LVL171:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1997               		.loc 1 799 55 discriminator 2 view .LVU439
 1998 00a0 9D21      		and r25,r13
 1999 00a2 AE21      		and r26,r14
 2000 00a4 BF21      		and r27,r15
 2001 00a6 00C0      		rjmp .L155
 2002               		.cfi_endproc
 2003               	.LFE46:
 2005               		.section	.text.update_tri_layer,"ax",@progbits
 2006               	.global	update_tri_layer
 2008               	update_tri_layer:
 2009               	.LVL172:
 2010               	.LFB47:
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 2011               		.loc 1 802 71 is_stmt 1 view -0
 2012               		.cfi_startproc
 2013               		.loc 1 802 71 is_stmt 0 view .LVU441
 2014 0000 0F93      		push r16
 2015               	.LCFI35:
 2016               		.cfi_def_cfa_offset 3
 2017               		.cfi_offset 16, -2
 2018               	/* prologue: function */
 2019               	/* frame size = 0 */
 2020               	/* stack size = 1 */
 2021               	.L__stack_usage = 1
 2022 0002 382F      		mov r19,r24
 2023 0004 262F      		mov r18,r22
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2024               		.loc 1 803 3 is_stmt 1 view .LVU442
 2025 0006 6091 0000 		lds r22,layer_state
 2026 000a 7091 0000 		lds r23,layer_state+1
 2027 000e 8091 0000 		lds r24,layer_state+2
 2028 0012 9091 0000 		lds r25,layer_state+3
 2029               	.LVL173:
 2030               		.loc 1 803 3 is_stmt 0 view .LVU443
 2031 0016 042F      		mov r16,r20
 2032 0018 432F      		mov r20,r19
 2033               	.LVL174:
 2034               		.loc 1 803 3 view .LVU444
 2035 001a 0E94 0000 		call update_tri_layer_state
 2036               	.LVL175:
 2037               	/* epilogue start */
 804:quantum/quantum.c **** }
 2038               		.loc 1 804 1 view .LVU445
 2039 001e 0F91      		pop r16
 2040               	.LVL176:
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2041               		.loc 1 803 3 view .LVU446
 2042 0020 0C94 0000 		jmp layer_state_set
 2043               	.LVL177:
 2044               		.cfi_endproc
 2045               	.LFE47:
 2047               		.section	.text.tap_random_base64,"ax",@progbits
 2048               	.global	tap_random_base64
 2050               	tap_random_base64:
 2051               	.LFB48:
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** void tap_random_base64(void) {
 2052               		.loc 1 806 30 is_stmt 1 view -0
 2053               		.cfi_startproc
 2054 0000 CF93      		push r28
 2055               	.LCFI36:
 2056               		.cfi_def_cfa_offset 3
 2057               		.cfi_offset 28, -2
 2058 0002 DF93      		push r29
 2059               	.LCFI37:
 2060               		.cfi_def_cfa_offset 4
 2061               		.cfi_offset 29, -3
 2062               	/* prologue: function */
 2063               	/* frame size = 0 */
 2064               	/* stack size = 2 */
 2065               	.L__stack_usage = 2
 807:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 808:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 2066               		.loc 1 808 5 view .LVU448
 2067               		.loc 1 808 20 is_stmt 0 view .LVU449
 2068 0004 46B5      		in r20,0x26
 2069               		.loc 1 808 28 view .LVU450
 2070 0006 2091 8400 		lds r18,132
 2071 000a 3091 8500 		lds r19,132+1
 2072               		.loc 1 808 36 view .LVU451
 2073 000e C091 9400 		lds r28,148
 2074 0012 D091 9500 		lds r29,148+1
 2075               		.loc 1 808 44 view .LVU452
 2076 0016 8091 BE00 		lds r24,190
 2077 001a 9091 BF00 		lds r25,190+1
 2078               		.loc 1 808 34 view .LVU453
 2079 001e C20F      		add r28,r18
 2080 0020 C40F      		add r28,r20
 2081               		.loc 1 808 42 view .LVU454
 2082 0022 C80F      		add r28,r24
 2083               		.loc 1 808 13 view .LVU455
 2084 0024 CF73      		andi r28,lo8(63)
 2085               	.LVL178:
 809:quantum/quantum.c ****   #else
 810:quantum/quantum.c ****     uint8_t key = rand() % 64;
 811:quantum/quantum.c ****   #endif
 812:quantum/quantum.c ****   switch (key) {
 2086               		.loc 1 812 3 is_stmt 1 view .LVU456
 2087 0026 CE33      		cpi r28,lo8(62)
 2088 0028 00F4      		brsh .L160
 2089 002a C533      		cpi r28,lo8(53)
 2090 002c 00F4      		brsh .L161
 2091 002e CA31      		cpi r28,lo8(26)
 2092 0030 00F0      		brlo .L162
 2093 0032 C433      		cpi r28,lo8(52)
 2094 0034 00F4      		brsh .L167
 813:quantum/quantum.c ****     case 0 ... 25:
 814:quantum/quantum.c ****       register_code(KC_LSFT);
 815:quantum/quantum.c ****       register_code(key + KC_A);
 816:quantum/quantum.c ****       unregister_code(key + KC_A);
 817:quantum/quantum.c ****       unregister_code(KC_LSFT);
 818:quantum/quantum.c ****       break;
 819:quantum/quantum.c ****     case 26 ... 51:
 820:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 2095               		.loc 1 820 7 view .LVU457
 2096 0036 C651      		subi r28,lo8(-(-22))
 2097               	.LVL179:
 2098               	.L170:
 821:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 822:quantum/quantum.c ****       break;
 823:quantum/quantum.c ****     case 52:
 824:quantum/quantum.c ****       register_code(KC_0);
 825:quantum/quantum.c ****       unregister_code(KC_0);
 826:quantum/quantum.c ****       break;
 827:quantum/quantum.c ****     case 53 ... 61:
 828:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 2099               		.loc 1 828 7 is_stmt 0 view .LVU458
 2100 0038 8C2F      		mov r24,r28
 2101 003a 0E94 0000 		call register_code
 2102               	.LVL180:
 829:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2103               		.loc 1 829 7 is_stmt 1 view .LVU459
 2104 003e 8C2F      		mov r24,r28
 2105 0040 00C0      		rjmp .L168
 2106               	.LVL181:
 2107               	.L160:
 812:quantum/quantum.c ****     case 0 ... 25:
 2108               		.loc 1 812 3 is_stmt 0 view .LVU460
 2109 0042 CE33      		cpi r28,lo8(62)
 2110 0044 01F0      		breq .L165
 2111 0046 CF33      		cpi r28,lo8(63)
 2112 0048 01F0      		breq .L166
 2113               	.L162:
 814:quantum/quantum.c ****       register_code(key + KC_A);
 2114               		.loc 1 814 7 is_stmt 1 view .LVU461
 2115 004a 81EE      		ldi r24,lo8(-31)
 2116 004c 0E94 0000 		call register_code
 2117               	.LVL182:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2118               		.loc 1 815 7 view .LVU462
 2119 0050 CC5F      		subi r28,lo8(-(4))
 2120               	.LVL183:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2121               		.loc 1 815 7 is_stmt 0 view .LVU463
 2122 0052 8C2F      		mov r24,r28
 2123 0054 0E94 0000 		call register_code
 2124               	.LVL184:
 816:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2125               		.loc 1 816 7 is_stmt 1 view .LVU464
 2126 0058 8C2F      		mov r24,r28
 2127               	.LVL185:
 2128               	.L169:
 830:quantum/quantum.c ****       break;
 831:quantum/quantum.c ****     case 62:
 832:quantum/quantum.c ****       register_code(KC_LSFT);
 833:quantum/quantum.c ****       register_code(KC_EQL);
 834:quantum/quantum.c ****       unregister_code(KC_EQL);
 2129               		.loc 1 834 7 is_stmt 0 view .LVU465
 2130 005a 0E94 0000 		call unregister_code
 2131               	.LVL186:
 835:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2132               		.loc 1 835 7 is_stmt 1 view .LVU466
 2133 005e 81EE      		ldi r24,lo8(-31)
 2134 0060 00C0      		rjmp .L168
 2135               	.LVL187:
 2136               	.L167:
 824:quantum/quantum.c ****       unregister_code(KC_0);
 2137               		.loc 1 824 7 view .LVU467
 2138 0062 87E2      		ldi r24,lo8(39)
 2139 0064 0E94 0000 		call register_code
 2140               	.LVL188:
 825:quantum/quantum.c ****       break;
 2141               		.loc 1 825 7 view .LVU468
 2142 0068 87E2      		ldi r24,lo8(39)
 2143               	.LVL189:
 2144               	.L168:
 2145               	/* epilogue start */
 836:quantum/quantum.c ****       break;
 837:quantum/quantum.c ****     case 63:
 838:quantum/quantum.c ****       register_code(KC_SLSH);
 839:quantum/quantum.c ****       unregister_code(KC_SLSH);
 840:quantum/quantum.c ****       break;
 841:quantum/quantum.c ****   }
 842:quantum/quantum.c **** }
 2146               		.loc 1 842 1 is_stmt 0 view .LVU469
 2147 006a DF91      		pop r29
 2148 006c CF91      		pop r28
 839:quantum/quantum.c ****       break;
 2149               		.loc 1 839 7 view .LVU470
 2150 006e 0C94 0000 		jmp unregister_code
 2151               	.LVL190:
 2152               	.L161:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2153               		.loc 1 828 7 is_stmt 1 view .LVU471
 2154 0072 C751      		subi r28,lo8(-(-23))
 2155               	.LVL191:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2156               		.loc 1 828 7 is_stmt 0 view .LVU472
 2157 0074 00C0      		rjmp .L170
 2158               	.LVL192:
 2159               	.L165:
 832:quantum/quantum.c ****       register_code(KC_EQL);
 2160               		.loc 1 832 7 is_stmt 1 view .LVU473
 2161 0076 81EE      		ldi r24,lo8(-31)
 2162 0078 0E94 0000 		call register_code
 2163               	.LVL193:
 833:quantum/quantum.c ****       unregister_code(KC_EQL);
 2164               		.loc 1 833 7 view .LVU474
 2165 007c 8EE2      		ldi r24,lo8(46)
 2166 007e 0E94 0000 		call register_code
 2167               	.LVL194:
 834:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2168               		.loc 1 834 7 view .LVU475
 2169 0082 8EE2      		ldi r24,lo8(46)
 2170 0084 00C0      		rjmp .L169
 2171               	.L166:
 838:quantum/quantum.c ****       unregister_code(KC_SLSH);
 2172               		.loc 1 838 7 view .LVU476
 2173 0086 88E3      		ldi r24,lo8(56)
 2174 0088 0E94 0000 		call register_code
 2175               	.LVL195:
 839:quantum/quantum.c ****       break;
 2176               		.loc 1 839 7 view .LVU477
 2177 008c 88E3      		ldi r24,lo8(56)
 2178 008e 00C0      		rjmp .L168
 2179               		.cfi_endproc
 2180               	.LFE48:
 2182               		.section	.text.matrix_init_quantum,"ax",@progbits
 2183               	.global	matrix_init_quantum
 2185               	matrix_init_quantum:
 2186               	.LFB49:
 843:quantum/quantum.c **** 
 844:quantum/quantum.c **** void matrix_init_quantum() {
 2187               		.loc 1 844 28 view -0
 2188               		.cfi_startproc
 2189               	/* prologue: function */
 2190               	/* frame size = 0 */
 2191               	/* stack size = 0 */
 2192               	.L__stack_usage = 0
 845:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 846:quantum/quantum.c ****     backlight_init_ports();
 847:quantum/quantum.c ****   #endif
 848:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 849:quantum/quantum.c ****     audio_init();
 850:quantum/quantum.c ****   #endif
 851:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 852:quantum/quantum.c ****     rgb_matrix_init_drivers();
 853:quantum/quantum.c ****   #endif
 854:quantum/quantum.c ****   matrix_init_kb();
 2193               		.loc 1 854 3 view .LVU479
 2194 0000 0C94 0000 		jmp matrix_init_kb
 2195               	.LVL196:
 2196               		.cfi_endproc
 2197               	.LFE49:
 2199               		.section	.text.matrix_scan_quantum,"ax",@progbits
 2200               	.global	matrix_scan_quantum
 2202               	matrix_scan_quantum:
 2203               	.LFB50:
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** uint8_t rgb_matrix_task_counter = 0;
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** #ifndef RGB_MATRIX_SKIP_FRAMES
 860:quantum/quantum.c ****   #define RGB_MATRIX_SKIP_FRAMES 1
 861:quantum/quantum.c **** #endif
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** void matrix_scan_quantum() {
 2204               		.loc 1 863 28 view -0
 2205               		.cfi_startproc
 2206               	/* prologue: function */
 2207               	/* frame size = 0 */
 2208               	/* stack size = 0 */
 2209               	.L__stack_usage = 0
 864:quantum/quantum.c ****   #if defined(AUDIO_ENABLE)
 865:quantum/quantum.c ****     matrix_scan_music();
 866:quantum/quantum.c ****   #endif
 867:quantum/quantum.c **** 
 868:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 869:quantum/quantum.c ****     matrix_scan_tap_dance();
 2210               		.loc 1 869 5 view .LVU481
 2211 0000 0E94 0000 		call matrix_scan_tap_dance
 2212               	.LVL197:
 870:quantum/quantum.c ****   #endif
 871:quantum/quantum.c **** 
 872:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 873:quantum/quantum.c ****     matrix_scan_combo();
 874:quantum/quantum.c ****   #endif
 875:quantum/quantum.c **** 
 876:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 877:quantum/quantum.c ****     backlight_task();
 878:quantum/quantum.c ****   #endif
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 881:quantum/quantum.c ****     rgb_matrix_task();
 882:quantum/quantum.c ****     if (rgb_matrix_task_counter == 0) {
 883:quantum/quantum.c ****       rgb_matrix_update_pwm_buffers();
 884:quantum/quantum.c ****     }
 885:quantum/quantum.c ****     rgb_matrix_task_counter = ((rgb_matrix_task_counter + 1) % (RGB_MATRIX_SKIP_FRAMES + 1));
 886:quantum/quantum.c ****   #endif
 887:quantum/quantum.c **** 
 888:quantum/quantum.c ****   matrix_scan_kb();
 2213               		.loc 1 888 3 view .LVU482
 2214 0004 0C94 0000 		jmp matrix_scan_kb
 2215               	.LVL198:
 2216               		.cfi_endproc
 2217               	.LFE50:
 2219               		.section	.text.backlight_init_ports,"ax",@progbits
 2220               		.weak	backlight_init_ports
 2222               	backlight_init_ports:
 2223               	.LFB92:
 2224               		.cfi_startproc
 2225               	/* prologue: function */
 2226               	/* frame size = 0 */
 2227               	/* stack size = 0 */
 2228               	.L__stack_usage = 0
 2229               	/* epilogue start */
 2230 0000 0895      		ret
 2231               		.cfi_endproc
 2232               	.LFE92:
 2234               		.section	.text.send_nibble,"ax",@progbits
 2235               	.global	send_nibble
 2237               	send_nibble:
 2238               	.LVL199:
 2239               	.LFB56:
 889:quantum/quantum.c **** }
 890:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 891:quantum/quantum.c **** 
 892:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 893:quantum/quantum.c **** 
 894:quantum/quantum.c **** // depending on the pin, we use a different output compare unit
 895:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 896:quantum/quantum.c **** #  define COM1x1 COM1C1
 897:quantum/quantum.c **** #  define OCR1x  OCR1C
 898:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 899:quantum/quantum.c **** #  define COM1x1 COM1B1
 900:quantum/quantum.c **** #  define OCR1x  OCR1B
 901:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 902:quantum/quantum.c **** #  define COM1x1 COM1A1
 903:quantum/quantum.c **** #  define OCR1x  OCR1A
 904:quantum/quantum.c **** #else
 905:quantum/quantum.c **** #  define NO_HARDWARE_PWM
 906:quantum/quantum.c **** #endif
 907:quantum/quantum.c **** 
 908:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 909:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 910:quantum/quantum.c **** #endif
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM // pwm through software
 913:quantum/quantum.c **** 
 914:quantum/quantum.c **** __attribute__ ((weak))
 915:quantum/quantum.c **** void backlight_init_ports(void)
 916:quantum/quantum.c **** {
 917:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 918:quantum/quantum.c ****   // DDRx |= n
 919:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 920:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 921:quantum/quantum.c ****     // PORTx &= ~n
 922:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 923:quantum/quantum.c ****   #else
 924:quantum/quantum.c ****     // PORTx |= n
 925:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c **** }
 928:quantum/quantum.c **** 
 929:quantum/quantum.c **** __attribute__ ((weak))
 930:quantum/quantum.c **** void backlight_set(uint8_t level) {}
 931:quantum/quantum.c **** 
 932:quantum/quantum.c **** uint8_t backlight_tick = 0;
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 935:quantum/quantum.c **** void backlight_task(void) {
 936:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
 937:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 938:quantum/quantum.c ****       // PORTx &= ~n
 939:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 940:quantum/quantum.c ****     #else
 941:quantum/quantum.c ****       // PORTx |= n
 942:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 943:quantum/quantum.c ****     #endif
 944:quantum/quantum.c ****   } else {
 945:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 946:quantum/quantum.c ****       // PORTx |= n
 947:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 948:quantum/quantum.c ****     #else
 949:quantum/quantum.c ****       // PORTx &= ~n
 950:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 951:quantum/quantum.c ****     #endif
 952:quantum/quantum.c ****   }
 953:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 954:quantum/quantum.c **** }
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 958:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
 959:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** #else // pwm through timer
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
 968:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
 969:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
 970:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 971:quantum/quantum.c ****   else {
 972:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
 973:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 974:quantum/quantum.c ****     // and revert what we've done again after squaring.
 975:quantum/quantum.c ****     y = y * y * y >> 8;
 976:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 977:quantum/quantum.c ****       return 0xFFFFU;
 978:quantum/quantum.c ****     else
 979:quantum/quantum.c ****       return (uint16_t) y;
 980:quantum/quantum.c ****   }
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
 984:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
 985:quantum/quantum.c ****   OCR1x = val;
 986:quantum/quantum.c **** }
 987:quantum/quantum.c **** 
 988:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 989:quantum/quantum.c **** __attribute__ ((weak))
 990:quantum/quantum.c **** void backlight_set(uint8_t level) {
 991:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
 992:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
 993:quantum/quantum.c **** 
 994:quantum/quantum.c ****   if (level == 0) {
 995:quantum/quantum.c ****     // Turn off PWM control on backlight pin
 996:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 997:quantum/quantum.c ****   } else {
 998:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 999:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
1000:quantum/quantum.c ****   }
1001:quantum/quantum.c ****   // Set the brightness
1002:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1003:quantum/quantum.c **** }
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** void backlight_task(void) {}
1006:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1007:quantum/quantum.c **** 
1008:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1011:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1012:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1013:quantum/quantum.c **** #define BREATHING_STEPS 128
1014:quantum/quantum.c **** 
1015:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1016:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1017:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** bool is_breathing(void) {
1020:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1021:quantum/quantum.c **** }
1022:quantum/quantum.c **** 
1023:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1024:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1025:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1026:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1027:quantum/quantum.c **** 
1028:quantum/quantum.c **** void breathing_enable(void)
1029:quantum/quantum.c **** {
1030:quantum/quantum.c ****   breathing_counter = 0;
1031:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1032:quantum/quantum.c ****   breathing_interrupt_enable();
1033:quantum/quantum.c **** }
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** void breathing_pulse(void)
1036:quantum/quantum.c **** {
1037:quantum/quantum.c ****     if (get_backlight_level() == 0)
1038:quantum/quantum.c ****       breathing_min();
1039:quantum/quantum.c ****     else
1040:quantum/quantum.c ****       breathing_max();
1041:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1042:quantum/quantum.c ****     breathing_interrupt_enable();
1043:quantum/quantum.c **** }
1044:quantum/quantum.c **** 
1045:quantum/quantum.c **** void breathing_disable(void)
1046:quantum/quantum.c **** {
1047:quantum/quantum.c ****     breathing_interrupt_disable();
1048:quantum/quantum.c ****     // Restore backlight level
1049:quantum/quantum.c ****     backlight_set(get_backlight_level());
1050:quantum/quantum.c **** }
1051:quantum/quantum.c **** 
1052:quantum/quantum.c **** void breathing_self_disable(void)
1053:quantum/quantum.c **** {
1054:quantum/quantum.c ****   if (get_backlight_level() == 0)
1055:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1056:quantum/quantum.c ****   else
1057:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1058:quantum/quantum.c **** }
1059:quantum/quantum.c **** 
1060:quantum/quantum.c **** void breathing_toggle(void) {
1061:quantum/quantum.c ****   if (is_breathing())
1062:quantum/quantum.c ****     breathing_disable();
1063:quantum/quantum.c ****   else
1064:quantum/quantum.c ****     breathing_enable();
1065:quantum/quantum.c **** }
1066:quantum/quantum.c **** 
1067:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1068:quantum/quantum.c **** {
1069:quantum/quantum.c ****   if (!value)
1070:quantum/quantum.c ****     value = 1;
1071:quantum/quantum.c ****   breathing_period = value;
1072:quantum/quantum.c **** }
1073:quantum/quantum.c **** 
1074:quantum/quantum.c **** void breathing_period_default(void) {
1075:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1076:quantum/quantum.c **** }
1077:quantum/quantum.c **** 
1078:quantum/quantum.c **** void breathing_period_inc(void)
1079:quantum/quantum.c **** {
1080:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1081:quantum/quantum.c **** }
1082:quantum/quantum.c **** 
1083:quantum/quantum.c **** void breathing_period_dec(void)
1084:quantum/quantum.c **** {
1085:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1086:quantum/quantum.c **** }
1087:quantum/quantum.c **** 
1088:quantum/quantum.c **** /* To generate breathing curve in python:
1089:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1090:quantum/quantum.c ****  */
1091:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1092:quantum/quantum.c **** 
1093:quantum/quantum.c **** // Use this before the cie_lightness function.
1094:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1095:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1096:quantum/quantum.c **** }
1097:quantum/quantum.c **** 
1098:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1099:quantum/quantum.c ****  * about 244 times per second.
1100:quantum/quantum.c ****  */
1101:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1102:quantum/quantum.c **** {
1103:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1104:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1105:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1106:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1107:quantum/quantum.c **** 
1108:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1109:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1110:quantum/quantum.c ****   {
1111:quantum/quantum.c ****       breathing_interrupt_disable();
1112:quantum/quantum.c ****   }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1115:quantum/quantum.c **** }
1116:quantum/quantum.c **** 
1117:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1118:quantum/quantum.c **** 
1119:quantum/quantum.c **** __attribute__ ((weak))
1120:quantum/quantum.c **** void backlight_init_ports(void)
1121:quantum/quantum.c **** {
1122:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1123:quantum/quantum.c ****   // DDRx |= n
1124:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
1125:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
1126:quantum/quantum.c ****     // PORTx &= ~n
1127:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
1128:quantum/quantum.c ****   #else
1129:quantum/quantum.c ****     // PORTx |= n
1130:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
1131:quantum/quantum.c ****   #endif
1132:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1133:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1134:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1135:quantum/quantum.c **** 
1136:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1137:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1138:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1139:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1140:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c ****   /*
1143:quantum/quantum.c ****   14.8.3:
1144:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1145:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1146:quantum/quantum.c ****   */
1147:quantum/quantum.c **** 
1148:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
1149:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1150:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1151:quantum/quantum.c ****   ICR1 = TIMER_TOP;
1152:quantum/quantum.c **** 
1153:quantum/quantum.c ****   backlight_init();
1154:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1155:quantum/quantum.c ****     breathing_enable();
1156:quantum/quantum.c ****   #endif
1157:quantum/quantum.c **** }
1158:quantum/quantum.c **** 
1159:quantum/quantum.c **** #endif // NO_HARDWARE_PWM
1160:quantum/quantum.c **** 
1161:quantum/quantum.c **** #else // backlight
1162:quantum/quantum.c **** 
1163:quantum/quantum.c **** __attribute__ ((weak))
1164:quantum/quantum.c **** void backlight_init_ports(void) {}
1165:quantum/quantum.c **** 
1166:quantum/quantum.c **** __attribute__ ((weak))
1167:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #endif // backlight
1170:quantum/quantum.c **** 
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** // Functions for spitting out values
1173:quantum/quantum.c **** //
1174:quantum/quantum.c **** 
1175:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1176:quantum/quantum.c ****     uint16_t word = (number >> 16);
1177:quantum/quantum.c ****     send_word(word);
1178:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void send_word(uint16_t number) {
1182:quantum/quantum.c ****     uint8_t byte = number >> 8;
1183:quantum/quantum.c ****     send_byte(byte);
1184:quantum/quantum.c ****     send_byte(number & 0xFF);
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** 
1187:quantum/quantum.c **** void send_byte(uint8_t number) {
1188:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1189:quantum/quantum.c ****     send_nibble(nibble);
1190:quantum/quantum.c ****     send_nibble(number & 0xF);
1191:quantum/quantum.c **** }
1192:quantum/quantum.c **** 
1193:quantum/quantum.c **** void send_nibble(uint8_t number) {
 2240               		.loc 1 1193 34 view -0
 2241               		.cfi_startproc
 2242               		.loc 1 1193 34 is_stmt 0 view .LVU484
 2243 0000 CF93      		push r28
 2244               	.LCFI38:
 2245               		.cfi_def_cfa_offset 3
 2246               		.cfi_offset 28, -2
 2247               	/* prologue: function */
 2248               	/* frame size = 0 */
 2249               	/* stack size = 1 */
 2250               	.L__stack_usage = 1
1194:quantum/quantum.c ****     switch (number) {
 2251               		.loc 1 1194 5 is_stmt 1 view .LVU485
 2252 0002 8A30      		cpi r24,lo8(10)
 2253 0004 00F4      		brsh .L175
 2254 0006 8823      		tst r24
 2255 0008 01F0      		breq .L180
1195:quantum/quantum.c ****         case 0:
1196:quantum/quantum.c ****             register_code(KC_0);
1197:quantum/quantum.c ****             unregister_code(KC_0);
1198:quantum/quantum.c ****             break;
1199:quantum/quantum.c ****         case 1 ... 9:
1200:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 2256               		.loc 1 1200 13 view .LVU486
 2257 000a CDE1      		ldi r28,lo8(29)
 2258               	.L183:
1201:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1202:quantum/quantum.c ****             break;
1203:quantum/quantum.c ****         case 0xA ... 0xF:
1204:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2259               		.loc 1 1204 13 is_stmt 0 view .LVU487
 2260 000c C80F      		add r28,r24
 2261 000e 8C2F      		mov r24,r28
 2262               	.LVL200:
 2263               		.loc 1 1204 13 view .LVU488
 2264 0010 0E94 0000 		call register_code
 2265               	.LVL201:
1205:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2266               		.loc 1 1205 13 is_stmt 1 view .LVU489
 2267 0014 8C2F      		mov r24,r28
 2268 0016 00C0      		rjmp .L182
 2269               	.LVL202:
 2270               	.L175:
1204:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2271               		.loc 1 1204 13 is_stmt 0 view .LVU490
 2272 0018 CAEF      		ldi r28,lo8(-6)
1194:quantum/quantum.c ****         case 0:
 2273               		.loc 1 1194 5 view .LVU491
 2274 001a 8031      		cpi r24,lo8(16)
 2275 001c 00F0      		brlo .L183
 2276               	/* epilogue start */
1206:quantum/quantum.c ****             break;
1207:quantum/quantum.c ****     }
1208:quantum/quantum.c **** }
 2277               		.loc 1 1208 1 view .LVU492
 2278 001e CF91      		pop r28
 2279 0020 0895      		ret
 2280               	.L180:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2281               		.loc 1 1196 13 is_stmt 1 view .LVU493
 2282 0022 87E2      		ldi r24,lo8(39)
 2283               	.LVL203:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2284               		.loc 1 1196 13 is_stmt 0 view .LVU494
 2285 0024 0E94 0000 		call register_code
 2286               	.LVL204:
1197:quantum/quantum.c ****             break;
 2287               		.loc 1 1197 13 is_stmt 1 view .LVU495
 2288 0028 87E2      		ldi r24,lo8(39)
 2289               	.L182:
 2290               	/* epilogue start */
 2291               		.loc 1 1208 1 is_stmt 0 view .LVU496
 2292 002a CF91      		pop r28
1205:quantum/quantum.c ****             break;
 2293               		.loc 1 1205 13 view .LVU497
 2294 002c 0C94 0000 		jmp unregister_code
 2295               	.LVL205:
 2296               		.cfi_endproc
 2297               	.LFE56:
 2299               		.section	.text.send_byte,"ax",@progbits
 2300               	.global	send_byte
 2302               	send_byte:
 2303               	.LVL206:
 2304               	.LFB55:
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2305               		.loc 1 1187 32 is_stmt 1 view -0
 2306               		.cfi_startproc
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2307               		.loc 1 1187 32 is_stmt 0 view .LVU499
 2308 0000 CF93      		push r28
 2309               	.LCFI39:
 2310               		.cfi_def_cfa_offset 3
 2311               		.cfi_offset 28, -2
 2312               	/* prologue: function */
 2313               	/* frame size = 0 */
 2314               	/* stack size = 1 */
 2315               	.L__stack_usage = 1
 2316 0002 C82F      		mov r28,r24
1188:quantum/quantum.c ****     send_nibble(nibble);
 2317               		.loc 1 1188 5 is_stmt 1 view .LVU500
 2318               	.LVL207:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2319               		.loc 1 1189 5 view .LVU501
 2320 0004 8295      		swap r24
 2321               	.LVL208:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2322               		.loc 1 1189 5 is_stmt 0 view .LVU502
 2323 0006 8F70      		andi r24,lo8(15)
 2324 0008 0E94 0000 		call send_nibble
 2325               	.LVL209:
1190:quantum/quantum.c **** }
 2326               		.loc 1 1190 5 is_stmt 1 view .LVU503
 2327 000c 8C2F      		mov r24,r28
 2328 000e 8F70      		andi r24,lo8(15)
 2329               	/* epilogue start */
1191:quantum/quantum.c **** 
 2330               		.loc 1 1191 1 is_stmt 0 view .LVU504
 2331 0010 CF91      		pop r28
 2332               	.LVL210:
1190:quantum/quantum.c **** }
 2333               		.loc 1 1190 5 view .LVU505
 2334 0012 0C94 0000 		jmp send_nibble
 2335               	.LVL211:
 2336               		.cfi_endproc
 2337               	.LFE55:
 2339               		.section	.text.send_word,"ax",@progbits
 2340               	.global	send_word
 2342               	send_word:
 2343               	.LVL212:
 2344               	.LFB54:
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2345               		.loc 1 1181 33 is_stmt 1 view -0
 2346               		.cfi_startproc
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2347               		.loc 1 1181 33 is_stmt 0 view .LVU507
 2348 0000 CF93      		push r28
 2349               	.LCFI40:
 2350               		.cfi_def_cfa_offset 3
 2351               		.cfi_offset 28, -2
 2352               	/* prologue: function */
 2353               	/* frame size = 0 */
 2354               	/* stack size = 1 */
 2355               	.L__stack_usage = 1
 2356 0002 C82F      		mov r28,r24
1182:quantum/quantum.c ****     send_byte(byte);
 2357               		.loc 1 1182 5 is_stmt 1 view .LVU508
 2358               	.LVL213:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2359               		.loc 1 1183 5 view .LVU509
 2360 0004 892F      		mov r24,r25
 2361               	.LVL214:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2362               		.loc 1 1183 5 is_stmt 0 view .LVU510
 2363 0006 0E94 0000 		call send_byte
 2364               	.LVL215:
1184:quantum/quantum.c **** }
 2365               		.loc 1 1184 5 is_stmt 1 view .LVU511
 2366 000a 8C2F      		mov r24,r28
 2367               	/* epilogue start */
1185:quantum/quantum.c **** 
 2368               		.loc 1 1185 1 is_stmt 0 view .LVU512
 2369 000c CF91      		pop r28
1184:quantum/quantum.c **** }
 2370               		.loc 1 1184 5 view .LVU513
 2371 000e 0C94 0000 		jmp send_byte
 2372               	.LVL216:
 2373               		.cfi_endproc
 2374               	.LFE54:
 2376               		.section	.text.send_dword,"ax",@progbits
 2377               	.global	send_dword
 2379               	send_dword:
 2380               	.LVL217:
 2381               	.LFB53:
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2382               		.loc 1 1175 34 is_stmt 1 view -0
 2383               		.cfi_startproc
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2384               		.loc 1 1175 34 is_stmt 0 view .LVU515
 2385 0000 CF92      		push r12
 2386               	.LCFI41:
 2387               		.cfi_def_cfa_offset 3
 2388               		.cfi_offset 12, -2
 2389 0002 DF92      		push r13
 2390               	.LCFI42:
 2391               		.cfi_def_cfa_offset 4
 2392               		.cfi_offset 13, -3
 2393 0004 EF92      		push r14
 2394               	.LCFI43:
 2395               		.cfi_def_cfa_offset 5
 2396               		.cfi_offset 14, -4
 2397 0006 FF92      		push r15
 2398               	.LCFI44:
 2399               		.cfi_def_cfa_offset 6
 2400               		.cfi_offset 15, -5
 2401               	/* prologue: function */
 2402               	/* frame size = 0 */
 2403               	/* stack size = 4 */
 2404               	.L__stack_usage = 4
 2405 0008 6B01      		movw r12,r22
1176:quantum/quantum.c ****     send_word(word);
 2406               		.loc 1 1176 5 is_stmt 1 view .LVU516
1177:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2407               		.loc 1 1177 5 view .LVU517
 2408 000a 0E94 0000 		call send_word
 2409               	.LVL218:
1178:quantum/quantum.c **** }
 2410               		.loc 1 1178 5 view .LVU518
 2411 000e C601      		movw r24,r12
 2412               	/* epilogue start */
1179:quantum/quantum.c **** 
 2413               		.loc 1 1179 1 is_stmt 0 view .LVU519
 2414 0010 FF90      		pop r15
 2415 0012 EF90      		pop r14
 2416 0014 DF90      		pop r13
 2417 0016 CF90      		pop r12
1178:quantum/quantum.c **** }
 2418               		.loc 1 1178 5 view .LVU520
 2419 0018 0C94 0000 		jmp send_word
 2420               	.LVL219:
 2421               		.cfi_endproc
 2422               	.LFE53:
 2424               		.section	.text.hex_to_keycode,"ax",@progbits
 2425               		.weak	hex_to_keycode
 2427               	hex_to_keycode:
 2428               	.LVL220:
 2429               	.LFB57:
1209:quantum/quantum.c **** 
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** __attribute__((weak))
1212:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1213:quantum/quantum.c **** {
 2430               		.loc 1 1213 1 is_stmt 1 view -0
 2431               		.cfi_startproc
 2432               	/* prologue: function */
 2433               	/* frame size = 0 */
 2434               	/* stack size = 0 */
 2435               	.L__stack_usage = 0
1214:quantum/quantum.c ****   hex = hex & 0xF;
 2436               		.loc 1 1214 3 view .LVU522
 2437               		.loc 1 1214 7 is_stmt 0 view .LVU523
 2438 0000 282F      		mov r18,r24
 2439 0002 2F70      		andi r18,lo8(15)
 2440               	.LVL221:
1215:quantum/quantum.c ****   if (hex == 0x0) {
 2441               		.loc 1 1215 3 is_stmt 1 view .LVU524
 2442               		.loc 1 1215 6 is_stmt 0 view .LVU525
 2443 0004 01F0      		breq .L190
1216:quantum/quantum.c ****     return KC_0;
1217:quantum/quantum.c ****   } else if (hex < 0xA) {
 2444               		.loc 1 1217 10 is_stmt 1 view .LVU526
 2445 0006 822F      		mov r24,r18
 2446 0008 90E0      		ldi r25,0
 2447               		.loc 1 1217 13 is_stmt 0 view .LVU527
 2448 000a 2A30      		cpi r18,lo8(10)
 2449 000c 00F4      		brsh .L189
1218:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2450               		.loc 1 1218 5 is_stmt 1 view .LVU528
 2451               		.loc 1 1218 17 is_stmt 0 view .LVU529
 2452 000e 4D96      		adiw r24,29
 2453 0010 0895      		ret
 2454               	.L189:
1219:quantum/quantum.c ****   } else {
1220:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2455               		.loc 1 1220 5 is_stmt 1 view .LVU530
 2456               		.loc 1 1220 17 is_stmt 0 view .LVU531
 2457 0012 0697      		sbiw r24,6
 2458 0014 0895      		ret
 2459               	.L190:
1216:quantum/quantum.c ****   } else if (hex < 0xA) {
 2460               		.loc 1 1216 12 view .LVU532
 2461 0016 87E2      		ldi r24,lo8(39)
 2462 0018 90E0      		ldi r25,0
 2463               	/* epilogue start */
1221:quantum/quantum.c ****   }
1222:quantum/quantum.c **** }
 2464               		.loc 1 1222 1 view .LVU533
 2465 001a 0895      		ret
 2466               		.cfi_endproc
 2467               	.LFE57:
 2469               		.section	.text.api_send_unicode,"ax",@progbits
 2470               	.global	api_send_unicode
 2472               	api_send_unicode:
 2473               	.LVL222:
 2474               	.LFB58:
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2475               		.loc 1 1224 41 is_stmt 1 view -0
 2476               		.cfi_startproc
 2477               	/* prologue: function */
 2478               	/* frame size = 0 */
 2479               	/* stack size = 0 */
 2480               	.L__stack_usage = 0
1225:quantum/quantum.c **** #ifdef API_ENABLE
1226:quantum/quantum.c ****     uint8_t chunk[4];
1227:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1228:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1229:quantum/quantum.c **** #endif
1230:quantum/quantum.c **** }
 2481               		.loc 1 1230 1 view .LVU535
 2482               	/* epilogue start */
 2483 0000 0895      		ret
 2484               		.cfi_endproc
 2485               	.LFE58:
 2487               		.section	.text.led_set_user,"ax",@progbits
 2488               		.weak	led_set_user
 2490               	led_set_user:
 2491               	.LVL223:
 2492               	.LFB59:
1231:quantum/quantum.c **** 
1232:quantum/quantum.c **** __attribute__ ((weak))
1233:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2493               		.loc 1 1233 36 view -0
 2494               		.cfi_startproc
 2495               	/* prologue: function */
 2496               	/* frame size = 0 */
 2497               	/* stack size = 0 */
 2498               	.L__stack_usage = 0
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** }
 2499               		.loc 1 1235 1 view .LVU537
 2500               	/* epilogue start */
 2501 0000 0895      		ret
 2502               		.cfi_endproc
 2503               	.LFE59:
 2505               		.set	led_set_user.localalias.1,led_set_user
 2506               		.section	.text.backlight_set,"ax",@progbits
 2507               		.weak	backlight_set
 2509               	backlight_set:
 2510               	.LFB94:
 2511               		.cfi_startproc
 2512               	/* prologue: function */
 2513               	/* frame size = 0 */
 2514               	/* stack size = 0 */
 2515               	.L__stack_usage = 0
 2516               	/* epilogue start */
 2517 0000 0895      		ret
 2518               		.cfi_endproc
 2519               	.LFE94:
 2521               		.section	.text.led_set_kb,"ax",@progbits
 2522               		.weak	led_set_kb
 2524               	led_set_kb:
 2525               	.LVL224:
 2526               	.LFB60:
1236:quantum/quantum.c **** 
1237:quantum/quantum.c **** __attribute__ ((weak))
1238:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2527               		.loc 1 1238 34 view -0
 2528               		.cfi_startproc
 2529               	/* prologue: function */
 2530               	/* frame size = 0 */
 2531               	/* stack size = 0 */
 2532               	.L__stack_usage = 0
1239:quantum/quantum.c ****     led_set_user(usb_led);
 2533               		.loc 1 1239 5 view .LVU539
 2534 0000 0C94 0000 		jmp led_set_user
 2535               	.LVL225:
 2536               		.loc 1 1239 5 is_stmt 0 view .LVU540
 2537               		.cfi_endproc
 2538               	.LFE60:
 2540               		.section	.text.led_init_ports,"ax",@progbits
 2541               		.weak	led_init_ports
 2543               	led_init_ports:
 2544               	.LFB86:
 2545               		.cfi_startproc
 2546               	/* prologue: function */
 2547               	/* frame size = 0 */
 2548               	/* stack size = 0 */
 2549               	.L__stack_usage = 0
 2550               	/* epilogue start */
 2551 0000 0895      		ret
 2552               		.cfi_endproc
 2553               	.LFE86:
 2555               		.section	.text.led_set,"ax",@progbits
 2556               		.weak	led_set
 2558               	led_set:
 2559               	.LVL226:
 2560               	.LFB62:
1240:quantum/quantum.c **** }
1241:quantum/quantum.c **** 
1242:quantum/quantum.c **** __attribute__ ((weak))
1243:quantum/quantum.c **** void led_init_ports(void)
1244:quantum/quantum.c **** {
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** }
1247:quantum/quantum.c **** 
1248:quantum/quantum.c **** __attribute__ ((weak))
1249:quantum/quantum.c **** void led_set(uint8_t usb_led)
1250:quantum/quantum.c **** {
 2561               		.loc 1 1250 1 is_stmt 1 view -0
 2562               		.cfi_startproc
 2563               	/* prologue: function */
 2564               	/* frame size = 0 */
 2565               	/* stack size = 0 */
 2566               	.L__stack_usage = 0
1251:quantum/quantum.c **** 
1252:quantum/quantum.c ****   // Example LED Code
1253:quantum/quantum.c ****   //
1254:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1255:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1256:quantum/quantum.c ****     // {
1257:quantum/quantum.c ****     //     // Output high.
1258:quantum/quantum.c ****     //     DDRE |= (1<<6);
1259:quantum/quantum.c ****     //     PORTE |= (1<<6);
1260:quantum/quantum.c ****     // }
1261:quantum/quantum.c ****     // else
1262:quantum/quantum.c ****     // {
1263:quantum/quantum.c ****     //     // Output low.
1264:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1265:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1266:quantum/quantum.c ****     // }
1267:quantum/quantum.c **** 
1268:quantum/quantum.c ****   led_set_kb(usb_led);
 2567               		.loc 1 1268 3 view .LVU542
 2568 0000 0C94 0000 		jmp led_set_kb
 2569               	.LVL227:
 2570               		.loc 1 1268 3 is_stmt 0 view .LVU543
 2571               		.cfi_endproc
 2572               	.LFE62:
 2574               		.section	.text.startup_user,"ax",@progbits
 2575               		.weak	startup_user
 2577               	startup_user:
 2578               	.LFB88:
 2579               		.cfi_startproc
 2580               	/* prologue: function */
 2581               	/* frame size = 0 */
 2582               	/* stack size = 0 */
 2583               	.L__stack_usage = 0
 2584               	/* epilogue start */
 2585 0000 0895      		ret
 2586               		.cfi_endproc
 2587               	.LFE88:
 2589               		.section	.text.shutdown_user,"ax",@progbits
 2590               		.weak	shutdown_user
 2592               	shutdown_user:
 2593               	.LFB90:
 2594               		.cfi_startproc
 2595               	/* prologue: function */
 2596               	/* frame size = 0 */
 2597               	/* stack size = 0 */
 2598               	.L__stack_usage = 0
 2599               	/* epilogue start */
 2600 0000 0895      		ret
 2601               		.cfi_endproc
 2602               	.LFE90:
 2604               	.global	rgb_matrix_task_counter
 2605               		.section	.bss.rgb_matrix_task_counter,"aw",@nobits
 2608               	rgb_matrix_task_counter:
 2609 0000 00        		.zero	1
 2610               		.weak	ascii_to_keycode_lut
 2611               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2614               	ascii_to_keycode_lut:
 2615 0000 00        		.byte	0
 2616 0001 00        		.byte	0
 2617 0002 00        		.byte	0
 2618 0003 00        		.byte	0
 2619 0004 00        		.byte	0
 2620 0005 00        		.byte	0
 2621 0006 00        		.byte	0
 2622 0007 00        		.byte	0
 2623 0008 2A        		.byte	42
 2624 0009 2B        		.byte	43
 2625 000a 28        		.byte	40
 2626 000b 00        		.byte	0
 2627 000c 00        		.byte	0
 2628 000d 00        		.byte	0
 2629 000e 00        		.byte	0
 2630 000f 00        		.byte	0
 2631 0010 00        		.byte	0
 2632 0011 00        		.byte	0
 2633 0012 00        		.byte	0
 2634 0013 00        		.byte	0
 2635 0014 00        		.byte	0
 2636 0015 00        		.byte	0
 2637 0016 00        		.byte	0
 2638 0017 00        		.byte	0
 2639 0018 00        		.byte	0
 2640 0019 00        		.byte	0
 2641 001a 00        		.byte	0
 2642 001b 29        		.byte	41
 2643 001c 00        		.byte	0
 2644 001d 00        		.byte	0
 2645 001e 00        		.byte	0
 2646 001f 00        		.byte	0
 2647 0020 2C        		.byte	44
 2648 0021 1E        		.byte	30
 2649 0022 34        		.byte	52
 2650 0023 20        		.byte	32
 2651 0024 21        		.byte	33
 2652 0025 22        		.byte	34
 2653 0026 24        		.byte	36
 2654 0027 34        		.byte	52
 2655 0028 26        		.byte	38
 2656 0029 27        		.byte	39
 2657 002a 25        		.byte	37
 2658 002b 2E        		.byte	46
 2659 002c 36        		.byte	54
 2660 002d 2D        		.byte	45
 2661 002e 37        		.byte	55
 2662 002f 38        		.byte	56
 2663 0030 27        		.byte	39
 2664 0031 1E        		.byte	30
 2665 0032 1F        		.byte	31
 2666 0033 20        		.byte	32
 2667 0034 21        		.byte	33
 2668 0035 22        		.byte	34
 2669 0036 23        		.byte	35
 2670 0037 24        		.byte	36
 2671 0038 25        		.byte	37
 2672 0039 26        		.byte	38
 2673 003a 33        		.byte	51
 2674 003b 33        		.byte	51
 2675 003c 36        		.byte	54
 2676 003d 2E        		.byte	46
 2677 003e 37        		.byte	55
 2678 003f 38        		.byte	56
 2679 0040 1F        		.byte	31
 2680 0041 04        		.byte	4
 2681 0042 05        		.byte	5
 2682 0043 06        		.byte	6
 2683 0044 07        		.byte	7
 2684 0045 08        		.byte	8
 2685 0046 09        		.byte	9
 2686 0047 0A        		.byte	10
 2687 0048 0B        		.byte	11
 2688 0049 0C        		.byte	12
 2689 004a 0D        		.byte	13
 2690 004b 0E        		.byte	14
 2691 004c 0F        		.byte	15
 2692 004d 10        		.byte	16
 2693 004e 11        		.byte	17
 2694 004f 12        		.byte	18
 2695 0050 13        		.byte	19
 2696 0051 14        		.byte	20
 2697 0052 15        		.byte	21
 2698 0053 16        		.byte	22
 2699 0054 17        		.byte	23
 2700 0055 18        		.byte	24
 2701 0056 19        		.byte	25
 2702 0057 1A        		.byte	26
 2703 0058 1B        		.byte	27
 2704 0059 1C        		.byte	28
 2705 005a 1D        		.byte	29
 2706 005b 2F        		.byte	47
 2707 005c 31        		.byte	49
 2708 005d 30        		.byte	48
 2709 005e 23        		.byte	35
 2710 005f 2D        		.byte	45
 2711 0060 35        		.byte	53
 2712 0061 04        		.byte	4
 2713 0062 05        		.byte	5
 2714 0063 06        		.byte	6
 2715 0064 07        		.byte	7
 2716 0065 08        		.byte	8
 2717 0066 09        		.byte	9
 2718 0067 0A        		.byte	10
 2719 0068 0B        		.byte	11
 2720 0069 0C        		.byte	12
 2721 006a 0D        		.byte	13
 2722 006b 0E        		.byte	14
 2723 006c 0F        		.byte	15
 2724 006d 10        		.byte	16
 2725 006e 11        		.byte	17
 2726 006f 12        		.byte	18
 2727 0070 13        		.byte	19
 2728 0071 14        		.byte	20
 2729 0072 15        		.byte	21
 2730 0073 16        		.byte	22
 2731 0074 17        		.byte	23
 2732 0075 18        		.byte	24
 2733 0076 19        		.byte	25
 2734 0077 1A        		.byte	26
 2735 0078 1B        		.byte	27
 2736 0079 1C        		.byte	28
 2737 007a 1D        		.byte	29
 2738 007b 2F        		.byte	47
 2739 007c 31        		.byte	49
 2740 007d 30        		.byte	48
 2741 007e 35        		.byte	53
 2742 007f 4C        		.byte	76
 2743               		.weak	ascii_to_shift_lut
 2744               		.section	.progmem.data.ascii_to_shift_lut,"a"
 2747               	ascii_to_shift_lut:
 2748 0000 00        		.byte	0
 2749 0001 00        		.byte	0
 2750 0002 00        		.byte	0
 2751 0003 00        		.byte	0
 2752 0004 00        		.byte	0
 2753 0005 00        		.byte	0
 2754 0006 00        		.byte	0
 2755 0007 00        		.byte	0
 2756 0008 00        		.byte	0
 2757 0009 00        		.byte	0
 2758 000a 00        		.byte	0
 2759 000b 00        		.byte	0
 2760 000c 00        		.byte	0
 2761 000d 00        		.byte	0
 2762 000e 00        		.byte	0
 2763 000f 00        		.byte	0
 2764 0010 00        		.byte	0
 2765 0011 00        		.byte	0
 2766 0012 00        		.byte	0
 2767 0013 00        		.byte	0
 2768 0014 00        		.byte	0
 2769 0015 00        		.byte	0
 2770 0016 00        		.byte	0
 2771 0017 00        		.byte	0
 2772 0018 00        		.byte	0
 2773 0019 00        		.byte	0
 2774 001a 00        		.byte	0
 2775 001b 00        		.byte	0
 2776 001c 00        		.byte	0
 2777 001d 00        		.byte	0
 2778 001e 00        		.byte	0
 2779 001f 00        		.byte	0
 2780 0020 00        		.byte	0
 2781 0021 01        		.byte	1
 2782 0022 01        		.byte	1
 2783 0023 01        		.byte	1
 2784 0024 01        		.byte	1
 2785 0025 01        		.byte	1
 2786 0026 01        		.byte	1
 2787 0027 00        		.byte	0
 2788 0028 01        		.byte	1
 2789 0029 01        		.byte	1
 2790 002a 01        		.byte	1
 2791 002b 01        		.byte	1
 2792 002c 00        		.byte	0
 2793 002d 00        		.byte	0
 2794 002e 00        		.byte	0
 2795 002f 00        		.byte	0
 2796 0030 00        		.byte	0
 2797 0031 00        		.byte	0
 2798 0032 00        		.byte	0
 2799 0033 00        		.byte	0
 2800 0034 00        		.byte	0
 2801 0035 00        		.byte	0
 2802 0036 00        		.byte	0
 2803 0037 00        		.byte	0
 2804 0038 00        		.byte	0
 2805 0039 00        		.byte	0
 2806 003a 01        		.byte	1
 2807 003b 00        		.byte	0
 2808 003c 01        		.byte	1
 2809 003d 00        		.byte	0
 2810 003e 01        		.byte	1
 2811 003f 01        		.byte	1
 2812 0040 01        		.byte	1
 2813 0041 01        		.byte	1
 2814 0042 01        		.byte	1
 2815 0043 01        		.byte	1
 2816 0044 01        		.byte	1
 2817 0045 01        		.byte	1
 2818 0046 01        		.byte	1
 2819 0047 01        		.byte	1
 2820 0048 01        		.byte	1
 2821 0049 01        		.byte	1
 2822 004a 01        		.byte	1
 2823 004b 01        		.byte	1
 2824 004c 01        		.byte	1
 2825 004d 01        		.byte	1
 2826 004e 01        		.byte	1
 2827 004f 01        		.byte	1
 2828 0050 01        		.byte	1
 2829 0051 01        		.byte	1
 2830 0052 01        		.byte	1
 2831 0053 01        		.byte	1
 2832 0054 01        		.byte	1
 2833 0055 01        		.byte	1
 2834 0056 01        		.byte	1
 2835 0057 01        		.byte	1
 2836 0058 01        		.byte	1
 2837 0059 01        		.byte	1
 2838 005a 01        		.byte	1
 2839 005b 00        		.byte	0
 2840 005c 00        		.byte	0
 2841 005d 00        		.byte	0
 2842 005e 01        		.byte	1
 2843 005f 01        		.byte	1
 2844 0060 00        		.byte	0
 2845 0061 00        		.byte	0
 2846 0062 00        		.byte	0
 2847 0063 00        		.byte	0
 2848 0064 00        		.byte	0
 2849 0065 00        		.byte	0
 2850 0066 00        		.byte	0
 2851 0067 00        		.byte	0
 2852 0068 00        		.byte	0
 2853 0069 00        		.byte	0
 2854 006a 00        		.byte	0
 2855 006b 00        		.byte	0
 2856 006c 00        		.byte	0
 2857 006d 00        		.byte	0
 2858 006e 00        		.byte	0
 2859 006f 00        		.byte	0
 2860 0070 00        		.byte	0
 2861 0071 00        		.byte	0
 2862 0072 00        		.byte	0
 2863 0073 00        		.byte	0
 2864 0074 00        		.byte	0
 2865 0075 00        		.byte	0
 2866 0076 00        		.byte	0
 2867 0077 00        		.byte	0
 2868 0078 00        		.byte	0
 2869 0079 00        		.byte	0
 2870 007a 00        		.byte	0
 2871 007b 01        		.byte	1
 2872 007c 01        		.byte	1
 2873 007d 01        		.byte	1
 2874 007e 01        		.byte	1
 2875 007f 00        		.byte	0
 2876               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 2879               	grave_esc_was_shifted:
 2880 0000 00        		.zero	1
 2881               		.section	.bss.scs_timer,"aw",@nobits
 2884               	scs_timer:
 2885 0000 0000 0000 		.zero	4
 2886               		.section	.bss.shift_interrupted,"aw",@nobits
 2889               	shift_interrupted:
 2890 0000 0000      		.zero	2
 2891               		.text
 2892               	.Letext0:
 2893               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 2894               		.file 5 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/lib/avr-gcc/8/gcc/avr/8.3.0/include/stddef.h"
 2895               		.file 6 "./tmk_core/common/keyboard.h"
 2896               		.file 7 "./tmk_core/common/action.h"
 2897               		.file 8 "./tmk_core/common/report.h"
 2898               		.file 9 "./tmk_core/common/host.h"
 2899               		.file 10 "./tmk_core/common/debug.h"
 2900               		.file 11 "quantum/keycode_config.h"
 2901               		.file 12 "./tmk_core/common/keycode.h"
 2902               		.file 13 "quantum/quantum_keycodes.h"
 2903               		.file 14 "quantum/keymap.h"
 2904               		.file 15 "./tmk_core/common/action_layer.h"
 2905               		.file 16 "./tmk_core/common/timer.h"
 2906               		.file 17 "./tmk_core/common/action_util.h"
 2907               		.file 18 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdlib.h"
 2908               		.file 19 "./quantum/process_keycode/process_tap_dance.h"
 2909               		.file 20 "quantum/quantum.h"
 2910               		.file 21 "./tmk_core/protocol/lufa/outputselect.h"
 2911               		.file 22 "./tmk_core/common/backlight.h"
 2912               		.file 23 "./tmk_core/common/eeconfig.h"
 2913               		.file 24 "./quantum/process_keycode/process_leader.h"
 2914               		.file 25 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:177    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:190    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:222    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:236    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:255    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:270    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:285    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:300    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:315    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:330    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:345    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:360    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:375    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:390    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:405    .text.register_code16:0000000000000000 register_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:463    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:521    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:543    .text.process_record_user:0000000000000000 process_record_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:565    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:585    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:636    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2889   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2884   .bss.scs_timer:0000000000000000 scs_timer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2879   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1238   .text.send_char:0000000000000000 send_char
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2614   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2747   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1339   .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1515   .text.send_string:0000000000000000 send_string
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1535   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1763   .text.send_string_P:0000000000000000 send_string_P
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1783   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:1835   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2008   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2050   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2185   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2202   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2222   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2237   .text.send_nibble:0000000000000000 send_nibble
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2302   .text.send_byte:0000000000000000 send_byte
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2342   .text.send_word:0000000000000000 send_word
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2379   .text.send_dword:0000000000000000 send_dword
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2427   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2472   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2490   .text.led_set_user:0000000000000000 led_set_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2490   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2509   .text.backlight_set:0000000000000000 backlight_set
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2524   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2543   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2558   .text.led_set:0000000000000000 led_set
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2577   .text.startup_user:0000000000000000 startup_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2592   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccUB1k4v.s:2608   .bss.rgb_matrix_task_counter:0000000000000000 rgb_matrix_task_counter

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
preprocess_tap_dance
process_tap_dance
process_leader
timer_read
debug_config
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
register_mods
timer_elapsed
unregister_mods
get_mods
add_key
del_key
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
