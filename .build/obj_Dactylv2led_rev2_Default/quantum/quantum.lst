   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LVL0:
  14               	.LFB17:
  15               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  19:quantum/quantum.c **** #include "outputselect.h"
  20:quantum/quantum.c **** #endif
  21:quantum/quantum.c **** 
  22:quantum/quantum.c **** #ifndef TAPPING_TERM
  23:quantum/quantum.c **** #define TAPPING_TERM 200
  24:quantum/quantum.c **** #endif
  25:quantum/quantum.c **** 
  26:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  27:quantum/quantum.c **** #define BREATHING_PERIOD 6
  28:quantum/quantum.c **** #endif
  29:quantum/quantum.c **** 
  30:quantum/quantum.c **** #include "backlight.h"
  31:quantum/quantum.c **** extern backlight_config_t backlight_config;
  32:quantum/quantum.c **** 
  33:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  34:quantum/quantum.c **** #include "fauxclicky.h"
  35:quantum/quantum.c **** #endif
  36:quantum/quantum.c **** 
  37:quantum/quantum.c **** #ifdef API_ENABLE
  38:quantum/quantum.c **** #include "api.h"
  39:quantum/quantum.c **** #endif
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** #ifdef MIDI_ENABLE
  42:quantum/quantum.c **** #include "process_midi.h"
  43:quantum/quantum.c **** #endif
  44:quantum/quantum.c **** 
  45:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  46:quantum/quantum.c ****   #ifndef GOODBYE_SONG
  47:quantum/quantum.c ****     #define GOODBYE_SONG SONG(GOODBYE_SOUND)
  48:quantum/quantum.c ****   #endif
  49:quantum/quantum.c ****   #ifndef AG_NORM_SONG
  50:quantum/quantum.c ****     #define AG_NORM_SONG SONG(AG_NORM_SOUND)
  51:quantum/quantum.c ****   #endif
  52:quantum/quantum.c ****   #ifndef AG_SWAP_SONG
  53:quantum/quantum.c ****     #define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  54:quantum/quantum.c ****   #endif
  55:quantum/quantum.c ****   float goodbye_song[][2] = GOODBYE_SONG;
  56:quantum/quantum.c ****   float ag_norm_song[][2] = AG_NORM_SONG;
  57:quantum/quantum.c ****   float ag_swap_song[][2] = AG_SWAP_SONG;
  58:quantum/quantum.c ****   #ifdef DEFAULT_LAYER_SONGS
  59:quantum/quantum.c ****     float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  60:quantum/quantum.c ****   #endif
  61:quantum/quantum.c **** #endif
  62:quantum/quantum.c **** 
  63:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  16               		.loc 1 63 60 view -0
  17               		.cfi_startproc
  18               		.loc 1 63 60 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27 0004 CF93      		push r28
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 28, -4
  31 0006 DF93      		push r29
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 29, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 8C01      		movw r16,r24
  40 000a EB01      		movw r28,r22
  64:quantum/quantum.c ****   switch (code) {
  41               		.loc 1 64 3 is_stmt 1 view .LVU2
  42 000c 9A95      		dec r25
  43               	.LVL1:
  44               		.loc 1 64 3 is_stmt 0 view .LVU3
  45 000e 8115      		cp r24,__zero_reg__
  46 0010 9F41      		sbci r25,31
  47 0012 00F4      		brsh .L1
  65:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  66:quantum/quantum.c ****     break;
  48               		.loc 1 66 5 is_stmt 1 view .LVU4
  67:quantum/quantum.c ****   default:
  68:quantum/quantum.c ****     return;
  69:quantum/quantum.c ****   }
  70:quantum/quantum.c **** 
  71:quantum/quantum.c ****   if (code & QK_LCTL)
  49               		.loc 1 71 3 view .LVU5
  50               		.loc 1 71 6 is_stmt 0 view .LVU6
  51 0014 10FF      		sbrs r17,0
  52 0016 00C0      		rjmp .L4
  72:quantum/quantum.c ****     f(KC_LCTL);
  53               		.loc 1 72 5 is_stmt 1 view .LVU7
  54 0018 80EE      		ldi r24,lo8(-32)
  55 001a FB01      		movw r30,r22
  56 001c 0995      		icall
  57               	.LVL2:
  58               	.L4:
  73:quantum/quantum.c ****   if (code & QK_LSFT)
  59               		.loc 1 73 3 view .LVU8
  60               		.loc 1 73 6 is_stmt 0 view .LVU9
  61 001e 11FF      		sbrs r17,1
  62 0020 00C0      		rjmp .L5
  74:quantum/quantum.c ****     f(KC_LSFT);
  63               		.loc 1 74 5 is_stmt 1 view .LVU10
  64 0022 81EE      		ldi r24,lo8(-31)
  65 0024 FE01      		movw r30,r28
  66 0026 0995      		icall
  67               	.LVL3:
  68               	.L5:
  75:quantum/quantum.c ****   if (code & QK_LALT)
  69               		.loc 1 75 3 view .LVU11
  70               		.loc 1 75 6 is_stmt 0 view .LVU12
  71 0028 12FF      		sbrs r17,2
  72 002a 00C0      		rjmp .L6
  76:quantum/quantum.c ****     f(KC_LALT);
  73               		.loc 1 76 5 is_stmt 1 view .LVU13
  74 002c 82EE      		ldi r24,lo8(-30)
  75 002e FE01      		movw r30,r28
  76 0030 0995      		icall
  77               	.LVL4:
  78               	.L6:
  77:quantum/quantum.c ****   if (code & QK_LGUI)
  79               		.loc 1 77 3 view .LVU14
  80               		.loc 1 77 6 is_stmt 0 view .LVU15
  81 0032 13FF      		sbrs r17,3
  82 0034 00C0      		rjmp .L7
  78:quantum/quantum.c ****     f(KC_LGUI);
  83               		.loc 1 78 5 is_stmt 1 view .LVU16
  84 0036 83EE      		ldi r24,lo8(-29)
  85 0038 FE01      		movw r30,r28
  86 003a 0995      		icall
  87               	.LVL5:
  88               	.L7:
  79:quantum/quantum.c **** 
  80:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  89               		.loc 1 80 3 view .LVU17
  90               		.loc 1 80 6 is_stmt 0 view .LVU18
  91 003c 0115      		cp r16,__zero_reg__
  92 003e 1041      		sbci r17,16
  93 0040 00F0      		brlo .L1
  81:quantum/quantum.c **** 
  82:quantum/quantum.c ****   if (code & QK_RCTL)
  94               		.loc 1 82 3 is_stmt 1 view .LVU19
  83:quantum/quantum.c ****     f(KC_RCTL);
  95               		.loc 1 83 5 view .LVU20
  96 0042 84EE      		ldi r24,lo8(-28)
  97 0044 FE01      		movw r30,r28
  98 0046 0995      		icall
  99               	.LVL6:
  84:quantum/quantum.c ****   if (code & QK_RSFT)
 100               		.loc 1 84 3 view .LVU21
  85:quantum/quantum.c ****     f(KC_RSFT);
 101               		.loc 1 85 5 view .LVU22
 102 0048 85EE      		ldi r24,lo8(-27)
 103 004a FE01      		movw r30,r28
 104 004c 0995      		icall
 105               	.LVL7:
  86:quantum/quantum.c ****   if (code & QK_RALT)
 106               		.loc 1 86 3 view .LVU23
  87:quantum/quantum.c ****     f(KC_RALT);
 107               		.loc 1 87 5 view .LVU24
 108 004e 86EE      		ldi r24,lo8(-26)
 109 0050 FE01      		movw r30,r28
 110 0052 0995      		icall
 111               	.LVL8:
  88:quantum/quantum.c ****   if (code & QK_RGUI)
 112               		.loc 1 88 3 view .LVU25
  89:quantum/quantum.c ****     f(KC_RGUI);
 113               		.loc 1 89 5 view .LVU26
 114 0054 87EE      		ldi r24,lo8(-25)
 115 0056 FE01      		movw r30,r28
 116               	/* epilogue start */
  90:quantum/quantum.c **** }
 117               		.loc 1 90 1 is_stmt 0 view .LVU27
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL9:
 121               		.loc 1 90 1 view .LVU28
 122 005c 1F91      		pop r17
 123 005e 0F91      		pop r16
 124               	.LVL10:
  89:quantum/quantum.c ****     f(KC_RGUI);
 125               		.loc 1 89 5 view .LVU29
 126 0060 0994      		ijmp
 127               	.LVL11:
 128               	.L1:
 129               	/* epilogue start */
 130               		.loc 1 90 1 view .LVU30
 131 0062 DF91      		pop r29
 132 0064 CF91      		pop r28
 133               	.LVL12:
 134               		.loc 1 90 1 view .LVU31
 135 0066 1F91      		pop r17
 136 0068 0F91      		pop r16
 137               	.LVL13:
 138               		.loc 1 90 1 view .LVU32
 139 006a 0895      		ret
 140               		.cfi_endproc
 141               	.LFE17:
 143               		.section	.text.qk_register_weak_mods,"ax",@progbits
 145               	qk_register_weak_mods:
 146               	.LVL14:
 147               	.LFB18:
  91:quantum/quantum.c **** 
  92:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 148               		.loc 1 92 54 is_stmt 1 view -0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  93:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 154               		.loc 1 93 5 view .LVU34
 155               		.loc 1 93 19 is_stmt 0 view .LVU35
 156 0000 8770      		andi r24,lo8(7)
 157               	.LVL15:
 158               		.loc 1 93 5 view .LVU36
 159 0002 91E0      		ldi r25,lo8(1)
 160 0004 00C0      		rjmp 2f
 161               		1:
 162 0006 990F      		lsl r25
 163               		2:
 164 0008 8A95      		dec r24
 165 000a 02F4      		brpl 1b
 166 000c 892F      		mov r24,r25
 167 000e 0E94 0000 		call add_weak_mods
 168               	.LVL16:
  94:quantum/quantum.c ****     send_keyboard_report();
 169               		.loc 1 94 5 is_stmt 1 view .LVU37
 170 0012 0C94 0000 		jmp send_keyboard_report
 171               	.LVL17:
 172               		.cfi_endproc
 173               	.LFE18:
 175               		.section	.text.qk_register_mods,"ax",@progbits
 177               	qk_register_mods:
 178               	.LFB63:
 179               		.cfi_startproc
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184 0000 0C94 0000 		jmp qk_register_weak_mods
 185               		.cfi_endproc
 186               	.LFE63:
 188               		.section	.text.qk_unregister_weak_mods,"ax",@progbits
 190               	qk_unregister_weak_mods:
 191               	.LVL18:
 192               	.LFB19:
  95:quantum/quantum.c **** }
  96:quantum/quantum.c **** 
  97:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 193               		.loc 1 97 56 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
  98:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 199               		.loc 1 98 5 view .LVU39
 200               		.loc 1 98 19 is_stmt 0 view .LVU40
 201 0000 8770      		andi r24,lo8(7)
 202               	.LVL19:
 203               		.loc 1 98 5 view .LVU41
 204 0002 91E0      		ldi r25,lo8(1)
 205 0004 00C0      		rjmp 2f
 206               		1:
 207 0006 990F      		lsl r25
 208               		2:
 209 0008 8A95      		dec r24
 210 000a 02F4      		brpl 1b
 211 000c 892F      		mov r24,r25
 212 000e 0E94 0000 		call del_weak_mods
 213               	.LVL20:
  99:quantum/quantum.c ****     send_keyboard_report();
 214               		.loc 1 99 5 is_stmt 1 view .LVU42
 215 0012 0C94 0000 		jmp send_keyboard_report
 216               	.LVL21:
 217               		.cfi_endproc
 218               	.LFE19:
 220               		.section	.text.qk_unregister_mods,"ax",@progbits
 222               	qk_unregister_mods:
 223               	.LFB65:
 224               		.cfi_startproc
 225               	/* prologue: function */
 226               	/* frame size = 0 */
 227               	/* stack size = 0 */
 228               	.L__stack_usage = 0
 229 0000 0C94 0000 		jmp qk_unregister_weak_mods
 230               		.cfi_endproc
 231               	.LFE65:
 233               		.section	.text.register_code16,"ax",@progbits
 234               	.global	register_code16
 236               	register_code16:
 237               	.LVL22:
 238               	.LFB22:
 100:quantum/quantum.c **** }
 101:quantum/quantum.c **** 
 102:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 103:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 104:quantum/quantum.c ****     send_keyboard_report();
 105:quantum/quantum.c **** }
 106:quantum/quantum.c **** 
 107:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 108:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 109:quantum/quantum.c ****     send_keyboard_report();
 110:quantum/quantum.c **** }
 111:quantum/quantum.c **** 
 112:quantum/quantum.c **** void register_code16 (uint16_t code) {
 239               		.loc 1 112 38 view -0
 240               		.cfi_startproc
 241               		.loc 1 112 38 is_stmt 0 view .LVU44
 242 0000 CF93      		push r28
 243               	.LCFI4:
 244               		.cfi_def_cfa_offset 3
 245               		.cfi_offset 28, -2
 246 0002 DF93      		push r29
 247               	.LCFI5:
 248               		.cfi_def_cfa_offset 4
 249               		.cfi_offset 29, -3
 250               	/* prologue: function */
 251               	/* frame size = 0 */
 252               	/* stack size = 2 */
 253               	.L__stack_usage = 2
 254 0004 EC01      		movw r28,r24
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 255               		.loc 1 113 3 is_stmt 1 view .LVU45
 256               		.loc 1 113 7 is_stmt 0 view .LVU46
 257 0006 805E      		subi r24,-32
 258 0008 9109      		sbc r25,__zero_reg__
 259               	.LVL23:
 260               		.loc 1 113 6 view .LVU47
 261 000a 0897      		sbiw r24,8
 262 000c 00F0      		brlo .L26
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 115:quantum/quantum.c ****   } else {
 116:quantum/quantum.c ****       do_code16 (code, qk_register_weak_mods);
 263               		.loc 1 116 7 discriminator 1 view .LVU48
 264 000e 60E0      		ldi r22,lo8(gs(qk_register_weak_mods))
 265 0010 70E0      		ldi r23,hi8(gs(qk_register_weak_mods))
 113:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 266               		.loc 1 113 20 discriminator 1 view .LVU49
 267 0012 2097      		sbiw r28,0
 268 0014 01F4      		brne .L29
 269               	.L26:
 114:quantum/quantum.c ****       do_code16 (code, qk_register_mods);
 270               		.loc 1 114 7 is_stmt 1 view .LVU50
 271 0016 60E0      		ldi r22,lo8(gs(qk_register_mods))
 272 0018 70E0      		ldi r23,hi8(gs(qk_register_mods))
 273               	.L29:
 274               		.loc 1 116 7 is_stmt 0 view .LVU51
 275 001a CE01      		movw r24,r28
 276 001c 0E94 0000 		call do_code16
 277               	.LVL24:
 117:quantum/quantum.c ****   }
 118:quantum/quantum.c ****   register_code (code);
 278               		.loc 1 118 3 is_stmt 1 view .LVU52
 279 0020 8C2F      		mov r24,r28
 280               	/* epilogue start */
 119:quantum/quantum.c **** }
 281               		.loc 1 119 1 is_stmt 0 view .LVU53
 282 0022 DF91      		pop r29
 283 0024 CF91      		pop r28
 284               	.LVL25:
 118:quantum/quantum.c **** }
 285               		.loc 1 118 3 view .LVU54
 286 0026 0C94 0000 		jmp register_code
 287               	.LVL26:
 288               		.cfi_endproc
 289               	.LFE22:
 291               		.section	.text.unregister_code16,"ax",@progbits
 292               	.global	unregister_code16
 294               	unregister_code16:
 295               	.LVL27:
 296               	.LFB23:
 120:quantum/quantum.c **** 
 121:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 297               		.loc 1 121 40 is_stmt 1 view -0
 298               		.cfi_startproc
 299               		.loc 1 121 40 is_stmt 0 view .LVU56
 300 0000 CF93      		push r28
 301               	.LCFI6:
 302               		.cfi_def_cfa_offset 3
 303               		.cfi_offset 28, -2
 304 0002 DF93      		push r29
 305               	.LCFI7:
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 29, -3
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 2 */
 311               	.L__stack_usage = 2
 312 0004 EC01      		movw r28,r24
 122:quantum/quantum.c ****   unregister_code (code);
 313               		.loc 1 122 3 is_stmt 1 view .LVU57
 314 0006 0E94 0000 		call unregister_code
 315               	.LVL28:
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 316               		.loc 1 123 3 view .LVU58
 317               		.loc 1 123 7 is_stmt 0 view .LVU59
 318 000a CE01      		movw r24,r28
 319 000c 805E      		subi r24,-32
 320 000e 9109      		sbc r25,__zero_reg__
 321               		.loc 1 123 6 view .LVU60
 322 0010 0897      		sbiw r24,8
 323 0012 00F0      		brlo .L31
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 125:quantum/quantum.c ****   } else {
 126:quantum/quantum.c ****       do_code16 (code, qk_unregister_weak_mods);
 324               		.loc 1 126 7 discriminator 1 view .LVU61
 325 0014 60E0      		ldi r22,lo8(gs(qk_unregister_weak_mods))
 326 0016 70E0      		ldi r23,hi8(gs(qk_unregister_weak_mods))
 123:quantum/quantum.c ****   if (IS_MOD(code) || code == KC_NO) {
 327               		.loc 1 123 20 discriminator 1 view .LVU62
 328 0018 2097      		sbiw r28,0
 329 001a 01F4      		brne .L33
 330               	.L31:
 124:quantum/quantum.c ****       do_code16 (code, qk_unregister_mods);
 331               		.loc 1 124 7 is_stmt 1 view .LVU63
 332 001c 60E0      		ldi r22,lo8(gs(qk_unregister_mods))
 333 001e 70E0      		ldi r23,hi8(gs(qk_unregister_mods))
 334               	.L33:
 335               		.loc 1 126 7 is_stmt 0 view .LVU64
 336 0020 CE01      		movw r24,r28
 337               	/* epilogue start */
 127:quantum/quantum.c ****   }
 128:quantum/quantum.c **** }
 338               		.loc 1 128 1 view .LVU65
 339 0022 DF91      		pop r29
 340 0024 CF91      		pop r28
 341               	.LVL29:
 126:quantum/quantum.c ****   }
 342               		.loc 1 126 7 view .LVU66
 343 0026 0C94 0000 		jmp do_code16
 344               	.LVL30:
 126:quantum/quantum.c ****   }
 345               		.loc 1 126 7 view .LVU67
 346               		.cfi_endproc
 347               	.LFE23:
 349               		.section	.text.process_action_kb,"ax",@progbits
 350               		.weak	process_action_kb
 352               	process_action_kb:
 353               	.LVL31:
 354               	.LFB24:
 129:quantum/quantum.c **** 
 130:quantum/quantum.c **** __attribute__ ((weak))
 131:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 355               		.loc 1 131 45 is_stmt 1 view -0
 356               		.cfi_startproc
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 0 */
 360               	.L__stack_usage = 0
 132:quantum/quantum.c ****   return true;
 361               		.loc 1 132 3 view .LVU69
 133:quantum/quantum.c **** }
 362               		.loc 1 133 1 is_stmt 0 view .LVU70
 363 0000 81E0      		ldi r24,lo8(1)
 364               	.LVL32:
 365               	/* epilogue start */
 366               		.loc 1 133 1 view .LVU71
 367 0002 0895      		ret
 368               		.cfi_endproc
 369               	.LFE24:
 371               		.section	.text.process_record_user,"ax",@progbits
 372               		.weak	process_record_user
 374               	process_record_user:
 375               	.LVL33:
 376               	.LFB26:
 134:quantum/quantum.c **** 
 135:quantum/quantum.c **** __attribute__ ((weak))
 136:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
 137:quantum/quantum.c ****   return process_record_user(keycode, record);
 138:quantum/quantum.c **** }
 139:quantum/quantum.c **** 
 140:quantum/quantum.c **** __attribute__ ((weak))
 141:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 377               		.loc 1 141 65 is_stmt 1 view -0
 378               		.cfi_startproc
 379               	/* prologue: function */
 380               	/* frame size = 0 */
 381               	/* stack size = 0 */
 382               	.L__stack_usage = 0
 142:quantum/quantum.c ****   return true;
 383               		.loc 1 142 3 view .LVU73
 143:quantum/quantum.c **** }
 384               		.loc 1 143 1 is_stmt 0 view .LVU74
 385 0000 81E0      		ldi r24,lo8(1)
 386               	.LVL34:
 387               	/* epilogue start */
 388               		.loc 1 143 1 view .LVU75
 389 0002 0895      		ret
 390               		.cfi_endproc
 391               	.LFE26:
 393               		.section	.text.process_record_kb,"ax",@progbits
 394               		.weak	process_record_kb
 396               	process_record_kb:
 397               	.LVL35:
 398               	.LFB25:
 136:quantum/quantum.c ****   return process_record_user(keycode, record);
 399               		.loc 1 136 63 is_stmt 1 view -0
 400               		.cfi_startproc
 401               	/* prologue: function */
 402               	/* frame size = 0 */
 403               	/* stack size = 0 */
 404               	.L__stack_usage = 0
 137:quantum/quantum.c **** }
 405               		.loc 1 137 3 view .LVU77
 137:quantum/quantum.c **** }
 406               		.loc 1 137 10 is_stmt 0 view .LVU78
 407 0000 0C94 0000 		jmp process_record_user
 408               	.LVL36:
 137:quantum/quantum.c **** }
 409               		.loc 1 137 10 view .LVU79
 410               		.cfi_endproc
 411               	.LFE25:
 413               		.section	.text.reset_keyboard,"ax",@progbits
 414               	.global	reset_keyboard
 416               	reset_keyboard:
 417               	.LFB27:
 144:quantum/quantum.c **** 
 145:quantum/quantum.c **** void reset_keyboard(void) {
 418               		.loc 1 145 27 is_stmt 1 view -0
 419               		.cfi_startproc
 420               	/* prologue: function */
 421               	/* frame size = 0 */
 422               	/* stack size = 0 */
 423               	.L__stack_usage = 0
 146:quantum/quantum.c ****   clear_keyboard();
 424               		.loc 1 146 3 view .LVU81
 425 0000 0E94 0000 		call clear_keyboard
 426               	.LVL37:
 147:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 148:quantum/quantum.c ****   process_midi_all_notes_off();
 149:quantum/quantum.c **** #endif
 150:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 151:quantum/quantum.c ****   music_all_notes_off();
 152:quantum/quantum.c ****   uint16_t timer_start = timer_read();
 153:quantum/quantum.c ****   PLAY_SONG(goodbye_song);
 154:quantum/quantum.c ****   shutdown_user();
 155:quantum/quantum.c ****   while(timer_elapsed(timer_start) < 250)
 156:quantum/quantum.c ****     wait_ms(1);
 157:quantum/quantum.c ****   stop_all_notes();
 158:quantum/quantum.c **** #else
 159:quantum/quantum.c ****   wait_ms(250);
 427               		.loc 1 159 3 view .LVU82
 428               	.LBB22:
 429               	.LBI22:
 430               		.file 2 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 431               		.loc 2 166 1 view .LVU83
 432               	.LBB23:
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 433               		.loc 2 168 2 view .LVU84
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 434               		.loc 2 172 2 view .LVU85
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 435               		.loc 2 173 2 view .LVU86
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 436               		.loc 2 174 2 view .LVU87
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 437               		.loc 2 184 3 view .LVU88
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 438               		.loc 2 187 2 view .LVU89
 439 0004 2FEF      		ldi r18,lo8(799999)
 440 0006 84E3      		ldi r24,hi8(799999)
 441 0008 9CE0      		ldi r25,hlo8(799999)
 442 000a 2150      	1:	subi r18,1
 443 000c 8040      		sbci r24,0
 444 000e 9040      		sbci r25,0
 445 0010 01F4      		brne 1b
 446 0012 00C0      		rjmp .
 447 0014 0000      		nop
 448               	.LVL38:
 449               		.loc 2 187 2 is_stmt 0 view .LVU90
 450               	.LBE23:
 451               	.LBE22:
 160:quantum/quantum.c **** #endif
 161:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 162:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 163:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
 452               		.loc 1 163 3 is_stmt 1 view .LVU91
 453               		.loc 1 163 23 is_stmt 0 view .LVU92
 454 0016 87E7      		ldi r24,lo8(119)
 455 0018 97E7      		ldi r25,lo8(119)
 456 001a 9093 0108 		sts 2048+1,r25
 457 001e 8093 0008 		sts 2048,r24
 164:quantum/quantum.c **** #endif
 165:quantum/quantum.c ****   bootloader_jump();
 458               		.loc 1 165 3 is_stmt 1 view .LVU93
 459 0022 0C94 0000 		jmp bootloader_jump
 460               	.LVL39:
 461               		.cfi_endproc
 462               	.LFE27:
 464               		.section	.text.process_record_quantum,"ax",@progbits
 465               	.global	process_record_quantum
 467               	process_record_quantum:
 468               	.LVL40:
 469               	.LFB28:
 166:quantum/quantum.c **** }
 167:quantum/quantum.c **** 
 168:quantum/quantum.c **** // Shift / paren setup
 169:quantum/quantum.c **** 
 170:quantum/quantum.c **** #ifndef LSPO_KEY
 171:quantum/quantum.c ****   #define LSPO_KEY KC_9
 172:quantum/quantum.c **** #endif
 173:quantum/quantum.c **** #ifndef RSPC_KEY
 174:quantum/quantum.c ****   #define RSPC_KEY KC_0
 175:quantum/quantum.c **** #endif
 176:quantum/quantum.c **** 
 177:quantum/quantum.c **** // Shift / Enter setup
 178:quantum/quantum.c **** #ifndef SFTENT_KEY
 179:quantum/quantum.c ****   #define SFTENT_KEY KC_ENT
 180:quantum/quantum.c **** #endif
 181:quantum/quantum.c **** 
 182:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
 183:quantum/quantum.c **** static uint16_t scs_timer[2] = {0, 0};
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 470               		.loc 1 190 50 view -0
 471               		.cfi_startproc
 472               		.loc 1 190 50 is_stmt 0 view .LVU95
 473 0000 0F93      		push r16
 474               	.LCFI8:
 475               		.cfi_def_cfa_offset 3
 476               		.cfi_offset 16, -2
 477 0002 1F93      		push r17
 478               	.LCFI9:
 479               		.cfi_def_cfa_offset 4
 480               		.cfi_offset 17, -3
 481 0004 CF93      		push r28
 482               	.LCFI10:
 483               		.cfi_def_cfa_offset 5
 484               		.cfi_offset 28, -4
 485 0006 DF93      		push r29
 486               	.LCFI11:
 487               		.cfi_def_cfa_offset 6
 488               		.cfi_offset 29, -5
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 4 */
 492               	.L__stack_usage = 4
 493 0008 8C01      		movw r16,r24
 191:quantum/quantum.c **** 
 192:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
 193:quantum/quantum.c ****   keypos_t key = record->event.key;
 494               		.loc 1 193 3 is_stmt 1 view .LVU96
 495               		.loc 1 193 12 is_stmt 0 view .LVU97
 496 000a FC01      		movw r30,r24
 497 000c C081      		ld r28,Z
 498 000e D181      		ldd r29,Z+1
 499               	.LVL41:
 194:quantum/quantum.c ****   uint16_t keycode;
 500               		.loc 1 194 3 is_stmt 1 view .LVU98
 195:quantum/quantum.c **** 
 196:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
 197:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 198:quantum/quantum.c ****     if (!disable_action_cache) {
 199:quantum/quantum.c ****       uint8_t layer;
 200:quantum/quantum.c **** 
 201:quantum/quantum.c ****       if (record->event.pressed) {
 202:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 203:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 204:quantum/quantum.c ****       } else {
 205:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 206:quantum/quantum.c ****       }
 207:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 208:quantum/quantum.c ****     } else
 209:quantum/quantum.c ****   #endif
 210:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 501               		.loc 1 210 5 view .LVU99
 502               		.loc 1 210 37 is_stmt 0 view .LVU100
 503 0010 CE01      		movw r24,r28
 504               	.LVL42:
 505               		.loc 1 210 37 view .LVU101
 506 0012 0E94 0000 		call layer_switch_get_layer
 507               	.LVL43:
 508               		.loc 1 210 15 view .LVU102
 509 0016 BE01      		movw r22,r28
 510 0018 0E94 0000 		call keymap_key_to_keycode
 511               	.LVL44:
 512 001c EC01      		movw r28,r24
 513               	.LVL45:
 211:quantum/quantum.c **** 
 212:quantum/quantum.c ****     // This is how you use actions here
 213:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 214:quantum/quantum.c ****     //   action_t action;
 215:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 216:quantum/quantum.c ****     //   process_action(record, action);
 217:quantum/quantum.c ****     //   return false;
 218:quantum/quantum.c ****     // }
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 221:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 514               		.loc 1 221 5 is_stmt 1 view .LVU103
 515 001e B801      		movw r22,r16
 516 0020 0E94 0000 		call preprocess_tap_dance
 517               	.LVL46:
 222:quantum/quantum.c ****   #endif
 223:quantum/quantum.c **** 
 224:quantum/quantum.c ****   if (!(
 518               		.loc 1 224 3 view .LVU104
 225:quantum/quantum.c ****   #if defined(KEY_LOCK_ENABLE)
 226:quantum/quantum.c ****     // Must run first to be able to mask key_up events.
 227:quantum/quantum.c ****     process_key_lock(&keycode, record) &&
 228:quantum/quantum.c ****   #endif
 229:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 230:quantum/quantum.c ****       process_clicky(keycode, record) &&
 231:quantum/quantum.c ****   #endif //AUDIO_CLICKY
 232:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 519               		.loc 1 232 5 is_stmt 0 view .LVU105
 520 0024 B801      		movw r22,r16
 521 0026 CE01      		movw r24,r28
 522 0028 0E94 0000 		call process_record_kb
 523               	.LVL47:
 233:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 234:quantum/quantum.c ****     process_rgb_matrix(keycode, record) &&
 235:quantum/quantum.c ****   #endif
 236:quantum/quantum.c ****   #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 237:quantum/quantum.c ****     process_midi(keycode, record) &&
 238:quantum/quantum.c ****   #endif
 239:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 240:quantum/quantum.c ****     process_audio(keycode, record) &&
 241:quantum/quantum.c ****   #endif
 242:quantum/quantum.c ****   #ifdef STENO_ENABLE
 243:quantum/quantum.c ****     process_steno(keycode, record) &&
 244:quantum/quantum.c ****   #endif
 245:quantum/quantum.c ****   #if ( defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSI
 246:quantum/quantum.c ****     process_music(keycode, record) &&
 247:quantum/quantum.c ****   #endif
 248:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 249:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 524               		.loc 1 249 40 view .LVU106
 525 002c 8823      		tst r24
 526 002e 01F4      		brne .+2
 527 0030 00C0      		rjmp .L38
 528               		.loc 1 249 5 discriminator 2 view .LVU107
 529 0032 B801      		movw r22,r16
 530 0034 CE01      		movw r24,r28
 531 0036 0E94 0000 		call process_tap_dance
 532               	.LVL48:
 232:quantum/quantum.c ****   #if defined(RGB_MATRIX_ENABLE) && defined(RGB_MATRIX_KEYPRESSES)
 533               		.loc 1 232 40 discriminator 2 view .LVU108
 534 003a 8823      		tst r24
 535 003c 01F4      		brne .+2
 536 003e 00C0      		rjmp .L38
 250:quantum/quantum.c ****   #endif
 251:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 252:quantum/quantum.c ****     process_leader(keycode, record) &&
 537               		.loc 1 252 5 discriminator 3 view .LVU109
 538 0040 B801      		movw r22,r16
 539 0042 CE01      		movw r24,r28
 540 0044 0E94 0000 		call process_leader
 541               	.LVL49:
 249:quantum/quantum.c ****   #endif
 542               		.loc 1 249 40 discriminator 3 view .LVU110
 543 0048 8823      		tst r24
 544 004a 01F4      		brne .+2
 545 004c 00C0      		rjmp .L38
 253:quantum/quantum.c ****   #endif
 254:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 255:quantum/quantum.c ****     process_chording(keycode, record) &&
 256:quantum/quantum.c ****   #endif
 257:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 258:quantum/quantum.c ****     process_combo(keycode, record) &&
 259:quantum/quantum.c ****   #endif
 260:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 261:quantum/quantum.c ****     process_unicode(keycode, record) &&
 262:quantum/quantum.c ****   #endif
 263:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 264:quantum/quantum.c ****     process_ucis(keycode, record) &&
 265:quantum/quantum.c ****   #endif
 266:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 267:quantum/quantum.c ****     process_printer(keycode, record) &&
 268:quantum/quantum.c ****   #endif
 269:quantum/quantum.c ****   #ifdef AUTO_SHIFT_ENABLE
 270:quantum/quantum.c ****     process_auto_shift(keycode, record) &&
 271:quantum/quantum.c ****   #endif
 272:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 273:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 274:quantum/quantum.c ****   #endif
 275:quantum/quantum.c ****   #ifdef TERMINAL_ENABLE
 276:quantum/quantum.c ****     process_terminal(keycode, record) &&
 277:quantum/quantum.c ****   #endif
 278:quantum/quantum.c ****       true)) {
 279:quantum/quantum.c ****     return false;
 280:quantum/quantum.c ****   }
 281:quantum/quantum.c **** 
 282:quantum/quantum.c ****   // Shift / paren setup
 283:quantum/quantum.c **** 
 284:quantum/quantum.c ****   switch(keycode) {
 546               		.loc 1 284 3 is_stmt 1 view .LVU111
 547 004e C93C      		cpi r28,-55
 548 0050 FCE5      		ldi r31,92
 549 0052 DF07      		cpc r29,r31
 550 0054 01F4      		brne .+2
 551 0056 00C0      		rjmp .L42
 552 0058 00F0      		brlo .+2
 553 005a 00C0      		rjmp .L43
 554 005c C13C      		cpi r28,-63
 555 005e 9CE5      		ldi r25,92
 556 0060 D907      		cpc r29,r25
 557 0062 01F4      		brne .+2
 558 0064 00C0      		rjmp .L44
 559 0066 00F4      		brsh .L45
 560 0068 C531      		cpi r28,21
 561 006a FCE5      		ldi r31,92
 562 006c DF07      		cpc r29,r31
 563 006e 00F4      		brsh .L46
 564 0070 C230      		cpi r28,2
 565 0072 8CE5      		ldi r24,92
 566 0074 D807      		cpc r29,r24
 567 0076 00F0      		brlo .+2
 568 0078 00C0      		rjmp .L47
 569 007a C115      		cp r28,__zero_reg__
 570 007c 9CE5      		ldi r25,92
 571 007e D907      		cpc r29,r25
 572 0080 01F4      		brne .+2
 573 0082 00C0      		rjmp .L48
 574 0084 C130      		cpi r28,1
 575 0086 DC45      		sbci r29,92
 576 0088 01F4      		brne .+2
 577 008a 00C0      		rjmp .L49
 578               	.L50:
 285:quantum/quantum.c ****     case RESET:
 286:quantum/quantum.c ****       if (record->event.pressed) {
 287:quantum/quantum.c ****         reset_keyboard();
 288:quantum/quantum.c ****       }
 289:quantum/quantum.c ****     return false;
 290:quantum/quantum.c ****     case DEBUG:
 291:quantum/quantum.c ****       if (record->event.pressed) {
 292:quantum/quantum.c ****           debug_enable = true;
 293:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 294:quantum/quantum.c ****       }
 295:quantum/quantum.c ****     return false;
 296:quantum/quantum.c ****   #ifdef FAUXCLICKY_ENABLE
 297:quantum/quantum.c ****   case FC_TOG:
 298:quantum/quantum.c ****     if (record->event.pressed) {
 299:quantum/quantum.c ****       FAUXCLICKY_TOGGLE;
 300:quantum/quantum.c ****     }
 301:quantum/quantum.c ****     return false;
 302:quantum/quantum.c ****   case FC_ON:
 303:quantum/quantum.c ****     if (record->event.pressed) {
 304:quantum/quantum.c ****       FAUXCLICKY_ON;
 305:quantum/quantum.c ****     }
 306:quantum/quantum.c ****     return false;
 307:quantum/quantum.c ****   case FC_OFF:
 308:quantum/quantum.c ****     if (record->event.pressed) {
 309:quantum/quantum.c ****       FAUXCLICKY_OFF;
 310:quantum/quantum.c ****     }
 311:quantum/quantum.c ****     return false;
 312:quantum/quantum.c ****   #endif
 313:quantum/quantum.c ****   #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 314:quantum/quantum.c ****   case RGB_TOG:
 315:quantum/quantum.c ****     if (record->event.pressed) {
 316:quantum/quantum.c ****       rgblight_toggle();
 317:quantum/quantum.c ****     }
 318:quantum/quantum.c ****     return false;
 319:quantum/quantum.c ****   case RGB_MODE_FORWARD:
 320:quantum/quantum.c ****     if (record->event.pressed) {
 321:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 322:quantum/quantum.c ****       if(shifted) {
 323:quantum/quantum.c ****         rgblight_step_reverse();
 324:quantum/quantum.c ****       }
 325:quantum/quantum.c ****       else {
 326:quantum/quantum.c ****         rgblight_step();
 327:quantum/quantum.c ****       }
 328:quantum/quantum.c ****     }
 329:quantum/quantum.c ****     return false;
 330:quantum/quantum.c ****   case RGB_MODE_REVERSE:
 331:quantum/quantum.c ****     if (record->event.pressed) {
 332:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 333:quantum/quantum.c ****       if(shifted) {
 334:quantum/quantum.c ****         rgblight_step();
 335:quantum/quantum.c ****       }
 336:quantum/quantum.c ****       else {
 337:quantum/quantum.c ****         rgblight_step_reverse();
 338:quantum/quantum.c ****       }
 339:quantum/quantum.c ****     }
 340:quantum/quantum.c ****     return false;
 341:quantum/quantum.c ****   case RGB_HUI:
 342:quantum/quantum.c ****     if (record->event.pressed) {
 343:quantum/quantum.c ****       rgblight_increase_hue();
 344:quantum/quantum.c ****     }
 345:quantum/quantum.c ****     return false;
 346:quantum/quantum.c ****   case RGB_HUD:
 347:quantum/quantum.c ****     if (record->event.pressed) {
 348:quantum/quantum.c ****       rgblight_decrease_hue();
 349:quantum/quantum.c ****     }
 350:quantum/quantum.c ****     return false;
 351:quantum/quantum.c ****   case RGB_SAI:
 352:quantum/quantum.c ****     if (record->event.pressed) {
 353:quantum/quantum.c ****       rgblight_increase_sat();
 354:quantum/quantum.c ****     }
 355:quantum/quantum.c ****     return false;
 356:quantum/quantum.c ****   case RGB_SAD:
 357:quantum/quantum.c ****     if (record->event.pressed) {
 358:quantum/quantum.c ****       rgblight_decrease_sat();
 359:quantum/quantum.c ****     }
 360:quantum/quantum.c ****     return false;
 361:quantum/quantum.c ****   case RGB_VAI:
 362:quantum/quantum.c ****     if (record->event.pressed) {
 363:quantum/quantum.c ****       rgblight_increase_val();
 364:quantum/quantum.c ****     }
 365:quantum/quantum.c ****     return false;
 366:quantum/quantum.c ****   case RGB_VAD:
 367:quantum/quantum.c ****     if (record->event.pressed) {
 368:quantum/quantum.c ****       rgblight_decrease_val();
 369:quantum/quantum.c ****     }
 370:quantum/quantum.c ****     return false;
 371:quantum/quantum.c ****   case RGB_SPI:
 372:quantum/quantum.c ****     if (record->event.pressed) {
 373:quantum/quantum.c ****       rgblight_increase_speed();
 374:quantum/quantum.c ****     }
 375:quantum/quantum.c ****     return false;
 376:quantum/quantum.c ****   case RGB_SPD:
 377:quantum/quantum.c ****     if (record->event.pressed) {
 378:quantum/quantum.c ****       rgblight_decrease_speed();
 379:quantum/quantum.c ****     }
 380:quantum/quantum.c ****     return false;
 381:quantum/quantum.c ****   case RGB_MODE_PLAIN:
 382:quantum/quantum.c ****     if (record->event.pressed) {
 383:quantum/quantum.c ****       rgblight_mode(1);
 384:quantum/quantum.c ****     }
 385:quantum/quantum.c ****     return false;
 386:quantum/quantum.c ****   case RGB_MODE_BREATHE:
 387:quantum/quantum.c ****     if (record->event.pressed) {
 388:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 389:quantum/quantum.c ****         rgblight_step();
 390:quantum/quantum.c ****       } else {
 391:quantum/quantum.c ****         rgblight_mode(2);
 392:quantum/quantum.c ****       }
 393:quantum/quantum.c ****     }
 394:quantum/quantum.c ****     return false;
 395:quantum/quantum.c ****   case RGB_MODE_RAINBOW:
 396:quantum/quantum.c ****     if (record->event.pressed) {
 397:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 398:quantum/quantum.c ****         rgblight_step();
 399:quantum/quantum.c ****       } else {
 400:quantum/quantum.c ****         rgblight_mode(6);
 401:quantum/quantum.c ****       }
 402:quantum/quantum.c ****     }
 403:quantum/quantum.c ****     return false;
 404:quantum/quantum.c ****   case RGB_MODE_SWIRL:
 405:quantum/quantum.c ****     if (record->event.pressed) {
 406:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 407:quantum/quantum.c ****         rgblight_step();
 408:quantum/quantum.c ****       } else {
 409:quantum/quantum.c ****         rgblight_mode(9);
 410:quantum/quantum.c ****       }
 411:quantum/quantum.c ****     }
 412:quantum/quantum.c ****     return false;
 413:quantum/quantum.c ****   case RGB_MODE_SNAKE:
 414:quantum/quantum.c ****     if (record->event.pressed) {
 415:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 416:quantum/quantum.c ****         rgblight_step();
 417:quantum/quantum.c ****       } else {
 418:quantum/quantum.c ****         rgblight_mode(15);
 419:quantum/quantum.c ****       }
 420:quantum/quantum.c ****     }
 421:quantum/quantum.c ****     return false;
 422:quantum/quantum.c ****   case RGB_MODE_KNIGHT:
 423:quantum/quantum.c ****     if (record->event.pressed) {
 424:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 425:quantum/quantum.c ****         rgblight_step();
 426:quantum/quantum.c ****       } else {
 427:quantum/quantum.c ****         rgblight_mode(21);
 428:quantum/quantum.c ****       }
 429:quantum/quantum.c ****     }
 430:quantum/quantum.c ****     return false;
 431:quantum/quantum.c ****   case RGB_MODE_XMAS:
 432:quantum/quantum.c ****     if (record->event.pressed) {
 433:quantum/quantum.c ****       rgblight_mode(24);
 434:quantum/quantum.c ****     }
 435:quantum/quantum.c ****     return false;
 436:quantum/quantum.c ****   case RGB_MODE_GRADIENT:
 437:quantum/quantum.c ****     if (record->event.pressed) {
 438:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 439:quantum/quantum.c ****         rgblight_step();
 440:quantum/quantum.c ****       } else {
 441:quantum/quantum.c ****         rgblight_mode(25);
 442:quantum/quantum.c ****       }
 443:quantum/quantum.c ****     }
 444:quantum/quantum.c ****     return false;
 445:quantum/quantum.c ****   #endif
 446:quantum/quantum.c ****     #ifdef PROTOCOL_LUFA
 447:quantum/quantum.c ****     case OUT_AUTO:
 448:quantum/quantum.c ****       if (record->event.pressed) {
 449:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 450:quantum/quantum.c ****       }
 451:quantum/quantum.c ****       return false;
 452:quantum/quantum.c ****     case OUT_USB:
 453:quantum/quantum.c ****       if (record->event.pressed) {
 454:quantum/quantum.c ****         set_output(OUTPUT_USB);
 455:quantum/quantum.c ****       }
 456:quantum/quantum.c ****       return false;
 457:quantum/quantum.c ****     #ifdef BLUETOOTH_ENABLE
 458:quantum/quantum.c ****     case OUT_BT:
 459:quantum/quantum.c ****       if (record->event.pressed) {
 460:quantum/quantum.c ****         set_output(OUTPUT_BLUETOOTH);
 461:quantum/quantum.c ****       }
 462:quantum/quantum.c ****       return false;
 463:quantum/quantum.c ****     #endif
 464:quantum/quantum.c ****     #endif
 465:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 466:quantum/quantum.c ****       if (record->event.pressed) {
 467:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 468:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 469:quantum/quantum.c ****             eeconfig_init();
 470:quantum/quantum.c ****         }
 471:quantum/quantum.c ****         /* keymap config */
 472:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 473:quantum/quantum.c ****         switch (keycode)
 474:quantum/quantum.c ****         {
 475:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 476:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 477:quantum/quantum.c ****             break;
 478:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 479:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 480:quantum/quantum.c ****             break;
 481:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 482:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 483:quantum/quantum.c ****             break;
 484:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 485:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 486:quantum/quantum.c ****             break;
 487:quantum/quantum.c ****           case MAGIC_NO_GUI:
 488:quantum/quantum.c ****             keymap_config.no_gui = true;
 489:quantum/quantum.c ****             break;
 490:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 491:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 492:quantum/quantum.c ****             break;
 493:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 494:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 495:quantum/quantum.c ****             break;
 496:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 497:quantum/quantum.c ****             keymap_config.nkro = true;
 498:quantum/quantum.c ****             break;
 499:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 500:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 501:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 502:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 503:quantum/quantum.c ****               PLAY_SONG(ag_swap_song);
 504:quantum/quantum.c ****             #endif
 505:quantum/quantum.c ****             break;
 506:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 507:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 508:quantum/quantum.c ****             break;
 509:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 510:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 511:quantum/quantum.c ****             break;
 512:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 513:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 514:quantum/quantum.c ****             break;
 515:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 516:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 517:quantum/quantum.c ****             break;
 518:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 519:quantum/quantum.c ****             keymap_config.no_gui = false;
 520:quantum/quantum.c ****             break;
 521:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 522:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 523:quantum/quantum.c ****             break;
 524:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 525:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 526:quantum/quantum.c ****             break;
 527:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 528:quantum/quantum.c ****             keymap_config.nkro = false;
 529:quantum/quantum.c ****             break;
 530:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 531:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 532:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 533:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 534:quantum/quantum.c ****               PLAY_SONG(ag_norm_song);
 535:quantum/quantum.c ****             #endif
 536:quantum/quantum.c ****             break;
 537:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 538:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 539:quantum/quantum.c ****             break;
 540:quantum/quantum.c ****           default:
 541:quantum/quantum.c ****             break;
 542:quantum/quantum.c ****         }
 543:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 544:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 545:quantum/quantum.c **** 
 546:quantum/quantum.c ****         return false;
 547:quantum/quantum.c ****       }
 548:quantum/quantum.c ****       break;
 549:quantum/quantum.c ****     case KC_LSPO: {
 550:quantum/quantum.c ****       if (record->event.pressed) {
 551:quantum/quantum.c ****         shift_interrupted[0] = false;
 552:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 553:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 554:quantum/quantum.c ****       }
 555:quantum/quantum.c ****       else {
 556:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 557:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 558:quantum/quantum.c ****             shift_interrupted[0] = true;
 559:quantum/quantum.c ****             shift_interrupted[1] = true;
 560:quantum/quantum.c ****           }
 561:quantum/quantum.c ****         #endif
 562:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer[0]) < TAPPING_TERM) {
 563:quantum/quantum.c ****           register_code(LSPO_KEY);
 564:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 565:quantum/quantum.c ****         }
 566:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 567:quantum/quantum.c ****       }
 568:quantum/quantum.c ****       return false;
 569:quantum/quantum.c ****     }
 570:quantum/quantum.c **** 
 571:quantum/quantum.c ****     case KC_RSPC: {
 572:quantum/quantum.c ****       if (record->event.pressed) {
 573:quantum/quantum.c ****         shift_interrupted[1] = false;
 574:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 575:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 576:quantum/quantum.c ****       }
 577:quantum/quantum.c ****       else {
 578:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 579:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 580:quantum/quantum.c ****             shift_interrupted[0] = true;
 581:quantum/quantum.c ****             shift_interrupted[1] = true;
 582:quantum/quantum.c ****           }
 583:quantum/quantum.c ****         #endif
 584:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 585:quantum/quantum.c ****           register_code(RSPC_KEY);
 586:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 587:quantum/quantum.c ****         }
 588:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 589:quantum/quantum.c ****       }
 590:quantum/quantum.c ****       return false;
 591:quantum/quantum.c ****     }
 592:quantum/quantum.c **** 
 593:quantum/quantum.c ****     case KC_SFTENT: {
 594:quantum/quantum.c ****       if (record->event.pressed) {
 595:quantum/quantum.c ****         shift_interrupted[1] = false;
 596:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 597:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 598:quantum/quantum.c ****       }
 599:quantum/quantum.c ****       else if (!shift_interrupted[1] && timer_elapsed(scs_timer[1]) < TAPPING_TERM) {
 600:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 601:quantum/quantum.c ****         register_code(SFTENT_KEY);
 602:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 603:quantum/quantum.c ****       }
 604:quantum/quantum.c ****       else {
 605:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 606:quantum/quantum.c ****       }
 607:quantum/quantum.c ****       return false;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c **** 
 610:quantum/quantum.c ****     case GRAVE_ESC: {
 611:quantum/quantum.c ****       uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)
 612:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 613:quantum/quantum.c **** 
 614:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 615:quantum/quantum.c ****       // if ALT is pressed, ESC is always sent
 616:quantum/quantum.c ****       // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 617:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 618:quantum/quantum.c ****         shifted = 0;
 619:quantum/quantum.c ****       }
 620:quantum/quantum.c **** #endif
 621:quantum/quantum.c **** 
 622:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 623:quantum/quantum.c ****       // if CTRL is pressed, ESC is always sent
 624:quantum/quantum.c ****       // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 625:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 626:quantum/quantum.c ****         shifted = 0;
 627:quantum/quantum.c ****       }
 628:quantum/quantum.c **** #endif
 629:quantum/quantum.c **** 
 630:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 631:quantum/quantum.c ****       // if GUI is pressed, ESC is always sent
 632:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 633:quantum/quantum.c ****         shifted = 0;
 634:quantum/quantum.c ****       }
 635:quantum/quantum.c **** #endif
 636:quantum/quantum.c **** 
 637:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 638:quantum/quantum.c ****       // if SHIFT is pressed, ESC is always sent
 639:quantum/quantum.c ****       if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 640:quantum/quantum.c ****         shifted = 0;
 641:quantum/quantum.c ****       }
 642:quantum/quantum.c **** #endif
 643:quantum/quantum.c **** 
 644:quantum/quantum.c ****       if (record->event.pressed) {
 645:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 646:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 647:quantum/quantum.c ****       }
 648:quantum/quantum.c ****       else {
 649:quantum/quantum.c ****         del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 650:quantum/quantum.c ****       }
 651:quantum/quantum.c **** 
 652:quantum/quantum.c ****       send_keyboard_report();
 653:quantum/quantum.c ****       return false;
 654:quantum/quantum.c ****     }
 655:quantum/quantum.c **** 
 656:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 657:quantum/quantum.c ****     case BL_BRTG: {
 658:quantum/quantum.c ****       if (record->event.pressed)
 659:quantum/quantum.c ****         breathing_toggle();
 660:quantum/quantum.c ****       return false;
 661:quantum/quantum.c ****     }
 662:quantum/quantum.c **** #endif
 663:quantum/quantum.c **** 
 664:quantum/quantum.c ****     default: {
 665:quantum/quantum.c ****       shift_interrupted[0] = true;
 579               		.loc 1 665 7 view .LVU112
 580               		.loc 1 665 28 is_stmt 0 view .LVU113
 581 008c 81E0      		ldi r24,lo8(1)
 582 008e 8093 0000 		sts shift_interrupted,r24
 666:quantum/quantum.c ****       shift_interrupted[1] = true;
 583               		.loc 1 666 7 is_stmt 1 view .LVU114
 584               		.loc 1 666 28 is_stmt 0 view .LVU115
 585 0092 8093 0000 		sts shift_interrupted+1,r24
 667:quantum/quantum.c ****       break;
 586               		.loc 1 667 7 is_stmt 1 view .LVU116
 587               	.L86:
 668:quantum/quantum.c ****     }
 669:quantum/quantum.c ****   }
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****   return process_action_kb(record);
 588               		.loc 1 671 3 view .LVU117
 589               		.loc 1 671 10 is_stmt 0 view .LVU118
 590 0096 C801      		movw r24,r16
 591               	/* epilogue start */
 672:quantum/quantum.c **** }
 592               		.loc 1 672 1 view .LVU119
 593 0098 DF91      		pop r29
 594 009a CF91      		pop r28
 595               	.LVL50:
 596               		.loc 1 672 1 view .LVU120
 597 009c 1F91      		pop r17
 598 009e 0F91      		pop r16
 599               	.LVL51:
 671:quantum/quantum.c **** }
 600               		.loc 1 671 10 view .LVU121
 601 00a0 0C94 0000 		jmp process_action_kb
 602               	.LVL52:
 603               	.L46:
 284:quantum/quantum.c ****     case RESET:
 604               		.loc 1 284 3 view .LVU122
 605 00a4 C531      		cpi r28,21
 606 00a6 FCE5      		ldi r31,92
 607 00a8 DF07      		cpc r29,r31
 608 00aa 01F4      		brne .+2
 609 00ac 00C0      		rjmp .L51
 610 00ae C03C      		cpi r28,-64
 611 00b0 DC45      		sbci r29,92
 612 00b2 01F4      		brne .L50
 315:quantum/quantum.c ****       rgblight_toggle();
 613               		.loc 1 315 5 is_stmt 1 view .LVU123
 315:quantum/quantum.c ****       rgblight_toggle();
 614               		.loc 1 315 8 is_stmt 0 view .LVU124
 615 00b4 F801      		movw r30,r16
 616 00b6 8281      		ldd r24,Z+2
 617 00b8 8823      		tst r24
 618 00ba 01F4      		brne .+2
 619 00bc 00C0      		rjmp .L38
 316:quantum/quantum.c ****     }
 620               		.loc 1 316 7 is_stmt 1 view .LVU125
 621 00be 0E94 0000 		call rgblight_toggle
 622               	.LVL53:
 623 00c2 00C0      		rjmp .L38
 624               	.L45:
 316:quantum/quantum.c ****     }
 625               		.loc 1 316 7 is_stmt 0 view .LVU126
 626 00c4 F801      		movw r30,r16
 627 00c6 8281      		ldd r24,Z+2
 284:quantum/quantum.c ****     case RESET:
 628               		.loc 1 284 3 view .LVU127
 629 00c8 C53C      		cpi r28,-59
 630 00ca FCE5      		ldi r31,92
 631 00cc DF07      		cpc r29,r31
 632 00ce 01F4      		brne .+2
 633 00d0 00C0      		rjmp .L53
 284:quantum/quantum.c ****     case RESET:
 634               		.loc 1 284 3 view .LVU128
 635 00d2 00F4      		brsh .L54
 636 00d4 C33C      		cpi r28,-61
 637 00d6 ECE5      		ldi r30,92
 638 00d8 DE07      		cpc r29,r30
 639 00da 01F4      		brne .+2
 640 00dc 00C0      		rjmp .L55
 641 00de 00F4      		brsh .+2
 642 00e0 00C0      		rjmp .L206
 347:quantum/quantum.c ****       rgblight_decrease_hue();
 643               		.loc 1 347 5 is_stmt 1 view .LVU129
 347:quantum/quantum.c ****       rgblight_decrease_hue();
 644               		.loc 1 347 8 is_stmt 0 view .LVU130
 645 00e2 8823      		tst r24
 646 00e4 01F4      		brne .+2
 647 00e6 00C0      		rjmp .L38
 348:quantum/quantum.c ****     }
 648               		.loc 1 348 7 is_stmt 1 view .LVU131
 649 00e8 0E94 0000 		call rgblight_decrease_hue
 650               	.LVL54:
 651 00ec 00C0      		rjmp .L38
 652               	.L54:
 284:quantum/quantum.c ****     case RESET:
 653               		.loc 1 284 3 is_stmt 0 view .LVU132
 654 00ee C73C      		cpi r28,-57
 655 00f0 9CE5      		ldi r25,92
 656 00f2 D907      		cpc r29,r25
 657 00f4 01F4      		brne .+2
 658 00f6 00C0      		rjmp .L58
 659 00f8 00F4      		brsh .+2
 660 00fa 00C0      		rjmp .L207
 367:quantum/quantum.c ****       rgblight_decrease_val();
 661               		.loc 1 367 5 is_stmt 1 view .LVU133
 367:quantum/quantum.c ****       rgblight_decrease_val();
 662               		.loc 1 367 8 is_stmt 0 view .LVU134
 663 00fc 8823      		tst r24
 664 00fe 01F4      		brne .+2
 665 0100 00C0      		rjmp .L38
 368:quantum/quantum.c ****     }
 666               		.loc 1 368 7 is_stmt 1 view .LVU135
 667 0102 0E94 0000 		call rgblight_decrease_val
 668               	.LVL55:
 669 0106 00C0      		rjmp .L38
 670               	.L43:
 284:quantum/quantum.c ****     case RESET:
 671               		.loc 1 284 3 is_stmt 0 view .LVU136
 672 0108 C03D      		cpi r28,-48
 673 010a FCE5      		ldi r31,92
 674 010c DF07      		cpc r29,r31
 675 010e 01F4      		brne .+2
 676 0110 00C0      		rjmp .L61
 677 0112 00F4      		brsh .L62
 678 0114 CC3C      		cpi r28,-52
 679 0116 9CE5      		ldi r25,92
 680 0118 D907      		cpc r29,r25
 681 011a 01F4      		brne .+2
 682 011c 00C0      		rjmp .L63
 683 011e 00F4      		brsh .L64
 684 0120 CA3C      		cpi r28,-54
 685 0122 FCE5      		ldi r31,92
 686 0124 DF07      		cpc r29,r31
 687 0126 01F4      		brne .+2
 688 0128 00C0      		rjmp .L65
 689 012a CB3C      		cpi r28,-53
 690 012c DC45      		sbci r29,92
 691 012e 01F0      		breq .+2
 692 0130 00C0      		rjmp .L50
 382:quantum/quantum.c ****       rgblight_mode(1);
 693               		.loc 1 382 5 is_stmt 1 view .LVU137
 382:quantum/quantum.c ****       rgblight_mode(1);
 694               		.loc 1 382 8 is_stmt 0 view .LVU138
 695 0132 F801      		movw r30,r16
 696 0134 8281      		ldd r24,Z+2
 697 0136 8823      		tst r24
 698 0138 01F4      		brne .+2
 699 013a 00C0      		rjmp .L38
 383:quantum/quantum.c ****     }
 700               		.loc 1 383 7 is_stmt 1 view .LVU139
 701 013c 81E0      		ldi r24,lo8(1)
 702               	.L211:
 391:quantum/quantum.c ****       }
 703               		.loc 1 391 9 is_stmt 0 view .LVU140
 704 013e 0E94 0000 		call rgblight_mode
 705               	.LVL56:
 706 0142 00C0      		rjmp .L38
 707               	.L64:
 708 0144 F801      		movw r30,r16
 709 0146 8281      		ldd r24,Z+2
 284:quantum/quantum.c ****     case RESET:
 710               		.loc 1 284 3 view .LVU141
 711 0148 CE3C      		cpi r28,-50
 712 014a FCE5      		ldi r31,92
 713 014c DF07      		cpc r29,r31
 714 014e 01F4      		brne .+2
 715 0150 00C0      		rjmp .L67
 284:quantum/quantum.c ****     case RESET:
 716               		.loc 1 284 3 view .LVU142
 717 0152 00F4      		brsh .+2
 718 0154 00C0      		rjmp .L208
 414:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 719               		.loc 1 414 5 is_stmt 1 view .LVU143
 414:quantum/quantum.c ****       if ((15 <= rgblight_get_mode()) && (rgblight_get_mode() < 20)) {
 720               		.loc 1 414 8 is_stmt 0 view .LVU144
 721 0156 8823      		tst r24
 722 0158 01F4      		brne .+2
 723 015a 00C0      		rjmp .L38
 415:quantum/quantum.c ****         rgblight_step();
 724               		.loc 1 415 7 is_stmt 1 view .LVU145
 415:quantum/quantum.c ****         rgblight_step();
 725               		.loc 1 415 18 is_stmt 0 view .LVU146
 726 015c 0E94 0000 		call rgblight_get_mode
 727               	.LVL57:
 415:quantum/quantum.c ****         rgblight_step();
 728               		.loc 1 415 10 view .LVU147
 729 0160 6F30      		cpi r22,15
 730 0162 7105      		cpc r23,__zero_reg__
 731 0164 8105      		cpc r24,__zero_reg__
 732 0166 9105      		cpc r25,__zero_reg__
 733 0168 00F0      		brlo .L83
 415:quantum/quantum.c ****         rgblight_step();
 734               		.loc 1 415 43 discriminator 1 view .LVU148
 735 016a 0E94 0000 		call rgblight_get_mode
 736               	.LVL58:
 415:quantum/quantum.c ****         rgblight_step();
 737               		.loc 1 415 39 discriminator 1 view .LVU149
 738 016e 6431      		cpi r22,20
 739 0170 7105      		cpc r23,__zero_reg__
 740 0172 8105      		cpc r24,__zero_reg__
 741 0174 9105      		cpc r25,__zero_reg__
 742 0176 00F4      		brsh .+2
 743 0178 00C0      		rjmp .L78
 744               	.L83:
 418:quantum/quantum.c ****       }
 745               		.loc 1 418 9 is_stmt 1 view .LVU150
 746 017a 8FE0      		ldi r24,lo8(15)
 747 017c 00C0      		rjmp .L211
 748               	.L62:
 284:quantum/quantum.c ****     case RESET:
 749               		.loc 1 284 3 is_stmt 0 view .LVU151
 750 017e C43D      		cpi r28,-44
 751 0180 ECE5      		ldi r30,92
 752 0182 DE07      		cpc r29,r30
 753 0184 01F4      		brne .+2
 754 0186 00C0      		rjmp .L70
 755 0188 00F4      		brsh .L71
 756 018a F801      		movw r30,r16
 757 018c 8281      		ldd r24,Z+2
 758 018e C23D      		cpi r28,-46
 759 0190 FCE5      		ldi r31,92
 760 0192 DF07      		cpc r29,r31
 761 0194 01F4      		brne .+2
 762 0196 00C0      		rjmp .L72
 284:quantum/quantum.c ****     case RESET:
 763               		.loc 1 284 3 view .LVU152
 764 0198 00F4      		brsh .+2
 765 019a 00C0      		rjmp .L209
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 766               		.loc 1 550 7 is_stmt 1 view .LVU153
 550:quantum/quantum.c ****         shift_interrupted[0] = false;
 767               		.loc 1 550 10 is_stmt 0 view .LVU154
 768 019c 8823      		tst r24
 769 019e 01F4      		brne .+2
 770 01a0 00C0      		rjmp .L109
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 771               		.loc 1 551 9 is_stmt 1 view .LVU155
 551:quantum/quantum.c ****         scs_timer[0] = timer_read ();
 772               		.loc 1 551 30 is_stmt 0 view .LVU156
 773 01a2 1092 0000 		sts shift_interrupted,__zero_reg__
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 774               		.loc 1 552 9 is_stmt 1 view .LVU157
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 775               		.loc 1 552 24 is_stmt 0 view .LVU158
 776 01a6 0E94 0000 		call timer_read
 777               	.LVL59:
 552:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 778               		.loc 1 552 22 view .LVU159
 779 01aa 9093 0000 		sts scs_timer+1,r25
 780 01ae 8093 0000 		sts scs_timer,r24
 553:quantum/quantum.c ****       }
 781               		.loc 1 553 9 is_stmt 1 view .LVU160
 782 01b2 82E0      		ldi r24,lo8(2)
 783               	.L213:
 575:quantum/quantum.c ****       }
 784               		.loc 1 575 9 is_stmt 0 view .LVU161
 785 01b4 0E94 0000 		call register_mods
 786               	.LVL60:
 787 01b8 00C0      		rjmp .L38
 788               	.L71:
 284:quantum/quantum.c ****     case RESET:
 789               		.loc 1 284 3 view .LVU162
 790 01ba C83D      		cpi r28,-40
 791 01bc ECE5      		ldi r30,92
 792 01be DE07      		cpc r29,r30
 793 01c0 01F4      		brne .+2
 794 01c2 00C0      		rjmp .L75
 795 01c4 C93D      		cpi r28,-39
 796 01c6 FCE5      		ldi r31,92
 797 01c8 DF07      		cpc r29,r31
 798 01ca 01F4      		brne .+2
 799 01cc 00C0      		rjmp .L76
 800 01ce C53D      		cpi r28,-43
 801 01d0 DC45      		sbci r29,92
 802 01d2 01F0      		breq .+2
 803 01d4 00C0      		rjmp .L50
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 804               		.loc 1 594 7 is_stmt 1 view .LVU163
 594:quantum/quantum.c ****         shift_interrupted[1] = false;
 805               		.loc 1 594 10 is_stmt 0 view .LVU164
 806 01d6 F801      		movw r30,r16
 807 01d8 8281      		ldd r24,Z+2
 808 01da 8111      		cpse r24,__zero_reg__
 809 01dc 00C0      		rjmp .L117
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 810               		.loc 1 599 12 is_stmt 1 view .LVU165
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 811               		.loc 1 599 34 is_stmt 0 view .LVU166
 812 01de 8091 0000 		lds r24,shift_interrupted+1
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 813               		.loc 1 599 15 view .LVU167
 814 01e2 8111      		cpse r24,__zero_reg__
 815 01e4 00C0      		rjmp .L115
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 816               		.loc 1 599 41 discriminator 1 view .LVU168
 817 01e6 8091 0000 		lds r24,scs_timer+2
 818 01ea 9091 0000 		lds r25,scs_timer+2+1
 819 01ee 0E94 0000 		call timer_elapsed
 820               	.LVL61:
 599:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 821               		.loc 1 599 38 discriminator 1 view .LVU169
 822 01f2 8639      		cpi r24,-106
 823 01f4 9105      		cpc r25,__zero_reg__
 824 01f6 00F0      		brlo .+2
 825 01f8 00C0      		rjmp .L115
 600:quantum/quantum.c ****         register_code(SFTENT_KEY);
 826               		.loc 1 600 9 is_stmt 1 view .LVU170
 827 01fa 80E2      		ldi r24,lo8(32)
 828 01fc 0E94 0000 		call unregister_mods
 829               	.LVL62:
 601:quantum/quantum.c ****         unregister_code(SFTENT_KEY);
 830               		.loc 1 601 9 view .LVU171
 831 0200 88E2      		ldi r24,lo8(40)
 832 0202 0E94 0000 		call register_code
 833               	.LVL63:
 602:quantum/quantum.c ****       }
 834               		.loc 1 602 9 view .LVU172
 835 0206 88E2      		ldi r24,lo8(40)
 836 0208 0E94 0000 		call unregister_code
 837               	.LVL64:
 838 020c 00C0      		rjmp .L38
 839               	.L48:
 286:quantum/quantum.c ****         reset_keyboard();
 840               		.loc 1 286 7 view .LVU173
 286:quantum/quantum.c ****         reset_keyboard();
 841               		.loc 1 286 10 is_stmt 0 view .LVU174
 842 020e F801      		movw r30,r16
 843 0210 8281      		ldd r24,Z+2
 844 0212 8111      		cpse r24,__zero_reg__
 287:quantum/quantum.c ****       }
 845               		.loc 1 287 9 is_stmt 1 view .LVU175
 846 0214 0E94 0000 		call reset_keyboard
 847               	.LVL65:
 848               	.L38:
 849               		.loc 1 672 1 is_stmt 0 view .LVU176
 850 0218 80E0      		ldi r24,0
 851               	/* epilogue start */
 852 021a DF91      		pop r29
 853 021c CF91      		pop r28
 854               	.LVL66:
 855               		.loc 1 672 1 view .LVU177
 856 021e 1F91      		pop r17
 857 0220 0F91      		pop r16
 858               	.LVL67:
 859               		.loc 1 672 1 view .LVU178
 860 0222 0895      		ret
 861               	.LVL68:
 862               	.L49:
 291:quantum/quantum.c ****           debug_enable = true;
 863               		.loc 1 291 7 is_stmt 1 view .LVU179
 291:quantum/quantum.c ****           debug_enable = true;
 864               		.loc 1 291 10 is_stmt 0 view .LVU180
 865 0224 F801      		movw r30,r16
 866 0226 8281      		ldd r24,Z+2
 867 0228 8823      		tst r24
 868 022a 01F0      		breq .L38
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 869               		.loc 1 292 11 is_stmt 1 view .LVU181
 292:quantum/quantum.c ****           print("DEBUG: enabled.\n");
 870               		.loc 1 292 24 is_stmt 0 view .LVU182
 871 022c 8091 0000 		lds r24,debug_config
 872 0230 8160      		ori r24,lo8(1<<0)
 873 0232 8093 0000 		sts debug_config,r24
 874 0236 00C0      		rjmp .L38
 875               	.L44:
 320:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 876               		.loc 1 320 5 is_stmt 1 view .LVU183
 320:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 877               		.loc 1 320 8 is_stmt 0 view .LVU184
 878 0238 F801      		movw r30,r16
 879 023a 8281      		ldd r24,Z+2
 880 023c 8823      		tst r24
 881 023e 01F0      		breq .L38
 882               	.LBB24:
 321:quantum/quantum.c ****       if(shifted) {
 883               		.loc 1 321 7 is_stmt 1 view .LVU185
 321:quantum/quantum.c ****       if(shifted) {
 884               		.loc 1 321 25 is_stmt 0 view .LVU186
 885 0240 0E94 0000 		call get_mods
 886               	.LVL69:
 322:quantum/quantum.c ****         rgblight_step_reverse();
 887               		.loc 1 322 7 is_stmt 1 view .LVU187
 321:quantum/quantum.c ****       if(shifted) {
 888               		.loc 1 321 15 is_stmt 0 view .LVU188
 889 0244 8272      		andi r24,lo8(34)
 890               	.LVL70:
 322:quantum/quantum.c ****         rgblight_step_reverse();
 891               		.loc 1 322 9 view .LVU189
 892 0246 01F0      		breq .L78
 893               	.LVL71:
 894               	.L79:
 323:quantum/quantum.c ****       }
 895               		.loc 1 323 9 is_stmt 1 view .LVU190
 896 0248 0E94 0000 		call rgblight_step_reverse
 897               	.LVL72:
 898 024c 00C0      		rjmp .L38
 899               	.L206:
 323:quantum/quantum.c ****       }
 900               		.loc 1 323 9 is_stmt 0 view .LVU191
 901               	.LBE24:
 331:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 902               		.loc 1 331 5 is_stmt 1 view .LVU192
 331:quantum/quantum.c ****       uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT));
 903               		.loc 1 331 8 is_stmt 0 view .LVU193
 904 024e 8823      		tst r24
 905 0250 01F0      		breq .L38
 906               	.LBB25:
 332:quantum/quantum.c ****       if(shifted) {
 907               		.loc 1 332 7 is_stmt 1 view .LVU194
 332:quantum/quantum.c ****       if(shifted) {
 908               		.loc 1 332 25 is_stmt 0 view .LVU195
 909 0252 0E94 0000 		call get_mods
 910               	.LVL73:
 333:quantum/quantum.c ****         rgblight_step();
 911               		.loc 1 333 7 is_stmt 1 view .LVU196
 332:quantum/quantum.c ****       if(shifted) {
 912               		.loc 1 332 15 is_stmt 0 view .LVU197
 913 0256 8272      		andi r24,lo8(34)
 914               	.LVL74:
 333:quantum/quantum.c ****         rgblight_step();
 915               		.loc 1 333 9 view .LVU198
 916 0258 01F0      		breq .L79
 917               	.LVL75:
 918               	.L78:
 333:quantum/quantum.c ****         rgblight_step();
 919               		.loc 1 333 9 view .LVU199
 920               	.LBE25:
 921               	.LBB26:
 326:quantum/quantum.c ****       }
 922               		.loc 1 326 9 is_stmt 1 view .LVU200
 923 025a 0E94 0000 		call rgblight_step
 924               	.LVL76:
 925 025e 00C0      		rjmp .L38
 926               	.L55:
 326:quantum/quantum.c ****       }
 927               		.loc 1 326 9 is_stmt 0 view .LVU201
 928               	.LBE26:
 342:quantum/quantum.c ****       rgblight_increase_hue();
 929               		.loc 1 342 5 is_stmt 1 view .LVU202
 342:quantum/quantum.c ****       rgblight_increase_hue();
 930               		.loc 1 342 8 is_stmt 0 view .LVU203
 931 0260 8823      		tst r24
 932 0262 01F0      		breq .L38
 343:quantum/quantum.c ****     }
 933               		.loc 1 343 7 is_stmt 1 view .LVU204
 934 0264 0E94 0000 		call rgblight_increase_hue
 935               	.LVL77:
 936 0268 00C0      		rjmp .L38
 937               	.L53:
 352:quantum/quantum.c ****       rgblight_increase_sat();
 938               		.loc 1 352 5 view .LVU205
 352:quantum/quantum.c ****       rgblight_increase_sat();
 939               		.loc 1 352 8 is_stmt 0 view .LVU206
 940 026a 8823      		tst r24
 941 026c 01F0      		breq .L38
 353:quantum/quantum.c ****     }
 942               		.loc 1 353 7 is_stmt 1 view .LVU207
 943 026e 0E94 0000 		call rgblight_increase_sat
 944               	.LVL78:
 945 0272 00C0      		rjmp .L38
 946               	.L207:
 357:quantum/quantum.c ****       rgblight_decrease_sat();
 947               		.loc 1 357 5 view .LVU208
 357:quantum/quantum.c ****       rgblight_decrease_sat();
 948               		.loc 1 357 8 is_stmt 0 view .LVU209
 949 0274 8823      		tst r24
 950 0276 01F0      		breq .L38
 358:quantum/quantum.c ****     }
 951               		.loc 1 358 7 is_stmt 1 view .LVU210
 952 0278 0E94 0000 		call rgblight_decrease_sat
 953               	.LVL79:
 954 027c 00C0      		rjmp .L38
 955               	.L58:
 362:quantum/quantum.c ****       rgblight_increase_val();
 956               		.loc 1 362 5 view .LVU211
 362:quantum/quantum.c ****       rgblight_increase_val();
 957               		.loc 1 362 8 is_stmt 0 view .LVU212
 958 027e 8823      		tst r24
 959 0280 01F0      		breq .L38
 363:quantum/quantum.c ****     }
 960               		.loc 1 363 7 is_stmt 1 view .LVU213
 961 0282 0E94 0000 		call rgblight_increase_val
 962               	.LVL80:
 963 0286 00C0      		rjmp .L38
 964               	.L42:
 372:quantum/quantum.c ****       rgblight_increase_speed();
 965               		.loc 1 372 5 view .LVU214
 372:quantum/quantum.c ****       rgblight_increase_speed();
 966               		.loc 1 372 8 is_stmt 0 view .LVU215
 967 0288 F801      		movw r30,r16
 968 028a 8281      		ldd r24,Z+2
 969 028c 8823      		tst r24
 970 028e 01F0      		breq .L38
 373:quantum/quantum.c ****     }
 971               		.loc 1 373 7 is_stmt 1 view .LVU216
 972 0290 0E94 0000 		call rgblight_increase_speed
 973               	.LVL81:
 974 0294 00C0      		rjmp .L38
 975               	.L65:
 377:quantum/quantum.c ****       rgblight_decrease_speed();
 976               		.loc 1 377 5 view .LVU217
 377:quantum/quantum.c ****       rgblight_decrease_speed();
 977               		.loc 1 377 8 is_stmt 0 view .LVU218
 978 0296 F801      		movw r30,r16
 979 0298 8281      		ldd r24,Z+2
 980 029a 8823      		tst r24
 981 029c 01F4      		brne .+2
 982 029e 00C0      		rjmp .L38
 378:quantum/quantum.c ****     }
 983               		.loc 1 378 7 is_stmt 1 view .LVU219
 984 02a0 0E94 0000 		call rgblight_decrease_speed
 985               	.LVL82:
 986 02a4 00C0      		rjmp .L38
 987               	.L63:
 387:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 988               		.loc 1 387 5 view .LVU220
 387:quantum/quantum.c ****       if ((2 <= rgblight_get_mode()) && (rgblight_get_mode() < 5)) {
 989               		.loc 1 387 8 is_stmt 0 view .LVU221
 990 02a6 F801      		movw r30,r16
 991 02a8 8281      		ldd r24,Z+2
 992 02aa 8823      		tst r24
 993 02ac 01F4      		brne .+2
 994 02ae 00C0      		rjmp .L38
 388:quantum/quantum.c ****         rgblight_step();
 995               		.loc 1 388 7 is_stmt 1 view .LVU222
 388:quantum/quantum.c ****         rgblight_step();
 996               		.loc 1 388 17 is_stmt 0 view .LVU223
 997 02b0 0E94 0000 		call rgblight_get_mode
 998               	.LVL83:
 388:quantum/quantum.c ****         rgblight_step();
 999               		.loc 1 388 10 view .LVU224
 1000 02b4 6230      		cpi r22,2
 1001 02b6 7105      		cpc r23,__zero_reg__
 1002 02b8 8105      		cpc r24,__zero_reg__
 1003 02ba 9105      		cpc r25,__zero_reg__
 1004 02bc 00F0      		brlo .L80
 388:quantum/quantum.c ****         rgblight_step();
 1005               		.loc 1 388 42 discriminator 1 view .LVU225
 1006 02be 0E94 0000 		call rgblight_get_mode
 1007               	.LVL84:
 388:quantum/quantum.c ****         rgblight_step();
 1008               		.loc 1 388 38 discriminator 1 view .LVU226
 1009 02c2 6530      		cpi r22,5
 1010 02c4 7105      		cpc r23,__zero_reg__
 1011 02c6 8105      		cpc r24,__zero_reg__
 1012 02c8 9105      		cpc r25,__zero_reg__
 1013 02ca 00F0      		brlo .L78
 1014               	.L80:
 391:quantum/quantum.c ****       }
 1015               		.loc 1 391 9 is_stmt 1 view .LVU227
 1016 02cc 82E0      		ldi r24,lo8(2)
 1017 02ce 00C0      		rjmp .L211
 1018               	.L208:
 396:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 1019               		.loc 1 396 5 view .LVU228
 396:quantum/quantum.c ****       if ((6 <= rgblight_get_mode()) && (rgblight_get_mode() < 8)) {
 1020               		.loc 1 396 8 is_stmt 0 view .LVU229
 1021 02d0 8823      		tst r24
 1022 02d2 01F4      		brne .+2
 1023 02d4 00C0      		rjmp .L38
 397:quantum/quantum.c ****         rgblight_step();
 1024               		.loc 1 397 7 is_stmt 1 view .LVU230
 397:quantum/quantum.c ****         rgblight_step();
 1025               		.loc 1 397 17 is_stmt 0 view .LVU231
 1026 02d6 0E94 0000 		call rgblight_get_mode
 1027               	.LVL85:
 397:quantum/quantum.c ****         rgblight_step();
 1028               		.loc 1 397 10 view .LVU232
 1029 02da 6630      		cpi r22,6
 1030 02dc 7105      		cpc r23,__zero_reg__
 1031 02de 8105      		cpc r24,__zero_reg__
 1032 02e0 9105      		cpc r25,__zero_reg__
 1033 02e2 00F0      		brlo .L81
 397:quantum/quantum.c ****         rgblight_step();
 1034               		.loc 1 397 42 discriminator 1 view .LVU233
 1035 02e4 0E94 0000 		call rgblight_get_mode
 1036               	.LVL86:
 397:quantum/quantum.c ****         rgblight_step();
 1037               		.loc 1 397 38 discriminator 1 view .LVU234
 1038 02e8 6830      		cpi r22,8
 1039 02ea 7105      		cpc r23,__zero_reg__
 1040 02ec 8105      		cpc r24,__zero_reg__
 1041 02ee 9105      		cpc r25,__zero_reg__
 1042 02f0 00F4      		brsh .+2
 1043 02f2 00C0      		rjmp .L78
 1044               	.L81:
 400:quantum/quantum.c ****       }
 1045               		.loc 1 400 9 is_stmt 1 view .LVU235
 1046 02f4 86E0      		ldi r24,lo8(6)
 1047 02f6 00C0      		rjmp .L211
 1048               	.L67:
 405:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 1049               		.loc 1 405 5 view .LVU236
 405:quantum/quantum.c ****       if ((9 <= rgblight_get_mode()) && (rgblight_get_mode() < 14)) {
 1050               		.loc 1 405 8 is_stmt 0 view .LVU237
 1051 02f8 8823      		tst r24
 1052 02fa 01F4      		brne .+2
 1053 02fc 00C0      		rjmp .L38
 406:quantum/quantum.c ****         rgblight_step();
 1054               		.loc 1 406 7 is_stmt 1 view .LVU238
 406:quantum/quantum.c ****         rgblight_step();
 1055               		.loc 1 406 17 is_stmt 0 view .LVU239
 1056 02fe 0E94 0000 		call rgblight_get_mode
 1057               	.LVL87:
 406:quantum/quantum.c ****         rgblight_step();
 1058               		.loc 1 406 10 view .LVU240
 1059 0302 6930      		cpi r22,9
 1060 0304 7105      		cpc r23,__zero_reg__
 1061 0306 8105      		cpc r24,__zero_reg__
 1062 0308 9105      		cpc r25,__zero_reg__
 1063 030a 00F0      		brlo .L82
 406:quantum/quantum.c ****         rgblight_step();
 1064               		.loc 1 406 42 discriminator 1 view .LVU241
 1065 030c 0E94 0000 		call rgblight_get_mode
 1066               	.LVL88:
 406:quantum/quantum.c ****         rgblight_step();
 1067               		.loc 1 406 38 discriminator 1 view .LVU242
 1068 0310 6E30      		cpi r22,14
 1069 0312 7105      		cpc r23,__zero_reg__
 1070 0314 8105      		cpc r24,__zero_reg__
 1071 0316 9105      		cpc r25,__zero_reg__
 1072 0318 00F4      		brsh .+2
 1073 031a 00C0      		rjmp .L78
 1074               	.L82:
 409:quantum/quantum.c ****       }
 1075               		.loc 1 409 9 is_stmt 1 view .LVU243
 1076 031c 89E0      		ldi r24,lo8(9)
 1077 031e 00C0      		rjmp .L211
 1078               	.L61:
 423:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 1079               		.loc 1 423 5 view .LVU244
 423:quantum/quantum.c ****       if ((21 <= rgblight_get_mode()) && (rgblight_get_mode() < 23)) {
 1080               		.loc 1 423 8 is_stmt 0 view .LVU245
 1081 0320 F801      		movw r30,r16
 1082 0322 8281      		ldd r24,Z+2
 1083 0324 8823      		tst r24
 1084 0326 01F4      		brne .+2
 1085 0328 00C0      		rjmp .L38
 424:quantum/quantum.c ****         rgblight_step();
 1086               		.loc 1 424 7 is_stmt 1 view .LVU246
 424:quantum/quantum.c ****         rgblight_step();
 1087               		.loc 1 424 18 is_stmt 0 view .LVU247
 1088 032a 0E94 0000 		call rgblight_get_mode
 1089               	.LVL89:
 424:quantum/quantum.c ****         rgblight_step();
 1090               		.loc 1 424 10 view .LVU248
 1091 032e 6531      		cpi r22,21
 1092 0330 7105      		cpc r23,__zero_reg__
 1093 0332 8105      		cpc r24,__zero_reg__
 1094 0334 9105      		cpc r25,__zero_reg__
 1095 0336 00F0      		brlo .L84
 424:quantum/quantum.c ****         rgblight_step();
 1096               		.loc 1 424 43 discriminator 1 view .LVU249
 1097 0338 0E94 0000 		call rgblight_get_mode
 1098               	.LVL90:
 424:quantum/quantum.c ****         rgblight_step();
 1099               		.loc 1 424 39 discriminator 1 view .LVU250
 1100 033c 6731      		cpi r22,23
 1101 033e 7105      		cpc r23,__zero_reg__
 1102 0340 8105      		cpc r24,__zero_reg__
 1103 0342 9105      		cpc r25,__zero_reg__
 1104 0344 00F4      		brsh .+2
 1105 0346 00C0      		rjmp .L78
 1106               	.L84:
 427:quantum/quantum.c ****       }
 1107               		.loc 1 427 9 is_stmt 1 view .LVU251
 1108 0348 85E1      		ldi r24,lo8(21)
 1109 034a 00C0      		rjmp .L211
 1110               	.L209:
 432:quantum/quantum.c ****       rgblight_mode(24);
 1111               		.loc 1 432 5 view .LVU252
 432:quantum/quantum.c ****       rgblight_mode(24);
 1112               		.loc 1 432 8 is_stmt 0 view .LVU253
 1113 034c 8823      		tst r24
 1114 034e 01F4      		brne .+2
 1115 0350 00C0      		rjmp .L38
 433:quantum/quantum.c ****     }
 1116               		.loc 1 433 7 is_stmt 1 view .LVU254
 1117 0352 88E1      		ldi r24,lo8(24)
 1118 0354 00C0      		rjmp .L211
 1119               	.L72:
 437:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 1120               		.loc 1 437 5 view .LVU255
 437:quantum/quantum.c ****       if ((25 <= rgblight_get_mode()) && (rgblight_get_mode() < 34)) {
 1121               		.loc 1 437 8 is_stmt 0 view .LVU256
 1122 0356 8823      		tst r24
 1123 0358 01F4      		brne .+2
 1124 035a 00C0      		rjmp .L38
 438:quantum/quantum.c ****         rgblight_step();
 1125               		.loc 1 438 7 is_stmt 1 view .LVU257
 438:quantum/quantum.c ****         rgblight_step();
 1126               		.loc 1 438 18 is_stmt 0 view .LVU258
 1127 035c 0E94 0000 		call rgblight_get_mode
 1128               	.LVL91:
 438:quantum/quantum.c ****         rgblight_step();
 1129               		.loc 1 438 10 view .LVU259
 1130 0360 6931      		cpi r22,25
 1131 0362 7105      		cpc r23,__zero_reg__
 1132 0364 8105      		cpc r24,__zero_reg__
 1133 0366 9105      		cpc r25,__zero_reg__
 1134 0368 00F0      		brlo .L85
 438:quantum/quantum.c ****         rgblight_step();
 1135               		.loc 1 438 43 discriminator 1 view .LVU260
 1136 036a 0E94 0000 		call rgblight_get_mode
 1137               	.LVL92:
 438:quantum/quantum.c ****         rgblight_step();
 1138               		.loc 1 438 39 discriminator 1 view .LVU261
 1139 036e 6232      		cpi r22,34
 1140 0370 7105      		cpc r23,__zero_reg__
 1141 0372 8105      		cpc r24,__zero_reg__
 1142 0374 9105      		cpc r25,__zero_reg__
 1143 0376 00F4      		brsh .+2
 1144 0378 00C0      		rjmp .L78
 1145               	.L85:
 441:quantum/quantum.c ****       }
 1146               		.loc 1 441 9 is_stmt 1 view .LVU262
 1147 037a 89E1      		ldi r24,lo8(25)
 1148 037c 00C0      		rjmp .L211
 1149               	.L75:
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 1150               		.loc 1 448 7 view .LVU263
 448:quantum/quantum.c ****         set_output(OUTPUT_AUTO);
 1151               		.loc 1 448 10 is_stmt 0 view .LVU264
 1152 037e F801      		movw r30,r16
 1153 0380 8281      		ldd r24,Z+2
 1154 0382 8823      		tst r24
 1155 0384 01F4      		brne .+2
 1156 0386 00C0      		rjmp .L38
 449:quantum/quantum.c ****       }
 1157               		.loc 1 449 9 is_stmt 1 view .LVU265
 1158 0388 80E0      		ldi r24,0
 1159               	.L212:
 454:quantum/quantum.c ****       }
 1160               		.loc 1 454 9 is_stmt 0 view .LVU266
 1161 038a 0E94 0000 		call set_output
 1162               	.LVL93:
 1163 038e 00C0      		rjmp .L38
 1164               	.L76:
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 1165               		.loc 1 453 7 is_stmt 1 view .LVU267
 453:quantum/quantum.c ****         set_output(OUTPUT_USB);
 1166               		.loc 1 453 10 is_stmt 0 view .LVU268
 1167 0390 F801      		movw r30,r16
 1168 0392 8281      		ldd r24,Z+2
 1169 0394 8823      		tst r24
 1170 0396 01F4      		brne .+2
 1171 0398 00C0      		rjmp .L38
 454:quantum/quantum.c ****       }
 1172               		.loc 1 454 9 is_stmt 1 view .LVU269
 1173 039a 82E0      		ldi r24,lo8(2)
 1174 039c 00C0      		rjmp .L212
 1175               	.L47:
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 1176               		.loc 1 466 7 view .LVU270
 466:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 1177               		.loc 1 466 10 is_stmt 0 view .LVU271
 1178 039e F801      		movw r30,r16
 1179 03a0 8281      		ldd r24,Z+2
 1180 03a2 8823      		tst r24
 1181 03a4 01F4      		brne .+2
 1182 03a6 00C0      		rjmp .L86
 468:quantum/quantum.c ****             eeconfig_init();
 1183               		.loc 1 468 9 is_stmt 1 view .LVU272
 468:quantum/quantum.c ****             eeconfig_init();
 1184               		.loc 1 468 14 is_stmt 0 view .LVU273
 1185 03a8 0E94 0000 		call eeconfig_is_enabled
 1186               	.LVL94:
 468:quantum/quantum.c ****             eeconfig_init();
 1187               		.loc 1 468 12 view .LVU274
 1188 03ac 8111      		cpse r24,__zero_reg__
 1189 03ae 00C0      		rjmp .L87
 469:quantum/quantum.c ****         }
 1190               		.loc 1 469 13 is_stmt 1 view .LVU275
 1191 03b0 0E94 0000 		call eeconfig_init
 1192               	.LVL95:
 1193               	.L87:
 472:quantum/quantum.c ****         switch (keycode)
 1194               		.loc 1 472 9 view .LVU276
 472:quantum/quantum.c ****         switch (keycode)
 1195               		.loc 1 472 29 is_stmt 0 view .LVU277
 1196 03b4 0E94 0000 		call eeconfig_read_keymap
 1197               	.LVL96:
 1198 03b8 90E0      		ldi r25,0
 1199 03ba 9093 0000 		sts keymap_config+1,r25
 1200 03be 8093 0000 		sts keymap_config,r24
 473:quantum/quantum.c ****         {
 1201               		.loc 1 473 9 is_stmt 1 view .LVU278
 1202 03c2 FE01      		movw r30,r28
 1203 03c4 E350      		subi r30,3
 1204 03c6 FC45      		sbci r31,92
 476:quantum/quantum.c ****             break;
 1205               		.loc 1 476 49 is_stmt 0 view .LVU279
 1206 03c8 8091 0000 		lds r24,keymap_config
 1207 03cc 8160      		ori r24,lo8(1<<0)
 1208 03ce E231      		cpi r30,18
 1209 03d0 F105      		cpc r31,__zero_reg__
 1210 03d2 00F4      		brsh .L210
 1211 03d4 E050      		subi r30,lo8(-(gs(.L90)))
 1212 03d6 F040      		sbci r31,hi8(-(gs(.L90)))
 1213 03d8 0C94 0000 		jmp __tablejump2__
 1214               		.section	.jumptables.gcc.process_record_quantum,"a",@progbits
 1215               		.p2align	1
 1216               	.L90:
 1217 0000 0000      		.word gs(.L107)
 1218 0002 0000      		.word gs(.L106)
 1219 0004 0000      		.word gs(.L105)
 1220 0006 0000      		.word gs(.L104)
 1221 0008 0000      		.word gs(.L103)
 1222 000a 0000      		.word gs(.L102)
 1223 000c 0000      		.word gs(.L101)
 1224 000e 0000      		.word gs(.L100)
 1225 0010 0000      		.word gs(.L99)
 1226 0012 0000      		.word gs(.L98)
 1227 0014 0000      		.word gs(.L97)
 1228 0016 0000      		.word gs(.L96)
 1229 0018 0000      		.word gs(.L95)
 1230 001a 0000      		.word gs(.L94)
 1231 001c 0000      		.word gs(.L93)
 1232 001e 0000      		.word gs(.L92)
 1233 0020 0000      		.word gs(.L91)
 1234 0022 0000      		.word gs(.L89)
 1235               		.section	.text.process_record_quantum
 1236               	.L107:
 479:quantum/quantum.c ****             break;
 1237               		.loc 1 479 13 is_stmt 1 view .LVU280
 479:quantum/quantum.c ****             break;
 1238               		.loc 1 479 47 is_stmt 0 view .LVU281
 1239 03dc 8091 0000 		lds r24,keymap_config
 1240 03e0 8260      		ori r24,lo8(1<<1)
 1241               	.L210:
 538:quantum/quantum.c ****             break;
 1242               		.loc 1 538 32 view .LVU282
 1243 03e2 8093 0000 		sts keymap_config,r24
 539:quantum/quantum.c ****           default:
 1244               		.loc 1 539 13 is_stmt 1 view .LVU283
 543:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 1245               		.loc 1 543 9 view .LVU284
 1246 03e6 8091 0000 		lds r24,keymap_config
 1247 03ea 0E94 0000 		call eeconfig_update_keymap
 1248               	.LVL97:
 544:quantum/quantum.c **** 
 1249               		.loc 1 544 9 view .LVU285
 1250 03ee 0E94 0000 		call clear_keyboard
 1251               	.LVL98:
 546:quantum/quantum.c ****       }
 1252               		.loc 1 546 9 view .LVU286
 546:quantum/quantum.c ****       }
 1253               		.loc 1 546 16 is_stmt 0 view .LVU287
 1254 03f2 00C0      		rjmp .L38
 1255               	.L106:
 482:quantum/quantum.c ****             break;
 1256               		.loc 1 482 13 is_stmt 1 view .LVU288
 482:quantum/quantum.c ****             break;
 1257               		.loc 1 482 42 is_stmt 0 view .LVU289
 1258 03f4 8091 0000 		lds r24,keymap_config
 1259 03f8 8460      		ori r24,lo8(1<<2)
 1260 03fa 00C0      		rjmp .L210
 1261               	.L105:
 485:quantum/quantum.c ****             break;
 1262               		.loc 1 485 13 is_stmt 1 view .LVU290
 485:quantum/quantum.c ****             break;
 1263               		.loc 1 485 42 is_stmt 0 view .LVU291
 1264 03fc 8091 0000 		lds r24,keymap_config
 1265 0400 8860      		ori r24,lo8(1<<3)
 1266 0402 00C0      		rjmp .L210
 1267               	.L104:
 488:quantum/quantum.c ****             break;
 1268               		.loc 1 488 13 is_stmt 1 view .LVU292
 488:quantum/quantum.c ****             break;
 1269               		.loc 1 488 34 is_stmt 0 view .LVU293
 1270 0404 8091 0000 		lds r24,keymap_config
 1271 0408 8061      		ori r24,lo8(1<<4)
 1272 040a 00C0      		rjmp .L210
 1273               	.L103:
 491:quantum/quantum.c ****             break;
 1274               		.loc 1 491 13 is_stmt 1 view .LVU294
 491:quantum/quantum.c ****             break;
 1275               		.loc 1 491 42 is_stmt 0 view .LVU295
 1276 040c 8091 0000 		lds r24,keymap_config
 1277 0410 8062      		ori r24,lo8(1<<5)
 1278 0412 00C0      		rjmp .L210
 1279               	.L102:
 494:quantum/quantum.c ****             break;
 1280               		.loc 1 494 13 is_stmt 1 view .LVU296
 494:quantum/quantum.c ****             break;
 1281               		.loc 1 494 52 is_stmt 0 view .LVU297
 1282 0414 8091 0000 		lds r24,keymap_config
 1283 0418 8064      		ori r24,lo8(1<<6)
 1284 041a 00C0      		rjmp .L210
 1285               	.L101:
 497:quantum/quantum.c ****             break;
 1286               		.loc 1 497 13 is_stmt 1 view .LVU298
 497:quantum/quantum.c ****             break;
 1287               		.loc 1 497 32 is_stmt 0 view .LVU299
 1288 041c 8091 0000 		lds r24,keymap_config
 1289 0420 8068      		ori r24,lo8(1<<7)
 1290 0422 00C0      		rjmp .L210
 1291               	.L100:
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 1292               		.loc 1 500 13 is_stmt 1 view .LVU300
 501:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 1293               		.loc 1 501 13 view .LVU301
 500:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 1294               		.loc 1 500 42 is_stmt 0 view .LVU302
 1295 0424 8091 0000 		lds r24,keymap_config
 1296 0428 8C60      		ori r24,lo8(12)
 1297 042a 00C0      		rjmp .L210
 1298               	.L99:
 507:quantum/quantum.c ****             break;
 1299               		.loc 1 507 13 is_stmt 1 view .LVU303
 507:quantum/quantum.c ****             break;
 1300               		.loc 1 507 49 is_stmt 0 view .LVU304
 1301 042c 8091 0000 		lds r24,keymap_config
 1302 0430 8E7F      		andi r24,lo8(~(1<<0))
 1303 0432 00C0      		rjmp .L210
 1304               	.L98:
 510:quantum/quantum.c ****             break;
 1305               		.loc 1 510 13 is_stmt 1 view .LVU305
 510:quantum/quantum.c ****             break;
 1306               		.loc 1 510 47 is_stmt 0 view .LVU306
 1307 0434 8091 0000 		lds r24,keymap_config
 1308 0438 8D7F      		andi r24,lo8(~(1<<1))
 1309 043a 00C0      		rjmp .L210
 1310               	.L97:
 513:quantum/quantum.c ****             break;
 1311               		.loc 1 513 13 is_stmt 1 view .LVU307
 513:quantum/quantum.c ****             break;
 1312               		.loc 1 513 42 is_stmt 0 view .LVU308
 1313 043c 8091 0000 		lds r24,keymap_config
 1314 0440 8B7F      		andi r24,lo8(~(1<<2))
 1315 0442 00C0      		rjmp .L210
 1316               	.L96:
 516:quantum/quantum.c ****             break;
 1317               		.loc 1 516 13 is_stmt 1 view .LVU309
 516:quantum/quantum.c ****             break;
 1318               		.loc 1 516 42 is_stmt 0 view .LVU310
 1319 0444 8091 0000 		lds r24,keymap_config
 1320 0448 877F      		andi r24,lo8(~(1<<3))
 1321 044a 00C0      		rjmp .L210
 1322               	.L95:
 519:quantum/quantum.c ****             break;
 1323               		.loc 1 519 13 is_stmt 1 view .LVU311
 519:quantum/quantum.c ****             break;
 1324               		.loc 1 519 34 is_stmt 0 view .LVU312
 1325 044c 8091 0000 		lds r24,keymap_config
 1326 0450 8F7E      		andi r24,lo8(~(1<<4))
 1327 0452 00C0      		rjmp .L210
 1328               	.L94:
 522:quantum/quantum.c ****             break;
 1329               		.loc 1 522 13 is_stmt 1 view .LVU313
 522:quantum/quantum.c ****             break;
 1330               		.loc 1 522 42 is_stmt 0 view .LVU314
 1331 0454 8091 0000 		lds r24,keymap_config
 1332 0458 8F7D      		andi r24,lo8(~(1<<5))
 1333 045a 00C0      		rjmp .L210
 1334               	.L93:
 525:quantum/quantum.c ****             break;
 1335               		.loc 1 525 13 is_stmt 1 view .LVU315
 525:quantum/quantum.c ****             break;
 1336               		.loc 1 525 52 is_stmt 0 view .LVU316
 1337 045c 8091 0000 		lds r24,keymap_config
 1338 0460 8F7B      		andi r24,lo8(~(1<<6))
 1339 0462 00C0      		rjmp .L210
 1340               	.L92:
 528:quantum/quantum.c ****             break;
 1341               		.loc 1 528 13 is_stmt 1 view .LVU317
 528:quantum/quantum.c ****             break;
 1342               		.loc 1 528 32 is_stmt 0 view .LVU318
 1343 0464 8091 0000 		lds r24,keymap_config
 1344 0468 8F77      		andi r24,lo8(~(1<<7))
 1345 046a 00C0      		rjmp .L210
 1346               	.L91:
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1347               		.loc 1 531 13 is_stmt 1 view .LVU319
 532:quantum/quantum.c ****             #ifdef AUDIO_ENABLE
 1348               		.loc 1 532 13 view .LVU320
 531:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 1349               		.loc 1 531 42 is_stmt 0 view .LVU321
 1350 046c 8091 0000 		lds r24,keymap_config
 1351 0470 837F      		andi r24,lo8(-13)
 1352 0472 00C0      		rjmp .L210
 1353               	.L89:
 538:quantum/quantum.c ****             break;
 1354               		.loc 1 538 13 is_stmt 1 view .LVU322
 538:quantum/quantum.c ****             break;
 1355               		.loc 1 538 48 is_stmt 0 view .LVU323
 1356 0474 9091 0000 		lds r25,keymap_config
 538:quantum/quantum.c ****             break;
 1357               		.loc 1 538 32 view .LVU324
 1358 0478 892F      		mov r24,r25
 1359 047a 97FB      		bst r25,7
 1360 047c 87F9      		bld r24,7
 1361 047e 8058      		subi r24,0x80
 1362 0480 00C0      		rjmp .L210
 1363               	.L109:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1364               		.loc 1 562 9 is_stmt 1 view .LVU325
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1365               		.loc 1 562 12 is_stmt 0 view .LVU326
 1366 0482 8091 0000 		lds r24,shift_interrupted
 1367 0486 8111      		cpse r24,__zero_reg__
 1368 0488 00C0      		rjmp .L111
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1369               		.loc 1 562 38 discriminator 1 view .LVU327
 1370 048a 8091 0000 		lds r24,scs_timer
 1371 048e 9091 0000 		lds r25,scs_timer+1
 1372 0492 0E94 0000 		call timer_elapsed
 1373               	.LVL99:
 562:quantum/quantum.c ****           register_code(LSPO_KEY);
 1374               		.loc 1 562 35 discriminator 1 view .LVU328
 1375 0496 8639      		cpi r24,-106
 1376 0498 9105      		cpc r25,__zero_reg__
 1377 049a 00F4      		brsh .L111
 563:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 1378               		.loc 1 563 11 is_stmt 1 view .LVU329
 1379 049c 86E2      		ldi r24,lo8(38)
 1380 049e 0E94 0000 		call register_code
 1381               	.LVL100:
 564:quantum/quantum.c ****         }
 1382               		.loc 1 564 11 view .LVU330
 1383 04a2 86E2      		ldi r24,lo8(38)
 1384 04a4 0E94 0000 		call unregister_code
 1385               	.LVL101:
 1386               	.L111:
 566:quantum/quantum.c ****       }
 1387               		.loc 1 566 9 view .LVU331
 1388 04a8 82E0      		ldi r24,lo8(2)
 1389               	.L214:
 588:quantum/quantum.c ****       }
 1390               		.loc 1 588 9 is_stmt 0 view .LVU332
 1391 04aa 0E94 0000 		call unregister_mods
 1392               	.LVL102:
 1393 04ae 00C0      		rjmp .L38
 1394               	.L70:
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 1395               		.loc 1 572 7 is_stmt 1 view .LVU333
 572:quantum/quantum.c ****         shift_interrupted[1] = false;
 1396               		.loc 1 572 10 is_stmt 0 view .LVU334
 1397 04b0 F801      		movw r30,r16
 1398 04b2 8281      		ldd r24,Z+2
 1399 04b4 8823      		tst r24
 1400 04b6 01F0      		breq .L113
 1401               	.L117:
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 1402               		.loc 1 573 9 is_stmt 1 view .LVU335
 573:quantum/quantum.c ****         scs_timer[1] = timer_read ();
 1403               		.loc 1 573 30 is_stmt 0 view .LVU336
 1404 04b8 1092 0000 		sts shift_interrupted+1,__zero_reg__
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 1405               		.loc 1 574 9 is_stmt 1 view .LVU337
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 1406               		.loc 1 574 24 is_stmt 0 view .LVU338
 1407 04bc 0E94 0000 		call timer_read
 1408               	.LVL103:
 574:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 1409               		.loc 1 574 22 view .LVU339
 1410 04c0 9093 0000 		sts scs_timer+2+1,r25
 1411 04c4 8093 0000 		sts scs_timer+2,r24
 575:quantum/quantum.c ****       }
 1412               		.loc 1 575 9 is_stmt 1 view .LVU340
 1413 04c8 80E2      		ldi r24,lo8(32)
 1414 04ca 00C0      		rjmp .L213
 1415               	.L113:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1416               		.loc 1 584 9 view .LVU341
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1417               		.loc 1 584 12 is_stmt 0 view .LVU342
 1418 04cc 8091 0000 		lds r24,shift_interrupted+1
 1419 04d0 8111      		cpse r24,__zero_reg__
 1420 04d2 00C0      		rjmp .L115
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1421               		.loc 1 584 38 discriminator 1 view .LVU343
 1422 04d4 8091 0000 		lds r24,scs_timer+2
 1423 04d8 9091 0000 		lds r25,scs_timer+2+1
 1424 04dc 0E94 0000 		call timer_elapsed
 1425               	.LVL104:
 584:quantum/quantum.c ****           register_code(RSPC_KEY);
 1426               		.loc 1 584 35 discriminator 1 view .LVU344
 1427 04e0 8639      		cpi r24,-106
 1428 04e2 9105      		cpc r25,__zero_reg__
 1429 04e4 00F4      		brsh .L115
 585:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 1430               		.loc 1 585 11 is_stmt 1 view .LVU345
 1431 04e6 87E2      		ldi r24,lo8(39)
 1432 04e8 0E94 0000 		call register_code
 1433               	.LVL105:
 586:quantum/quantum.c ****         }
 1434               		.loc 1 586 11 view .LVU346
 1435 04ec 87E2      		ldi r24,lo8(39)
 1436 04ee 0E94 0000 		call unregister_code
 1437               	.LVL106:
 1438               	.L115:
 588:quantum/quantum.c ****       }
 1439               		.loc 1 588 9 view .LVU347
 1440 04f2 80E2      		ldi r24,lo8(32)
 1441 04f4 00C0      		rjmp .L214
 1442               	.L51:
 1443               	.LBB27:
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1444               		.loc 1 611 7 view .LVU348
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1445               		.loc 1 611 25 is_stmt 0 view .LVU349
 1446 04f6 0E94 0000 		call get_mods
 1447               	.LVL107:
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1448               		.loc 1 644 7 is_stmt 1 view .LVU350
 644:quantum/quantum.c ****         grave_esc_was_shifted = shifted;
 1449               		.loc 1 644 10 is_stmt 0 view .LVU351
 1450 04fa F801      		movw r30,r16
 1451 04fc 9281      		ldd r25,Z+2
 1452 04fe 9923      		tst r25
 1453 0500 01F0      		breq .L118
 611:quantum/quantum.c ****                                       |MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)));
 1454               		.loc 1 611 15 view .LVU352
 1455 0502 8A7A      		andi r24,lo8(-86)
 1456               	.LVL108:
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1457               		.loc 1 645 9 is_stmt 1 view .LVU353
 645:quantum/quantum.c ****         add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 1458               		.loc 1 645 31 is_stmt 0 view .LVU354
 1459 0504 91E0      		ldi r25,lo8(1)
 1460 0506 01F4      		brne .L119
 1461 0508 90E0      		ldi r25,0
 1462               	.L119:
 1463 050a 9093 0000 		sts grave_esc_was_shifted,r25
 646:quantum/quantum.c ****       }
 1464               		.loc 1 646 9 is_stmt 1 view .LVU355
 1465 050e 8111      		cpse r24,__zero_reg__
 1466 0510 00C0      		rjmp .L123
 1467 0512 89E2      		ldi r24,lo8(41)
 1468               	.LVL109:
 1469               	.L120:
 646:quantum/quantum.c ****       }
 1470               		.loc 1 646 9 is_stmt 0 discriminator 4 view .LVU356
 1471 0514 0E94 0000 		call add_key
 1472               	.LVL110:
 1473               	.L121:
 652:quantum/quantum.c ****       return false;
 1474               		.loc 1 652 7 is_stmt 1 view .LVU357
 1475 0518 0E94 0000 		call send_keyboard_report
 1476               	.LVL111:
 653:quantum/quantum.c ****     }
 1477               		.loc 1 653 7 view .LVU358
 653:quantum/quantum.c ****     }
 1478               		.loc 1 653 14 is_stmt 0 view .LVU359
 1479 051c 00C0      		rjmp .L38
 1480               	.LVL112:
 1481               	.L123:
 646:quantum/quantum.c ****       }
 1482               		.loc 1 646 9 view .LVU360
 1483 051e 85E3      		ldi r24,lo8(53)
 1484               	.LVL113:
 646:quantum/quantum.c ****       }
 1485               		.loc 1 646 9 view .LVU361
 1486 0520 00C0      		rjmp .L120
 1487               	.LVL114:
 1488               	.L118:
 649:quantum/quantum.c ****       }
 1489               		.loc 1 649 9 is_stmt 1 view .LVU362
 1490 0522 8091 0000 		lds r24,grave_esc_was_shifted
 1491               	.LVL115:
 649:quantum/quantum.c ****       }
 1492               		.loc 1 649 9 is_stmt 0 view .LVU363
 1493 0526 8111      		cpse r24,__zero_reg__
 1494 0528 00C0      		rjmp .L124
 1495 052a 89E2      		ldi r24,lo8(41)
 1496               	.L122:
 649:quantum/quantum.c ****       }
 1497               		.loc 1 649 9 discriminator 4 view .LVU364
 1498 052c 0E94 0000 		call del_key
 1499               	.LVL116:
 1500 0530 00C0      		rjmp .L121
 1501               	.L124:
 649:quantum/quantum.c ****       }
 1502               		.loc 1 649 9 view .LVU365
 1503 0532 85E3      		ldi r24,lo8(53)
 1504 0534 00C0      		rjmp .L122
 1505               	.LBE27:
 1506               		.cfi_endproc
 1507               	.LFE28:
 1509               		.section	.text.send_char,"ax",@progbits
 1510               	.global	send_char
 1512               	send_char:
 1513               	.LVL117:
 1514               	.LFB33:
 673:quantum/quantum.c **** 
 674:quantum/quantum.c **** __attribute__ ((weak))
 675:quantum/quantum.c **** const bool ascii_to_shift_lut[0x80] PROGMEM = {
 676:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 677:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 678:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 679:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 680:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 681:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 682:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 683:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 684:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 685:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 686:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 687:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 688:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 689:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 690:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 691:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 692:quantum/quantum.c **** };
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** __attribute__ ((weak))
 695:quantum/quantum.c **** const uint8_t ascii_to_keycode_lut[0x80] PROGMEM = {
 696:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 697:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 698:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 699:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 700:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 701:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 702:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 703:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 704:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 705:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 706:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 707:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 708:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 709:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 710:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 711:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 712:quantum/quantum.c **** };
 713:quantum/quantum.c **** 
 714:quantum/quantum.c **** void send_string(const char *str) {
 715:quantum/quantum.c ****   send_string_with_delay(str, 0);
 716:quantum/quantum.c **** }
 717:quantum/quantum.c **** 
 718:quantum/quantum.c **** void send_string_P(const char *str) {
 719:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 720:quantum/quantum.c **** }
 721:quantum/quantum.c **** 
 722:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 723:quantum/quantum.c ****     while (1) {
 724:quantum/quantum.c ****         char ascii_code = *str;
 725:quantum/quantum.c ****         if (!ascii_code) break;
 726:quantum/quantum.c ****         if (ascii_code == 1) {
 727:quantum/quantum.c ****           // tap
 728:quantum/quantum.c ****           uint8_t keycode = *(++str);
 729:quantum/quantum.c ****           register_code(keycode);
 730:quantum/quantum.c ****           unregister_code(keycode);
 731:quantum/quantum.c ****         } else if (ascii_code == 2) {
 732:quantum/quantum.c ****           // down
 733:quantum/quantum.c ****           uint8_t keycode = *(++str);
 734:quantum/quantum.c ****           register_code(keycode);
 735:quantum/quantum.c ****         } else if (ascii_code == 3) {
 736:quantum/quantum.c ****           // up
 737:quantum/quantum.c ****           uint8_t keycode = *(++str);
 738:quantum/quantum.c ****           unregister_code(keycode);
 739:quantum/quantum.c ****         } else {
 740:quantum/quantum.c ****           send_char(ascii_code);
 741:quantum/quantum.c ****         }
 742:quantum/quantum.c ****         ++str;
 743:quantum/quantum.c ****         // interval
 744:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 745:quantum/quantum.c ****     }
 746:quantum/quantum.c **** }
 747:quantum/quantum.c **** 
 748:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 749:quantum/quantum.c ****     while (1) {
 750:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 751:quantum/quantum.c ****         if (!ascii_code) break;
 752:quantum/quantum.c ****         if (ascii_code == 1) {
 753:quantum/quantum.c ****           // tap
 754:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 755:quantum/quantum.c ****           register_code(keycode);
 756:quantum/quantum.c ****           unregister_code(keycode);
 757:quantum/quantum.c ****         } else if (ascii_code == 2) {
 758:quantum/quantum.c ****           // down
 759:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 760:quantum/quantum.c ****           register_code(keycode);
 761:quantum/quantum.c ****         } else if (ascii_code == 3) {
 762:quantum/quantum.c ****           // up
 763:quantum/quantum.c ****           uint8_t keycode = pgm_read_byte(++str);
 764:quantum/quantum.c ****           unregister_code(keycode);
 765:quantum/quantum.c ****         } else {
 766:quantum/quantum.c ****           send_char(ascii_code);
 767:quantum/quantum.c ****         }
 768:quantum/quantum.c ****         ++str;
 769:quantum/quantum.c ****         // interval
 770:quantum/quantum.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 771:quantum/quantum.c ****     }
 772:quantum/quantum.c **** }
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_char(char ascii_code) {
 1515               		.loc 1 774 33 is_stmt 1 view -0
 1516               		.cfi_startproc
 1517               		.loc 1 774 33 is_stmt 0 view .LVU367
 1518 0000 CF93      		push r28
 1519               	.LCFI12:
 1520               		.cfi_def_cfa_offset 3
 1521               		.cfi_offset 28, -2
 1522               	/* prologue: function */
 1523               	/* frame size = 0 */
 1524               	/* stack size = 1 */
 1525               	.L__stack_usage = 1
 775:quantum/quantum.c ****   uint8_t keycode;
 1526               		.loc 1 775 3 is_stmt 1 view .LVU368
 776:quantum/quantum.c ****   keycode = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 1527               		.loc 1 776 3 view .LVU369
 1528               	.LBB28:
 1529               		.loc 1 776 13 view .LVU370
 1530 0002 90E0      		ldi r25,0
 1531               	.LVL118:
 1532               		.loc 1 776 13 view .LVU371
 1533               		.loc 1 776 13 view .LVU372
 1534 0004 FC01      		movw r30,r24
 1535 0006 E050      		subi r30,lo8(-(ascii_to_keycode_lut))
 1536 0008 F040      		sbci r31,hi8(-(ascii_to_keycode_lut))
 1537               	.LVL119:
 1538               		.loc 1 776 13 is_stmt 0 view .LVU373
 1539               	/* #APP */
 1540               	 ;  776 "quantum/quantum.c" 1
 1541 000a C491      		lpm r28, Z
 1542               		
 1543               	 ;  0 "" 2
 1544               	.LVL120:
 1545               		.loc 1 776 13 is_stmt 1 view .LVU374
 1546               		.loc 1 776 13 is_stmt 0 view .LVU375
 1547               	/* #NOAPP */
 1548               	.LBE28:
 777:quantum/quantum.c ****   if (pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code])) {
 1549               		.loc 1 777 3 is_stmt 1 view .LVU376
 1550               	.LBB29:
 1551               		.loc 1 777 7 view .LVU377
 1552               		.loc 1 777 7 view .LVU378
 1553               		.loc 1 777 7 view .LVU379
 1554 000c 8050      		subi r24,lo8(-(ascii_to_shift_lut))
 1555 000e 9040      		sbci r25,hi8(-(ascii_to_shift_lut))
 1556               	.LVL121:
 1557               		.loc 1 777 7 is_stmt 0 view .LVU380
 1558 0010 FC01      		movw r30,r24
 1559               	.LVL122:
 1560               		.loc 1 777 7 view .LVU381
 1561               	/* #APP */
 1562               	 ;  777 "quantum/quantum.c" 1
 1563 0012 8491      		lpm r24, Z
 1564               		
 1565               	 ;  0 "" 2
 1566               	.LVL123:
 1567               		.loc 1 777 7 is_stmt 1 view .LVU382
 1568               	/* #NOAPP */
 1569               	.LBE29:
 1570               		.loc 1 777 6 is_stmt 0 view .LVU383
 1571 0014 8823      		tst r24
 1572 0016 01F0      		breq .L216
 778:quantum/quantum.c ****       register_code(KC_LSFT);
 1573               		.loc 1 778 7 is_stmt 1 view .LVU384
 1574 0018 81EE      		ldi r24,lo8(-31)
 1575               	.LVL124:
 1576               		.loc 1 778 7 is_stmt 0 view .LVU385
 1577 001a 0E94 0000 		call register_code
 1578               	.LVL125:
 779:quantum/quantum.c ****       register_code(keycode);
 1579               		.loc 1 779 7 is_stmt 1 view .LVU386
 1580 001e 8C2F      		mov r24,r28
 1581 0020 0E94 0000 		call register_code
 1582               	.LVL126:
 780:quantum/quantum.c ****       unregister_code(keycode);
 1583               		.loc 1 780 7 view .LVU387
 1584 0024 8C2F      		mov r24,r28
 1585 0026 0E94 0000 		call unregister_code
 1586               	.LVL127:
 781:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1587               		.loc 1 781 7 view .LVU388
 1588 002a 81EE      		ldi r24,lo8(-31)
 1589               	.L217:
 1590               	/* epilogue start */
 782:quantum/quantum.c ****   } else {
 783:quantum/quantum.c ****       register_code(keycode);
 784:quantum/quantum.c ****       unregister_code(keycode);
 785:quantum/quantum.c ****   }
 786:quantum/quantum.c **** }
 1591               		.loc 1 786 1 is_stmt 0 view .LVU389
 1592 002c CF91      		pop r28
 1593               	.LVL128:
 784:quantum/quantum.c ****   }
 1594               		.loc 1 784 7 view .LVU390
 1595 002e 0C94 0000 		jmp unregister_code
 1596               	.LVL129:
 1597               	.L216:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1598               		.loc 1 783 7 is_stmt 1 view .LVU391
 1599 0032 8C2F      		mov r24,r28
 1600               	.LVL130:
 783:quantum/quantum.c ****       unregister_code(keycode);
 1601               		.loc 1 783 7 is_stmt 0 view .LVU392
 1602 0034 0E94 0000 		call register_code
 1603               	.LVL131:
 784:quantum/quantum.c ****   }
 1604               		.loc 1 784 7 is_stmt 1 view .LVU393
 1605 0038 8C2F      		mov r24,r28
 1606 003a 00C0      		rjmp .L217
 1607               		.cfi_endproc
 1608               	.LFE33:
 1610               		.section	.text.send_string_with_delay,"ax",@progbits
 1611               	.global	send_string_with_delay
 1613               	send_string_with_delay:
 1614               	.LVL132:
 1615               	.LFB31:
 722:quantum/quantum.c ****     while (1) {
 1616               		.loc 1 722 64 view -0
 1617               		.cfi_startproc
 722:quantum/quantum.c ****     while (1) {
 1618               		.loc 1 722 64 is_stmt 0 view .LVU395
 1619 0000 FF92      		push r15
 1620               	.LCFI13:
 1621               		.cfi_def_cfa_offset 3
 1622               		.cfi_offset 15, -2
 1623 0002 0F93      		push r16
 1624               	.LCFI14:
 1625               		.cfi_def_cfa_offset 4
 1626               		.cfi_offset 16, -3
 1627 0004 1F93      		push r17
 1628               	.LCFI15:
 1629               		.cfi_def_cfa_offset 5
 1630               		.cfi_offset 17, -4
 1631 0006 CF93      		push r28
 1632               	.LCFI16:
 1633               		.cfi_def_cfa_offset 6
 1634               		.cfi_offset 28, -5
 1635 0008 DF93      		push r29
 1636               	.LCFI17:
 1637               		.cfi_def_cfa_offset 7
 1638               		.cfi_offset 29, -6
 1639               	/* prologue: function */
 1640               	/* frame size = 0 */
 1641               	/* stack size = 5 */
 1642               	.L__stack_usage = 5
 1643 000a EC01      		movw r28,r24
 1644 000c F62E      		mov r15,r22
 1645               	.LVL133:
 1646               	.L226:
 723:quantum/quantum.c ****         char ascii_code = *str;
 1647               		.loc 1 723 5 is_stmt 1 view .LVU396
 1648               	.LBB30:
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1649               		.loc 1 724 9 view .LVU397
 724:quantum/quantum.c ****         if (!ascii_code) break;
 1650               		.loc 1 724 14 is_stmt 0 view .LVU398
 1651 000e 8881      		ld r24,Y
 1652               	.LVL134:
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1653               		.loc 1 725 9 is_stmt 1 view .LVU399
 725:quantum/quantum.c ****         if (ascii_code == 1) {
 1654               		.loc 1 725 12 is_stmt 0 view .LVU400
 1655 0010 8823      		tst r24
 1656 0012 01F0      		breq .L218
 726:quantum/quantum.c ****           // tap
 1657               		.loc 1 726 9 is_stmt 1 view .LVU401
 1658 0014 8E01      		movw r16,r28
 1659 0016 0F5F      		subi r16,-1
 1660 0018 1F4F      		sbci r17,-1
 726:quantum/quantum.c ****           // tap
 1661               		.loc 1 726 12 is_stmt 0 view .LVU402
 1662 001a 8130      		cpi r24,lo8(1)
 1663 001c 01F4      		brne .L220
 1664               	.LBB31:
 728:quantum/quantum.c ****           register_code(keycode);
 1665               		.loc 1 728 11 is_stmt 1 view .LVU403
 1666               	.LVL135:
 728:quantum/quantum.c ****           register_code(keycode);
 1667               		.loc 1 728 19 is_stmt 0 view .LVU404
 1668 001e C981      		ldd r28,Y+1
 1669               	.LVL136:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1670               		.loc 1 729 11 is_stmt 1 view .LVU405
 1671 0020 8C2F      		mov r24,r28
 1672               	.LVL137:
 729:quantum/quantum.c ****           unregister_code(keycode);
 1673               		.loc 1 729 11 is_stmt 0 view .LVU406
 1674 0022 0E94 0000 		call register_code
 1675               	.LVL138:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1676               		.loc 1 730 11 is_stmt 1 view .LVU407
 1677 0026 8C2F      		mov r24,r28
 1678               	.LVL139:
 1679               	.L227:
 730:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1680               		.loc 1 730 11 is_stmt 0 view .LVU408
 1681               	.LBE31:
 1682               	.LBB32:
 738:quantum/quantum.c ****         } else {
 1683               		.loc 1 738 11 view .LVU409
 1684 0028 0E94 0000 		call unregister_code
 1685               	.LVL140:
 1686               	.LBE32:
 1687 002c 00C0      		rjmp .L221
 1688               	.LVL141:
 1689               	.L220:
 731:quantum/quantum.c ****           // down
 1690               		.loc 1 731 16 is_stmt 1 view .LVU410
 731:quantum/quantum.c ****           // down
 1691               		.loc 1 731 19 is_stmt 0 view .LVU411
 1692 002e 8230      		cpi r24,lo8(2)
 1693 0030 01F4      		brne .L222
 1694               	.LBB33:
 733:quantum/quantum.c ****           register_code(keycode);
 1695               		.loc 1 733 11 is_stmt 1 view .LVU412
 1696               	.LVL142:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1697               		.loc 1 734 11 view .LVU413
 1698 0032 8981      		ldd r24,Y+1
 1699               	.LVL143:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1700               		.loc 1 734 11 is_stmt 0 view .LVU414
 1701 0034 0E94 0000 		call register_code
 1702               	.LVL144:
 1703               	.L221:
 734:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1704               		.loc 1 734 11 view .LVU415
 1705               	.LBE33:
 742:quantum/quantum.c ****         // interval
 1706               		.loc 1 742 9 is_stmt 1 view .LVU416
 1707 0038 E801      		movw r28,r16
 1708 003a 2196      		adiw r28,1
 1709               	.LVL145:
 1710               	.LBB34:
 744:quantum/quantum.c ****     }
 1711               		.loc 1 744 11 view .LVU417
 744:quantum/quantum.c ****     }
 1712               		.loc 1 744 34 view .LVU418
 744:quantum/quantum.c ****     }
 1713               		.loc 1 744 19 is_stmt 0 view .LVU419
 1714 003c 8F2D      		mov r24,r15
 1715               	.LVL146:
 1716               	.L224:
 744:quantum/quantum.c ****     }
 1717               		.loc 1 744 43 discriminator 1 view .LVU420
 1718               	.LVL147:
 1719 003e 8150      		subi r24,1
 1720 0040 00F0      		brcs .L226
 744:quantum/quantum.c ****     }
 1721               		.loc 1 744 47 is_stmt 1 view .LVU421
 1722               	.LBB35:
 1723               	.LBI35:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1724               		.loc 2 166 1 view .LVU422
 1725               	.LBB36:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1726               		.loc 2 168 2 view .LVU423
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1727               		.loc 2 172 2 view .LVU424
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1728               		.loc 2 173 2 view .LVU425
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1729               		.loc 2 174 2 view .LVU426
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1730               		.loc 2 184 3 view .LVU427
 1731               		.loc 2 187 2 view .LVU428
 1732 0042 EFE9      		ldi r30,lo8(3999)
 1733 0044 FFE0      		ldi r31,hi8(3999)
 1734 0046 3197      	1:	sbiw r30,1
 1735 0048 01F4      		brne 1b
 1736 004a 00C0      		rjmp .
 1737 004c 0000      		nop
 1738 004e 00C0      		rjmp .L224
 1739               	.LVL148:
 1740               	.L222:
 1741               		.loc 2 187 2 is_stmt 0 view .LVU429
 1742               	.LBE36:
 1743               	.LBE35:
 1744               	.LBE34:
 735:quantum/quantum.c ****           // up
 1745               		.loc 1 735 16 is_stmt 1 view .LVU430
 735:quantum/quantum.c ****           // up
 1746               		.loc 1 735 19 is_stmt 0 view .LVU431
 1747 0050 8330      		cpi r24,lo8(3)
 1748 0052 01F4      		brne .L223
 1749               	.LBB37:
 737:quantum/quantum.c ****           unregister_code(keycode);
 1750               		.loc 1 737 11 is_stmt 1 view .LVU432
 1751               	.LVL149:
 738:quantum/quantum.c ****         } else {
 1752               		.loc 1 738 11 view .LVU433
 1753 0054 8981      		ldd r24,Y+1
 1754               	.LVL150:
 738:quantum/quantum.c ****         } else {
 1755               		.loc 1 738 11 is_stmt 0 view .LVU434
 1756 0056 00C0      		rjmp .L227
 1757               	.LVL151:
 1758               	.L223:
 738:quantum/quantum.c ****         } else {
 1759               		.loc 1 738 11 view .LVU435
 1760               	.LBE37:
 740:quantum/quantum.c ****         }
 1761               		.loc 1 740 11 is_stmt 1 view .LVU436
 1762 0058 0E94 0000 		call send_char
 1763               	.LVL152:
 740:quantum/quantum.c ****         }
 1764               		.loc 1 740 11 is_stmt 0 view .LVU437
 1765 005c 8E01      		movw r16,r28
 1766 005e 00C0      		rjmp .L221
 1767               	.LVL153:
 1768               	.L218:
 1769               	/* epilogue start */
 740:quantum/quantum.c ****         }
 1770               		.loc 1 740 11 view .LVU438
 1771               	.LBE30:
 746:quantum/quantum.c **** 
 1772               		.loc 1 746 1 view .LVU439
 1773 0060 DF91      		pop r29
 1774 0062 CF91      		pop r28
 1775               	.LVL154:
 746:quantum/quantum.c **** 
 1776               		.loc 1 746 1 view .LVU440
 1777 0064 1F91      		pop r17
 1778 0066 0F91      		pop r16
 1779 0068 FF90      		pop r15
 1780               	.LVL155:
 746:quantum/quantum.c **** 
 1781               		.loc 1 746 1 view .LVU441
 1782 006a 0895      		ret
 1783               		.cfi_endproc
 1784               	.LFE31:
 1786               		.section	.text.send_string,"ax",@progbits
 1787               	.global	send_string
 1789               	send_string:
 1790               	.LVL156:
 1791               	.LFB29:
 714:quantum/quantum.c ****   send_string_with_delay(str, 0);
 1792               		.loc 1 714 35 is_stmt 1 view -0
 1793               		.cfi_startproc
 1794               	/* prologue: function */
 1795               	/* frame size = 0 */
 1796               	/* stack size = 0 */
 1797               	.L__stack_usage = 0
 715:quantum/quantum.c **** }
 1798               		.loc 1 715 3 view .LVU443
 1799 0000 60E0      		ldi r22,0
 1800 0002 0C94 0000 		jmp send_string_with_delay
 1801               	.LVL157:
 715:quantum/quantum.c **** }
 1802               		.loc 1 715 3 is_stmt 0 view .LVU444
 1803               		.cfi_endproc
 1804               	.LFE29:
 1806               		.section	.text.send_string_with_delay_P,"ax",@progbits
 1807               	.global	send_string_with_delay_P
 1809               	send_string_with_delay_P:
 1810               	.LVL158:
 1811               	.LFB32:
 748:quantum/quantum.c ****     while (1) {
 1812               		.loc 1 748 66 is_stmt 1 view -0
 1813               		.cfi_startproc
 748:quantum/quantum.c ****     while (1) {
 1814               		.loc 1 748 66 is_stmt 0 view .LVU446
 1815 0000 FF92      		push r15
 1816               	.LCFI18:
 1817               		.cfi_def_cfa_offset 3
 1818               		.cfi_offset 15, -2
 1819 0002 0F93      		push r16
 1820               	.LCFI19:
 1821               		.cfi_def_cfa_offset 4
 1822               		.cfi_offset 16, -3
 1823 0004 1F93      		push r17
 1824               	.LCFI20:
 1825               		.cfi_def_cfa_offset 5
 1826               		.cfi_offset 17, -4
 1827 0006 CF93      		push r28
 1828               	.LCFI21:
 1829               		.cfi_def_cfa_offset 6
 1830               		.cfi_offset 28, -5
 1831 0008 DF93      		push r29
 1832               	.LCFI22:
 1833               		.cfi_def_cfa_offset 7
 1834               		.cfi_offset 29, -6
 1835               	/* prologue: function */
 1836               	/* frame size = 0 */
 1837               	/* stack size = 5 */
 1838               	.L__stack_usage = 5
 1839 000a 8C01      		movw r16,r24
 1840 000c F62E      		mov r15,r22
 1841               	.LVL159:
 1842               	.L237:
 749:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 1843               		.loc 1 749 5 is_stmt 1 view .LVU447
 1844               	.LBB38:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1845               		.loc 1 750 9 view .LVU448
 1846               	.LBB39:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1847               		.loc 1 750 27 view .LVU449
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1848               		.loc 1 750 27 view .LVU450
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1849               		.loc 1 750 27 view .LVU451
 1850 000e F801      		movw r30,r16
 1851               	/* #APP */
 1852               	 ;  750 "quantum/quantum.c" 1
 1853 0010 8491      		lpm r24, Z
 1854               		
 1855               	 ;  0 "" 2
 1856               	.LVL160:
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1857               		.loc 1 750 27 view .LVU452
 750:quantum/quantum.c ****         if (!ascii_code) break;
 1858               		.loc 1 750 27 is_stmt 0 view .LVU453
 1859               	/* #NOAPP */
 1860               	.LBE39:
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1861               		.loc 1 751 9 is_stmt 1 view .LVU454
 751:quantum/quantum.c ****         if (ascii_code == 1) {
 1862               		.loc 1 751 12 is_stmt 0 view .LVU455
 1863 0012 8823      		tst r24
 1864 0014 01F0      		breq .L229
 752:quantum/quantum.c ****           // tap
 1865               		.loc 1 752 9 is_stmt 1 view .LVU456
 1866 0016 E801      		movw r28,r16
 1867 0018 2196      		adiw r28,1
 752:quantum/quantum.c ****           // tap
 1868               		.loc 1 752 12 is_stmt 0 view .LVU457
 1869 001a 8130      		cpi r24,lo8(1)
 1870 001c 01F4      		brne .L231
 1871               	.LBB40:
 754:quantum/quantum.c ****           register_code(keycode);
 1872               		.loc 1 754 11 is_stmt 1 view .LVU458
 1873               	.LBB41:
 754:quantum/quantum.c ****           register_code(keycode);
 1874               		.loc 1 754 29 view .LVU459
 1875               	.LVL161:
 754:quantum/quantum.c ****           register_code(keycode);
 1876               		.loc 1 754 29 view .LVU460
 754:quantum/quantum.c ****           register_code(keycode);
 1877               		.loc 1 754 29 view .LVU461
 1878 001e FE01      		movw r30,r28
 1879               	/* #APP */
 1880               	 ;  754 "quantum/quantum.c" 1
 1881 0020 1491      		lpm r17, Z
 1882               		
 1883               	 ;  0 "" 2
 1884               	.LVL162:
 754:quantum/quantum.c ****           register_code(keycode);
 1885               		.loc 1 754 29 view .LVU462
 754:quantum/quantum.c ****           register_code(keycode);
 1886               		.loc 1 754 29 is_stmt 0 view .LVU463
 1887               	/* #NOAPP */
 1888               	.LBE41:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1889               		.loc 1 755 11 is_stmt 1 view .LVU464
 1890 0022 812F      		mov r24,r17
 1891               	.LVL163:
 755:quantum/quantum.c ****           unregister_code(keycode);
 1892               		.loc 1 755 11 is_stmt 0 view .LVU465
 1893 0024 0E94 0000 		call register_code
 1894               	.LVL164:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1895               		.loc 1 756 11 is_stmt 1 view .LVU466
 1896 0028 812F      		mov r24,r17
 1897               	.LVL165:
 1898               	.L238:
 756:quantum/quantum.c ****         } else if (ascii_code == 2) {
 1899               		.loc 1 756 11 is_stmt 0 view .LVU467
 1900               	.LBE40:
 1901               	.LBB42:
 1902               	.LBB43:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1903               		.loc 1 763 29 is_stmt 1 view .LVU468
 763:quantum/quantum.c ****           unregister_code(keycode);
 1904               		.loc 1 763 29 is_stmt 0 view .LVU469
 1905               	.LBE43:
 764:quantum/quantum.c ****         } else {
 1906               		.loc 1 764 11 is_stmt 1 view .LVU470
 1907 002a 0E94 0000 		call unregister_code
 1908               	.LVL166:
 764:quantum/quantum.c ****         } else {
 1909               		.loc 1 764 11 is_stmt 0 view .LVU471
 1910               	.LBE42:
 1911 002e 00C0      		rjmp .L232
 1912               	.LVL167:
 1913               	.L231:
 757:quantum/quantum.c ****           // down
 1914               		.loc 1 757 16 is_stmt 1 view .LVU472
 757:quantum/quantum.c ****           // down
 1915               		.loc 1 757 19 is_stmt 0 view .LVU473
 1916 0030 8230      		cpi r24,lo8(2)
 1917 0032 01F4      		brne .L233
 1918               	.LBB45:
 759:quantum/quantum.c ****           register_code(keycode);
 1919               		.loc 1 759 11 is_stmt 1 view .LVU474
 1920               	.LBB46:
 759:quantum/quantum.c ****           register_code(keycode);
 1921               		.loc 1 759 29 view .LVU475
 1922               	.LVL168:
 759:quantum/quantum.c ****           register_code(keycode);
 1923               		.loc 1 759 29 view .LVU476
 759:quantum/quantum.c ****           register_code(keycode);
 1924               		.loc 1 759 29 view .LVU477
 1925 0034 FE01      		movw r30,r28
 1926               	/* #APP */
 1927               	 ;  759 "quantum/quantum.c" 1
 1928 0036 8491      		lpm r24, Z
 1929               		
 1930               	 ;  0 "" 2
 1931               	.LVL169:
 759:quantum/quantum.c ****           register_code(keycode);
 1932               		.loc 1 759 29 view .LVU478
 759:quantum/quantum.c ****           register_code(keycode);
 1933               		.loc 1 759 29 is_stmt 0 view .LVU479
 1934               	/* #NOAPP */
 1935               	.LBE46:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1936               		.loc 1 760 11 is_stmt 1 view .LVU480
 1937 0038 0E94 0000 		call register_code
 1938               	.LVL170:
 1939               	.L232:
 760:quantum/quantum.c ****         } else if (ascii_code == 3) {
 1940               		.loc 1 760 11 is_stmt 0 view .LVU481
 1941               	.LBE45:
 768:quantum/quantum.c ****         // interval
 1942               		.loc 1 768 9 is_stmt 1 view .LVU482
 768:quantum/quantum.c ****         // interval
 1943               		.loc 1 768 9 is_stmt 0 view .LVU483
 1944 003c 8E01      		movw r16,r28
 1945 003e 0F5F      		subi r16,-1
 1946 0040 1F4F      		sbci r17,-1
 1947               	.LVL171:
 1948               	.LBB47:
 770:quantum/quantum.c ****     }
 1949               		.loc 1 770 11 is_stmt 1 view .LVU484
 770:quantum/quantum.c ****     }
 1950               		.loc 1 770 34 view .LVU485
 770:quantum/quantum.c ****     }
 1951               		.loc 1 770 19 is_stmt 0 view .LVU486
 1952 0042 8F2D      		mov r24,r15
 1953               	.LVL172:
 1954               	.L235:
 770:quantum/quantum.c ****     }
 1955               		.loc 1 770 43 discriminator 1 view .LVU487
 1956               	.LVL173:
 1957 0044 8150      		subi r24,1
 1958 0046 00F0      		brcs .L237
 770:quantum/quantum.c ****     }
 1959               		.loc 1 770 47 is_stmt 1 view .LVU488
 1960               	.LBB48:
 1961               	.LBI48:
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 1962               		.loc 2 166 1 view .LVU489
 1963               	.LBB49:
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 1964               		.loc 2 168 2 view .LVU490
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 1965               		.loc 2 172 2 view .LVU491
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 1966               		.loc 2 173 2 view .LVU492
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 1967               		.loc 2 174 2 view .LVU493
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 1968               		.loc 2 184 3 view .LVU494
 1969               		.loc 2 187 2 view .LVU495
 1970 0048 EFE9      		ldi r30,lo8(3999)
 1971 004a FFE0      		ldi r31,hi8(3999)
 1972 004c 3197      	1:	sbiw r30,1
 1973 004e 01F4      		brne 1b
 1974 0050 00C0      		rjmp .
 1975 0052 0000      		nop
 1976 0054 00C0      		rjmp .L235
 1977               	.LVL174:
 1978               	.L233:
 1979               		.loc 2 187 2 is_stmt 0 view .LVU496
 1980               	.LBE49:
 1981               	.LBE48:
 1982               	.LBE47:
 761:quantum/quantum.c ****           // up
 1983               		.loc 1 761 16 is_stmt 1 view .LVU497
 761:quantum/quantum.c ****           // up
 1984               		.loc 1 761 19 is_stmt 0 view .LVU498
 1985 0056 8330      		cpi r24,lo8(3)
 1986 0058 01F4      		brne .L234
 1987               	.LBB50:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1988               		.loc 1 763 11 is_stmt 1 view .LVU499
 1989               	.LBB44:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1990               		.loc 1 763 29 view .LVU500
 1991               	.LVL175:
 763:quantum/quantum.c ****           unregister_code(keycode);
 1992               		.loc 1 763 29 view .LVU501
 763:quantum/quantum.c ****           unregister_code(keycode);
 1993               		.loc 1 763 29 view .LVU502
 1994 005a FE01      		movw r30,r28
 1995               	/* #APP */
 1996               	 ;  763 "quantum/quantum.c" 1
 1997 005c 8491      		lpm r24, Z
 1998               		
 1999               	 ;  0 "" 2
 2000               	.LVL176:
 763:quantum/quantum.c ****           unregister_code(keycode);
 2001               		.loc 1 763 29 is_stmt 0 view .LVU503
 2002               	/* #NOAPP */
 2003 005e 00C0      		rjmp .L238
 2004               	.LVL177:
 2005               	.L234:
 763:quantum/quantum.c ****           unregister_code(keycode);
 2006               		.loc 1 763 29 view .LVU504
 2007               	.LBE44:
 2008               	.LBE50:
 766:quantum/quantum.c ****         }
 2009               		.loc 1 766 11 is_stmt 1 view .LVU505
 2010 0060 0E94 0000 		call send_char
 2011               	.LVL178:
 766:quantum/quantum.c ****         }
 2012               		.loc 1 766 11 is_stmt 0 view .LVU506
 2013 0064 E801      		movw r28,r16
 2014 0066 00C0      		rjmp .L232
 2015               	.LVL179:
 2016               	.L229:
 2017               	/* epilogue start */
 766:quantum/quantum.c ****         }
 2018               		.loc 1 766 11 view .LVU507
 2019               	.LBE38:
 772:quantum/quantum.c **** 
 2020               		.loc 1 772 1 view .LVU508
 2021 0068 DF91      		pop r29
 2022 006a CF91      		pop r28
 2023 006c 1F91      		pop r17
 2024 006e 0F91      		pop r16
 2025               	.LVL180:
 772:quantum/quantum.c **** 
 2026               		.loc 1 772 1 view .LVU509
 2027 0070 FF90      		pop r15
 2028               	.LVL181:
 772:quantum/quantum.c **** 
 2029               		.loc 1 772 1 view .LVU510
 2030 0072 0895      		ret
 2031               		.cfi_endproc
 2032               	.LFE32:
 2034               		.section	.text.send_string_P,"ax",@progbits
 2035               	.global	send_string_P
 2037               	send_string_P:
 2038               	.LVL182:
 2039               	.LFB30:
 718:quantum/quantum.c ****   send_string_with_delay_P(str, 0);
 2040               		.loc 1 718 37 is_stmt 1 view -0
 2041               		.cfi_startproc
 2042               	/* prologue: function */
 2043               	/* frame size = 0 */
 2044               	/* stack size = 0 */
 2045               	.L__stack_usage = 0
 719:quantum/quantum.c **** }
 2046               		.loc 1 719 3 view .LVU512
 2047 0000 60E0      		ldi r22,0
 2048 0002 0C94 0000 		jmp send_string_with_delay_P
 2049               	.LVL183:
 719:quantum/quantum.c **** }
 2050               		.loc 1 719 3 is_stmt 0 view .LVU513
 2051               		.cfi_endproc
 2052               	.LFE30:
 2054               		.section	.text.set_single_persistent_default_layer,"ax",@progbits
 2055               	.global	set_single_persistent_default_layer
 2057               	set_single_persistent_default_layer:
 2058               	.LVL184:
 2059               	.LFB34:
 787:quantum/quantum.c **** 
 788:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 2060               		.loc 1 788 65 is_stmt 1 view -0
 2061               		.cfi_startproc
 2062               		.loc 1 788 65 is_stmt 0 view .LVU515
 2063 0000 CF93      		push r28
 2064               	.LCFI23:
 2065               		.cfi_def_cfa_offset 3
 2066               		.cfi_offset 28, -2
 2067 0002 DF93      		push r29
 2068               	.LCFI24:
 2069               		.cfi_def_cfa_offset 4
 2070               		.cfi_offset 29, -3
 2071               	/* prologue: function */
 2072               	/* frame size = 0 */
 2073               	/* stack size = 2 */
 2074               	.L__stack_usage = 2
 789:quantum/quantum.c ****   #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 790:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 791:quantum/quantum.c ****   #endif
 792:quantum/quantum.c ****   eeconfig_update_default_layer(1U<<default_layer);
 2075               		.loc 1 792 3 is_stmt 1 view .LVU516
 2076               		.loc 1 792 35 is_stmt 0 view .LVU517
 2077 0004 C1E0      		ldi r28,lo8(1)
 2078 0006 D0E0      		ldi r29,0
 2079 0008 00C0      		rjmp 2f
 2080               		1:
 2081 000a CC0F      		lsl r28
 2082 000c DD1F      		rol r29
 2083               		2:
 2084 000e 8A95      		dec r24
 2085 0010 02F4      		brpl 1b
 2086               		.loc 1 792 3 view .LVU518
 2087 0012 8C2F      		mov r24,r28
 2088               	.LVL185:
 2089               		.loc 1 792 3 view .LVU519
 2090 0014 0E94 0000 		call eeconfig_update_default_layer
 2091               	.LVL186:
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 2092               		.loc 1 793 3 is_stmt 1 view .LVU520
 2093 0018 BE01      		movw r22,r28
 2094 001a 90E0      		ldi r25,0
 2095 001c 80E0      		ldi r24,0
 2096               	/* epilogue start */
 794:quantum/quantum.c **** }
 2097               		.loc 1 794 1 is_stmt 0 view .LVU521
 2098 001e DF91      		pop r29
 2099 0020 CF91      		pop r28
 793:quantum/quantum.c ****   default_layer_set(1U<<default_layer);
 2100               		.loc 1 793 3 view .LVU522
 2101 0022 0C94 0000 		jmp default_layer_set
 2102               	.LVL187:
 2103               		.cfi_endproc
 2104               	.LFE34:
 2106               		.section	.text.update_tri_layer_state,"ax",@progbits
 2107               	.global	update_tri_layer_state
 2109               	update_tri_layer_state:
 2110               	.LVL188:
 2111               	.LFB35:
 795:quantum/quantum.c **** 
 796:quantum/quantum.c **** uint32_t update_tri_layer_state(uint32_t state, uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 2112               		.loc 1 796 97 is_stmt 1 view -0
 2113               		.cfi_startproc
 2114               		.loc 1 796 97 is_stmt 0 view .LVU524
 2115 0000 8F92      		push r8
 2116               	.LCFI25:
 2117               		.cfi_def_cfa_offset 3
 2118               		.cfi_offset 8, -2
 2119 0002 9F92      		push r9
 2120               	.LCFI26:
 2121               		.cfi_def_cfa_offset 4
 2122               		.cfi_offset 9, -3
 2123 0004 AF92      		push r10
 2124               	.LCFI27:
 2125               		.cfi_def_cfa_offset 5
 2126               		.cfi_offset 10, -4
 2127 0006 BF92      		push r11
 2128               	.LCFI28:
 2129               		.cfi_def_cfa_offset 6
 2130               		.cfi_offset 11, -5
 2131 0008 CF92      		push r12
 2132               	.LCFI29:
 2133               		.cfi_def_cfa_offset 7
 2134               		.cfi_offset 12, -6
 2135 000a DF92      		push r13
 2136               	.LCFI30:
 2137               		.cfi_def_cfa_offset 8
 2138               		.cfi_offset 13, -7
 2139 000c EF92      		push r14
 2140               	.LCFI31:
 2141               		.cfi_def_cfa_offset 9
 2142               		.cfi_offset 14, -8
 2143 000e FF92      		push r15
 2144               	.LCFI32:
 2145               		.cfi_def_cfa_offset 10
 2146               		.cfi_offset 15, -9
 2147 0010 0F93      		push r16
 2148               	.LCFI33:
 2149               		.cfi_def_cfa_offset 11
 2150               		.cfi_offset 16, -10
 2151 0012 1F93      		push r17
 2152               	.LCFI34:
 2153               		.cfi_def_cfa_offset 12
 2154               		.cfi_offset 17, -11
 2155               	/* prologue: function */
 2156               	/* frame size = 0 */
 2157               	/* stack size = 10 */
 2158               	.L__stack_usage = 10
 2159 0014 6B01      		movw r12,r22
 2160 0016 7C01      		movw r14,r24
 797:quantum/quantum.c ****   uint32_t mask12 = (1UL << layer1) | (1UL << layer2);
 2161               		.loc 1 797 3 is_stmt 1 view .LVU525
 2162               		.loc 1 797 26 is_stmt 0 view .LVU526
 2163 0018 81E0      		ldi r24,lo8(1)
 2164 001a 90E0      		ldi r25,0
 2165 001c A0E0      		ldi r26,0
 2166 001e B0E0      		ldi r27,0
 2167 0020 4C01      		movw r8,r24
 2168 0022 5D01      		movw r10,r26
 2169 0024 00C0      		rjmp 2f
 2170               		1:
 2171 0026 880C      		lsl r8
 2172 0028 991C      		rol r9
 2173 002a AA1C      		rol r10
 2174 002c BB1C      		rol r11
 2175               		2:
 2176 002e 4A95      		dec r20
 2177 0030 02F4      		brpl 1b
 2178 0032 B501      		movw r22,r10
 2179               	.LVL189:
 2180               		.loc 1 797 26 view .LVU527
 2181 0034 A401      		movw r20,r8
 2182               	.LVL190:
 2183               		.loc 1 797 44 view .LVU528
 2184 0036 4C01      		movw r8,r24
 2185 0038 5D01      		movw r10,r26
 2186 003a 00C0      		rjmp 2f
 2187               		1:
 2188 003c 880C      		lsl r8
 2189 003e 991C      		rol r9
 2190 0040 AA1C      		rol r10
 2191 0042 BB1C      		rol r11
 2192               		2:
 2193 0044 2A95      		dec r18
 2194 0046 02F4      		brpl 1b
 2195               		.loc 1 797 12 view .LVU529
 2196 0048 4829      		or r20,r8
 2197 004a 5929      		or r21,r9
 2198 004c 6A29      		or r22,r10
 2199 004e 7B29      		or r23,r11
 2200               	.LVL191:
 798:quantum/quantum.c ****   uint32_t mask3 = 1UL << layer3;
 2201               		.loc 1 798 3 is_stmt 1 view .LVU530
 2202               		.loc 1 798 12 is_stmt 0 view .LVU531
 2203 0050 00C0      		rjmp 2f
 2204               		1:
 2205 0052 880F      		lsl r24
 2206 0054 991F      		rol r25
 2207 0056 AA1F      		rol r26
 2208 0058 BB1F      		rol r27
 2209               		2:
 2210 005a 0A95      		dec r16
 2211 005c 02F4      		brpl 1b
 2212               	.LVL192:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2213               		.loc 1 799 3 is_stmt 1 view .LVU532
 2214               		.loc 1 799 17 is_stmt 0 view .LVU533
 2215 005e 8A01      		movw r16,r20
 2216               	.LVL193:
 2217               		.loc 1 799 17 view .LVU534
 2218 0060 9B01      		movw r18,r22
 2219               	.LVL194:
 2220               		.loc 1 799 17 view .LVU535
 2221 0062 0C21      		and r16,r12
 2222 0064 1D21      		and r17,r13
 2223 0066 2E21      		and r18,r14
 2224 0068 3F21      		and r19,r15
 2225               		.loc 1 799 55 view .LVU536
 2226 006a 0417      		cp r16,r20
 2227 006c 1507      		cpc r17,r21
 2228 006e 2607      		cpc r18,r22
 2229 0070 3707      		cpc r19,r23
 2230 0072 01F4      		brne .L242
 2231               		.loc 1 799 55 discriminator 1 view .LVU537
 2232 0074 8C29      		or r24,r12
 2233               	.LVL195:
 2234               		.loc 1 799 55 discriminator 1 view .LVU538
 2235 0076 9D29      		or r25,r13
 2236 0078 AE29      		or r26,r14
 2237 007a BF29      		or r27,r15
 2238               	.L241:
 800:quantum/quantum.c **** }
 2239               		.loc 1 800 1 view .LVU539
 2240 007c BC01      		movw r22,r24
 2241 007e CD01      		movw r24,r26
 2242               	/* epilogue start */
 2243 0080 1F91      		pop r17
 2244               	.LVL196:
 2245               		.loc 1 800 1 view .LVU540
 2246 0082 0F91      		pop r16
 2247               	.LVL197:
 2248               		.loc 1 800 1 view .LVU541
 2249 0084 FF90      		pop r15
 2250 0086 EF90      		pop r14
 2251 0088 DF90      		pop r13
 2252 008a CF90      		pop r12
 2253 008c BF90      		pop r11
 2254 008e AF90      		pop r10
 2255 0090 9F90      		pop r9
 2256 0092 8F90      		pop r8
 2257               	.LVL198:
 2258               		.loc 1 800 1 view .LVU542
 2259 0094 0895      		ret
 2260               	.LVL199:
 2261               	.L242:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2262               		.loc 1 799 66 discriminator 2 view .LVU543
 2263 0096 8095      		com r24
 2264 0098 9095      		com r25
 2265 009a A095      		com r26
 2266 009c B095      		com r27
 2267               	.LVL200:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2268               		.loc 1 799 55 discriminator 2 view .LVU544
 2269 009e 8C21      		and r24,r12
 2270               	.LVL201:
 799:quantum/quantum.c ****   return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 2271               		.loc 1 799 55 discriminator 2 view .LVU545
 2272 00a0 9D21      		and r25,r13
 2273 00a2 AE21      		and r26,r14
 2274 00a4 BF21      		and r27,r15
 2275 00a6 00C0      		rjmp .L241
 2276               		.cfi_endproc
 2277               	.LFE35:
 2279               		.section	.text.update_tri_layer,"ax",@progbits
 2280               	.global	update_tri_layer
 2282               	update_tri_layer:
 2283               	.LVL202:
 2284               	.LFB36:
 801:quantum/quantum.c **** 
 802:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 2285               		.loc 1 802 71 is_stmt 1 view -0
 2286               		.cfi_startproc
 2287               		.loc 1 802 71 is_stmt 0 view .LVU547
 2288 0000 0F93      		push r16
 2289               	.LCFI35:
 2290               		.cfi_def_cfa_offset 3
 2291               		.cfi_offset 16, -2
 2292               	/* prologue: function */
 2293               	/* frame size = 0 */
 2294               	/* stack size = 1 */
 2295               	.L__stack_usage = 1
 2296 0002 382F      		mov r19,r24
 2297 0004 262F      		mov r18,r22
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2298               		.loc 1 803 3 is_stmt 1 view .LVU548
 2299 0006 6091 0000 		lds r22,layer_state
 2300 000a 7091 0000 		lds r23,layer_state+1
 2301 000e 8091 0000 		lds r24,layer_state+2
 2302 0012 9091 0000 		lds r25,layer_state+3
 2303               	.LVL203:
 2304               		.loc 1 803 3 is_stmt 0 view .LVU549
 2305 0016 042F      		mov r16,r20
 2306 0018 432F      		mov r20,r19
 2307               	.LVL204:
 2308               		.loc 1 803 3 view .LVU550
 2309 001a 0E94 0000 		call update_tri_layer_state
 2310               	.LVL205:
 2311               	/* epilogue start */
 804:quantum/quantum.c **** }
 2312               		.loc 1 804 1 view .LVU551
 2313 001e 0F91      		pop r16
 2314               	.LVL206:
 803:quantum/quantum.c ****   layer_state_set(update_tri_layer_state(layer_state, layer1, layer2, layer3));
 2315               		.loc 1 803 3 view .LVU552
 2316 0020 0C94 0000 		jmp layer_state_set
 2317               	.LVL207:
 2318               		.cfi_endproc
 2319               	.LFE36:
 2321               		.section	.text.tap_random_base64,"ax",@progbits
 2322               	.global	tap_random_base64
 2324               	tap_random_base64:
 2325               	.LFB37:
 805:quantum/quantum.c **** 
 806:quantum/quantum.c **** void tap_random_base64(void) {
 2326               		.loc 1 806 30 is_stmt 1 view -0
 2327               		.cfi_startproc
 2328 0000 CF93      		push r28
 2329               	.LCFI36:
 2330               		.cfi_def_cfa_offset 3
 2331               		.cfi_offset 28, -2
 2332 0002 DF93      		push r29
 2333               	.LCFI37:
 2334               		.cfi_def_cfa_offset 4
 2335               		.cfi_offset 29, -3
 2336               	/* prologue: function */
 2337               	/* frame size = 0 */
 2338               	/* stack size = 2 */
 2339               	.L__stack_usage = 2
 807:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 808:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 2340               		.loc 1 808 5 view .LVU554
 2341               		.loc 1 808 20 is_stmt 0 view .LVU555
 2342 0004 46B5      		in r20,0x26
 2343               		.loc 1 808 28 view .LVU556
 2344 0006 2091 8400 		lds r18,132
 2345 000a 3091 8500 		lds r19,132+1
 2346               		.loc 1 808 36 view .LVU557
 2347 000e C091 9400 		lds r28,148
 2348 0012 D091 9500 		lds r29,148+1
 2349               		.loc 1 808 44 view .LVU558
 2350 0016 8091 BE00 		lds r24,190
 2351 001a 9091 BF00 		lds r25,190+1
 2352               		.loc 1 808 34 view .LVU559
 2353 001e C20F      		add r28,r18
 2354 0020 C40F      		add r28,r20
 2355               		.loc 1 808 42 view .LVU560
 2356 0022 C80F      		add r28,r24
 2357               		.loc 1 808 13 view .LVU561
 2358 0024 CF73      		andi r28,lo8(63)
 2359               	.LVL208:
 809:quantum/quantum.c ****   #else
 810:quantum/quantum.c ****     uint8_t key = rand() % 64;
 811:quantum/quantum.c ****   #endif
 812:quantum/quantum.c ****   switch (key) {
 2360               		.loc 1 812 3 is_stmt 1 view .LVU562
 2361 0026 CE33      		cpi r28,lo8(62)
 2362 0028 00F4      		brsh .L246
 2363 002a C533      		cpi r28,lo8(53)
 2364 002c 00F4      		brsh .L247
 2365 002e CA31      		cpi r28,lo8(26)
 2366 0030 00F0      		brlo .L248
 2367 0032 C433      		cpi r28,lo8(52)
 2368 0034 00F4      		brsh .L253
 813:quantum/quantum.c ****     case 0 ... 25:
 814:quantum/quantum.c ****       register_code(KC_LSFT);
 815:quantum/quantum.c ****       register_code(key + KC_A);
 816:quantum/quantum.c ****       unregister_code(key + KC_A);
 817:quantum/quantum.c ****       unregister_code(KC_LSFT);
 818:quantum/quantum.c ****       break;
 819:quantum/quantum.c ****     case 26 ... 51:
 820:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 2369               		.loc 1 820 7 view .LVU563
 2370 0036 C651      		subi r28,lo8(-(-22))
 2371               	.LVL209:
 2372               	.L256:
 821:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 822:quantum/quantum.c ****       break;
 823:quantum/quantum.c ****     case 52:
 824:quantum/quantum.c ****       register_code(KC_0);
 825:quantum/quantum.c ****       unregister_code(KC_0);
 826:quantum/quantum.c ****       break;
 827:quantum/quantum.c ****     case 53 ... 61:
 828:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 2373               		.loc 1 828 7 is_stmt 0 view .LVU564
 2374 0038 8C2F      		mov r24,r28
 2375 003a 0E94 0000 		call register_code
 2376               	.LVL210:
 829:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2377               		.loc 1 829 7 is_stmt 1 view .LVU565
 2378 003e 8C2F      		mov r24,r28
 2379 0040 00C0      		rjmp .L254
 2380               	.LVL211:
 2381               	.L246:
 812:quantum/quantum.c ****     case 0 ... 25:
 2382               		.loc 1 812 3 is_stmt 0 view .LVU566
 2383 0042 CE33      		cpi r28,lo8(62)
 2384 0044 01F0      		breq .L251
 2385 0046 CF33      		cpi r28,lo8(63)
 2386 0048 01F0      		breq .L252
 2387               	.L248:
 814:quantum/quantum.c ****       register_code(key + KC_A);
 2388               		.loc 1 814 7 is_stmt 1 view .LVU567
 2389 004a 81EE      		ldi r24,lo8(-31)
 2390 004c 0E94 0000 		call register_code
 2391               	.LVL212:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2392               		.loc 1 815 7 view .LVU568
 2393 0050 CC5F      		subi r28,lo8(-(4))
 2394               	.LVL213:
 815:quantum/quantum.c ****       unregister_code(key + KC_A);
 2395               		.loc 1 815 7 is_stmt 0 view .LVU569
 2396 0052 8C2F      		mov r24,r28
 2397 0054 0E94 0000 		call register_code
 2398               	.LVL214:
 816:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2399               		.loc 1 816 7 is_stmt 1 view .LVU570
 2400 0058 8C2F      		mov r24,r28
 2401               	.LVL215:
 2402               	.L255:
 830:quantum/quantum.c ****       break;
 831:quantum/quantum.c ****     case 62:
 832:quantum/quantum.c ****       register_code(KC_LSFT);
 833:quantum/quantum.c ****       register_code(KC_EQL);
 834:quantum/quantum.c ****       unregister_code(KC_EQL);
 2403               		.loc 1 834 7 is_stmt 0 view .LVU571
 2404 005a 0E94 0000 		call unregister_code
 2405               	.LVL216:
 835:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2406               		.loc 1 835 7 is_stmt 1 view .LVU572
 2407 005e 81EE      		ldi r24,lo8(-31)
 2408 0060 00C0      		rjmp .L254
 2409               	.LVL217:
 2410               	.L253:
 824:quantum/quantum.c ****       unregister_code(KC_0);
 2411               		.loc 1 824 7 view .LVU573
 2412 0062 87E2      		ldi r24,lo8(39)
 2413 0064 0E94 0000 		call register_code
 2414               	.LVL218:
 825:quantum/quantum.c ****       break;
 2415               		.loc 1 825 7 view .LVU574
 2416 0068 87E2      		ldi r24,lo8(39)
 2417               	.LVL219:
 2418               	.L254:
 2419               	/* epilogue start */
 836:quantum/quantum.c ****       break;
 837:quantum/quantum.c ****     case 63:
 838:quantum/quantum.c ****       register_code(KC_SLSH);
 839:quantum/quantum.c ****       unregister_code(KC_SLSH);
 840:quantum/quantum.c ****       break;
 841:quantum/quantum.c ****   }
 842:quantum/quantum.c **** }
 2420               		.loc 1 842 1 is_stmt 0 view .LVU575
 2421 006a DF91      		pop r29
 2422 006c CF91      		pop r28
 839:quantum/quantum.c ****       break;
 2423               		.loc 1 839 7 view .LVU576
 2424 006e 0C94 0000 		jmp unregister_code
 2425               	.LVL220:
 2426               	.L247:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2427               		.loc 1 828 7 is_stmt 1 view .LVU577
 2428 0072 C751      		subi r28,lo8(-(-23))
 2429               	.LVL221:
 828:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 2430               		.loc 1 828 7 is_stmt 0 view .LVU578
 2431 0074 00C0      		rjmp .L256
 2432               	.LVL222:
 2433               	.L251:
 832:quantum/quantum.c ****       register_code(KC_EQL);
 2434               		.loc 1 832 7 is_stmt 1 view .LVU579
 2435 0076 81EE      		ldi r24,lo8(-31)
 2436 0078 0E94 0000 		call register_code
 2437               	.LVL223:
 833:quantum/quantum.c ****       unregister_code(KC_EQL);
 2438               		.loc 1 833 7 view .LVU580
 2439 007c 8EE2      		ldi r24,lo8(46)
 2440 007e 0E94 0000 		call register_code
 2441               	.LVL224:
 834:quantum/quantum.c ****       unregister_code(KC_LSFT);
 2442               		.loc 1 834 7 view .LVU581
 2443 0082 8EE2      		ldi r24,lo8(46)
 2444 0084 00C0      		rjmp .L255
 2445               	.L252:
 838:quantum/quantum.c ****       unregister_code(KC_SLSH);
 2446               		.loc 1 838 7 view .LVU582
 2447 0086 88E3      		ldi r24,lo8(56)
 2448 0088 0E94 0000 		call register_code
 2449               	.LVL225:
 839:quantum/quantum.c ****       break;
 2450               		.loc 1 839 7 view .LVU583
 2451 008c 88E3      		ldi r24,lo8(56)
 2452 008e 00C0      		rjmp .L254
 2453               		.cfi_endproc
 2454               	.LFE37:
 2456               		.section	.text.matrix_init_quantum,"ax",@progbits
 2457               	.global	matrix_init_quantum
 2459               	matrix_init_quantum:
 2460               	.LFB38:
 843:quantum/quantum.c **** 
 844:quantum/quantum.c **** void matrix_init_quantum() {
 2461               		.loc 1 844 28 view -0
 2462               		.cfi_startproc
 2463               	/* prologue: function */
 2464               	/* frame size = 0 */
 2465               	/* stack size = 0 */
 2466               	.L__stack_usage = 0
 845:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 846:quantum/quantum.c ****     backlight_init_ports();
 847:quantum/quantum.c ****   #endif
 848:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 849:quantum/quantum.c ****     audio_init();
 850:quantum/quantum.c ****   #endif
 851:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 852:quantum/quantum.c ****     rgb_matrix_init_drivers();
 853:quantum/quantum.c ****   #endif
 854:quantum/quantum.c ****   matrix_init_kb();
 2467               		.loc 1 854 3 view .LVU585
 2468 0000 0C94 0000 		jmp matrix_init_kb
 2469               	.LVL226:
 2470               		.cfi_endproc
 2471               	.LFE38:
 2473               		.section	.text.matrix_scan_quantum,"ax",@progbits
 2474               	.global	matrix_scan_quantum
 2476               	matrix_scan_quantum:
 2477               	.LFB39:
 855:quantum/quantum.c **** }
 856:quantum/quantum.c **** 
 857:quantum/quantum.c **** uint8_t rgb_matrix_task_counter = 0;
 858:quantum/quantum.c **** 
 859:quantum/quantum.c **** #ifndef RGB_MATRIX_SKIP_FRAMES
 860:quantum/quantum.c ****   #define RGB_MATRIX_SKIP_FRAMES 1
 861:quantum/quantum.c **** #endif
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** void matrix_scan_quantum() {
 2478               		.loc 1 863 28 view -0
 2479               		.cfi_startproc
 2480               	/* prologue: function */
 2481               	/* frame size = 0 */
 2482               	/* stack size = 0 */
 2483               	.L__stack_usage = 0
 864:quantum/quantum.c ****   #if defined(AUDIO_ENABLE)
 865:quantum/quantum.c ****     matrix_scan_music();
 866:quantum/quantum.c ****   #endif
 867:quantum/quantum.c **** 
 868:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 869:quantum/quantum.c ****     matrix_scan_tap_dance();
 2484               		.loc 1 869 5 view .LVU587
 2485 0000 0E94 0000 		call matrix_scan_tap_dance
 2486               	.LVL227:
 870:quantum/quantum.c ****   #endif
 871:quantum/quantum.c **** 
 872:quantum/quantum.c ****   #ifdef COMBO_ENABLE
 873:quantum/quantum.c ****     matrix_scan_combo();
 874:quantum/quantum.c ****   #endif
 875:quantum/quantum.c **** 
 876:quantum/quantum.c ****   #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 877:quantum/quantum.c ****     backlight_task();
 878:quantum/quantum.c ****   #endif
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   #ifdef RGB_MATRIX_ENABLE
 881:quantum/quantum.c ****     rgb_matrix_task();
 882:quantum/quantum.c ****     if (rgb_matrix_task_counter == 0) {
 883:quantum/quantum.c ****       rgb_matrix_update_pwm_buffers();
 884:quantum/quantum.c ****     }
 885:quantum/quantum.c ****     rgb_matrix_task_counter = ((rgb_matrix_task_counter + 1) % (RGB_MATRIX_SKIP_FRAMES + 1));
 886:quantum/quantum.c ****   #endif
 887:quantum/quantum.c **** 
 888:quantum/quantum.c ****   matrix_scan_kb();
 2487               		.loc 1 888 3 view .LVU588
 2488 0004 0C94 0000 		jmp matrix_scan_kb
 2489               	.LVL228:
 2490               		.cfi_endproc
 2491               	.LFE39:
 2493               		.section	.text.backlight_init_ports,"ax",@progbits
 2494               		.weak	backlight_init_ports
 2496               	backlight_init_ports:
 2497               	.LFB59:
 2498               		.cfi_startproc
 2499               	/* prologue: function */
 2500               	/* frame size = 0 */
 2501               	/* stack size = 0 */
 2502               	.L__stack_usage = 0
 2503               	/* epilogue start */
 2504 0000 0895      		ret
 2505               		.cfi_endproc
 2506               	.LFE59:
 2508               		.section	.text.send_nibble,"ax",@progbits
 2509               	.global	send_nibble
 2511               	send_nibble:
 2512               	.LVL229:
 2513               	.LFB45:
 889:quantum/quantum.c **** }
 890:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 891:quantum/quantum.c **** 
 892:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 893:quantum/quantum.c **** 
 894:quantum/quantum.c **** // depending on the pin, we use a different output compare unit
 895:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 896:quantum/quantum.c **** #  define COM1x1 COM1C1
 897:quantum/quantum.c **** #  define OCR1x  OCR1C
 898:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 899:quantum/quantum.c **** #  define COM1x1 COM1B1
 900:quantum/quantum.c **** #  define OCR1x  OCR1B
 901:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 902:quantum/quantum.c **** #  define COM1x1 COM1A1
 903:quantum/quantum.c **** #  define OCR1x  OCR1A
 904:quantum/quantum.c **** #else
 905:quantum/quantum.c **** #  define NO_HARDWARE_PWM
 906:quantum/quantum.c **** #endif
 907:quantum/quantum.c **** 
 908:quantum/quantum.c **** #ifndef BACKLIGHT_ON_STATE
 909:quantum/quantum.c **** #define BACKLIGHT_ON_STATE 0
 910:quantum/quantum.c **** #endif
 911:quantum/quantum.c **** 
 912:quantum/quantum.c **** #ifdef NO_HARDWARE_PWM // pwm through software
 913:quantum/quantum.c **** 
 914:quantum/quantum.c **** __attribute__ ((weak))
 915:quantum/quantum.c **** void backlight_init_ports(void)
 916:quantum/quantum.c **** {
 917:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
 918:quantum/quantum.c ****   // DDRx |= n
 919:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 920:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
 921:quantum/quantum.c ****     // PORTx &= ~n
 922:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 923:quantum/quantum.c ****   #else
 924:quantum/quantum.c ****     // PORTx |= n
 925:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 926:quantum/quantum.c ****   #endif
 927:quantum/quantum.c **** }
 928:quantum/quantum.c **** 
 929:quantum/quantum.c **** __attribute__ ((weak))
 930:quantum/quantum.c **** void backlight_set(uint8_t level) {}
 931:quantum/quantum.c **** 
 932:quantum/quantum.c **** uint8_t backlight_tick = 0;
 933:quantum/quantum.c **** 
 934:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 935:quantum/quantum.c **** void backlight_task(void) {
 936:quantum/quantum.c ****   if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (1 
 937:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 938:quantum/quantum.c ****       // PORTx &= ~n
 939:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 940:quantum/quantum.c ****     #else
 941:quantum/quantum.c ****       // PORTx |= n
 942:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 943:quantum/quantum.c ****     #endif
 944:quantum/quantum.c ****   } else {
 945:quantum/quantum.c ****     #if BACKLIGHT_ON_STATE == 0
 946:quantum/quantum.c ****       // PORTx |= n
 947:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
 948:quantum/quantum.c ****     #else
 949:quantum/quantum.c ****       // PORTx &= ~n
 950:quantum/quantum.c ****       _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 951:quantum/quantum.c ****     #endif
 952:quantum/quantum.c ****   }
 953:quantum/quantum.c ****   backlight_tick = (backlight_tick + 1) % 16;
 954:quantum/quantum.c **** }
 955:quantum/quantum.c **** #endif
 956:quantum/quantum.c **** 
 957:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 958:quantum/quantum.c ****   #ifndef BACKLIGHT_CUSTOM_DRIVER
 959:quantum/quantum.c ****   #error "Backlight breathing only available with hardware PWM. Please disable."
 960:quantum/quantum.c ****   #endif
 961:quantum/quantum.c **** #endif
 962:quantum/quantum.c **** 
 963:quantum/quantum.c **** #else // pwm through timer
 964:quantum/quantum.c **** 
 965:quantum/quantum.c **** #define TIMER_TOP 0xFFFFU
 966:quantum/quantum.c **** 
 967:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
 968:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
 969:quantum/quantum.c ****   if (v <= 5243) // if below 8% of max
 970:quantum/quantum.c ****     return v / 9; // same as dividing by 900%
 971:quantum/quantum.c ****   else {
 972:quantum/quantum.c ****     uint32_t y = (((uint32_t) v + 10486) << 8) / (10486 + 0xFFFFUL); // add 16% of max and compare
 973:quantum/quantum.c ****     // to get a useful result with integer division, we shift left in the expression above
 974:quantum/quantum.c ****     // and revert what we've done again after squaring.
 975:quantum/quantum.c ****     y = y * y * y >> 8;
 976:quantum/quantum.c ****     if (y > 0xFFFFUL) // prevent overflow
 977:quantum/quantum.c ****       return 0xFFFFU;
 978:quantum/quantum.c ****     else
 979:quantum/quantum.c ****       return (uint16_t) y;
 980:quantum/quantum.c ****   }
 981:quantum/quantum.c **** }
 982:quantum/quantum.c **** 
 983:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
 984:quantum/quantum.c **** static inline void set_pwm(uint16_t val) {
 985:quantum/quantum.c ****   OCR1x = val;
 986:quantum/quantum.c **** }
 987:quantum/quantum.c **** 
 988:quantum/quantum.c **** #ifndef BACKLIGHT_CUSTOM_DRIVER
 989:quantum/quantum.c **** __attribute__ ((weak))
 990:quantum/quantum.c **** void backlight_set(uint8_t level) {
 991:quantum/quantum.c ****   if (level > BACKLIGHT_LEVELS)
 992:quantum/quantum.c ****     level = BACKLIGHT_LEVELS;
 993:quantum/quantum.c **** 
 994:quantum/quantum.c ****   if (level == 0) {
 995:quantum/quantum.c ****     // Turn off PWM control on backlight pin
 996:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 997:quantum/quantum.c ****   } else {
 998:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 999:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
1000:quantum/quantum.c ****   }
1001:quantum/quantum.c ****   // Set the brightness
1002:quantum/quantum.c ****   set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1003:quantum/quantum.c **** }
1004:quantum/quantum.c **** 
1005:quantum/quantum.c **** void backlight_task(void) {}
1006:quantum/quantum.c **** #endif  // BACKLIGHT_CUSTOM_DRIVER
1007:quantum/quantum.c **** 
1008:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #define BREATHING_NO_HALT  0
1011:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
1012:quantum/quantum.c **** #define BREATHING_HALT_ON  2
1013:quantum/quantum.c **** #define BREATHING_STEPS 128
1014:quantum/quantum.c **** 
1015:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1016:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1017:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1018:quantum/quantum.c **** 
1019:quantum/quantum.c **** bool is_breathing(void) {
1020:quantum/quantum.c ****     return !!(TIMSK1 & _BV(TOIE1));
1021:quantum/quantum.c **** }
1022:quantum/quantum.c **** 
1023:quantum/quantum.c **** #define breathing_interrupt_enable() do {TIMSK1 |= _BV(TOIE1);} while (0)
1024:quantum/quantum.c **** #define breathing_interrupt_disable() do {TIMSK1 &= ~_BV(TOIE1);} while (0)
1025:quantum/quantum.c **** #define breathing_min() do {breathing_counter = 0;} while (0)
1026:quantum/quantum.c **** #define breathing_max() do {breathing_counter = breathing_period * 244 / 2;} while (0)
1027:quantum/quantum.c **** 
1028:quantum/quantum.c **** void breathing_enable(void)
1029:quantum/quantum.c **** {
1030:quantum/quantum.c ****   breathing_counter = 0;
1031:quantum/quantum.c ****   breathing_halt = BREATHING_NO_HALT;
1032:quantum/quantum.c ****   breathing_interrupt_enable();
1033:quantum/quantum.c **** }
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** void breathing_pulse(void)
1036:quantum/quantum.c **** {
1037:quantum/quantum.c ****     if (get_backlight_level() == 0)
1038:quantum/quantum.c ****       breathing_min();
1039:quantum/quantum.c ****     else
1040:quantum/quantum.c ****       breathing_max();
1041:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1042:quantum/quantum.c ****     breathing_interrupt_enable();
1043:quantum/quantum.c **** }
1044:quantum/quantum.c **** 
1045:quantum/quantum.c **** void breathing_disable(void)
1046:quantum/quantum.c **** {
1047:quantum/quantum.c ****     breathing_interrupt_disable();
1048:quantum/quantum.c ****     // Restore backlight level
1049:quantum/quantum.c ****     backlight_set(get_backlight_level());
1050:quantum/quantum.c **** }
1051:quantum/quantum.c **** 
1052:quantum/quantum.c **** void breathing_self_disable(void)
1053:quantum/quantum.c **** {
1054:quantum/quantum.c ****   if (get_backlight_level() == 0)
1055:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_OFF;
1056:quantum/quantum.c ****   else
1057:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1058:quantum/quantum.c **** }
1059:quantum/quantum.c **** 
1060:quantum/quantum.c **** void breathing_toggle(void) {
1061:quantum/quantum.c ****   if (is_breathing())
1062:quantum/quantum.c ****     breathing_disable();
1063:quantum/quantum.c ****   else
1064:quantum/quantum.c ****     breathing_enable();
1065:quantum/quantum.c **** }
1066:quantum/quantum.c **** 
1067:quantum/quantum.c **** void breathing_period_set(uint8_t value)
1068:quantum/quantum.c **** {
1069:quantum/quantum.c ****   if (!value)
1070:quantum/quantum.c ****     value = 1;
1071:quantum/quantum.c ****   breathing_period = value;
1072:quantum/quantum.c **** }
1073:quantum/quantum.c **** 
1074:quantum/quantum.c **** void breathing_period_default(void) {
1075:quantum/quantum.c ****   breathing_period_set(BREATHING_PERIOD);
1076:quantum/quantum.c **** }
1077:quantum/quantum.c **** 
1078:quantum/quantum.c **** void breathing_period_inc(void)
1079:quantum/quantum.c **** {
1080:quantum/quantum.c ****   breathing_period_set(breathing_period+1);
1081:quantum/quantum.c **** }
1082:quantum/quantum.c **** 
1083:quantum/quantum.c **** void breathing_period_dec(void)
1084:quantum/quantum.c **** {
1085:quantum/quantum.c ****   breathing_period_set(breathing_period-1);
1086:quantum/quantum.c **** }
1087:quantum/quantum.c **** 
1088:quantum/quantum.c **** /* To generate breathing curve in python:
1089:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1090:quantum/quantum.c ****  */
1091:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1092:quantum/quantum.c **** 
1093:quantum/quantum.c **** // Use this before the cie_lightness function.
1094:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) {
1095:quantum/quantum.c ****   return v / BACKLIGHT_LEVELS * get_backlight_level();
1096:quantum/quantum.c **** }
1097:quantum/quantum.c **** 
1098:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1099:quantum/quantum.c ****  * about 244 times per second.
1100:quantum/quantum.c ****  */
1101:quantum/quantum.c **** ISR(TIMER1_OVF_vect)
1102:quantum/quantum.c **** {
1103:quantum/quantum.c ****   uint16_t interval = (uint16_t) breathing_period * 244 / BREATHING_STEPS;
1104:quantum/quantum.c ****   // resetting after one period to prevent ugly reset at overflow.
1105:quantum/quantum.c ****   breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1106:quantum/quantum.c ****   uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1107:quantum/quantum.c **** 
1108:quantum/quantum.c ****   if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) ||
1109:quantum/quantum.c ****       ((breathing_halt == BREATHING_HALT_OFF) && (index == BREATHING_STEPS - 1)))
1110:quantum/quantum.c ****   {
1111:quantum/quantum.c ****       breathing_interrupt_disable();
1112:quantum/quantum.c ****   }
1113:quantum/quantum.c **** 
1114:quantum/quantum.c ****   set_pwm(cie_lightness(scale_backlight((uint16_t) pgm_read_byte(&breathing_table[index]) * 0x0101U
1115:quantum/quantum.c **** }
1116:quantum/quantum.c **** 
1117:quantum/quantum.c **** #endif // BACKLIGHT_BREATHING
1118:quantum/quantum.c **** 
1119:quantum/quantum.c **** __attribute__ ((weak))
1120:quantum/quantum.c **** void backlight_init_ports(void)
1121:quantum/quantum.c **** {
1122:quantum/quantum.c ****   // Setup backlight pin as output and output to on state.
1123:quantum/quantum.c ****   // DDRx |= n
1124:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
1125:quantum/quantum.c ****   #if BACKLIGHT_ON_STATE == 0
1126:quantum/quantum.c ****     // PORTx &= ~n
1127:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
1128:quantum/quantum.c ****   #else
1129:quantum/quantum.c ****     // PORTx |= n
1130:quantum/quantum.c ****     _SFR_IO8((backlight_pin >> 4) + 2) |= _BV(backlight_pin & 0xF);
1131:quantum/quantum.c ****   #endif
1132:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
1133:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
1134:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
1135:quantum/quantum.c **** 
1136:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
1137:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1138:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
1139:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1140:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c ****   /*
1143:quantum/quantum.c ****   14.8.3:
1144:quantum/quantum.c ****   "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Setting 
1145:quantum/quantum.c ****   "In fast PWM mode the counter is incremented until the counter value matches either one of the fi
1146:quantum/quantum.c ****   */
1147:quantum/quantum.c **** 
1148:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
1149:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
1150:quantum/quantum.c ****   // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1151:quantum/quantum.c ****   ICR1 = TIMER_TOP;
1152:quantum/quantum.c **** 
1153:quantum/quantum.c ****   backlight_init();
1154:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
1155:quantum/quantum.c ****     breathing_enable();
1156:quantum/quantum.c ****   #endif
1157:quantum/quantum.c **** }
1158:quantum/quantum.c **** 
1159:quantum/quantum.c **** #endif // NO_HARDWARE_PWM
1160:quantum/quantum.c **** 
1161:quantum/quantum.c **** #else // backlight
1162:quantum/quantum.c **** 
1163:quantum/quantum.c **** __attribute__ ((weak))
1164:quantum/quantum.c **** void backlight_init_ports(void) {}
1165:quantum/quantum.c **** 
1166:quantum/quantum.c **** __attribute__ ((weak))
1167:quantum/quantum.c **** void backlight_set(uint8_t level) {}
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #endif // backlight
1170:quantum/quantum.c **** 
1171:quantum/quantum.c **** 
1172:quantum/quantum.c **** // Functions for spitting out values
1173:quantum/quantum.c **** //
1174:quantum/quantum.c **** 
1175:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
1176:quantum/quantum.c ****     uint16_t word = (number >> 16);
1177:quantum/quantum.c ****     send_word(word);
1178:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void send_word(uint16_t number) {
1182:quantum/quantum.c ****     uint8_t byte = number >> 8;
1183:quantum/quantum.c ****     send_byte(byte);
1184:quantum/quantum.c ****     send_byte(number & 0xFF);
1185:quantum/quantum.c **** }
1186:quantum/quantum.c **** 
1187:quantum/quantum.c **** void send_byte(uint8_t number) {
1188:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1189:quantum/quantum.c ****     send_nibble(nibble);
1190:quantum/quantum.c ****     send_nibble(number & 0xF);
1191:quantum/quantum.c **** }
1192:quantum/quantum.c **** 
1193:quantum/quantum.c **** void send_nibble(uint8_t number) {
 2514               		.loc 1 1193 34 view -0
 2515               		.cfi_startproc
 2516               		.loc 1 1193 34 is_stmt 0 view .LVU590
 2517 0000 CF93      		push r28
 2518               	.LCFI38:
 2519               		.cfi_def_cfa_offset 3
 2520               		.cfi_offset 28, -2
 2521               	/* prologue: function */
 2522               	/* frame size = 0 */
 2523               	/* stack size = 1 */
 2524               	.L__stack_usage = 1
1194:quantum/quantum.c ****     switch (number) {
 2525               		.loc 1 1194 5 is_stmt 1 view .LVU591
 2526 0002 8A30      		cpi r24,lo8(10)
 2527 0004 00F4      		brsh .L261
 2528 0006 8823      		tst r24
 2529 0008 01F0      		breq .L266
1195:quantum/quantum.c ****         case 0:
1196:quantum/quantum.c ****             register_code(KC_0);
1197:quantum/quantum.c ****             unregister_code(KC_0);
1198:quantum/quantum.c ****             break;
1199:quantum/quantum.c ****         case 1 ... 9:
1200:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 2530               		.loc 1 1200 13 view .LVU592
 2531 000a CDE1      		ldi r28,lo8(29)
 2532               	.L269:
1201:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1202:quantum/quantum.c ****             break;
1203:quantum/quantum.c ****         case 0xA ... 0xF:
1204:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 2533               		.loc 1 1204 13 is_stmt 0 view .LVU593
 2534 000c C80F      		add r28,r24
 2535 000e 8C2F      		mov r24,r28
 2536               	.LVL230:
 2537               		.loc 1 1204 13 view .LVU594
 2538 0010 0E94 0000 		call register_code
 2539               	.LVL231:
1205:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2540               		.loc 1 1205 13 is_stmt 1 view .LVU595
 2541 0014 8C2F      		mov r24,r28
 2542 0016 00C0      		rjmp .L268
 2543               	.LVL232:
 2544               	.L261:
1204:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 2545               		.loc 1 1204 13 is_stmt 0 view .LVU596
 2546 0018 CAEF      		ldi r28,lo8(-6)
1194:quantum/quantum.c ****         case 0:
 2547               		.loc 1 1194 5 view .LVU597
 2548 001a 8031      		cpi r24,lo8(16)
 2549 001c 00F0      		brlo .L269
 2550               	/* epilogue start */
1206:quantum/quantum.c ****             break;
1207:quantum/quantum.c ****     }
1208:quantum/quantum.c **** }
 2551               		.loc 1 1208 1 view .LVU598
 2552 001e CF91      		pop r28
 2553 0020 0895      		ret
 2554               	.L266:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2555               		.loc 1 1196 13 is_stmt 1 view .LVU599
 2556 0022 87E2      		ldi r24,lo8(39)
 2557               	.LVL233:
1196:quantum/quantum.c ****             unregister_code(KC_0);
 2558               		.loc 1 1196 13 is_stmt 0 view .LVU600
 2559 0024 0E94 0000 		call register_code
 2560               	.LVL234:
1197:quantum/quantum.c ****             break;
 2561               		.loc 1 1197 13 is_stmt 1 view .LVU601
 2562 0028 87E2      		ldi r24,lo8(39)
 2563               	.L268:
 2564               	/* epilogue start */
 2565               		.loc 1 1208 1 is_stmt 0 view .LVU602
 2566 002a CF91      		pop r28
1205:quantum/quantum.c ****             break;
 2567               		.loc 1 1205 13 view .LVU603
 2568 002c 0C94 0000 		jmp unregister_code
 2569               	.LVL235:
 2570               		.cfi_endproc
 2571               	.LFE45:
 2573               		.section	.text.send_byte,"ax",@progbits
 2574               	.global	send_byte
 2576               	send_byte:
 2577               	.LVL236:
 2578               	.LFB44:
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2579               		.loc 1 1187 32 is_stmt 1 view -0
 2580               		.cfi_startproc
1187:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 2581               		.loc 1 1187 32 is_stmt 0 view .LVU605
 2582 0000 CF93      		push r28
 2583               	.LCFI39:
 2584               		.cfi_def_cfa_offset 3
 2585               		.cfi_offset 28, -2
 2586               	/* prologue: function */
 2587               	/* frame size = 0 */
 2588               	/* stack size = 1 */
 2589               	.L__stack_usage = 1
 2590 0002 C82F      		mov r28,r24
1188:quantum/quantum.c ****     send_nibble(nibble);
 2591               		.loc 1 1188 5 is_stmt 1 view .LVU606
 2592               	.LVL237:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2593               		.loc 1 1189 5 view .LVU607
 2594 0004 8295      		swap r24
 2595               	.LVL238:
1189:quantum/quantum.c ****     send_nibble(number & 0xF);
 2596               		.loc 1 1189 5 is_stmt 0 view .LVU608
 2597 0006 8F70      		andi r24,lo8(15)
 2598 0008 0E94 0000 		call send_nibble
 2599               	.LVL239:
1190:quantum/quantum.c **** }
 2600               		.loc 1 1190 5 is_stmt 1 view .LVU609
 2601 000c 8C2F      		mov r24,r28
 2602 000e 8F70      		andi r24,lo8(15)
 2603               	/* epilogue start */
1191:quantum/quantum.c **** 
 2604               		.loc 1 1191 1 is_stmt 0 view .LVU610
 2605 0010 CF91      		pop r28
 2606               	.LVL240:
1190:quantum/quantum.c **** }
 2607               		.loc 1 1190 5 view .LVU611
 2608 0012 0C94 0000 		jmp send_nibble
 2609               	.LVL241:
 2610               		.cfi_endproc
 2611               	.LFE44:
 2613               		.section	.text.send_word,"ax",@progbits
 2614               	.global	send_word
 2616               	send_word:
 2617               	.LVL242:
 2618               	.LFB43:
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2619               		.loc 1 1181 33 is_stmt 1 view -0
 2620               		.cfi_startproc
1181:quantum/quantum.c ****     uint8_t byte = number >> 8;
 2621               		.loc 1 1181 33 is_stmt 0 view .LVU613
 2622 0000 CF93      		push r28
 2623               	.LCFI40:
 2624               		.cfi_def_cfa_offset 3
 2625               		.cfi_offset 28, -2
 2626               	/* prologue: function */
 2627               	/* frame size = 0 */
 2628               	/* stack size = 1 */
 2629               	.L__stack_usage = 1
 2630 0002 C82F      		mov r28,r24
1182:quantum/quantum.c ****     send_byte(byte);
 2631               		.loc 1 1182 5 is_stmt 1 view .LVU614
 2632               	.LVL243:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2633               		.loc 1 1183 5 view .LVU615
 2634 0004 892F      		mov r24,r25
 2635               	.LVL244:
1183:quantum/quantum.c ****     send_byte(number & 0xFF);
 2636               		.loc 1 1183 5 is_stmt 0 view .LVU616
 2637 0006 0E94 0000 		call send_byte
 2638               	.LVL245:
1184:quantum/quantum.c **** }
 2639               		.loc 1 1184 5 is_stmt 1 view .LVU617
 2640 000a 8C2F      		mov r24,r28
 2641               	/* epilogue start */
1185:quantum/quantum.c **** 
 2642               		.loc 1 1185 1 is_stmt 0 view .LVU618
 2643 000c CF91      		pop r28
1184:quantum/quantum.c **** }
 2644               		.loc 1 1184 5 view .LVU619
 2645 000e 0C94 0000 		jmp send_byte
 2646               	.LVL246:
 2647               		.cfi_endproc
 2648               	.LFE43:
 2650               		.section	.text.send_dword,"ax",@progbits
 2651               	.global	send_dword
 2653               	send_dword:
 2654               	.LVL247:
 2655               	.LFB42:
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2656               		.loc 1 1175 34 is_stmt 1 view -0
 2657               		.cfi_startproc
1175:quantum/quantum.c ****     uint16_t word = (number >> 16);
 2658               		.loc 1 1175 34 is_stmt 0 view .LVU621
 2659 0000 CF92      		push r12
 2660               	.LCFI41:
 2661               		.cfi_def_cfa_offset 3
 2662               		.cfi_offset 12, -2
 2663 0002 DF92      		push r13
 2664               	.LCFI42:
 2665               		.cfi_def_cfa_offset 4
 2666               		.cfi_offset 13, -3
 2667 0004 EF92      		push r14
 2668               	.LCFI43:
 2669               		.cfi_def_cfa_offset 5
 2670               		.cfi_offset 14, -4
 2671 0006 FF92      		push r15
 2672               	.LCFI44:
 2673               		.cfi_def_cfa_offset 6
 2674               		.cfi_offset 15, -5
 2675               	/* prologue: function */
 2676               	/* frame size = 0 */
 2677               	/* stack size = 4 */
 2678               	.L__stack_usage = 4
 2679 0008 6B01      		movw r12,r22
1176:quantum/quantum.c ****     send_word(word);
 2680               		.loc 1 1176 5 is_stmt 1 view .LVU622
1177:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 2681               		.loc 1 1177 5 view .LVU623
 2682 000a 0E94 0000 		call send_word
 2683               	.LVL248:
1178:quantum/quantum.c **** }
 2684               		.loc 1 1178 5 view .LVU624
 2685 000e C601      		movw r24,r12
 2686               	/* epilogue start */
1179:quantum/quantum.c **** 
 2687               		.loc 1 1179 1 is_stmt 0 view .LVU625
 2688 0010 FF90      		pop r15
 2689 0012 EF90      		pop r14
 2690 0014 DF90      		pop r13
 2691 0016 CF90      		pop r12
1178:quantum/quantum.c **** }
 2692               		.loc 1 1178 5 view .LVU626
 2693 0018 0C94 0000 		jmp send_word
 2694               	.LVL249:
 2695               		.cfi_endproc
 2696               	.LFE42:
 2698               		.section	.text.hex_to_keycode,"ax",@progbits
 2699               		.weak	hex_to_keycode
 2701               	hex_to_keycode:
 2702               	.LVL250:
 2703               	.LFB46:
1209:quantum/quantum.c **** 
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** __attribute__((weak))
1212:quantum/quantum.c **** uint16_t hex_to_keycode(uint8_t hex)
1213:quantum/quantum.c **** {
 2704               		.loc 1 1213 1 is_stmt 1 view -0
 2705               		.cfi_startproc
 2706               	/* prologue: function */
 2707               	/* frame size = 0 */
 2708               	/* stack size = 0 */
 2709               	.L__stack_usage = 0
1214:quantum/quantum.c ****   hex = hex & 0xF;
 2710               		.loc 1 1214 3 view .LVU628
 2711               		.loc 1 1214 7 is_stmt 0 view .LVU629
 2712 0000 282F      		mov r18,r24
 2713 0002 2F70      		andi r18,lo8(15)
 2714               	.LVL251:
1215:quantum/quantum.c ****   if (hex == 0x0) {
 2715               		.loc 1 1215 3 is_stmt 1 view .LVU630
 2716               		.loc 1 1215 6 is_stmt 0 view .LVU631
 2717 0004 01F0      		breq .L276
1216:quantum/quantum.c ****     return KC_0;
1217:quantum/quantum.c ****   } else if (hex < 0xA) {
 2718               		.loc 1 1217 10 is_stmt 1 view .LVU632
 2719 0006 822F      		mov r24,r18
 2720 0008 90E0      		ldi r25,0
 2721               		.loc 1 1217 13 is_stmt 0 view .LVU633
 2722 000a 2A30      		cpi r18,lo8(10)
 2723 000c 00F4      		brsh .L275
1218:quantum/quantum.c ****     return KC_1 + (hex - 0x1);
 2724               		.loc 1 1218 5 is_stmt 1 view .LVU634
 2725               		.loc 1 1218 17 is_stmt 0 view .LVU635
 2726 000e 4D96      		adiw r24,29
 2727 0010 0895      		ret
 2728               	.L275:
1219:quantum/quantum.c ****   } else {
1220:quantum/quantum.c ****     return KC_A + (hex - 0xA);
 2729               		.loc 1 1220 5 is_stmt 1 view .LVU636
 2730               		.loc 1 1220 17 is_stmt 0 view .LVU637
 2731 0012 0697      		sbiw r24,6
 2732 0014 0895      		ret
 2733               	.L276:
1216:quantum/quantum.c ****   } else if (hex < 0xA) {
 2734               		.loc 1 1216 12 view .LVU638
 2735 0016 87E2      		ldi r24,lo8(39)
 2736 0018 90E0      		ldi r25,0
 2737               	/* epilogue start */
1221:quantum/quantum.c ****   }
1222:quantum/quantum.c **** }
 2738               		.loc 1 1222 1 view .LVU639
 2739 001a 0895      		ret
 2740               		.cfi_endproc
 2741               	.LFE46:
 2743               		.section	.text.api_send_unicode,"ax",@progbits
 2744               	.global	api_send_unicode
 2746               	api_send_unicode:
 2747               	.LVL252:
 2748               	.LFB47:
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 2749               		.loc 1 1224 41 is_stmt 1 view -0
 2750               		.cfi_startproc
 2751               	/* prologue: function */
 2752               	/* frame size = 0 */
 2753               	/* stack size = 0 */
 2754               	.L__stack_usage = 0
1225:quantum/quantum.c **** #ifdef API_ENABLE
1226:quantum/quantum.c ****     uint8_t chunk[4];
1227:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1228:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1229:quantum/quantum.c **** #endif
1230:quantum/quantum.c **** }
 2755               		.loc 1 1230 1 view .LVU641
 2756               	/* epilogue start */
 2757 0000 0895      		ret
 2758               		.cfi_endproc
 2759               	.LFE47:
 2761               		.section	.text.led_set_user,"ax",@progbits
 2762               		.weak	led_set_user
 2764               	led_set_user:
 2765               	.LVL253:
 2766               	.LFB48:
1231:quantum/quantum.c **** 
1232:quantum/quantum.c **** __attribute__ ((weak))
1233:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 2767               		.loc 1 1233 36 view -0
 2768               		.cfi_startproc
 2769               	/* prologue: function */
 2770               	/* frame size = 0 */
 2771               	/* stack size = 0 */
 2772               	.L__stack_usage = 0
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** }
 2773               		.loc 1 1235 1 view .LVU643
 2774               	/* epilogue start */
 2775 0000 0895      		ret
 2776               		.cfi_endproc
 2777               	.LFE48:
 2779               		.set	led_set_user.localalias.1,led_set_user
 2780               		.section	.text.backlight_set,"ax",@progbits
 2781               		.weak	backlight_set
 2783               	backlight_set:
 2784               	.LFB61:
 2785               		.cfi_startproc
 2786               	/* prologue: function */
 2787               	/* frame size = 0 */
 2788               	/* stack size = 0 */
 2789               	.L__stack_usage = 0
 2790               	/* epilogue start */
 2791 0000 0895      		ret
 2792               		.cfi_endproc
 2793               	.LFE61:
 2795               		.section	.text.led_set_kb,"ax",@progbits
 2796               		.weak	led_set_kb
 2798               	led_set_kb:
 2799               	.LVL254:
 2800               	.LFB49:
1236:quantum/quantum.c **** 
1237:quantum/quantum.c **** __attribute__ ((weak))
1238:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 2801               		.loc 1 1238 34 view -0
 2802               		.cfi_startproc
 2803               	/* prologue: function */
 2804               	/* frame size = 0 */
 2805               	/* stack size = 0 */
 2806               	.L__stack_usage = 0
1239:quantum/quantum.c ****     led_set_user(usb_led);
 2807               		.loc 1 1239 5 view .LVU645
 2808 0000 0C94 0000 		jmp led_set_user
 2809               	.LVL255:
 2810               		.loc 1 1239 5 is_stmt 0 view .LVU646
 2811               		.cfi_endproc
 2812               	.LFE49:
 2814               		.section	.text.led_init_ports,"ax",@progbits
 2815               		.weak	led_init_ports
 2817               	led_init_ports:
 2818               	.LFB50:
1240:quantum/quantum.c **** }
1241:quantum/quantum.c **** 
1242:quantum/quantum.c **** __attribute__ ((weak))
1243:quantum/quantum.c **** void led_init_ports(void)
1244:quantum/quantum.c **** {
 2819               		.loc 1 1244 1 is_stmt 1 view -0
 2820               		.cfi_startproc
 2821               	/* prologue: function */
 2822               	/* frame size = 0 */
 2823               	/* stack size = 0 */
 2824               	.L__stack_usage = 0
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** }
 2825               		.loc 1 1246 1 view .LVU648
 2826               	/* epilogue start */
 2827 0000 0895      		ret
 2828               		.cfi_endproc
 2829               	.LFE50:
 2831               		.section	.text.led_set,"ax",@progbits
 2832               		.weak	led_set
 2834               	led_set:
 2835               	.LVL256:
 2836               	.LFB51:
1247:quantum/quantum.c **** 
1248:quantum/quantum.c **** __attribute__ ((weak))
1249:quantum/quantum.c **** void led_set(uint8_t usb_led)
1250:quantum/quantum.c **** {
 2837               		.loc 1 1250 1 view -0
 2838               		.cfi_startproc
 2839               	/* prologue: function */
 2840               	/* frame size = 0 */
 2841               	/* stack size = 0 */
 2842               	.L__stack_usage = 0
1251:quantum/quantum.c **** 
1252:quantum/quantum.c ****   // Example LED Code
1253:quantum/quantum.c ****   //
1254:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
1255:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
1256:quantum/quantum.c ****     // {
1257:quantum/quantum.c ****     //     // Output high.
1258:quantum/quantum.c ****     //     DDRE |= (1<<6);
1259:quantum/quantum.c ****     //     PORTE |= (1<<6);
1260:quantum/quantum.c ****     // }
1261:quantum/quantum.c ****     // else
1262:quantum/quantum.c ****     // {
1263:quantum/quantum.c ****     //     // Output low.
1264:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
1265:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
1266:quantum/quantum.c ****     // }
1267:quantum/quantum.c **** 
1268:quantum/quantum.c ****   led_set_kb(usb_led);
 2843               		.loc 1 1268 3 view .LVU650
 2844 0000 0C94 0000 		jmp led_set_kb
 2845               	.LVL257:
 2846               		.loc 1 1268 3 is_stmt 0 view .LVU651
 2847               		.cfi_endproc
 2848               	.LFE51:
 2850               		.section	.text.startup_user,"ax",@progbits
 2851               		.weak	startup_user
 2853               	startup_user:
 2854               	.LFB55:
 2855               		.cfi_startproc
 2856               	/* prologue: function */
 2857               	/* frame size = 0 */
 2858               	/* stack size = 0 */
 2859               	.L__stack_usage = 0
 2860               	/* epilogue start */
 2861 0000 0895      		ret
 2862               		.cfi_endproc
 2863               	.LFE55:
 2865               		.section	.text.shutdown_user,"ax",@progbits
 2866               		.weak	shutdown_user
 2868               	shutdown_user:
 2869               	.LFB57:
 2870               		.cfi_startproc
 2871               	/* prologue: function */
 2872               	/* frame size = 0 */
 2873               	/* stack size = 0 */
 2874               	.L__stack_usage = 0
 2875               	/* epilogue start */
 2876 0000 0895      		ret
 2877               		.cfi_endproc
 2878               	.LFE57:
 2880               	.global	rgb_matrix_task_counter
 2881               		.section	.bss.rgb_matrix_task_counter,"aw",@nobits
 2884               	rgb_matrix_task_counter:
 2885 0000 00        		.zero	1
 2886               		.weak	ascii_to_keycode_lut
 2887               		.section	.progmem.data.ascii_to_keycode_lut,"a"
 2890               	ascii_to_keycode_lut:
 2891 0000 00        		.byte	0
 2892 0001 00        		.byte	0
 2893 0002 00        		.byte	0
 2894 0003 00        		.byte	0
 2895 0004 00        		.byte	0
 2896 0005 00        		.byte	0
 2897 0006 00        		.byte	0
 2898 0007 00        		.byte	0
 2899 0008 2A        		.byte	42
 2900 0009 2B        		.byte	43
 2901 000a 28        		.byte	40
 2902 000b 00        		.byte	0
 2903 000c 00        		.byte	0
 2904 000d 00        		.byte	0
 2905 000e 00        		.byte	0
 2906 000f 00        		.byte	0
 2907 0010 00        		.byte	0
 2908 0011 00        		.byte	0
 2909 0012 00        		.byte	0
 2910 0013 00        		.byte	0
 2911 0014 00        		.byte	0
 2912 0015 00        		.byte	0
 2913 0016 00        		.byte	0
 2914 0017 00        		.byte	0
 2915 0018 00        		.byte	0
 2916 0019 00        		.byte	0
 2917 001a 00        		.byte	0
 2918 001b 29        		.byte	41
 2919 001c 00        		.byte	0
 2920 001d 00        		.byte	0
 2921 001e 00        		.byte	0
 2922 001f 00        		.byte	0
 2923 0020 2C        		.byte	44
 2924 0021 1E        		.byte	30
 2925 0022 34        		.byte	52
 2926 0023 20        		.byte	32
 2927 0024 21        		.byte	33
 2928 0025 22        		.byte	34
 2929 0026 24        		.byte	36
 2930 0027 34        		.byte	52
 2931 0028 26        		.byte	38
 2932 0029 27        		.byte	39
 2933 002a 25        		.byte	37
 2934 002b 2E        		.byte	46
 2935 002c 36        		.byte	54
 2936 002d 2D        		.byte	45
 2937 002e 37        		.byte	55
 2938 002f 38        		.byte	56
 2939 0030 27        		.byte	39
 2940 0031 1E        		.byte	30
 2941 0032 1F        		.byte	31
 2942 0033 20        		.byte	32
 2943 0034 21        		.byte	33
 2944 0035 22        		.byte	34
 2945 0036 23        		.byte	35
 2946 0037 24        		.byte	36
 2947 0038 25        		.byte	37
 2948 0039 26        		.byte	38
 2949 003a 33        		.byte	51
 2950 003b 33        		.byte	51
 2951 003c 36        		.byte	54
 2952 003d 2E        		.byte	46
 2953 003e 37        		.byte	55
 2954 003f 38        		.byte	56
 2955 0040 1F        		.byte	31
 2956 0041 04        		.byte	4
 2957 0042 05        		.byte	5
 2958 0043 06        		.byte	6
 2959 0044 07        		.byte	7
 2960 0045 08        		.byte	8
 2961 0046 09        		.byte	9
 2962 0047 0A        		.byte	10
 2963 0048 0B        		.byte	11
 2964 0049 0C        		.byte	12
 2965 004a 0D        		.byte	13
 2966 004b 0E        		.byte	14
 2967 004c 0F        		.byte	15
 2968 004d 10        		.byte	16
 2969 004e 11        		.byte	17
 2970 004f 12        		.byte	18
 2971 0050 13        		.byte	19
 2972 0051 14        		.byte	20
 2973 0052 15        		.byte	21
 2974 0053 16        		.byte	22
 2975 0054 17        		.byte	23
 2976 0055 18        		.byte	24
 2977 0056 19        		.byte	25
 2978 0057 1A        		.byte	26
 2979 0058 1B        		.byte	27
 2980 0059 1C        		.byte	28
 2981 005a 1D        		.byte	29
 2982 005b 2F        		.byte	47
 2983 005c 31        		.byte	49
 2984 005d 30        		.byte	48
 2985 005e 23        		.byte	35
 2986 005f 2D        		.byte	45
 2987 0060 35        		.byte	53
 2988 0061 04        		.byte	4
 2989 0062 05        		.byte	5
 2990 0063 06        		.byte	6
 2991 0064 07        		.byte	7
 2992 0065 08        		.byte	8
 2993 0066 09        		.byte	9
 2994 0067 0A        		.byte	10
 2995 0068 0B        		.byte	11
 2996 0069 0C        		.byte	12
 2997 006a 0D        		.byte	13
 2998 006b 0E        		.byte	14
 2999 006c 0F        		.byte	15
 3000 006d 10        		.byte	16
 3001 006e 11        		.byte	17
 3002 006f 12        		.byte	18
 3003 0070 13        		.byte	19
 3004 0071 14        		.byte	20
 3005 0072 15        		.byte	21
 3006 0073 16        		.byte	22
 3007 0074 17        		.byte	23
 3008 0075 18        		.byte	24
 3009 0076 19        		.byte	25
 3010 0077 1A        		.byte	26
 3011 0078 1B        		.byte	27
 3012 0079 1C        		.byte	28
 3013 007a 1D        		.byte	29
 3014 007b 2F        		.byte	47
 3015 007c 31        		.byte	49
 3016 007d 30        		.byte	48
 3017 007e 35        		.byte	53
 3018 007f 4C        		.byte	76
 3019               		.weak	ascii_to_shift_lut
 3020               		.section	.progmem.data.ascii_to_shift_lut,"a"
 3023               	ascii_to_shift_lut:
 3024 0000 00        		.byte	0
 3025 0001 00        		.byte	0
 3026 0002 00        		.byte	0
 3027 0003 00        		.byte	0
 3028 0004 00        		.byte	0
 3029 0005 00        		.byte	0
 3030 0006 00        		.byte	0
 3031 0007 00        		.byte	0
 3032 0008 00        		.byte	0
 3033 0009 00        		.byte	0
 3034 000a 00        		.byte	0
 3035 000b 00        		.byte	0
 3036 000c 00        		.byte	0
 3037 000d 00        		.byte	0
 3038 000e 00        		.byte	0
 3039 000f 00        		.byte	0
 3040 0010 00        		.byte	0
 3041 0011 00        		.byte	0
 3042 0012 00        		.byte	0
 3043 0013 00        		.byte	0
 3044 0014 00        		.byte	0
 3045 0015 00        		.byte	0
 3046 0016 00        		.byte	0
 3047 0017 00        		.byte	0
 3048 0018 00        		.byte	0
 3049 0019 00        		.byte	0
 3050 001a 00        		.byte	0
 3051 001b 00        		.byte	0
 3052 001c 00        		.byte	0
 3053 001d 00        		.byte	0
 3054 001e 00        		.byte	0
 3055 001f 00        		.byte	0
 3056 0020 00        		.byte	0
 3057 0021 01        		.byte	1
 3058 0022 01        		.byte	1
 3059 0023 01        		.byte	1
 3060 0024 01        		.byte	1
 3061 0025 01        		.byte	1
 3062 0026 01        		.byte	1
 3063 0027 00        		.byte	0
 3064 0028 01        		.byte	1
 3065 0029 01        		.byte	1
 3066 002a 01        		.byte	1
 3067 002b 01        		.byte	1
 3068 002c 00        		.byte	0
 3069 002d 00        		.byte	0
 3070 002e 00        		.byte	0
 3071 002f 00        		.byte	0
 3072 0030 00        		.byte	0
 3073 0031 00        		.byte	0
 3074 0032 00        		.byte	0
 3075 0033 00        		.byte	0
 3076 0034 00        		.byte	0
 3077 0035 00        		.byte	0
 3078 0036 00        		.byte	0
 3079 0037 00        		.byte	0
 3080 0038 00        		.byte	0
 3081 0039 00        		.byte	0
 3082 003a 01        		.byte	1
 3083 003b 00        		.byte	0
 3084 003c 01        		.byte	1
 3085 003d 00        		.byte	0
 3086 003e 01        		.byte	1
 3087 003f 01        		.byte	1
 3088 0040 01        		.byte	1
 3089 0041 01        		.byte	1
 3090 0042 01        		.byte	1
 3091 0043 01        		.byte	1
 3092 0044 01        		.byte	1
 3093 0045 01        		.byte	1
 3094 0046 01        		.byte	1
 3095 0047 01        		.byte	1
 3096 0048 01        		.byte	1
 3097 0049 01        		.byte	1
 3098 004a 01        		.byte	1
 3099 004b 01        		.byte	1
 3100 004c 01        		.byte	1
 3101 004d 01        		.byte	1
 3102 004e 01        		.byte	1
 3103 004f 01        		.byte	1
 3104 0050 01        		.byte	1
 3105 0051 01        		.byte	1
 3106 0052 01        		.byte	1
 3107 0053 01        		.byte	1
 3108 0054 01        		.byte	1
 3109 0055 01        		.byte	1
 3110 0056 01        		.byte	1
 3111 0057 01        		.byte	1
 3112 0058 01        		.byte	1
 3113 0059 01        		.byte	1
 3114 005a 01        		.byte	1
 3115 005b 00        		.byte	0
 3116 005c 00        		.byte	0
 3117 005d 00        		.byte	0
 3118 005e 01        		.byte	1
 3119 005f 01        		.byte	1
 3120 0060 00        		.byte	0
 3121 0061 00        		.byte	0
 3122 0062 00        		.byte	0
 3123 0063 00        		.byte	0
 3124 0064 00        		.byte	0
 3125 0065 00        		.byte	0
 3126 0066 00        		.byte	0
 3127 0067 00        		.byte	0
 3128 0068 00        		.byte	0
 3129 0069 00        		.byte	0
 3130 006a 00        		.byte	0
 3131 006b 00        		.byte	0
 3132 006c 00        		.byte	0
 3133 006d 00        		.byte	0
 3134 006e 00        		.byte	0
 3135 006f 00        		.byte	0
 3136 0070 00        		.byte	0
 3137 0071 00        		.byte	0
 3138 0072 00        		.byte	0
 3139 0073 00        		.byte	0
 3140 0074 00        		.byte	0
 3141 0075 00        		.byte	0
 3142 0076 00        		.byte	0
 3143 0077 00        		.byte	0
 3144 0078 00        		.byte	0
 3145 0079 00        		.byte	0
 3146 007a 00        		.byte	0
 3147 007b 01        		.byte	1
 3148 007c 01        		.byte	1
 3149 007d 01        		.byte	1
 3150 007e 01        		.byte	1
 3151 007f 00        		.byte	0
 3152               		.section	.bss.grave_esc_was_shifted,"aw",@nobits
 3155               	grave_esc_was_shifted:
 3156 0000 00        		.zero	1
 3157               		.section	.bss.scs_timer,"aw",@nobits
 3160               	scs_timer:
 3161 0000 0000 0000 		.zero	4
 3162               		.section	.bss.shift_interrupted,"aw",@nobits
 3165               	shift_interrupted:
 3166 0000 0000      		.zero	2
 3167               		.text
 3168               	.Letext0:
 3169               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 3170               		.file 4 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/lib/avr-gcc/8/gcc/avr/8.3.0/include/stddef.h"
 3171               		.file 5 "./tmk_core/common/keyboard.h"
 3172               		.file 6 "./tmk_core/common/action.h"
 3173               		.file 7 "./tmk_core/common/report.h"
 3174               		.file 8 "./tmk_core/common/host.h"
 3175               		.file 9 "./tmk_core/common/debug.h"
 3176               		.file 10 "quantum/keycode_config.h"
 3177               		.file 11 "./tmk_core/common/keycode.h"
 3178               		.file 12 "quantum/quantum_keycodes.h"
 3179               		.file 13 "quantum/keymap.h"
 3180               		.file 14 "./quantum/rgblight_types.h"
 3181               		.file 15 "quantum/rgblight.h"
 3182               		.file 16 "./tmk_core/common/action_layer.h"
 3183               		.file 17 "./tmk_core/common/timer.h"
 3184               		.file 18 "./tmk_core/common/action_util.h"
 3185               		.file 19 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdlib.h"
 3186               		.file 20 "./quantum/process_keycode/process_tap_dance.h"
 3187               		.file 21 "quantum/quantum.h"
 3188               		.file 22 "./tmk_core/protocol/lufa/outputselect.h"
 3189               		.file 23 "./tmk_core/common/backlight.h"
 3190               		.file 24 "./tmk_core/common/eeconfig.h"
 3191               		.file 25 "./quantum/process_keycode/process_leader.h"
 3192               		.file 26 "./tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:12     .text.do_code16:0000000000000000 do_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:145    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:177    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:190    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:222    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:236    .text.register_code16:0000000000000000 register_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:294    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:352    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:374    .text.process_record_user:0000000000000000 process_record_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:396    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:416    .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:467    .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:3165   .bss.shift_interrupted:0000000000000000 shift_interrupted
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:3160   .bss.scs_timer:0000000000000000 scs_timer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:3155   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:1512   .text.send_char:0000000000000000 send_char
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2890   .progmem.data.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:3023   .progmem.data.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:1613   .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:1789   .text.send_string:0000000000000000 send_string
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:1809   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2037   .text.send_string_P:0000000000000000 send_string_P
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2057   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2109   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2282   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2324   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2459   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2476   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2496   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2511   .text.send_nibble:0000000000000000 send_nibble
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2576   .text.send_byte:0000000000000000 send_byte
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2616   .text.send_word:0000000000000000 send_word
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2653   .text.send_dword:0000000000000000 send_dword
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2701   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2746   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2764   .text.led_set_user:0000000000000000 led_set_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2764   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2783   .text.backlight_set:0000000000000000 backlight_set
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2798   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2817   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2834   .text.led_set:0000000000000000 led_set
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2853   .text.startup_user:0000000000000000 startup_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2868   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//ccWTQGZS.s:2884   .bss.rgb_matrix_task_counter:0000000000000000 rgb_matrix_task_counter

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
clear_keyboard
bootloader_jump
layer_switch_get_layer
keymap_key_to_keycode
preprocess_tap_dance
process_tap_dance
process_leader
rgblight_toggle
rgblight_decrease_hue
rgblight_decrease_val
rgblight_mode
rgblight_get_mode
timer_read
register_mods
timer_elapsed
unregister_mods
debug_config
get_mods
rgblight_step_reverse
rgblight_step
rgblight_increase_hue
rgblight_increase_sat
rgblight_decrease_sat
rgblight_increase_val
rgblight_increase_speed
rgblight_decrease_speed
set_output
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
add_key
del_key
eeconfig_update_default_layer
default_layer_set
layer_state
layer_state_set
matrix_init_kb
matrix_scan_tap_dance
matrix_scan_kb
__do_clear_bss
