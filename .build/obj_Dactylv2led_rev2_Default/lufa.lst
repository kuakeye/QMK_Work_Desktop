   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB127:
  14               		.file 1 "./tmk_core/protocol/lufa/lufa.c"
   1:./tmk_core/protocol/lufa/lufa.c **** /*
   2:./tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:./tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:./tmk_core/protocol/lufa/lufa.c ****  */
   7:./tmk_core/protocol/lufa/lufa.c **** 
   8:./tmk_core/protocol/lufa/lufa.c **** /*
   9:./tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:./tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:./tmk_core/protocol/lufa/lufa.c **** 
  12:./tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:./tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:./tmk_core/protocol/lufa/lufa.c **** */
  15:./tmk_core/protocol/lufa/lufa.c **** 
  16:./tmk_core/protocol/lufa/lufa.c **** /*
  17:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:./tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:./tmk_core/protocol/lufa/lufa.c **** 
  20:./tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:./tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:./tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:./tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:./tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:./tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:./tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:./tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:./tmk_core/protocol/lufa/lufa.c **** 
  29:./tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:./tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:./tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:./tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:./tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:./tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:./tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:./tmk_core/protocol/lufa/lufa.c ****   this software.
  37:./tmk_core/protocol/lufa/lufa.c **** */
  38:./tmk_core/protocol/lufa/lufa.c **** 
  39:./tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:./tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:./tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:./tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:./tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:./tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:./tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:./tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:./tmk_core/protocol/lufa/lufa.c **** #include "sleep_led.h"
  49:./tmk_core/protocol/lufa/lufa.c **** #endif
  50:./tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:./tmk_core/protocol/lufa/lufa.c **** 
  52:./tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:./tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:./tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:./tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:./tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:./tmk_core/protocol/lufa/lufa.c **** 
  58:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  59:./tmk_core/protocol/lufa/lufa.c ****   #include "keycode_config.h"
  60:./tmk_core/protocol/lufa/lufa.c **** 
  61:./tmk_core/protocol/lufa/lufa.c ****   extern keymap_config_t keymap_config;
  62:./tmk_core/protocol/lufa/lufa.c **** #endif
  63:./tmk_core/protocol/lufa/lufa.c **** 
  64:./tmk_core/protocol/lufa/lufa.c **** 
  65:./tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:./tmk_core/protocol/lufa/lufa.c ****     #include <audio.h>
  67:./tmk_core/protocol/lufa/lufa.c **** #endif
  68:./tmk_core/protocol/lufa/lufa.c **** 
  69:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:./tmk_core/protocol/lufa/lufa.c ****   #ifdef MODULE_ADAFRUIT_BLE
  71:./tmk_core/protocol/lufa/lufa.c ****     #include "adafruit_ble.h"
  72:./tmk_core/protocol/lufa/lufa.c ****   #else
  73:./tmk_core/protocol/lufa/lufa.c ****     #include "bluetooth.h"
  74:./tmk_core/protocol/lufa/lufa.c ****   #endif
  75:./tmk_core/protocol/lufa/lufa.c **** #endif
  76:./tmk_core/protocol/lufa/lufa.c **** 
  77:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:./tmk_core/protocol/lufa/lufa.c ****     #include "virtser.h"
  79:./tmk_core/protocol/lufa/lufa.c **** #endif
  80:./tmk_core/protocol/lufa/lufa.c **** 
  81:./tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:./tmk_core/protocol/lufa/lufa.c ****     #include "rgblight.h"
  83:./tmk_core/protocol/lufa/lufa.c **** #endif
  84:./tmk_core/protocol/lufa/lufa.c **** 
  85:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:./tmk_core/protocol/lufa/lufa.c ****   #include "qmk_midi.h"
  87:./tmk_core/protocol/lufa/lufa.c **** #endif
  88:./tmk_core/protocol/lufa/lufa.c **** 
  89:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:./tmk_core/protocol/lufa/lufa.c **** 	#include "raw_hid.h"
  91:./tmk_core/protocol/lufa/lufa.c **** #endif
  92:./tmk_core/protocol/lufa/lufa.c **** 
  93:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:./tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:./tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_protocol = 1;
  96:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:./tmk_core/protocol/lufa/lufa.c **** 
  98:./tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:./tmk_core/protocol/lufa/lufa.c **** 
 100:./tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report);
 103:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report);
 104:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data);
 105:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data);
 106:./tmk_core/protocol/lufa/lufa.c **** host_driver_t lufa_driver = {
 107:./tmk_core/protocol/lufa/lufa.c ****     keyboard_leds,
 108:./tmk_core/protocol/lufa/lufa.c ****     send_keyboard,
 109:./tmk_core/protocol/lufa/lufa.c ****     send_mouse,
 110:./tmk_core/protocol/lufa/lufa.c ****     send_system,
 111:./tmk_core/protocol/lufa/lufa.c ****     send_consumer,
 112:./tmk_core/protocol/lufa/lufa.c **** };
 113:./tmk_core/protocol/lufa/lufa.c **** 
 114:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 115:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device =
 116:./tmk_core/protocol/lufa/lufa.c **** {
 117:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 118:./tmk_core/protocol/lufa/lufa.c ****   {
 119:./tmk_core/protocol/lufa/lufa.c ****     .ControlInterfaceNumber = CCI_INTERFACE,
 120:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint         =
 121:./tmk_core/protocol/lufa/lufa.c ****     {
 122:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_IN_EPADDR,
 123:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 124:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 125:./tmk_core/protocol/lufa/lufa.c ****     },
 126:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint	    =
 127:./tmk_core/protocol/lufa/lufa.c ****     {
 128:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_OUT_EPADDR,
 129:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_EPSIZE,
 130:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 131:./tmk_core/protocol/lufa/lufa.c ****     },
 132:./tmk_core/protocol/lufa/lufa.c ****     .NotificationEndpoint   =
 133:./tmk_core/protocol/lufa/lufa.c ****     {
 134:./tmk_core/protocol/lufa/lufa.c ****       .Address		= CDC_NOTIFICATION_EPADDR,
 135:./tmk_core/protocol/lufa/lufa.c ****       .Size		= CDC_NOTIFICATION_EPSIZE,
 136:./tmk_core/protocol/lufa/lufa.c ****       .Banks		= 1,
 137:./tmk_core/protocol/lufa/lufa.c ****     },
 138:./tmk_core/protocol/lufa/lufa.c ****   },
 139:./tmk_core/protocol/lufa/lufa.c **** };
 140:./tmk_core/protocol/lufa/lufa.c **** #endif
 141:./tmk_core/protocol/lufa/lufa.c **** 
 142:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 143:./tmk_core/protocol/lufa/lufa.c **** 
 144:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 145:./tmk_core/protocol/lufa/lufa.c ****  *
 146:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 147:./tmk_core/protocol/lufa/lufa.c ****  */
 148:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_send( uint8_t *data, uint8_t length )
 149:./tmk_core/protocol/lufa/lufa.c **** {
 150:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: implement variable size packet
 151:./tmk_core/protocol/lufa/lufa.c **** 	if ( length != RAW_EPSIZE )
 152:./tmk_core/protocol/lufa/lufa.c **** 	{
 153:./tmk_core/protocol/lufa/lufa.c **** 		return;
 154:./tmk_core/protocol/lufa/lufa.c **** 	}
 155:./tmk_core/protocol/lufa/lufa.c **** 
 156:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 157:./tmk_core/protocol/lufa/lufa.c **** 	{
 158:./tmk_core/protocol/lufa/lufa.c **** 		return;
 159:./tmk_core/protocol/lufa/lufa.c **** 	}
 160:./tmk_core/protocol/lufa/lufa.c **** 
 161:./tmk_core/protocol/lufa/lufa.c **** 	// TODO: decide if we allow calls to raw_hid_send() in the middle
 162:./tmk_core/protocol/lufa/lufa.c **** 	// of other endpoint usage.
 163:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t ep = Endpoint_GetCurrentEndpoint();
 164:./tmk_core/protocol/lufa/lufa.c **** 
 165:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 166:./tmk_core/protocol/lufa/lufa.c **** 
 167:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if the host is ready to accept another packet
 168:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsINReady())
 169:./tmk_core/protocol/lufa/lufa.c **** 	{
 170:./tmk_core/protocol/lufa/lufa.c **** 		// Write data
 171:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 172:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to send the last packet
 173:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearIN();
 174:./tmk_core/protocol/lufa/lufa.c **** 	}
 175:./tmk_core/protocol/lufa/lufa.c **** 
 176:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(ep);
 177:./tmk_core/protocol/lufa/lufa.c **** }
 178:./tmk_core/protocol/lufa/lufa.c **** 
 179:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 180:./tmk_core/protocol/lufa/lufa.c ****  *
 181:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 182:./tmk_core/protocol/lufa/lufa.c ****  */
 183:./tmk_core/protocol/lufa/lufa.c **** __attribute__ ((weak))
 184:./tmk_core/protocol/lufa/lufa.c **** void raw_hid_receive( uint8_t *data, uint8_t length )
 185:./tmk_core/protocol/lufa/lufa.c **** {
 186:./tmk_core/protocol/lufa/lufa.c **** 	// Users should #include "raw_hid.h" in their own code
 187:./tmk_core/protocol/lufa/lufa.c **** 	// and implement this function there. Leave this as weak linkage
 188:./tmk_core/protocol/lufa/lufa.c **** 	// so users can opt to not handle data coming in.
 189:./tmk_core/protocol/lufa/lufa.c **** }
 190:./tmk_core/protocol/lufa/lufa.c **** 
 191:./tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 192:./tmk_core/protocol/lufa/lufa.c ****  *
 193:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 194:./tmk_core/protocol/lufa/lufa.c ****  */
 195:./tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void)
 196:./tmk_core/protocol/lufa/lufa.c **** {
 197:./tmk_core/protocol/lufa/lufa.c **** 	// Create a temporary buffer to hold the read in data from the host
 198:./tmk_core/protocol/lufa/lufa.c **** 	uint8_t data[RAW_EPSIZE];
 199:./tmk_core/protocol/lufa/lufa.c **** 	bool data_read = false;
 200:./tmk_core/protocol/lufa/lufa.c **** 
 201:./tmk_core/protocol/lufa/lufa.c **** 	// Device must be connected and configured for the task to run
 202:./tmk_core/protocol/lufa/lufa.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 203:./tmk_core/protocol/lufa/lufa.c **** 	return;
 204:./tmk_core/protocol/lufa/lufa.c **** 
 205:./tmk_core/protocol/lufa/lufa.c **** 	Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 206:./tmk_core/protocol/lufa/lufa.c **** 
 207:./tmk_core/protocol/lufa/lufa.c **** 	// Check to see if a packet has been sent from the host
 208:./tmk_core/protocol/lufa/lufa.c **** 	if (Endpoint_IsOUTReceived())
 209:./tmk_core/protocol/lufa/lufa.c **** 	{
 210:./tmk_core/protocol/lufa/lufa.c **** 		// Check to see if the packet contains data
 211:./tmk_core/protocol/lufa/lufa.c **** 		if (Endpoint_IsReadWriteAllowed())
 212:./tmk_core/protocol/lufa/lufa.c **** 		{
 213:./tmk_core/protocol/lufa/lufa.c **** 			/* Read data */
 214:./tmk_core/protocol/lufa/lufa.c **** 			Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 215:./tmk_core/protocol/lufa/lufa.c **** 			data_read = true;
 216:./tmk_core/protocol/lufa/lufa.c **** 		}
 217:./tmk_core/protocol/lufa/lufa.c **** 
 218:./tmk_core/protocol/lufa/lufa.c **** 		// Finalize the stream transfer to receive the last packet
 219:./tmk_core/protocol/lufa/lufa.c **** 		Endpoint_ClearOUT();
 220:./tmk_core/protocol/lufa/lufa.c **** 
 221:./tmk_core/protocol/lufa/lufa.c **** 		if ( data_read )
 222:./tmk_core/protocol/lufa/lufa.c **** 		{
 223:./tmk_core/protocol/lufa/lufa.c **** 			raw_hid_receive( data, sizeof(data) );
 224:./tmk_core/protocol/lufa/lufa.c **** 		}
 225:./tmk_core/protocol/lufa/lufa.c **** 	}
 226:./tmk_core/protocol/lufa/lufa.c **** }
 227:./tmk_core/protocol/lufa/lufa.c **** #endif
 228:./tmk_core/protocol/lufa/lufa.c **** 
 229:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 230:./tmk_core/protocol/lufa/lufa.c ****  * Console
 231:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 232:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 233:./tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 234:./tmk_core/protocol/lufa/lufa.c ****  *
 235:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 236:./tmk_core/protocol/lufa/lufa.c ****  */
 237:./tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void)
 238:./tmk_core/protocol/lufa/lufa.c **** {
 239:./tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 240:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 241:./tmk_core/protocol/lufa/lufa.c ****         return;
 242:./tmk_core/protocol/lufa/lufa.c **** 
 243:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 244:./tmk_core/protocol/lufa/lufa.c **** 
 245:./tmk_core/protocol/lufa/lufa.c **** #if 0
 246:./tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 247:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 248:./tmk_core/protocol/lufa/lufa.c **** 
 249:./tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 250:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 251:./tmk_core/protocol/lufa/lufa.c ****     {
 252:./tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 253:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 254:./tmk_core/protocol/lufa/lufa.c ****         {
 255:./tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 256:./tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 257:./tmk_core/protocol/lufa/lufa.c **** 
 258:./tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 259:./tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 260:./tmk_core/protocol/lufa/lufa.c **** 
 261:./tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 262:./tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 263:./tmk_core/protocol/lufa/lufa.c ****         }
 264:./tmk_core/protocol/lufa/lufa.c **** 
 265:./tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 266:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 267:./tmk_core/protocol/lufa/lufa.c ****     }
 268:./tmk_core/protocol/lufa/lufa.c **** #endif
 269:./tmk_core/protocol/lufa/lufa.c **** 
 270:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 271:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 272:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 273:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 274:./tmk_core/protocol/lufa/lufa.c ****         return;
 275:./tmk_core/protocol/lufa/lufa.c ****     }
 276:./tmk_core/protocol/lufa/lufa.c **** 
 277:./tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 278:./tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed())
 279:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(0);
 280:./tmk_core/protocol/lufa/lufa.c **** 
 281:./tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 282:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 283:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 284:./tmk_core/protocol/lufa/lufa.c ****     }
 285:./tmk_core/protocol/lufa/lufa.c **** 
 286:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 287:./tmk_core/protocol/lufa/lufa.c **** }
 288:./tmk_core/protocol/lufa/lufa.c **** #endif
 289:./tmk_core/protocol/lufa/lufa.c **** 
 290:./tmk_core/protocol/lufa/lufa.c **** 
 291:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 292:./tmk_core/protocol/lufa/lufa.c ****  * USB Events
 293:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 294:./tmk_core/protocol/lufa/lufa.c **** /*
 295:./tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 296:./tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 297:./tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 298:./tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 299:./tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 300:./tmk_core/protocol/lufa/lufa.c **** */
 301:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 302:./tmk_core/protocol/lufa/lufa.c ****  *
 303:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 304:./tmk_core/protocol/lufa/lufa.c ****  */
 305:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void)
 306:./tmk_core/protocol/lufa/lufa.c **** {
 307:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 308:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 309:./tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 312:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 313:./tmk_core/protocol/lufa/lufa.c ****     }
 314:./tmk_core/protocol/lufa/lufa.c **** }
 315:./tmk_core/protocol/lufa/lufa.c **** 
 316:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 317:./tmk_core/protocol/lufa/lufa.c ****  *
 318:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 319:./tmk_core/protocol/lufa/lufa.c ****  */
 320:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void)
 321:./tmk_core/protocol/lufa/lufa.c **** {
 322:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 323:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 324:./tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 325:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 326:./tmk_core/protocol/lufa/lufa.c ****     if (USB_IsInitialized) {
 327:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();  // Disable all interrupts
 328:./tmk_core/protocol/lufa/lufa.c **** 	USB_Controller_Enable();
 329:./tmk_core/protocol/lufa/lufa.c ****         USB_INT_Enable(USB_INT_VBUSTI);
 330:./tmk_core/protocol/lufa/lufa.c ****     }
 331:./tmk_core/protocol/lufa/lufa.c **** */
 332:./tmk_core/protocol/lufa/lufa.c **** }
 333:./tmk_core/protocol/lufa/lufa.c **** 
 334:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 335:./tmk_core/protocol/lufa/lufa.c ****  *
 336:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 337:./tmk_core/protocol/lufa/lufa.c ****  */
 338:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void)
 339:./tmk_core/protocol/lufa/lufa.c **** {
 340:./tmk_core/protocol/lufa/lufa.c ****     print("[R]");
 341:./tmk_core/protocol/lufa/lufa.c **** }
 342:./tmk_core/protocol/lufa/lufa.c **** 
 343:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 344:./tmk_core/protocol/lufa/lufa.c ****  *
 345:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 346:./tmk_core/protocol/lufa/lufa.c ****  */
 347:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend()
 348:./tmk_core/protocol/lufa/lufa.c **** {
 349:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 350:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 351:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 352:./tmk_core/protocol/lufa/lufa.c **** #endif
 353:./tmk_core/protocol/lufa/lufa.c **** }
 354:./tmk_core/protocol/lufa/lufa.c **** 
 355:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 356:./tmk_core/protocol/lufa/lufa.c ****  *
 357:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 358:./tmk_core/protocol/lufa/lufa.c ****  */
 359:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp()
 360:./tmk_core/protocol/lufa/lufa.c **** {
 361:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 362:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 363:./tmk_core/protocol/lufa/lufa.c **** 
 364:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 365:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 366:./tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 367:./tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 368:./tmk_core/protocol/lufa/lufa.c **** #endif
 369:./tmk_core/protocol/lufa/lufa.c **** }
 370:./tmk_core/protocol/lufa/lufa.c **** 
 371:./tmk_core/protocol/lufa/lufa.c **** 
 372:./tmk_core/protocol/lufa/lufa.c **** 
 373:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 374:./tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 375:./tmk_core/protocol/lufa/lufa.c **** #define CONSOLE_FLUSH_SET(b)   do { \
 376:./tmk_core/protocol/lufa/lufa.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {\
 377:./tmk_core/protocol/lufa/lufa.c ****     console_flush = b; \
 378:./tmk_core/protocol/lufa/lufa.c ****   } \
 379:./tmk_core/protocol/lufa/lufa.c **** } while (0)
 380:./tmk_core/protocol/lufa/lufa.c **** 
 381:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 382:./tmk_core/protocol/lufa/lufa.c ****  *
 383:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 384:./tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 385:./tmk_core/protocol/lufa/lufa.c ****  */
 386:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void)
 387:./tmk_core/protocol/lufa/lufa.c **** {
 388:./tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 389:./tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 390:./tmk_core/protocol/lufa/lufa.c ****     count = 0;
 391:./tmk_core/protocol/lufa/lufa.c **** 
 392:./tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 393:./tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 394:./tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 395:./tmk_core/protocol/lufa/lufa.c **** }
 396:./tmk_core/protocol/lufa/lufa.c **** 
 397:./tmk_core/protocol/lufa/lufa.c **** #endif
 398:./tmk_core/protocol/lufa/lufa.c **** 
 399:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 400:./tmk_core/protocol/lufa/lufa.c ****  *
 401:./tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 402:./tmk_core/protocol/lufa/lufa.c ****  *
 403:./tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 404:./tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 405:./tmk_core/protocol/lufa/lufa.c ****  */
 406:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void)
 407:./tmk_core/protocol/lufa/lufa.c **** {
 408:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 409:./tmk_core/protocol/lufa/lufa.c **** 
 410:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 411:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 412:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 413:./tmk_core/protocol/lufa/lufa.c **** 
 414:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 415:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 416:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 417:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 418:./tmk_core/protocol/lufa/lufa.c **** #endif
 419:./tmk_core/protocol/lufa/lufa.c **** 
 420:./tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 421:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Extra HID Report Endpoint */
 422:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(EXTRAKEY_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 423:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 424:./tmk_core/protocol/lufa/lufa.c **** #endif
 425:./tmk_core/protocol/lufa/lufa.c **** 
 426:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 427:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 428:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 429:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 430:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 431:./tmk_core/protocol/lufa/lufa.c **** 									 RAW_EPSIZE, ENDPOINT_BANK_SINGLE);
 432:./tmk_core/protocol/lufa/lufa.c **** #endif
 433:./tmk_core/protocol/lufa/lufa.c **** 
 434:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 435:./tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 436:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 437:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 438:./tmk_core/protocol/lufa/lufa.c **** #if 0
 439:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 440:./tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 441:./tmk_core/protocol/lufa/lufa.c **** #endif
 442:./tmk_core/protocol/lufa/lufa.c **** #endif
 443:./tmk_core/protocol/lufa/lufa.c **** 
 444:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 445:./tmk_core/protocol/lufa/lufa.c ****     /* Setup NKRO HID Report Endpoints */
 446:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
 447:./tmk_core/protocol/lufa/lufa.c ****                                      NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
 448:./tmk_core/protocol/lufa/lufa.c **** #endif
 449:./tmk_core/protocol/lufa/lufa.c **** 
 450:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 451:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 452:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 453:./tmk_core/protocol/lufa/lufa.c **** #endif
 454:./tmk_core/protocol/lufa/lufa.c **** 
 455:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 456:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 457:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 458:./tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 459:./tmk_core/protocol/lufa/lufa.c **** #endif
 460:./tmk_core/protocol/lufa/lufa.c **** }
 461:./tmk_core/protocol/lufa/lufa.c **** 
 462:./tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 463:./tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 464:./tmk_core/protocol/lufa/lufa.c **** 
 465:./tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 466:./tmk_core/protocol/lufa/lufa.c **** 
 467:./tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 468:./tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 469:./tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 470:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 471:./tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 472:./tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 473:./tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 474:./tmk_core/protocol/lufa/lufa.c **** */
 475:./tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 476:./tmk_core/protocol/lufa/lufa.c ****  *
 477:./tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 478:./tmk_core/protocol/lufa/lufa.c ****  */
 479:./tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void)
 480:./tmk_core/protocol/lufa/lufa.c **** {
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 482:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 483:./tmk_core/protocol/lufa/lufa.c **** 
 484:./tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 485:./tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest)
 486:./tmk_core/protocol/lufa/lufa.c ****     {
 487:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 488:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 489:./tmk_core/protocol/lufa/lufa.c ****             {
 490:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 491:./tmk_core/protocol/lufa/lufa.c **** 
 492:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 493:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 494:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 495:./tmk_core/protocol/lufa/lufa.c ****                     // TODO: test/check
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportData = (uint8_t*)&keyboard_report_sent;
 497:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 498:./tmk_core/protocol/lufa/lufa.c ****                     break;
 499:./tmk_core/protocol/lufa/lufa.c ****                 }
 500:./tmk_core/protocol/lufa/lufa.c **** 
 501:./tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 503:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 504:./tmk_core/protocol/lufa/lufa.c ****             }
 505:./tmk_core/protocol/lufa/lufa.c **** 
 506:./tmk_core/protocol/lufa/lufa.c ****             break;
 507:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 508:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:./tmk_core/protocol/lufa/lufa.c ****             {
 510:./tmk_core/protocol/lufa/lufa.c **** 
 511:./tmk_core/protocol/lufa/lufa.c ****                 // Interface
 512:./tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 513:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 514:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 515:./tmk_core/protocol/lufa/lufa.c ****                 case NKRO_INTERFACE:
 516:./tmk_core/protocol/lufa/lufa.c **** #endif
 517:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 518:./tmk_core/protocol/lufa/lufa.c **** 
 519:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsOUTReceived())) {
 520:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 521:./tmk_core/protocol/lufa/lufa.c ****                           return;
 522:./tmk_core/protocol/lufa/lufa.c ****                     }
 523:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_led_stats = Endpoint_Read_8();
 524:./tmk_core/protocol/lufa/lufa.c **** 
 525:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearOUT();
 526:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 527:./tmk_core/protocol/lufa/lufa.c ****                     break;
 528:./tmk_core/protocol/lufa/lufa.c ****                 }
 529:./tmk_core/protocol/lufa/lufa.c **** 
 530:./tmk_core/protocol/lufa/lufa.c ****             }
 531:./tmk_core/protocol/lufa/lufa.c **** 
 532:./tmk_core/protocol/lufa/lufa.c ****             break;
 533:./tmk_core/protocol/lufa/lufa.c **** 
 534:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 535:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 536:./tmk_core/protocol/lufa/lufa.c ****             {
 537:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 538:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 539:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 541:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 542:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 543:./tmk_core/protocol/lufa/lufa.c ****                 }
 544:./tmk_core/protocol/lufa/lufa.c ****             }
 545:./tmk_core/protocol/lufa/lufa.c **** 
 546:./tmk_core/protocol/lufa/lufa.c ****             break;
 547:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 548:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 549:./tmk_core/protocol/lufa/lufa.c ****             {
 550:./tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 551:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 552:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 553:./tmk_core/protocol/lufa/lufa.c **** 
 554:./tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 555:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 556:./tmk_core/protocol/lufa/lufa.c ****                 }
 557:./tmk_core/protocol/lufa/lufa.c ****             }
 558:./tmk_core/protocol/lufa/lufa.c **** 
 559:./tmk_core/protocol/lufa/lufa.c ****             break;
 560:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 561:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 562:./tmk_core/protocol/lufa/lufa.c ****             {
 563:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 564:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 565:./tmk_core/protocol/lufa/lufa.c **** 
 566:./tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 567:./tmk_core/protocol/lufa/lufa.c ****             }
 568:./tmk_core/protocol/lufa/lufa.c **** 
 569:./tmk_core/protocol/lufa/lufa.c ****             break;
 570:./tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 571:./tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 572:./tmk_core/protocol/lufa/lufa.c ****             {
 573:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 577:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 578:./tmk_core/protocol/lufa/lufa.c ****             }
 579:./tmk_core/protocol/lufa/lufa.c **** 
 580:./tmk_core/protocol/lufa/lufa.c ****             break;
 581:./tmk_core/protocol/lufa/lufa.c ****     }
 582:./tmk_core/protocol/lufa/lufa.c **** 
 583:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 584:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 585:./tmk_core/protocol/lufa/lufa.c **** #endif
 586:./tmk_core/protocol/lufa/lufa.c **** }
 587:./tmk_core/protocol/lufa/lufa.c **** 
 588:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 589:./tmk_core/protocol/lufa/lufa.c ****  * Host driver
 590:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 591:./tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 592:./tmk_core/protocol/lufa/lufa.c ****  *
 593:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 594:./tmk_core/protocol/lufa/lufa.c ****  */
 595:./tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void)
 596:./tmk_core/protocol/lufa/lufa.c **** {
  15               		.loc 1 596 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 597:./tmk_core/protocol/lufa/lufa.c ****     return keyboard_led_stats;
  21               		.loc 1 597 5 view .LVU1
 598:./tmk_core/protocol/lufa/lufa.c **** }
  22               		.loc 1 598 1 is_stmt 0 view .LVU2
  23 0000 8091 0000 		lds r24,keyboard_led_stats
  24               	/* epilogue start */
  25 0004 0895      		ret
  26               		.cfi_endproc
  27               	.LFE127:
  29               		.section	.text.send_consumer,"ax",@progbits
  31               	send_consumer:
  32               	.LVL0:
  33               	.LFB131:
 599:./tmk_core/protocol/lufa/lufa.c **** 
 600:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 601:./tmk_core/protocol/lufa/lufa.c ****  *
 602:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 603:./tmk_core/protocol/lufa/lufa.c ****  */
 604:./tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report)
 605:./tmk_core/protocol/lufa/lufa.c **** {
 606:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 607:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 608:./tmk_core/protocol/lufa/lufa.c **** 
 609:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 610:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 611:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 612:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 613:./tmk_core/protocol/lufa/lufa.c ****     #elif MODULE_RN42
 614:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0xFD);
 615:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x09);
 616:./tmk_core/protocol/lufa/lufa.c ****        bluefruit_serial_send(0x01);
 617:./tmk_core/protocol/lufa/lufa.c ****        for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 618:./tmk_core/protocol/lufa/lufa.c ****          bluefruit_serial_send(report->raw[i]);
 619:./tmk_core/protocol/lufa/lufa.c ****        }
 620:./tmk_core/protocol/lufa/lufa.c ****     #else
 621:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 622:./tmk_core/protocol/lufa/lufa.c ****       for (uint8_t i = 0; i < KEYBOARD_EPSIZE; i++) {
 623:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->raw[i]);
 624:./tmk_core/protocol/lufa/lufa.c ****       }
 625:./tmk_core/protocol/lufa/lufa.c ****     #endif
 626:./tmk_core/protocol/lufa/lufa.c ****   }
 627:./tmk_core/protocol/lufa/lufa.c **** #endif
 628:./tmk_core/protocol/lufa/lufa.c **** 
 629:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 630:./tmk_core/protocol/lufa/lufa.c ****       return;
 631:./tmk_core/protocol/lufa/lufa.c ****     }
 632:./tmk_core/protocol/lufa/lufa.c **** 
 633:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 634:./tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 635:./tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 636:./tmk_core/protocol/lufa/lufa.c ****         /* Report protocol - NKRO */
 637:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(NKRO_IN_EPNUM);
 638:./tmk_core/protocol/lufa/lufa.c **** 
 639:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 1ms */
 640:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
 641:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 642:./tmk_core/protocol/lufa/lufa.c **** 
 643:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 644:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
 645:./tmk_core/protocol/lufa/lufa.c ****     }
 646:./tmk_core/protocol/lufa/lufa.c ****     else
 647:./tmk_core/protocol/lufa/lufa.c **** #endif
 648:./tmk_core/protocol/lufa/lufa.c ****     {
 649:./tmk_core/protocol/lufa/lufa.c ****         /* Boot protocol */
 650:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);
 651:./tmk_core/protocol/lufa/lufa.c **** 
 652:./tmk_core/protocol/lufa/lufa.c ****         /* Check if write ready for a polling interval around 10ms */
 653:./tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 654:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 655:./tmk_core/protocol/lufa/lufa.c **** 
 656:./tmk_core/protocol/lufa/lufa.c ****         /* Write Keyboard Report Data */
 657:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
 658:./tmk_core/protocol/lufa/lufa.c ****     }
 659:./tmk_core/protocol/lufa/lufa.c **** 
 660:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:./tmk_core/protocol/lufa/lufa.c **** 
 663:./tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 664:./tmk_core/protocol/lufa/lufa.c **** }
 665:./tmk_core/protocol/lufa/lufa.c ****  
 666:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 667:./tmk_core/protocol/lufa/lufa.c ****  *
 668:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 669:./tmk_core/protocol/lufa/lufa.c ****  */
 670:./tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report)
 671:./tmk_core/protocol/lufa/lufa.c **** {
 672:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 673:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 674:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 675:./tmk_core/protocol/lufa/lufa.c **** 
 676:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 677:./tmk_core/protocol/lufa/lufa.c ****   if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 678:./tmk_core/protocol/lufa/lufa.c ****     #ifdef MODULE_ADAFRUIT_BLE
 679:./tmk_core/protocol/lufa/lufa.c ****       // FIXME: mouse buttons
 680:./tmk_core/protocol/lufa/lufa.c ****       adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 681:./tmk_core/protocol/lufa/lufa.c ****     #else
 682:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0xFD);
 683:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 684:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x03);
 685:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->buttons);
 686:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->x);
 687:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->y);
 688:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->v); // should try sending the wheel v here
 689:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(report->h); // should try sending the wheel h here
 690:./tmk_core/protocol/lufa/lufa.c ****       bluefruit_serial_send(0x00);
 691:./tmk_core/protocol/lufa/lufa.c ****     #endif
 692:./tmk_core/protocol/lufa/lufa.c ****   }
 693:./tmk_core/protocol/lufa/lufa.c **** #endif
 694:./tmk_core/protocol/lufa/lufa.c **** 
 695:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 696:./tmk_core/protocol/lufa/lufa.c ****       return;
 697:./tmk_core/protocol/lufa/lufa.c ****     }
 698:./tmk_core/protocol/lufa/lufa.c **** 
 699:./tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 700:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 701:./tmk_core/protocol/lufa/lufa.c **** 
 702:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 703:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 704:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 705:./tmk_core/protocol/lufa/lufa.c **** 
 706:./tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 707:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 708:./tmk_core/protocol/lufa/lufa.c **** 
 709:./tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 710:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 711:./tmk_core/protocol/lufa/lufa.c **** #endif
 712:./tmk_core/protocol/lufa/lufa.c **** }
 713:./tmk_core/protocol/lufa/lufa.c **** 
 714:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 715:./tmk_core/protocol/lufa/lufa.c ****  *
 716:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 717:./tmk_core/protocol/lufa/lufa.c ****  */
 718:./tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data)
 719:./tmk_core/protocol/lufa/lufa.c **** {
 720:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 721:./tmk_core/protocol/lufa/lufa.c **** 
 722:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 723:./tmk_core/protocol/lufa/lufa.c ****         return;
 724:./tmk_core/protocol/lufa/lufa.c **** 
 725:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
 726:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 727:./tmk_core/protocol/lufa/lufa.c ****         .usage = data - SYSTEM_POWER_DOWN + 1
 728:./tmk_core/protocol/lufa/lufa.c ****     };
 729:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
 730:./tmk_core/protocol/lufa/lufa.c **** 
 731:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 732:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 733:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 734:./tmk_core/protocol/lufa/lufa.c **** 
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 736:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 737:./tmk_core/protocol/lufa/lufa.c **** }
 738:./tmk_core/protocol/lufa/lufa.c **** 
 739:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 740:./tmk_core/protocol/lufa/lufa.c ****  *
 741:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 742:./tmk_core/protocol/lufa/lufa.c ****  */
 743:./tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data)
 744:./tmk_core/protocol/lufa/lufa.c **** {
  34               		.loc 1 744 1 is_stmt 1 view -0
  35               		.cfi_startproc
  36               		.loc 1 744 1 is_stmt 0 view .LVU4
  37 0000 0F93      		push r16
  38               	.LCFI0:
  39               		.cfi_def_cfa_offset 3
  40               		.cfi_offset 16, -2
  41 0002 1F93      		push r17
  42               	.LCFI1:
  43               		.cfi_def_cfa_offset 4
  44               		.cfi_offset 17, -3
  45 0004 CF93      		push r28
  46               	.LCFI2:
  47               		.cfi_def_cfa_offset 5
  48               		.cfi_offset 28, -4
  49 0006 DF93      		push r29
  50               	.LCFI3:
  51               		.cfi_def_cfa_offset 6
  52               		.cfi_offset 29, -5
  53 0008 00D0      		rcall .
  54 000a 0F92      		push __tmp_reg__
  55               	.LCFI4:
  56               		.cfi_def_cfa_offset 9
  57 000c CDB7      		in r28,__SP_L__
  58 000e DEB7      		in r29,__SP_H__
  59               	.LCFI5:
  60               		.cfi_def_cfa_register 28
  61               	/* prologue: function */
  62               	/* frame size = 3 */
  63               	/* stack size = 7 */
  64               	.L__stack_usage = 7
  65 0010 8C01      		movw r16,r24
 745:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
  66               		.loc 1 745 5 is_stmt 1 view .LVU5
  67               	.LVL1:
 746:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
  68               		.loc 1 746 5 view .LVU6
  69               		.loc 1 746 21 is_stmt 0 view .LVU7
  70 0012 0E94 0000 		call where_to_send
  71               	.LVL2:
 747:./tmk_core/protocol/lufa/lufa.c **** 
 748:./tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 749:./tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 750:./tmk_core/protocol/lufa/lufa.c ****       #ifdef MODULE_ADAFRUIT_BLE
 751:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 752:./tmk_core/protocol/lufa/lufa.c ****       #elif MODULE_RN42
 753:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 754:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 755:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 756:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 757:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 758:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 759:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 760:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 761:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 762:./tmk_core/protocol/lufa/lufa.c ****       #else
 763:./tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 764:./tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 765:./tmk_core/protocol/lufa/lufa.c ****         last_data = data;
 766:./tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 767:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 768:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 769:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 770:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap>>8)&0xFF);
 771:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap&0xFF);
 772:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 773:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 774:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 775:./tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 776:./tmk_core/protocol/lufa/lufa.c ****       #endif
 777:./tmk_core/protocol/lufa/lufa.c ****     }
 778:./tmk_core/protocol/lufa/lufa.c **** #endif
 779:./tmk_core/protocol/lufa/lufa.c **** 
 780:./tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
  72               		.loc 1 780 5 is_stmt 1 view .LVU8
  73               		.loc 1 780 8 is_stmt 0 view .LVU9
  74 0016 8230      		cpi r24,lo8(2)
  75 0018 01F0      		breq .L3
  76               		.loc 1 780 29 discriminator 1 view .LVU10
  77 001a 8430      		cpi r24,lo8(4)
  78 001c 01F4      		brne .L2
  79               	.L3:
 781:./tmk_core/protocol/lufa/lufa.c ****       return;
 782:./tmk_core/protocol/lufa/lufa.c ****     }
 783:./tmk_core/protocol/lufa/lufa.c **** 
 784:./tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {
  80               		.loc 1 784 5 is_stmt 1 view .LVU11
  81               		.loc 1 784 20 is_stmt 0 view .LVU12
  82 001e 83E0      		ldi r24,lo8(3)
  83               	.LVL3:
  84               		.loc 1 784 20 view .LVU13
  85 0020 8983      		std Y+1,r24
  86 0022 1B83      		std Y+3,r17
  87 0024 0A83      		std Y+2,r16
 785:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_CONSUMER,
 786:./tmk_core/protocol/lufa/lufa.c ****         .usage = data
 787:./tmk_core/protocol/lufa/lufa.c ****     };
 788:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);
  88               		.loc 1 788 5 is_stmt 1 view .LVU14
  89               	.LVL4:
  90               	.LBB101:
  91               	.LBI101:
  92               		.file 2 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
  93               		.loc 2 267 23 view .LVU15
  94               	.LBB102:
 268:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  95               		.loc 2 270 6 view .LVU16
  96               		.loc 2 270 12 is_stmt 0 view .LVU17
  97 0026 8093 E900 		sts 233,r24
  98               	.LVL5:
  99               		.loc 2 270 12 view .LVU18
 100 002a 8FEF      		ldi r24,lo8(-1)
 101               	.LVL6:
 102               	.L5:
 103               		.loc 2 270 12 view .LVU19
 104               	.LBE102:
 105               	.LBE101:
 106               	.LBB103:
 107               	.LBI103:
 271:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 108               		.loc 2 358 23 is_stmt 1 view .LVU20
 109               	.LBB104:
 359:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 110               		.loc 2 360 5 view .LVU21
 111               		.loc 2 360 14 is_stmt 0 view .LVU22
 112 002c 9091 E800 		lds r25,232
 113 0030 8150      		subi r24,lo8(-(-1))
 114               	.LVL7:
 115               		.loc 2 360 14 view .LVU23
 116               	.LBE104:
 117               	.LBE103:
 789:./tmk_core/protocol/lufa/lufa.c **** 
 790:./tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 791:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 118               		.loc 1 791 22 view .LVU24
 119 0032 95FD      		sbrc r25,5
 120 0034 00C0      		rjmp .L6
 121               		.loc 1 791 57 is_stmt 1 view .LVU25
 122               	.LVL8:
 123               	.LBB105:
 124               	.LBI105:
 125               		.file 3 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** _delay_us(double __us)
 126               		.loc 3 255 1 view .LVU26
 127               	.LBB106:
 256:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	double __tmp ;
 128               		.loc 3 257 2 view .LVU27
 258:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 129               		.loc 3 261 2 view .LVU28
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 130               		.loc 3 262 2 view .LVU29
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 131               		.loc 3 263 2 view .LVU30
 264:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 132               		.loc 3 273 3 view .LVU31
 274:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 133               		.loc 3 276 2 view .LVU32
 134 0036 95ED      		ldi r25,lo8(-43)
 135 0038 9A95      	1:	dec r25
 136 003a 01F4      		brne 1b
 137 003c 0000      		nop
 138               	.LVL9:
 139               		.loc 3 276 2 is_stmt 0 view .LVU33
 140               	.LBE106:
 141               	.LBE105:
 142               		.loc 1 791 11 view .LVU34
 143 003e 8111      		cpse r24,__zero_reg__
 144 0040 00C0      		rjmp .L5
 145               	.LVL10:
 146               	.L6:
 792:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 147               		.loc 1 792 5 is_stmt 1 view .LVU35
 148               	.LBB107:
 149               	.LBI107:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 150               		.loc 2 358 23 view .LVU36
 151               	.LBB108:
 152               		.loc 2 360 5 view .LVU37
 153               		.loc 2 360 14 is_stmt 0 view .LVU38
 154 0042 8091 E800 		lds r24,232
 155               	.LBE108:
 156               	.LBE107:
 157               		.loc 1 792 8 view .LVU39
 158 0046 85FF      		sbrs r24,5
 159 0048 00C0      		rjmp .L2
 793:./tmk_core/protocol/lufa/lufa.c **** 
 794:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 160               		.loc 1 794 5 is_stmt 1 view .LVU40
 161 004a 50E0      		ldi r21,0
 162 004c 40E0      		ldi r20,0
 163 004e 63E0      		ldi r22,lo8(3)
 164 0050 70E0      		ldi r23,0
 165 0052 CE01      		movw r24,r28
 166 0054 0196      		adiw r24,1
 167 0056 0E94 0000 		call Endpoint_Write_Stream_LE
 168               	.LVL11:
 795:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 169               		.loc 1 795 5 view .LVU41
 170               	.LBB109:
 171               	.LBI109:
 361:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 172               		.loc 2 453 23 view .LVU42
 173               	.LBB110:
 454:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 174               		.loc 2 456 6 view .LVU43
 175               		.loc 2 456 13 is_stmt 0 view .LVU44
 176 005a 8091 E800 		lds r24,232
 177 005e 8E77      		andi r24,lo8(126)
 178 0060 8093 E800 		sts 232,r24
 179               	.LVL12:
 180               	.L2:
 181               	/* epilogue start */
 182               		.loc 2 456 13 view .LVU45
 183               	.LBE110:
 184               	.LBE109:
 796:./tmk_core/protocol/lufa/lufa.c **** }
 185               		.loc 1 796 1 view .LVU46
 186 0064 0F90      		pop __tmp_reg__
 187 0066 0F90      		pop __tmp_reg__
 188 0068 0F90      		pop __tmp_reg__
 189 006a DF91      		pop r29
 190 006c CF91      		pop r28
 191 006e 1F91      		pop r17
 192 0070 0F91      		pop r16
 193               	.LVL13:
 194               		.loc 1 796 1 view .LVU47
 195 0072 0895      		ret
 196               		.cfi_endproc
 197               	.LFE131:
 199               		.section	.text.send_system,"ax",@progbits
 201               	send_system:
 202               	.LVL14:
 203               	.LFB130:
 719:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 204               		.loc 1 719 1 is_stmt 1 view -0
 205               		.cfi_startproc
 719:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 206               		.loc 1 719 1 is_stmt 0 view .LVU49
 207 0000 CF93      		push r28
 208               	.LCFI6:
 209               		.cfi_def_cfa_offset 3
 210               		.cfi_offset 28, -2
 211 0002 DF93      		push r29
 212               	.LCFI7:
 213               		.cfi_def_cfa_offset 4
 214               		.cfi_offset 29, -3
 215 0004 00D0      		rcall .
 216 0006 0F92      		push __tmp_reg__
 217               	.LCFI8:
 218               		.cfi_def_cfa_offset 7
 219 0008 CDB7      		in r28,__SP_L__
 220 000a DEB7      		in r29,__SP_H__
 221               	.LCFI9:
 222               		.cfi_def_cfa_register 28
 223               	/* prologue: function */
 224               	/* frame size = 3 */
 225               	/* stack size = 5 */
 226               	.L__stack_usage = 5
 720:./tmk_core/protocol/lufa/lufa.c **** 
 227               		.loc 1 720 5 is_stmt 1 view .LVU50
 228               	.LVL15:
 722:./tmk_core/protocol/lufa/lufa.c ****         return;
 229               		.loc 1 722 5 view .LVU51
 722:./tmk_core/protocol/lufa/lufa.c ****         return;
 230               		.loc 1 722 25 is_stmt 0 view .LVU52
 231 000c 2091 0000 		lds r18,USB_DeviceState
 722:./tmk_core/protocol/lufa/lufa.c ****         return;
 232               		.loc 1 722 8 view .LVU53
 233 0010 2430      		cpi r18,lo8(4)
 234 0012 01F4      		brne .L18
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 235               		.loc 1 725 5 is_stmt 1 view .LVU54
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 236               		.loc 1 725 20 is_stmt 0 view .LVU55
 237 0014 22E0      		ldi r18,lo8(2)
 238 0016 2983      		std Y+1,r18
 727:./tmk_core/protocol/lufa/lufa.c ****     };
 239               		.loc 1 727 43 view .LVU56
 240 0018 8058      		subi r24,-128
 241 001a 9109      		sbc r25,__zero_reg__
 242               	.LVL16:
 725:./tmk_core/protocol/lufa/lufa.c ****         .report_id = REPORT_ID_SYSTEM,
 243               		.loc 1 725 20 view .LVU57
 244 001c 9B83      		std Y+3,r25
 245 001e 8A83      		std Y+2,r24
 729:./tmk_core/protocol/lufa/lufa.c **** 
 246               		.loc 1 729 5 is_stmt 1 view .LVU58
 247               	.LVL17:
 248               	.LBB111:
 249               	.LBI111:
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 250               		.loc 2 267 23 view .LVU59
 251               	.LBB112:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 252               		.loc 2 270 6 view .LVU60
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 253               		.loc 2 270 12 is_stmt 0 view .LVU61
 254 0020 83E0      		ldi r24,lo8(3)
 255               	.LVL18:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 256               		.loc 2 270 12 view .LVU62
 257 0022 8093 E900 		sts 233,r24
 258               	.LVL19:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 259               		.loc 2 270 12 view .LVU63
 260 0026 8FEF      		ldi r24,lo8(-1)
 261               	.LVL20:
 262               	.L20:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 263               		.loc 2 270 12 view .LVU64
 264               	.LBE112:
 265               	.LBE111:
 266               	.LBB113:
 267               	.LBI113:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 268               		.loc 2 358 23 is_stmt 1 view .LVU65
 269               	.LBB114:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 270               		.loc 2 360 5 view .LVU66
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 271               		.loc 2 360 14 is_stmt 0 view .LVU67
 272 0028 9091 E800 		lds r25,232
 273 002c 8150      		subi r24,lo8(-(-1))
 274               	.LVL21:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 275               		.loc 2 360 14 view .LVU68
 276               	.LBE114:
 277               	.LBE113:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 278               		.loc 1 732 22 view .LVU69
 279 002e 95FD      		sbrc r25,5
 280 0030 00C0      		rjmp .L21
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 281               		.loc 1 732 57 is_stmt 1 view .LVU70
 282               	.LVL22:
 283               	.LBB115:
 284               	.LBI115:
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 285               		.loc 3 255 1 view .LVU71
 286               	.LBB116:
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 287               		.loc 3 257 2 view .LVU72
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 288               		.loc 3 261 2 view .LVU73
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 289               		.loc 3 262 2 view .LVU74
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 290               		.loc 3 263 2 view .LVU75
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 291               		.loc 3 273 3 view .LVU76
 292               		.loc 3 276 2 view .LVU77
 293 0032 95ED      		ldi r25,lo8(-43)
 294 0034 9A95      	1:	dec r25
 295 0036 01F4      		brne 1b
 296 0038 0000      		nop
 297               	.LVL23:
 298               		.loc 3 276 2 is_stmt 0 view .LVU78
 299               	.LBE116:
 300               	.LBE115:
 732:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 301               		.loc 1 732 11 view .LVU79
 302 003a 8111      		cpse r24,__zero_reg__
 303 003c 00C0      		rjmp .L20
 304               	.LVL24:
 305               	.L21:
 733:./tmk_core/protocol/lufa/lufa.c **** 
 306               		.loc 1 733 5 is_stmt 1 view .LVU80
 307               	.LBB117:
 308               	.LBI117:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 309               		.loc 2 358 23 view .LVU81
 310               	.LBB118:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 311               		.loc 2 360 5 view .LVU82
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 312               		.loc 2 360 14 is_stmt 0 view .LVU83
 313 003e 8091 E800 		lds r24,232
 314               	.LBE118:
 315               	.LBE117:
 733:./tmk_core/protocol/lufa/lufa.c **** 
 316               		.loc 1 733 8 view .LVU84
 317 0042 85FF      		sbrs r24,5
 318 0044 00C0      		rjmp .L18
 735:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 319               		.loc 1 735 5 is_stmt 1 view .LVU85
 320 0046 50E0      		ldi r21,0
 321 0048 40E0      		ldi r20,0
 322 004a 63E0      		ldi r22,lo8(3)
 323 004c 70E0      		ldi r23,0
 324 004e CE01      		movw r24,r28
 325 0050 0196      		adiw r24,1
 326 0052 0E94 0000 		call Endpoint_Write_Stream_LE
 327               	.LVL25:
 736:./tmk_core/protocol/lufa/lufa.c **** }
 328               		.loc 1 736 5 view .LVU86
 329               	.LBB119:
 330               	.LBI119:
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 331               		.loc 2 453 23 view .LVU87
 332               	.LBB120:
 333               		.loc 2 456 6 view .LVU88
 334               		.loc 2 456 13 is_stmt 0 view .LVU89
 335 0056 8091 E800 		lds r24,232
 336 005a 8E77      		andi r24,lo8(126)
 337 005c 8093 E800 		sts 232,r24
 338               	.LVL26:
 339               	.L18:
 340               	/* epilogue start */
 341               		.loc 2 456 13 view .LVU90
 342               	.LBE120:
 343               	.LBE119:
 737:./tmk_core/protocol/lufa/lufa.c **** 
 344               		.loc 1 737 1 view .LVU91
 345 0060 0F90      		pop __tmp_reg__
 346 0062 0F90      		pop __tmp_reg__
 347 0064 0F90      		pop __tmp_reg__
 348 0066 DF91      		pop r29
 349 0068 CF91      		pop r28
 350 006a 0895      		ret
 351               		.cfi_endproc
 352               	.LFE130:
 354               		.section	.text.send_mouse,"ax",@progbits
 356               	send_mouse:
 357               	.LVL27:
 358               	.LFB129:
 671:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 359               		.loc 1 671 1 is_stmt 1 view -0
 360               		.cfi_startproc
 671:./tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 361               		.loc 1 671 1 is_stmt 0 view .LVU93
 362 0000 CF93      		push r28
 363               	.LCFI10:
 364               		.cfi_def_cfa_offset 3
 365               		.cfi_offset 28, -2
 366 0002 DF93      		push r29
 367               	.LCFI11:
 368               		.cfi_def_cfa_offset 4
 369               		.cfi_offset 29, -3
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 2 */
 373               	.L__stack_usage = 2
 374 0004 EC01      		movw r28,r24
 673:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 375               		.loc 1 673 5 is_stmt 1 view .LVU94
 376               	.LVL28:
 674:./tmk_core/protocol/lufa/lufa.c **** 
 377               		.loc 1 674 5 view .LVU95
 674:./tmk_core/protocol/lufa/lufa.c **** 
 378               		.loc 1 674 21 is_stmt 0 view .LVU96
 379 0006 0E94 0000 		call where_to_send
 380               	.LVL29:
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 381               		.loc 1 695 5 is_stmt 1 view .LVU97
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 382               		.loc 1 695 8 is_stmt 0 view .LVU98
 383 000a 8230      		cpi r24,lo8(2)
 384 000c 01F0      		breq .L31
 695:./tmk_core/protocol/lufa/lufa.c ****       return;
 385               		.loc 1 695 29 discriminator 1 view .LVU99
 386 000e 8430      		cpi r24,lo8(4)
 387 0010 01F4      		brne .L30
 388               	.L31:
 700:./tmk_core/protocol/lufa/lufa.c **** 
 389               		.loc 1 700 5 is_stmt 1 view .LVU100
 390               	.LVL30:
 391               	.LBB121:
 392               	.LBI121:
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 393               		.loc 2 267 23 view .LVU101
 394               	.LBB122:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 395               		.loc 2 270 6 view .LVU102
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 396               		.loc 2 270 12 is_stmt 0 view .LVU103
 397 0012 82E0      		ldi r24,lo8(2)
 398               	.LVL31:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 399               		.loc 2 270 12 view .LVU104
 400 0014 8093 E900 		sts 233,r24
 401               	.LVL32:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 402               		.loc 2 270 12 view .LVU105
 403 0018 8FEF      		ldi r24,lo8(-1)
 404               	.LVL33:
 405               	.L33:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 406               		.loc 2 270 12 view .LVU106
 407               	.LBE122:
 408               	.LBE121:
 409               	.LBB123:
 410               	.LBI123:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 411               		.loc 2 358 23 is_stmt 1 view .LVU107
 412               	.LBB124:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 413               		.loc 2 360 5 view .LVU108
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 414               		.loc 2 360 14 is_stmt 0 view .LVU109
 415 001a 9091 E800 		lds r25,232
 416 001e 8150      		subi r24,lo8(-(-1))
 417               	.LVL34:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 418               		.loc 2 360 14 view .LVU110
 419               	.LBE124:
 420               	.LBE123:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 421               		.loc 1 703 22 view .LVU111
 422 0020 95FD      		sbrc r25,5
 423 0022 00C0      		rjmp .L34
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 424               		.loc 1 703 57 is_stmt 1 view .LVU112
 425               	.LVL35:
 426               	.LBB125:
 427               	.LBI125:
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 428               		.loc 3 255 1 view .LVU113
 429               	.LBB126:
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 430               		.loc 3 257 2 view .LVU114
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 431               		.loc 3 261 2 view .LVU115
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 432               		.loc 3 262 2 view .LVU116
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 433               		.loc 3 263 2 view .LVU117
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 434               		.loc 3 273 3 view .LVU118
 435               		.loc 3 276 2 view .LVU119
 436 0024 95ED      		ldi r25,lo8(-43)
 437 0026 9A95      	1:	dec r25
 438 0028 01F4      		brne 1b
 439 002a 0000      		nop
 440               	.LVL36:
 441               		.loc 3 276 2 is_stmt 0 view .LVU120
 442               	.LBE126:
 443               	.LBE125:
 703:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 444               		.loc 1 703 11 view .LVU121
 445 002c 8111      		cpse r24,__zero_reg__
 446 002e 00C0      		rjmp .L33
 447               	.LVL37:
 448               	.L34:
 704:./tmk_core/protocol/lufa/lufa.c **** 
 449               		.loc 1 704 5 is_stmt 1 view .LVU122
 450               	.LBB127:
 451               	.LBI127:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 452               		.loc 2 358 23 view .LVU123
 453               	.LBB128:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 454               		.loc 2 360 5 view .LVU124
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 455               		.loc 2 360 14 is_stmt 0 view .LVU125
 456 0030 8091 E800 		lds r24,232
 457               	.LBE128:
 458               	.LBE127:
 704:./tmk_core/protocol/lufa/lufa.c **** 
 459               		.loc 1 704 8 view .LVU126
 460 0034 85FF      		sbrs r24,5
 461 0036 00C0      		rjmp .L30
 707:./tmk_core/protocol/lufa/lufa.c **** 
 462               		.loc 1 707 5 is_stmt 1 view .LVU127
 463 0038 50E0      		ldi r21,0
 464 003a 40E0      		ldi r20,0
 465 003c 65E0      		ldi r22,lo8(5)
 466 003e 70E0      		ldi r23,0
 467 0040 CE01      		movw r24,r28
 468 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 469               	.LVL38:
 710:./tmk_core/protocol/lufa/lufa.c **** #endif
 470               		.loc 1 710 5 view .LVU128
 471               	.LBB129:
 472               	.LBI129:
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 473               		.loc 2 453 23 view .LVU129
 474               	.LBB130:
 475               		.loc 2 456 6 view .LVU130
 476               		.loc 2 456 13 is_stmt 0 view .LVU131
 477 0046 8091 E800 		lds r24,232
 478 004a 8E77      		andi r24,lo8(126)
 479 004c 8093 E800 		sts 232,r24
 480               	.LVL39:
 481               	.L30:
 482               	/* epilogue start */
 483               		.loc 2 456 13 view .LVU132
 484               	.LBE130:
 485               	.LBE129:
 712:./tmk_core/protocol/lufa/lufa.c **** 
 486               		.loc 1 712 1 view .LVU133
 487 0050 DF91      		pop r29
 488 0052 CF91      		pop r28
 489               	.LVL40:
 712:./tmk_core/protocol/lufa/lufa.c **** 
 490               		.loc 1 712 1 view .LVU134
 491 0054 0895      		ret
 492               		.cfi_endproc
 493               	.LFE129:
 495               		.section	.text.send_keyboard,"ax",@progbits
 497               	send_keyboard:
 498               	.LVL41:
 499               	.LFB128:
 605:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 500               		.loc 1 605 1 is_stmt 1 view -0
 501               		.cfi_startproc
 605:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 502               		.loc 1 605 1 is_stmt 0 view .LVU136
 503 0000 CF93      		push r28
 504               	.LCFI12:
 505               		.cfi_def_cfa_offset 3
 506               		.cfi_offset 28, -2
 507 0002 DF93      		push r29
 508               	.LCFI13:
 509               		.cfi_def_cfa_offset 4
 510               		.cfi_offset 29, -3
 511               	/* prologue: function */
 512               	/* frame size = 0 */
 513               	/* stack size = 2 */
 514               	.L__stack_usage = 2
 515 0004 EC01      		movw r28,r24
 606:./tmk_core/protocol/lufa/lufa.c ****     uint8_t where = where_to_send();
 516               		.loc 1 606 5 is_stmt 1 view .LVU137
 517               	.LVL42:
 607:./tmk_core/protocol/lufa/lufa.c **** 
 518               		.loc 1 607 5 view .LVU138
 607:./tmk_core/protocol/lufa/lufa.c **** 
 519               		.loc 1 607 21 is_stmt 0 view .LVU139
 520 0006 0E94 0000 		call where_to_send
 521               	.LVL43:
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 522               		.loc 1 629 5 is_stmt 1 view .LVU140
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 523               		.loc 1 629 8 is_stmt 0 view .LVU141
 524 000a 8230      		cpi r24,lo8(2)
 525 000c 01F0      		breq .L50
 629:./tmk_core/protocol/lufa/lufa.c ****       return;
 526               		.loc 1 629 29 discriminator 1 view .LVU142
 527 000e 8430      		cpi r24,lo8(4)
 528 0010 01F4      		brne .L49
 529               	.L50:
 650:./tmk_core/protocol/lufa/lufa.c **** 
 530               		.loc 1 650 9 is_stmt 1 view .LVU143
 531               	.LVL44:
 532               	.LBB131:
 533               	.LBI131:
 267:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 534               		.loc 2 267 23 view .LVU144
 535               	.LBB132:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 536               		.loc 2 270 6 view .LVU145
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 537               		.loc 2 270 12 is_stmt 0 view .LVU146
 538 0012 81E0      		ldi r24,lo8(1)
 539               	.LVL45:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 540               		.loc 2 270 12 view .LVU147
 541 0014 8093 E900 		sts 233,r24
 542               	.LVL46:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 543               		.loc 2 270 12 view .LVU148
 544 0018 8FEF      		ldi r24,lo8(-1)
 545               	.LVL47:
 546               	.L52:
 270:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 547               		.loc 2 270 12 view .LVU149
 548               	.LBE132:
 549               	.LBE131:
 550               	.LBB133:
 551               	.LBI133:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 552               		.loc 2 358 23 is_stmt 1 view .LVU150
 553               	.LBB134:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 554               		.loc 2 360 5 view .LVU151
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 555               		.loc 2 360 14 is_stmt 0 view .LVU152
 556 001a 9091 E800 		lds r25,232
 557 001e 8150      		subi r24,lo8(-(-1))
 558               	.LVL48:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 559               		.loc 2 360 14 view .LVU153
 560               	.LBE134:
 561               	.LBE133:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 562               		.loc 1 653 26 view .LVU154
 563 0020 95FD      		sbrc r25,5
 564 0022 00C0      		rjmp .L53
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 565               		.loc 1 653 61 is_stmt 1 view .LVU155
 566               	.LVL49:
 567               	.LBB135:
 568               	.LBI135:
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** {
 569               		.loc 3 255 1 view .LVU156
 570               	.LBB136:
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 571               		.loc 3 257 2 view .LVU157
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 572               		.loc 3 261 2 view .LVU158
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 573               		.loc 3 262 2 view .LVU159
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 
 574               		.loc 3 263 2 view .LVU160
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/util/delay.h **** 	#endif
 575               		.loc 3 273 3 view .LVU161
 576               		.loc 3 276 2 view .LVU162
 577 0024 95ED      		ldi r25,lo8(-43)
 578 0026 9A95      	1:	dec r25
 579 0028 01F4      		brne 1b
 580 002a 0000      		nop
 581               	.LVL50:
 582               		.loc 3 276 2 is_stmt 0 view .LVU163
 583               	.LBE136:
 584               	.LBE135:
 653:./tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsReadWriteAllowed()) return;
 585               		.loc 1 653 15 view .LVU164
 586 002c 8111      		cpse r24,__zero_reg__
 587 002e 00C0      		rjmp .L52
 588               	.LVL51:
 589               	.L53:
 654:./tmk_core/protocol/lufa/lufa.c **** 
 590               		.loc 1 654 9 is_stmt 1 view .LVU165
 591               	.LBB137:
 592               	.LBI137:
 358:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 593               		.loc 2 358 23 view .LVU166
 594               	.LBB138:
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 595               		.loc 2 360 5 view .LVU167
 360:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 596               		.loc 2 360 14 is_stmt 0 view .LVU168
 597 0030 8091 E800 		lds r24,232
 598               	.LBE138:
 599               	.LBE137:
 654:./tmk_core/protocol/lufa/lufa.c **** 
 600               		.loc 1 654 12 view .LVU169
 601 0034 85FF      		sbrs r24,5
 602 0036 00C0      		rjmp .L49
 657:./tmk_core/protocol/lufa/lufa.c ****     }
 603               		.loc 1 657 9 is_stmt 1 view .LVU170
 604 0038 50E0      		ldi r21,0
 605 003a 40E0      		ldi r20,0
 606 003c 68E0      		ldi r22,lo8(8)
 607 003e 70E0      		ldi r23,0
 608 0040 CE01      		movw r24,r28
 609 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 610               	.LVL52:
 661:./tmk_core/protocol/lufa/lufa.c **** 
 611               		.loc 1 661 5 view .LVU171
 612               	.LBB139:
 613               	.LBI139:
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 614               		.loc 2 453 23 view .LVU172
 615               	.LBB140:
 616               		.loc 2 456 6 view .LVU173
 617               		.loc 2 456 13 is_stmt 0 view .LVU174
 618 0046 8091 E800 		lds r24,232
 619 004a 8E77      		andi r24,lo8(126)
 620 004c 8093 E800 		sts 232,r24
 621               	.LBE140:
 622               	.LBE139:
 663:./tmk_core/protocol/lufa/lufa.c **** }
 623               		.loc 1 663 5 is_stmt 1 view .LVU175
 663:./tmk_core/protocol/lufa/lufa.c **** }
 624               		.loc 1 663 26 is_stmt 0 view .LVU176
 625 0050 88E0      		ldi r24,lo8(8)
 626 0052 FE01      		movw r30,r28
 627 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 628 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 629               		0:
 630 0058 0190      		ld r0,Z+
 631 005a 0D92      		st X+,r0
 632 005c 8A95      		dec r24
 633 005e 01F4      		brne 0b
 634               	.LVL53:
 635               	.L49:
 636               	/* epilogue start */
 664:./tmk_core/protocol/lufa/lufa.c ****  
 637               		.loc 1 664 1 view .LVU177
 638 0060 DF91      		pop r29
 639 0062 CF91      		pop r28
 640               	.LVL54:
 664:./tmk_core/protocol/lufa/lufa.c ****  
 641               		.loc 1 664 1 view .LVU178
 642 0064 0895      		ret
 643               		.cfi_endproc
 644               	.LFE128:
 646               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 647               	.global	EVENT_USB_Device_Connect
 649               	EVENT_USB_Device_Connect:
 650               	.LFB120:
 306:./tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 651               		.loc 1 306 1 is_stmt 1 view -0
 652               		.cfi_startproc
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 0 */
 656               	.L__stack_usage = 0
 307:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 657               		.loc 1 307 17 view .LVU180
 309:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 658               		.loc 1 309 5 view .LVU181
 309:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 659               		.loc 1 309 9 is_stmt 0 view .LVU182
 660 0000 8091 0000 		lds r24,USB_IsInitialized
 309:./tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 661               		.loc 1 309 8 view .LVU183
 662 0004 8111      		cpse r24,__zero_reg__
 663 0006 00C0      		rjmp .L68
 310:./tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 664               		.loc 1 310 9 is_stmt 1 view .LVU184
 665 0008 0E94 0000 		call USB_Disable
 666               	.LVL55:
 311:./tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 667               		.loc 1 311 9 view .LVU185
 668 000c 0E94 0000 		call USB_Init
 669               	.LVL56:
 312:./tmk_core/protocol/lufa/lufa.c ****     }
 670               		.loc 1 312 9 view .LVU186
 671               	.LBB141:
 672               	.LBI141:
 673               		.file 4 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_FLASH_DESCRIPTORS) && defined(USE_RAM_DESCRIPTORS))
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_FLASH_DESCRIPTORS and USE_RAM_DESCRIPTORS are mutually exclusive.
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - please refer to the USB 2.0 specification.
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || \
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      defined(USB_SERIES_4_AVR) || defined(USB_SERIES_2_AVR) || \
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 115:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 116:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 117:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 118:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 119:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 120:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 121:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 122:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 123:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 124:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 125:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 126:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 127:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 128:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 129:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 130:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 131:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 132:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 133:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 134:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 135:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 136:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 137:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 138:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 139:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 140:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 141:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention This function should only be used if the device has indicated to the host that it
 142:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             supports the Remote Wakeup feature in the device descriptors, and should only be
 143:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             issued if the host is currently allowing remote wakeup events from the device (i.
 144:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOT
 145:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             compile time option is used, this function is unavailable.
 146:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             \n\n
 147:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 148:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \attention The USB clock must be running for this function to operate. If the stack is initi
 149:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is 
 150:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *             before attempting to call this function.
 151:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 153:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 155:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 156:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 157:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 158:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 159:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 160:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 161:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 162:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 163:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 164:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 165:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 166:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 167:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 168:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if !defined(NO_SOF_EVENTS)
 169:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 170:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 171:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 172:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 173:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note This function is not available when the \c NO_SOF_EVENTS compile time token is define
 174:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 175:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 674               		.loc 4 176 24 view .LVU187
 675               	.LBE141:
 177:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 178:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Enable(USB_INT_SOFI);
 676               		.loc 4 178 6 view .LVU188
 677               	.LBB144:
 678               	.LBB142:
 679               	.LBI142:
 680               		.file 5 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2017.
   4:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2017  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
 681               		.loc 5 88 23 view .LVU189
 682               	.LBB143:
  89:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
 683               		.loc 5 90 5 view .LVU190
  91:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 684               		.loc 5 113 7 view .LVU191
 685               		.loc 5 113 14 is_stmt 0 view .LVU192
 686 0010 8091 E200 		lds r24,226
 687 0014 8460      		ori r24,lo8(4)
 688 0016 8093 E200 		sts 226,r24
 114:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 689               		.loc 5 114 7 is_stmt 1 view .LVU193
 690               	.LVL57:
 691               	.L68:
 692               	/* epilogue start */
 693               		.loc 5 114 7 is_stmt 0 view .LVU194
 694               	.LBE143:
 695               	.LBE142:
 696               	.LBE144:
 314:./tmk_core/protocol/lufa/lufa.c **** 
 697               		.loc 1 314 1 view .LVU195
 698 001a 0895      		ret
 699               		.cfi_endproc
 700               	.LFE120:
 702               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 703               	.global	EVENT_USB_Device_Disconnect
 705               	EVENT_USB_Device_Disconnect:
 706               	.LFB121:
 321:./tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 707               		.loc 1 321 1 is_stmt 1 view -0
 708               		.cfi_startproc
 709               	/* prologue: function */
 710               	/* frame size = 0 */
 711               	/* stack size = 0 */
 712               	.L__stack_usage = 0
 322:./tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 713               		.loc 1 322 17 view .LVU197
 324:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 714               		.loc 1 324 5 view .LVU198
 324:./tmk_core/protocol/lufa/lufa.c **** /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 715               		.loc 1 324 23 is_stmt 0 view .LVU199
 716 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 717               	/* epilogue start */
 332:./tmk_core/protocol/lufa/lufa.c **** 
 718               		.loc 1 332 1 view .LVU200
 719 0004 0895      		ret
 720               		.cfi_endproc
 721               	.LFE121:
 723               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 724               	.global	EVENT_USB_Device_Reset
 726               	EVENT_USB_Device_Reset:
 727               	.LFB138:
 728               		.cfi_startproc
 729               	/* prologue: function */
 730               	/* frame size = 0 */
 731               	/* stack size = 0 */
 732               	.L__stack_usage = 0
 733               	/* epilogue start */
 734 0000 0895      		ret
 735               		.cfi_endproc
 736               	.LFE138:
 738               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 739               	.global	EVENT_USB_Device_Suspend
 741               	EVENT_USB_Device_Suspend:
 742               	.LFB123:
 348:./tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 743               		.loc 1 348 1 is_stmt 1 view -0
 744               		.cfi_startproc
 745               	/* prologue: function */
 746               	/* frame size = 0 */
 747               	/* stack size = 0 */
 748               	.L__stack_usage = 0
 349:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 749               		.loc 1 349 17 view .LVU202
 750               	/* epilogue start */
 353:./tmk_core/protocol/lufa/lufa.c **** 
 751               		.loc 1 353 1 is_stmt 0 view .LVU203
 752 0000 0895      		ret
 753               		.cfi_endproc
 754               	.LFE123:
 756               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 757               	.global	EVENT_USB_Device_WakeUp
 759               	EVENT_USB_Device_WakeUp:
 760               	.LFB124:
 360:./tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 761               		.loc 1 360 1 is_stmt 1 view -0
 762               		.cfi_startproc
 763               	/* prologue: function */
 764               	/* frame size = 0 */
 765               	/* stack size = 0 */
 766               	.L__stack_usage = 0
 361:./tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 767               		.loc 1 361 17 view .LVU205
 362:./tmk_core/protocol/lufa/lufa.c **** 
 768               		.loc 1 362 5 view .LVU206
 769 0000 0C94 0000 		jmp suspend_wakeup_init
 770               	.LVL58:
 771               		.cfi_endproc
 772               	.LFE124:
 774               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 775               	.global	EVENT_USB_Device_ConfigurationChanged
 777               	EVENT_USB_Device_ConfigurationChanged:
 778               	.LFB125:
 407:./tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 779               		.loc 1 407 1 view -0
 780               		.cfi_startproc
 781               	/* prologue: function */
 782               	/* frame size = 0 */
 783               	/* stack size = 0 */
 784               	.L__stack_usage = 0
 408:./tmk_core/protocol/lufa/lufa.c **** 
 785               		.loc 1 408 5 view .LVU208
 786               	.LVL59:
 411:./tmk_core/protocol/lufa/lufa.c ****                                      KEYBOARD_EPSIZE, ENDPOINT_BANK_SINGLE);
 787               		.loc 1 411 5 view .LVU209
 788               	.LBB145:
 789               	.LBI145:
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 790               		.loc 2 200 23 view .LVU210
 791               	.LBB146:
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 792               		.loc 2 205 5 view .LVU211
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 793               		.loc 2 207 5 view .LVU212
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 794               		.loc 2 210 5 view .LVU213
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 795               		.loc 2 210 5 is_stmt 0 view .LVU214
 796               	.LBE146:
 797               	.LBE145:
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 798               		.loc 2 97 5 is_stmt 1 view .LVU215
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 799               		.loc 2 98 5 view .LVU216
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 800               		.loc 2 100 5 view .LVU217
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 801               		.loc 2 106 5 view .LVU218
 802               	.LBB148:
 803               	.LBB147:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 804               		.loc 2 210 12 is_stmt 0 view .LVU219
 805 0000 42E0      		ldi r20,lo8(2)
 806 0002 61EC      		ldi r22,lo8(-63)
 807 0004 81E0      		ldi r24,lo8(1)
 808 0006 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 809               	.LVL60:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 810               		.loc 2 210 12 view .LVU220
 811               	.LBE147:
 812               	.LBE148:
 416:./tmk_core/protocol/lufa/lufa.c ****                                      MOUSE_EPSIZE, ENDPOINT_BANK_SINGLE);
 813               		.loc 1 416 5 is_stmt 1 view .LVU221
 814               	.LBB149:
 815               	.LBI149:
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 816               		.loc 2 200 23 view .LVU222
 817               	.LBB150:
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 818               		.loc 2 205 5 view .LVU223
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 819               		.loc 2 207 5 view .LVU224
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 820               		.loc 2 210 5 view .LVU225
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 821               		.loc 2 210 5 is_stmt 0 view .LVU226
 822               	.LBE150:
 823               	.LBE149:
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 824               		.loc 2 97 5 is_stmt 1 view .LVU227
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 825               		.loc 2 98 5 view .LVU228
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 826               		.loc 2 100 5 view .LVU229
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 827               		.loc 2 106 5 view .LVU230
 828               	.LBB152:
 829               	.LBB151:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 830               		.loc 2 210 12 is_stmt 0 view .LVU231
 831 000a 42E0      		ldi r20,lo8(2)
 832 000c 61EC      		ldi r22,lo8(-63)
 833 000e 82E0      		ldi r24,lo8(2)
 834 0010 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 835               	.LVL61:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 836               		.loc 2 210 12 view .LVU232
 837               	.LBE151:
 838               	.LBE152:
 422:./tmk_core/protocol/lufa/lufa.c ****                                      EXTRAKEY_EPSIZE, ENDPOINT_BANK_SINGLE);
 839               		.loc 1 422 5 is_stmt 1 view .LVU233
 840               	.LBB153:
 841               	.LBI153:
 200:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 842               		.loc 2 200 23 view .LVU234
 843               	.LBB154:
 205:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 844               		.loc 2 205 5 view .LVU235
 207:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 845               		.loc 2 207 5 view .LVU236
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 846               		.loc 2 210 5 view .LVU237
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 847               		.loc 2 210 5 is_stmt 0 view .LVU238
 848               	.LBE154:
 849               	.LBE153:
  97:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 850               		.loc 2 97 5 is_stmt 1 view .LVU239
  98:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 851               		.loc 2 98 5 view .LVU240
 100:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 852               		.loc 2 100 5 view .LVU241
 106:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 853               		.loc 2 106 5 view .LVU242
 854               	.LBB156:
 855               	.LBB155:
 210:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 856               		.loc 2 210 12 is_stmt 0 view .LVU243
 857 0014 42E0      		ldi r20,lo8(2)
 858 0016 61EC      		ldi r22,lo8(-63)
 859 0018 83E0      		ldi r24,lo8(3)
 860 001a 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 861               	.LVL62:
 862               	.LBE155:
 863               	.LBE156:
 864               		.cfi_endproc
 865               	.LFE125:
 867               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 868               	.global	EVENT_USB_Device_ControlRequest
 870               	EVENT_USB_Device_ControlRequest:
 871               	.LFB126:
 480:./tmk_core/protocol/lufa/lufa.c ****     uint8_t* ReportData = NULL;
 872               		.loc 1 480 1 is_stmt 1 view -0
 873               		.cfi_startproc
 874               	/* prologue: function */
 875               	/* frame size = 0 */
 876               	/* stack size = 0 */
 877               	.L__stack_usage = 0
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 878               		.loc 1 481 5 view .LVU245
 879               	.LVL63:
 482:./tmk_core/protocol/lufa/lufa.c **** 
 880               		.loc 1 482 5 view .LVU246
 485:./tmk_core/protocol/lufa/lufa.c ****     {
 881               		.loc 1 485 5 view .LVU247
 485:./tmk_core/protocol/lufa/lufa.c ****     {
 882               		.loc 1 485 31 is_stmt 0 view .LVU248
 883 0000 8091 0000 		lds r24,USB_ControlRequest+1
 485:./tmk_core/protocol/lufa/lufa.c ****     {
 884               		.loc 1 485 5 view .LVU249
 885 0004 8330      		cpi r24,lo8(3)
 886 0006 01F4      		brne .+2
 887 0008 00C0      		rjmp .L76
 888 000a 00F4      		brsh .L77
 889 000c 8130      		cpi r24,lo8(1)
 890 000e 01F0      		breq .L78
 891 0010 8230      		cpi r24,lo8(2)
 892 0012 01F4      		brne .+2
 893 0014 00C0      		rjmp .L79
 894 0016 0895      		ret
 895               	.L77:
 896 0018 8A30      		cpi r24,lo8(10)
 897 001a 01F4      		brne .+2
 898 001c 00C0      		rjmp .L81
 899 001e 8B30      		cpi r24,lo8(11)
 900 0020 01F4      		brne .+2
 901 0022 00C0      		rjmp .L82
 902 0024 8930      		cpi r24,lo8(9)
 903 0026 01F0      		breq .+2
 904 0028 00C0      		rjmp .L75
 508:./tmk_core/protocol/lufa/lufa.c ****             {
 905               		.loc 1 508 13 is_stmt 1 view .LVU250
 508:./tmk_core/protocol/lufa/lufa.c ****             {
 906               		.loc 1 508 16 is_stmt 0 view .LVU251
 907 002a 8091 0000 		lds r24,USB_ControlRequest
 908 002e 8132      		cpi r24,lo8(33)
 909 0030 01F4      		brne .L75
 512:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 910               		.loc 1 512 17 is_stmt 1 view .LVU252
 911 0032 8091 0000 		lds r24,USB_ControlRequest+4
 912 0036 9091 0000 		lds r25,USB_ControlRequest+4+1
 913 003a 892B      		or r24,r25
 914 003c 01F4      		brne .L75
 517:./tmk_core/protocol/lufa/lufa.c **** 
 915               		.loc 1 517 21 view .LVU253
 916               	.LBB157:
 917               	.LBI157:
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 918               		.loc 2 442 23 view .LVU254
 919               	.LBB158:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 920               		.loc 2 444 5 view .LVU255
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 921               		.loc 2 444 12 is_stmt 0 view .LVU256
 922 003e 8091 E800 		lds r24,232
 923 0042 877F      		andi r24,lo8(-9)
 924 0044 8093 E800 		sts 232,r24
 925               	.L87:
 926               	.LBE158:
 927               	.LBE157:
 928               	.LBB159:
 929               	.LBI159:
 417:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 930               		.loc 2 417 23 is_stmt 1 view .LVU257
 931               	.LBB160:
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 932               		.loc 2 419 5 view .LVU258
 419:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 933               		.loc 2 419 14 is_stmt 0 view .LVU259
 934 0048 8091 E800 		lds r24,232
 935               	.LBE160:
 936               	.LBE159:
 519:./tmk_core/protocol/lufa/lufa.c ****                         if (USB_DeviceState == DEVICE_STATE_Unattached)
 937               		.loc 1 519 27 view .LVU260
 938 004c 82FF      		sbrs r24,2
 939 004e 00C0      		rjmp .L88
 523:./tmk_core/protocol/lufa/lufa.c **** 
 940               		.loc 1 523 21 is_stmt 1 view .LVU261
 941               	.LBB161:
 942               	.LBI161:
 457:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 943               		.loc 2 540 26 view .LVU262
 944               	.LBB162:
 541:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 945               		.loc 2 542 5 view .LVU263
 946               		.loc 2 542 12 is_stmt 0 view .LVU264
 947 0050 8091 F100 		lds r24,241
 948               	.LBE162:
 949               	.LBE161:
 523:./tmk_core/protocol/lufa/lufa.c **** 
 950               		.loc 1 523 40 view .LVU265
 951 0054 8093 0000 		sts keyboard_led_stats,r24
 525:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 952               		.loc 1 525 21 is_stmt 1 view .LVU266
 953               	.LBB163:
 954               	.LBI163:
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 955               		.loc 2 468 23 view .LVU267
 956               	.LBB164:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 957               		.loc 2 471 6 view .LVU268
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 958               		.loc 2 471 13 is_stmt 0 view .LVU269
 959 0058 8091 E800 		lds r24,232
 960 005c 8B77      		andi r24,lo8(123)
 961               	.L99:
 962               	.LBE164:
 963               	.LBE163:
 964               	.LBB165:
 965               	.LBB166:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 966               		.loc 2 456 13 view .LVU270
 967 005e 8093 E800 		sts 232,r24
 968               	.LBE166:
 969               	.LBE165:
 577:./tmk_core/protocol/lufa/lufa.c ****             }
 970               		.loc 1 577 17 is_stmt 1 view .LVU271
 971 0062 0C94 0000 		jmp Endpoint_ClearStatusStage
 972               	.LVL64:
 973               	.L78:
 488:./tmk_core/protocol/lufa/lufa.c ****             {
 974               		.loc 1 488 13 view .LVU272
 488:./tmk_core/protocol/lufa/lufa.c ****             {
 975               		.loc 1 488 16 is_stmt 0 view .LVU273
 976 0066 8091 0000 		lds r24,USB_ControlRequest
 977 006a 813A      		cpi r24,lo8(-95)
 978 006c 01F4      		brne .L75
 490:./tmk_core/protocol/lufa/lufa.c **** 
 979               		.loc 1 490 17 is_stmt 1 view .LVU274
 980               	.LBB168:
 981               	.LBI168:
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 982               		.loc 2 442 23 view .LVU275
 983               	.LBB169:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 984               		.loc 2 444 5 view .LVU276
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 985               		.loc 2 444 12 is_stmt 0 view .LVU277
 986 006e 8091 E800 		lds r24,232
 987 0072 877F      		andi r24,lo8(-9)
 988 0074 8093 E800 		sts 232,r24
 989               	.LBE169:
 990               	.LBE168:
 493:./tmk_core/protocol/lufa/lufa.c ****                 case KEYBOARD_INTERFACE:
 991               		.loc 1 493 17 is_stmt 1 view .LVU278
 992 0078 8091 0000 		lds r24,USB_ControlRequest+4
 993 007c 9091 0000 		lds r25,USB_ControlRequest+4+1
 994 0080 892B      		or r24,r25
 995 0082 01F4      		brne .L91
 497:./tmk_core/protocol/lufa/lufa.c ****                     break;
 996               		.loc 1 497 32 is_stmt 0 view .LVU279
 997 0084 68E0      		ldi r22,lo8(8)
 496:./tmk_core/protocol/lufa/lufa.c ****                     ReportSize = sizeof(keyboard_report_sent);
 998               		.loc 1 496 32 view .LVU280
 999 0086 80E0      		ldi r24,lo8(keyboard_report_sent)
 1000 0088 90E0      		ldi r25,hi8(keyboard_report_sent)
 1001               	.L85:
 1002               	.LVL65:
 502:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 1003               		.loc 1 502 17 is_stmt 1 view .LVU281
 1004 008a 70E0      		ldi r23,0
 1005 008c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 1006               	.LVL66:
 503:./tmk_core/protocol/lufa/lufa.c ****             }
 1007               		.loc 1 503 17 view .LVU282
 1008               	.LBB170:
 1009               	.LBI170:
 468:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1010               		.loc 2 468 23 view .LVU283
 1011               	.LBB171:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1012               		.loc 2 471 6 view .LVU284
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1013               		.loc 2 471 13 is_stmt 0 view .LVU285
 1014 0090 8091 E800 		lds r24,232
 1015 0094 8B77      		andi r24,lo8(123)
 1016 0096 8093 E800 		sts 232,r24
 1017 009a 0895      		ret
 1018               	.LVL67:
 1019               	.L91:
 471:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1020               		.loc 2 471 13 view .LVU286
 1021               	.LBE171:
 1022               	.LBE170:
 482:./tmk_core/protocol/lufa/lufa.c **** 
 1023               		.loc 1 482 14 view .LVU287
 1024 009c 60E0      		ldi r22,0
 481:./tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 1025               		.loc 1 481 14 view .LVU288
 1026 009e 90E0      		ldi r25,0
 1027 00a0 80E0      		ldi r24,0
 1028 00a2 00C0      		rjmp .L85
 1029               	.L88:
 520:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1030               		.loc 1 520 25 is_stmt 1 view .LVU289
 520:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1031               		.loc 1 520 45 is_stmt 0 view .LVU290
 1032 00a4 8091 0000 		lds r24,USB_DeviceState
 520:./tmk_core/protocol/lufa/lufa.c ****                           return;
 1033               		.loc 1 520 28 view .LVU291
 1034 00a8 8111      		cpse r24,__zero_reg__
 1035 00aa 00C0      		rjmp .L87
 1036               	.L75:
 1037               	/* epilogue start */
 586:./tmk_core/protocol/lufa/lufa.c **** 
 1038               		.loc 1 586 1 view .LVU292
 1039 00ac 0895      		ret
 1040               	.L76:
 535:./tmk_core/protocol/lufa/lufa.c ****             {
 1041               		.loc 1 535 13 is_stmt 1 view .LVU293
 535:./tmk_core/protocol/lufa/lufa.c ****             {
 1042               		.loc 1 535 16 is_stmt 0 view .LVU294
 1043 00ae 8091 0000 		lds r24,USB_ControlRequest
 1044 00b2 813A      		cpi r24,lo8(-95)
 1045 00b4 01F4      		brne .L75
 537:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1046               		.loc 1 537 17 is_stmt 1 view .LVU295
 537:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1047               		.loc 1 537 20 is_stmt 0 view .LVU296
 1048 00b6 8091 0000 		lds r24,USB_ControlRequest+4
 1049 00ba 9091 0000 		lds r25,USB_ControlRequest+4+1
 1050 00be 892B      		or r24,r25
 1051 00c0 01F4      		brne .L75
 538:./tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()));
 1052               		.loc 1 538 21 is_stmt 1 view .LVU297
 1053               	.LBB172:
 1054               	.LBI172:
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1055               		.loc 2 442 23 view .LVU298
 1056               	.LBB173:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1057               		.loc 2 444 5 view .LVU299
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1058               		.loc 2 444 12 is_stmt 0 view .LVU300
 1059 00c2 8091 E800 		lds r24,232
 1060 00c6 877F      		andi r24,lo8(-9)
 1061 00c8 8093 E800 		sts 232,r24
 1062               	.L89:
 1063               	.LBE173:
 1064               	.LBE172:
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1065               		.loc 1 539 52 is_stmt 1 discriminator 1 view .LVU301
 1066               	.LBB174:
 1067               	.LBI174:
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1068               		.loc 2 405 23 discriminator 1 view .LVU302
 1069               	.LBB175:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1070               		.loc 2 407 5 discriminator 1 view .LVU303
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1071               		.loc 2 407 14 is_stmt 0 discriminator 1 view .LVU304
 1072 00cc 8091 E800 		lds r24,232
 1073               	.LBE175:
 1074               	.LBE174:
 539:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 1075               		.loc 1 539 27 discriminator 1 view .LVU305
 1076 00d0 80FF      		sbrs r24,0
 1077 00d2 00C0      		rjmp .L89
 540:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 1078               		.loc 1 540 21 is_stmt 1 view .LVU306
 1079 00d4 8091 0000 		lds r24,keyboard_protocol
 1080               	.LVL68:
 1081               	.LBB176:
 1082               	.LBI176:
 543:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 1083               		.loc 2 552 23 view .LVU307
 1084               	.LBB177:
 553:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 1085               		.loc 2 554 5 view .LVU308
 1086               	.L100:
 1087               		.loc 2 554 5 is_stmt 0 view .LVU309
 1088               	.LBE177:
 1089               	.LBE176:
 1090               	.LBB178:
 1091               	.LBI178:
 552:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1092               		.loc 2 552 23 is_stmt 1 view .LVU310
 1093               	.LBB179:
 1094               		.loc 2 554 5 view .LVU311
 1095               		.loc 2 554 12 is_stmt 0 view .LVU312
 1096 00d8 8093 F100 		sts 241,r24
 1097               	.LVL69:
 1098               		.loc 2 554 12 view .LVU313
 1099               	.LBE179:
 1100               	.LBE178:
 576:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1101               		.loc 1 576 17 is_stmt 1 view .LVU314
 1102               	.LBB180:
 1103               	.LBI165:
 453:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1104               		.loc 2 453 23 view .LVU315
 1105               	.LBB167:
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1106               		.loc 2 456 6 view .LVU316
 456:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 1107               		.loc 2 456 13 is_stmt 0 view .LVU317
 1108 00dc 8091 E800 		lds r24,232
 1109 00e0 8E77      		andi r24,lo8(126)
 1110 00e2 00C0      		rjmp .L99
 1111               	.L82:
 1112               	.LBE167:
 1113               	.LBE180:
 548:./tmk_core/protocol/lufa/lufa.c ****             {
 1114               		.loc 1 548 13 is_stmt 1 view .LVU318
 548:./tmk_core/protocol/lufa/lufa.c ****             {
 1115               		.loc 1 548 16 is_stmt 0 view .LVU319
 1116 00e4 8091 0000 		lds r24,USB_ControlRequest
 1117 00e8 8132      		cpi r24,lo8(33)
 1118 00ea 01F4      		brne .L75
 550:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1119               		.loc 1 550 17 is_stmt 1 view .LVU320
 550:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 1120               		.loc 1 550 20 is_stmt 0 view .LVU321
 1121 00ec 8091 0000 		lds r24,USB_ControlRequest+4
 1122 00f0 9091 0000 		lds r25,USB_ControlRequest+4+1
 1123 00f4 892B      		or r24,r25
 1124 00f6 01F4      		brne .L75
 551:./tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 1125               		.loc 1 551 21 is_stmt 1 view .LVU322
 1126               	.LBB181:
 1127               	.LBI181:
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1128               		.loc 2 442 23 view .LVU323
 1129               	.LBB182:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1130               		.loc 2 444 5 view .LVU324
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1131               		.loc 2 444 12 is_stmt 0 view .LVU325
 1132 00f8 8091 E800 		lds r24,232
 1133 00fc 877F      		andi r24,lo8(-9)
 1134 00fe 8093 E800 		sts 232,r24
 1135               	.LBE182:
 1136               	.LBE181:
 552:./tmk_core/protocol/lufa/lufa.c **** 
 1137               		.loc 1 552 21 is_stmt 1 view .LVU326
 1138 0102 0E94 0000 		call Endpoint_ClearStatusStage
 1139               	.LVL70:
 554:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1140               		.loc 1 554 21 view .LVU327
 554:./tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 1141               		.loc 1 554 39 is_stmt 0 view .LVU328
 1142 0106 8091 0000 		lds r24,USB_ControlRequest+2
 1143 010a 8093 0000 		sts keyboard_protocol,r24
 555:./tmk_core/protocol/lufa/lufa.c ****                 }
 1144               		.loc 1 555 21 is_stmt 1 view .LVU329
 1145 010e 0C94 0000 		jmp clear_keyboard
 1146               	.LVL71:
 1147               	.L81:
 561:./tmk_core/protocol/lufa/lufa.c ****             {
 1148               		.loc 1 561 13 view .LVU330
 561:./tmk_core/protocol/lufa/lufa.c ****             {
 1149               		.loc 1 561 16 is_stmt 0 view .LVU331
 1150 0112 8091 0000 		lds r24,USB_ControlRequest
 1151 0116 8132      		cpi r24,lo8(33)
 1152 0118 01F4      		brne .L75
 563:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 1153               		.loc 1 563 17 is_stmt 1 view .LVU332
 1154               	.LBB183:
 1155               	.LBI183:
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1156               		.loc 2 442 23 view .LVU333
 1157               	.LBB184:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1158               		.loc 2 444 5 view .LVU334
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1159               		.loc 2 444 12 is_stmt 0 view .LVU335
 1160 011a 8091 E800 		lds r24,232
 1161 011e 877F      		andi r24,lo8(-9)
 1162 0120 8093 E800 		sts 232,r24
 1163               	.LBE184:
 1164               	.LBE183:
 564:./tmk_core/protocol/lufa/lufa.c **** 
 1165               		.loc 1 564 17 is_stmt 1 view .LVU336
 1166 0124 0E94 0000 		call Endpoint_ClearStatusStage
 1167               	.LVL72:
 566:./tmk_core/protocol/lufa/lufa.c ****             }
 1168               		.loc 1 566 17 view .LVU337
 566:./tmk_core/protocol/lufa/lufa.c ****             }
 1169               		.loc 1 566 71 is_stmt 0 view .LVU338
 1170 0128 8091 0000 		lds r24,USB_ControlRequest+3
 566:./tmk_core/protocol/lufa/lufa.c ****             }
 1171               		.loc 1 566 31 view .LVU339
 1172 012c 8093 0000 		sts keyboard_idle,r24
 1173 0130 0895      		ret
 1174               	.L79:
 571:./tmk_core/protocol/lufa/lufa.c ****             {
 1175               		.loc 1 571 13 is_stmt 1 view .LVU340
 571:./tmk_core/protocol/lufa/lufa.c ****             {
 1176               		.loc 1 571 16 is_stmt 0 view .LVU341
 1177 0132 8091 0000 		lds r24,USB_ControlRequest
 1178 0136 813A      		cpi r24,lo8(-95)
 1179 0138 01F0      		breq .+2
 1180 013a 00C0      		rjmp .L75
 573:./tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()));
 1181               		.loc 1 573 17 is_stmt 1 view .LVU342
 1182               	.LBB185:
 1183               	.LBI185:
 442:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1184               		.loc 2 442 23 view .LVU343
 1185               	.LBB186:
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1186               		.loc 2 444 5 view .LVU344
 444:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1187               		.loc 2 444 12 is_stmt 0 view .LVU345
 1188 013c 8091 E800 		lds r24,232
 1189 0140 877F      		andi r24,lo8(-9)
 1190 0142 8093 E800 		sts 232,r24
 1191               	.L90:
 1192               	.LBE186:
 1193               	.LBE185:
 574:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1194               		.loc 1 574 48 is_stmt 1 discriminator 1 view .LVU346
 1195               	.LBB187:
 1196               	.LBI187:
 405:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 1197               		.loc 2 405 23 discriminator 1 view .LVU347
 1198               	.LBB188:
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1199               		.loc 2 407 5 discriminator 1 view .LVU348
 407:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 1200               		.loc 2 407 14 is_stmt 0 discriminator 1 view .LVU349
 1201 0146 8091 E800 		lds r24,232
 1202               	.LBE188:
 1203               	.LBE187:
 574:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 1204               		.loc 1 574 23 discriminator 1 view .LVU350
 1205 014a 80FF      		sbrs r24,0
 1206 014c 00C0      		rjmp .L90
 575:./tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 1207               		.loc 1 575 17 is_stmt 1 view .LVU351
 1208 014e 8091 0000 		lds r24,keyboard_idle
 1209 0152 00C0      		rjmp .L100
 1210               		.cfi_endproc
 1211               	.LFE126:
 1213               		.section	.text.sendchar,"ax",@progbits
 1214               	.global	sendchar
 1216               	sendchar:
 1217               	.LVL73:
 1218               	.LFB132:
 797:./tmk_core/protocol/lufa/lufa.c **** 
 798:./tmk_core/protocol/lufa/lufa.c **** 
 799:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 800:./tmk_core/protocol/lufa/lufa.c ****  * sendchar
 801:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 802:./tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 803:./tmk_core/protocol/lufa/lufa.c **** #define SEND_TIMEOUT 5
 804:./tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 805:./tmk_core/protocol/lufa/lufa.c ****  *
 806:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 807:./tmk_core/protocol/lufa/lufa.c ****  */
 808:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 809:./tmk_core/protocol/lufa/lufa.c **** {
 810:./tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 811:./tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 812:./tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 813:./tmk_core/protocol/lufa/lufa.c **** 
 814:./tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 815:./tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 816:./tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 817:./tmk_core/protocol/lufa/lufa.c **** 
 818:./tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured)
 819:./tmk_core/protocol/lufa/lufa.c ****         return -1;
 820:./tmk_core/protocol/lufa/lufa.c **** 
 821:./tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 822:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 823:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 824:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 825:./tmk_core/protocol/lufa/lufa.c ****     }
 826:./tmk_core/protocol/lufa/lufa.c **** 
 827:./tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 828:./tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 829:./tmk_core/protocol/lufa/lufa.c ****     }
 830:./tmk_core/protocol/lufa/lufa.c **** 
 831:./tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 832:./tmk_core/protocol/lufa/lufa.c **** 
 833:./tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 834:./tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 835:./tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 836:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 837:./tmk_core/protocol/lufa/lufa.c ****         }
 838:./tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 839:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 840:./tmk_core/protocol/lufa/lufa.c ****         }
 841:./tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 842:./tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 843:./tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 844:./tmk_core/protocol/lufa/lufa.c ****         }
 845:./tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 846:./tmk_core/protocol/lufa/lufa.c ****     }
 847:./tmk_core/protocol/lufa/lufa.c **** 
 848:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 849:./tmk_core/protocol/lufa/lufa.c **** 
 850:./tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 851:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 852:./tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()));
 853:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 854:./tmk_core/protocol/lufa/lufa.c ****     } else {
 855:./tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 856:./tmk_core/protocol/lufa/lufa.c ****     }
 857:./tmk_core/protocol/lufa/lufa.c **** 
 858:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 859:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 860:./tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 861:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 862:./tmk_core/protocol/lufa/lufa.c ****     return -1;
 863:./tmk_core/protocol/lufa/lufa.c **** }
 864:./tmk_core/protocol/lufa/lufa.c **** #else
 865:./tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c)
 866:./tmk_core/protocol/lufa/lufa.c **** {
 1219               		.loc 1 866 1 view -0
 1220               		.cfi_startproc
 1221               	/* prologue: function */
 1222               	/* frame size = 0 */
 1223               	/* stack size = 0 */
 1224               	.L__stack_usage = 0
 867:./tmk_core/protocol/lufa/lufa.c ****     return 0;
 1225               		.loc 1 867 5 view .LVU353
 868:./tmk_core/protocol/lufa/lufa.c **** }
 1226               		.loc 1 868 1 is_stmt 0 view .LVU354
 1227 0000 80E0      		ldi r24,0
 1228               	.LVL74:
 1229               	/* epilogue start */
 1230               		.loc 1 868 1 view .LVU355
 1231 0002 0895      		ret
 1232               		.cfi_endproc
 1233               	.LFE132:
 1235               		.section	.text.startup.main,"ax",@progbits
 1236               		.weak	main
 1238               	main:
 1239               	.LFB135:
 869:./tmk_core/protocol/lufa/lufa.c **** #endif
 870:./tmk_core/protocol/lufa/lufa.c **** 
 871:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 872:./tmk_core/protocol/lufa/lufa.c ****  * MIDI
 873:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 874:./tmk_core/protocol/lufa/lufa.c **** 
 875:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 876:./tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface =
 877:./tmk_core/protocol/lufa/lufa.c **** {
 878:./tmk_core/protocol/lufa/lufa.c ****   .Config =
 879:./tmk_core/protocol/lufa/lufa.c ****   {
 880:./tmk_core/protocol/lufa/lufa.c ****     .StreamingInterfaceNumber = AS_INTERFACE,
 881:./tmk_core/protocol/lufa/lufa.c ****     .DataINEndpoint           =
 882:./tmk_core/protocol/lufa/lufa.c ****     {
 883:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_IN_EPADDR,
 884:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 885:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 886:./tmk_core/protocol/lufa/lufa.c ****     },
 887:./tmk_core/protocol/lufa/lufa.c ****     .DataOUTEndpoint          =
 888:./tmk_core/protocol/lufa/lufa.c ****     {
 889:./tmk_core/protocol/lufa/lufa.c ****       .Address          = MIDI_STREAM_OUT_EPADDR,
 890:./tmk_core/protocol/lufa/lufa.c ****       .Size             = MIDI_STREAM_EPSIZE,
 891:./tmk_core/protocol/lufa/lufa.c ****       .Banks            = 1,
 892:./tmk_core/protocol/lufa/lufa.c ****     },
 893:./tmk_core/protocol/lufa/lufa.c ****   },
 894:./tmk_core/protocol/lufa/lufa.c **** };
 895:./tmk_core/protocol/lufa/lufa.c **** 
 896:./tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t* event) {
 897:./tmk_core/protocol/lufa/lufa.c ****   MIDI_Device_SendEventPacket(&USB_MIDI_Interface, event);
 898:./tmk_core/protocol/lufa/lufa.c **** }
 899:./tmk_core/protocol/lufa/lufa.c **** 
 900:./tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t* const event) {
 901:./tmk_core/protocol/lufa/lufa.c ****   return MIDI_Device_ReceiveEventPacket(&USB_MIDI_Interface, event);
 902:./tmk_core/protocol/lufa/lufa.c **** }
 903:./tmk_core/protocol/lufa/lufa.c **** 
 904:./tmk_core/protocol/lufa/lufa.c **** #endif
 905:./tmk_core/protocol/lufa/lufa.c **** 
 906:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 907:./tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 908:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 909:./tmk_core/protocol/lufa/lufa.c **** 
 910:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 911:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 912:./tmk_core/protocol/lufa/lufa.c ****  *
 913:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:./tmk_core/protocol/lufa/lufa.c ****  */
 915:./tmk_core/protocol/lufa/lufa.c **** void virtser_init(void)
 916:./tmk_core/protocol/lufa/lufa.c **** {
 917:./tmk_core/protocol/lufa/lufa.c ****   cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR ;
 918:./tmk_core/protocol/lufa/lufa.c ****   CDC_Device_SendControlLineStateChange(&cdc_device);
 919:./tmk_core/protocol/lufa/lufa.c **** }
 920:./tmk_core/protocol/lufa/lufa.c **** 
 921:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 922:./tmk_core/protocol/lufa/lufa.c ****  *
 923:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 924:./tmk_core/protocol/lufa/lufa.c ****  */
 925:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__ ((weak));
 926:./tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c)
 927:./tmk_core/protocol/lufa/lufa.c **** {
 928:./tmk_core/protocol/lufa/lufa.c ****   // Ignore by default
 929:./tmk_core/protocol/lufa/lufa.c **** }
 930:./tmk_core/protocol/lufa/lufa.c **** 
 931:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 932:./tmk_core/protocol/lufa/lufa.c ****  *
 933:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 934:./tmk_core/protocol/lufa/lufa.c ****  */
 935:./tmk_core/protocol/lufa/lufa.c **** void virtser_task(void)
 936:./tmk_core/protocol/lufa/lufa.c **** {
 937:./tmk_core/protocol/lufa/lufa.c ****   uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 938:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ch;
 939:./tmk_core/protocol/lufa/lufa.c ****   if (count)
 940:./tmk_core/protocol/lufa/lufa.c ****   {
 941:./tmk_core/protocol/lufa/lufa.c ****     ch = CDC_Device_ReceiveByte(&cdc_device);
 942:./tmk_core/protocol/lufa/lufa.c ****     virtser_recv(ch);
 943:./tmk_core/protocol/lufa/lufa.c ****   }
 944:./tmk_core/protocol/lufa/lufa.c **** }
 945:./tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 946:./tmk_core/protocol/lufa/lufa.c ****  *
 947:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 948:./tmk_core/protocol/lufa/lufa.c ****  */
 949:./tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte)
 950:./tmk_core/protocol/lufa/lufa.c **** {
 951:./tmk_core/protocol/lufa/lufa.c ****   uint8_t timeout = 255;
 952:./tmk_core/protocol/lufa/lufa.c ****   uint8_t ep = Endpoint_GetCurrentEndpoint();
 953:./tmk_core/protocol/lufa/lufa.c **** 
 954:./tmk_core/protocol/lufa/lufa.c ****   if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR)
 955:./tmk_core/protocol/lufa/lufa.c ****   {
 956:./tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 957:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 958:./tmk_core/protocol/lufa/lufa.c **** 
 959:./tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 960:./tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 961:./tmk_core/protocol/lufa/lufa.c ****         return;
 962:./tmk_core/protocol/lufa/lufa.c ****     }
 963:./tmk_core/protocol/lufa/lufa.c **** 
 964:./tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 965:./tmk_core/protocol/lufa/lufa.c **** 
 966:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(byte);
 967:./tmk_core/protocol/lufa/lufa.c ****     CDC_Device_Flush(&cdc_device);
 968:./tmk_core/protocol/lufa/lufa.c **** 
 969:./tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 970:./tmk_core/protocol/lufa/lufa.c ****       Endpoint_ClearIN();
 971:./tmk_core/protocol/lufa/lufa.c ****     }
 972:./tmk_core/protocol/lufa/lufa.c **** 
 973:./tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 974:./tmk_core/protocol/lufa/lufa.c ****   }
 975:./tmk_core/protocol/lufa/lufa.c **** }
 976:./tmk_core/protocol/lufa/lufa.c **** #endif
 977:./tmk_core/protocol/lufa/lufa.c **** 
 978:./tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 979:./tmk_core/protocol/lufa/lufa.c ****  * main
 980:./tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 981:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 982:./tmk_core/protocol/lufa/lufa.c ****  *
 983:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 984:./tmk_core/protocol/lufa/lufa.c ****  */
 985:./tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void)
 986:./tmk_core/protocol/lufa/lufa.c **** {
 987:./tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 988:./tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 989:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 990:./tmk_core/protocol/lufa/lufa.c **** 
 991:./tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 992:./tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 993:./tmk_core/protocol/lufa/lufa.c **** 
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 995:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 996:./tmk_core/protocol/lufa/lufa.c **** }
 997:./tmk_core/protocol/lufa/lufa.c **** 
 998:./tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 999:./tmk_core/protocol/lufa/lufa.c ****  *
1000:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1001:./tmk_core/protocol/lufa/lufa.c ****  */
1002:./tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void)
1003:./tmk_core/protocol/lufa/lufa.c **** {
1004:./tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
1005:./tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
1006:./tmk_core/protocol/lufa/lufa.c **** 
1007:./tmk_core/protocol/lufa/lufa.c ****     USB_Init();
1008:./tmk_core/protocol/lufa/lufa.c **** 
1009:./tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
1010:./tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
1011:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
1012:./tmk_core/protocol/lufa/lufa.c **** }
1013:./tmk_core/protocol/lufa/lufa.c **** 
1014:./tmk_core/protocol/lufa/lufa.c **** /** \brief Main
1015:./tmk_core/protocol/lufa/lufa.c ****  *
1016:./tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
1017:./tmk_core/protocol/lufa/lufa.c ****  */
1018:./tmk_core/protocol/lufa/lufa.c **** int main(void)  __attribute__ ((weak));
1019:./tmk_core/protocol/lufa/lufa.c **** int main(void)
1020:./tmk_core/protocol/lufa/lufa.c **** {
 1240               		.loc 1 1020 1 is_stmt 1 view -0
 1241               		.cfi_startproc
 1242               	/* prologue: function */
 1243               	/* frame size = 0 */
 1244               	/* stack size = 0 */
 1245               	.L__stack_usage = 0
1021:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1022:./tmk_core/protocol/lufa/lufa.c ****     setup_midi();
1023:./tmk_core/protocol/lufa/lufa.c **** #endif
1024:./tmk_core/protocol/lufa/lufa.c **** 
1025:./tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 1246               		.loc 1 1025 5 view .LVU357
 1247               	.LBB198:
 1248               	.LBI198:
 985:./tmk_core/protocol/lufa/lufa.c **** {
 1249               		.loc 1 985 13 view .LVU358
 1250               	.LBB199:
 988:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1251               		.loc 1 988 5 view .LVU359
 988:./tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 1252               		.loc 1 988 11 is_stmt 0 view .LVU360
 1253 0000 84B7      		in r24,0x34
 1254 0002 877F      		andi r24,lo8(-9)
 1255 0004 84BF      		out 0x34,r24
 989:./tmk_core/protocol/lufa/lufa.c **** 
 1256               		.loc 1 989 5 is_stmt 1 view .LVU361
 1257               	.LBB200:
 1258               	.LBI200:
 1259               		.file 6 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** void wdt_disable (void)
 1260               		.loc 6 447 6 view .LVU362
 1261               	.LBE200:
 1262               	.LBE199:
 1263               	.LBE198:
 448:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 1264               		.loc 6 449 2 view .LVU363
 1265               	.LBB204:
 1266               	.LBB203:
 1267               	.LBB202:
 1268               	.LBB201:
 450:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 1269               		.loc 6 469 9 view .LVU364
 470:/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 1270               		.loc 6 470 3 view .LVU365
 1271               	/* #APP */
 1272               	 ;  470 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/avr/wdt.h" 1
 1273 0006 0FB6      		in __tmp_reg__,__SREG__
 1274 0008 F894      		cli
 1275 000a A895      		wdr
 1276 000c 8091 6000 		lds r24,96
 1277 0010 8861      		ori r24,24
 1278 0012 8093 6000 		sts 96,r24
 1279 0016 1092 6000 		sts 96,__zero_reg__
 1280 001a 0FBE      		out __SREG__,__tmp_reg__
 1281               		
 1282               	 ;  0 "" 2
 1283               	/* #NOAPP */
 1284               	.LBE201:
 1285               	.LBE202:
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1286               		.loc 1 994 5 view .LVU366
 994:./tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 1287               		.loc 1 994 11 is_stmt 0 view .LVU367
 1288 001c 80E8      		ldi r24,lo8(-128)
 1289 001e 8093 6100 		sts 97,r24
 995:./tmk_core/protocol/lufa/lufa.c **** }
 1290               		.loc 1 995 5 is_stmt 1 view .LVU368
 995:./tmk_core/protocol/lufa/lufa.c **** }
 1291               		.loc 1 995 11 is_stmt 0 view .LVU369
 1292 0022 1092 6100 		sts 97,__zero_reg__
 1293               	.LBE203:
 1294               	.LBE204:
1026:./tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 1295               		.loc 1 1026 5 is_stmt 1 view .LVU370
 1296 0026 0E94 0000 		call keyboard_setup
 1297               	.LVL75:
1027:./tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 1298               		.loc 1 1027 5 view .LVU371
 1299               	.LBB205:
 1300               	.LBI205:
1002:./tmk_core/protocol/lufa/lufa.c **** {
 1301               		.loc 1 1002 13 view .LVU372
 1302               	.LBB206:
1005:./tmk_core/protocol/lufa/lufa.c **** 
 1303               		.loc 1 1005 5 view .LVU373
 1304 002a 0E94 0000 		call USB_Disable
 1305               	.LVL76:
1007:./tmk_core/protocol/lufa/lufa.c **** 
 1306               		.loc 1 1007 5 view .LVU374
 1307 002e 0E94 0000 		call USB_Init
 1308               	.LVL77:
1010:./tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 1309               		.loc 1 1010 5 view .LVU375
 1310               	.LBB207:
 1311               	.LBI207:
 176:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 1312               		.loc 4 176 24 view .LVU376
 1313               	.LBE207:
 1314               	.LBE206:
 1315               	.LBE205:
 1316               		.loc 4 178 6 view .LVU377
 1317               	.LBB212:
 1318               	.LBB211:
 1319               	.LBB210:
 1320               	.LBB208:
 1321               	.LBI208:
  88:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
 1322               		.loc 5 88 23 view .LVU378
 1323               	.LBB209:
  90:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
 1324               		.loc 5 90 5 view .LVU379
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 1325               		.loc 5 113 7 view .LVU380
 113:./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 1326               		.loc 5 113 14 is_stmt 0 view .LVU381
 1327 0032 8091 E200 		lds r24,226
 1328 0036 8460      		ori r24,lo8(4)
 1329 0038 8093 E200 		sts 226,r24
 1330               		.loc 5 114 7 is_stmt 1 view .LVU382
 1331               	.LVL78:
 1332               		.loc 5 114 7 is_stmt 0 view .LVU383
 1333               	.LBE209:
 1334               	.LBE208:
 1335               	.LBE210:
1011:./tmk_core/protocol/lufa/lufa.c **** }
 1336               		.loc 1 1011 33 is_stmt 1 view .LVU384
 1337               	.LBE211:
 1338               	.LBE212:
1028:./tmk_core/protocol/lufa/lufa.c ****     sei();
 1339               		.loc 1 1028 5 view .LVU385
 1340               	/* #APP */
 1341               	 ;  1028 "./tmk_core/protocol/lufa/lufa.c" 1
 1342 003c 7894      		sei
 1343               	 ;  0 "" 2
1029:./tmk_core/protocol/lufa/lufa.c **** 
1030:./tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
1031:./tmk_core/protocol/lufa/lufa.c ****     serial_init();
1032:./tmk_core/protocol/lufa/lufa.c **** #endif
1033:./tmk_core/protocol/lufa/lufa.c **** 
1034:./tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
1035:./tmk_core/protocol/lufa/lufa.c **** 
1036:./tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
1037:./tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
1038:./tmk_core/protocol/lufa/lufa.c ****     #if defined(INTERRUPT_CONTROL_ENDPOINT)
1039:./tmk_core/protocol/lufa/lufa.c ****             ;
1040:./tmk_core/protocol/lufa/lufa.c ****     #else
1041:./tmk_core/protocol/lufa/lufa.c ****             USB_USBTask();
1042:./tmk_core/protocol/lufa/lufa.c ****     #endif
1043:./tmk_core/protocol/lufa/lufa.c ****     }
1044:./tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
1045:./tmk_core/protocol/lufa/lufa.c **** #else
1046:./tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 1344               		.loc 1 1046 5 view .LVU386
 1345               	/* #NOAPP */
 1346 003e 0E94 0000 		call USB_USBTask
 1347               	.LVL79:
1047:./tmk_core/protocol/lufa/lufa.c **** #endif
1048:./tmk_core/protocol/lufa/lufa.c ****     /* init modules */
1049:./tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 1348               		.loc 1 1049 5 view .LVU387
 1349 0042 0E94 0000 		call keyboard_init
 1350               	.LVL80:
1050:./tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 1351               		.loc 1 1050 5 view .LVU388
 1352 0046 80E0      		ldi r24,lo8(lufa_driver)
 1353 0048 90E0      		ldi r25,hi8(lufa_driver)
 1354 004a 0E94 0000 		call host_set_driver
 1355               	.LVL81:
 1356               	.L103:
1051:./tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
1052:./tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
1053:./tmk_core/protocol/lufa/lufa.c **** #endif
1054:./tmk_core/protocol/lufa/lufa.c **** 
1055:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1056:./tmk_core/protocol/lufa/lufa.c ****     virtser_init();
1057:./tmk_core/protocol/lufa/lufa.c **** #endif
1058:./tmk_core/protocol/lufa/lufa.c **** 
1059:./tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
1060:./tmk_core/protocol/lufa/lufa.c ****     while (1) {
1061:./tmk_core/protocol/lufa/lufa.c ****         #if !defined(NO_USB_STARTUP_CHECK)
1062:./tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 1357               		.loc 1 1062 32 is_stmt 0 view .LVU389
 1358 004e 8091 0000 		lds r24,USB_DeviceState
 1359               		.loc 1 1062 15 view .LVU390
 1360 0052 8530      		cpi r24,lo8(5)
 1361 0054 01F0      		breq .L107
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
1064:./tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
1065:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
1066:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
1067:./tmk_core/protocol/lufa/lufa.c ****             }
1068:./tmk_core/protocol/lufa/lufa.c ****         }
1069:./tmk_core/protocol/lufa/lufa.c ****         #endif
1070:./tmk_core/protocol/lufa/lufa.c **** 
1071:./tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 1362               		.loc 1 1071 9 is_stmt 1 view .LVU391
 1363 0056 0E94 0000 		call keyboard_task
 1364               	.LVL82:
1072:./tmk_core/protocol/lufa/lufa.c **** 
1073:./tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1074:./tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1075:./tmk_core/protocol/lufa/lufa.c **** #endif
1076:./tmk_core/protocol/lufa/lufa.c **** 
1077:./tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1078:./tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 1365               		.loc 1 1078 9 view .LVU392
 1366 005a 0E94 0000 		call rgblight_task
 1367               	.LVL83:
1062:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1368               		.loc 1 1062 15 is_stmt 0 view .LVU393
 1369 005e 00C0      		rjmp .L103
 1370               	.L107:
1063:./tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 1371               		.loc 1 1063 25 is_stmt 1 view .LVU394
1064:./tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 1372               		.loc 1 1064 13 view .LVU395
 1373 0060 0E94 0000 		call suspend_power_down
 1374               	.LVL84:
1065:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1375               		.loc 1 1065 13 view .LVU396
1065:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1376               		.loc 1 1065 16 is_stmt 0 view .LVU397
 1377 0064 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1378 0068 8823      		tst r24
 1379 006a 01F0      		breq .L103
1065:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1380               		.loc 1 1065 51 discriminator 1 view .LVU398
 1381 006c 0E94 0000 		call suspend_wakeup_condition
 1382               	.LVL85:
1065:./tmk_core/protocol/lufa/lufa.c ****                     USB_Device_SendRemoteWakeup();
 1383               		.loc 1 1065 48 discriminator 1 view .LVU399
 1384 0070 8823      		tst r24
 1385 0072 01F0      		breq .L103
1066:./tmk_core/protocol/lufa/lufa.c ****             }
 1386               		.loc 1 1066 21 is_stmt 1 view .LVU400
 1387 0074 0E94 0000 		call USB_Device_SendRemoteWakeup
 1388               	.LVL86:
 1389 0078 00C0      		rjmp .L103
 1390               		.cfi_endproc
 1391               	.LFE135:
 1393               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 1394               	.global	CALLBACK_USB_GetDescriptor
 1396               	CALLBACK_USB_GetDescriptor:
 1397               	.LVL87:
 1398               	.LFB136:
1079:./tmk_core/protocol/lufa/lufa.c **** #endif
1080:./tmk_core/protocol/lufa/lufa.c **** 
1081:./tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1082:./tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1083:./tmk_core/protocol/lufa/lufa.c **** #endif
1084:./tmk_core/protocol/lufa/lufa.c **** 
1085:./tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1086:./tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1087:./tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1088:./tmk_core/protocol/lufa/lufa.c **** #endif
1089:./tmk_core/protocol/lufa/lufa.c **** 
1090:./tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1091:./tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1092:./tmk_core/protocol/lufa/lufa.c **** #endif
1093:./tmk_core/protocol/lufa/lufa.c **** 
1094:./tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1095:./tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1096:./tmk_core/protocol/lufa/lufa.c **** #endif
1097:./tmk_core/protocol/lufa/lufa.c **** 
1098:./tmk_core/protocol/lufa/lufa.c ****     }
1099:./tmk_core/protocol/lufa/lufa.c **** }
1100:./tmk_core/protocol/lufa/lufa.c **** 
1101:./tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
1102:./tmk_core/protocol/lufa/lufa.c ****                                     const uint16_t wIndex,
1103:./tmk_core/protocol/lufa/lufa.c ****                                     const void** const DescriptorAddress)
1104:./tmk_core/protocol/lufa/lufa.c **** {
 1399               		.loc 1 1104 1 view -0
 1400               		.cfi_startproc
 1401               	/* prologue: function */
 1402               	/* frame size = 0 */
 1403               	/* stack size = 0 */
 1404               	.L__stack_usage = 0
1105:./tmk_core/protocol/lufa/lufa.c ****   return get_usb_descriptor(wValue, wIndex, DescriptorAddress);
 1405               		.loc 1 1105 3 view .LVU402
 1406               		.loc 1 1105 10 is_stmt 0 view .LVU403
 1407 0000 0C94 0000 		jmp get_usb_descriptor
 1408               	.LVL88:
 1409               		.loc 1 1105 10 view .LVU404
 1410               		.cfi_endproc
 1411               	.LFE136:
 1413               	.global	lufa_driver
 1414               		.section	.data.lufa_driver,"aw"
 1417               	lufa_driver:
 1418 0000 0000      		.word	gs(keyboard_leds)
 1419 0002 0000      		.word	gs(send_keyboard)
 1420 0004 0000      		.word	gs(send_mouse)
 1421 0006 0000      		.word	gs(send_system)
 1422 0008 0000      		.word	gs(send_consumer)
 1423               		.section	.bss.keyboard_report_sent,"aw",@nobits
 1426               	keyboard_report_sent:
 1427 0000 0000 0000 		.zero	8
 1427      0000 0000 
 1428               		.section	.bss.keyboard_led_stats,"aw",@nobits
 1431               	keyboard_led_stats:
 1432 0000 00        		.zero	1
 1433               	.global	keyboard_protocol
 1434               		.section	.data.keyboard_protocol,"aw"
 1437               	keyboard_protocol:
 1438 0000 01        		.byte	1
 1439               	.global	keyboard_idle
 1440               		.section	.bss.keyboard_idle,"aw",@nobits
 1443               	keyboard_idle:
 1444 0000 00        		.zero	1
 1445               		.text
 1446               	.Letext0:
 1447               		.file 7 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdint.h"
 1448               		.file 8 "./tmk_core/common/report.h"
 1449               		.file 9 "./tmk_core/common/host_driver.h"
 1450               		.file 10 "./tmk_core/common/host.h"
 1451               		.file 11 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/lib/avr-gcc/8/gcc/avr/8.3.0/include/stddef.h"
 1452               		.file 12 "./tmk_core/common/debug.h"
 1453               		.file 13 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 1454               		.file 14 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 1455               		.file 15 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 1456               		.file 16 "./lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 1457               		.file 17 "./lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 1458               		.file 18 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdio.h"
 1459               		.file 19 "./lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 1460               		.file 20 "./tmk_core/protocol/lufa/lufa.h"
 1461               		.file 21 "./quantum/keycode_config.h"
 1462               		.file 22 "./quantum/keymap.h"
 1463               		.file 23 "./quantum/rgblight_types.h"
 1464               		.file 24 "./quantum/rgblight.h"
 1465               		.file 25 "./tmk_core/common/action_layer.h"
 1466               		.file 26 "./tmk_core/common/timer.h"
 1467               		.file 27 "./tmk_core/common/action_util.h"
 1468               		.file 28 "/usr/local/Cellar/avr-gcc@8/8.3.0_1/avr/include/stdlib.h"
 1469               		.file 29 "./quantum/process_keycode/process_tap_dance.h"
 1470               		.file 30 "./quantum/quantum.h"
 1471               		.file 31 "./tmk_core/protocol/lufa/outputselect.h"
 1472               		.file 32 "tmk_core/protocol/usb_descriptor.h"
 1473               		.file 33 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 1474               		.file 34 "./tmk_core/common/keyboard.h"
 1475               		.file 35 "./tmk_core/common/suspend.h"
 1476               		.file 36 "./lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 1477               		.file 37 "./tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:4      *ABS*:000000000000003f __SREG__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1431   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:31     .text.send_consumer:0000000000000000 send_consumer
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:201    .text.send_system:0000000000000000 send_system
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:356    .text.send_mouse:0000000000000000 send_mouse
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:497    .text.send_keyboard:0000000000000000 send_keyboard
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1426   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:649    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:705    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:726    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:741    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:759    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:777    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:870    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1437   .data.keyboard_protocol:0000000000000000 keyboard_protocol
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1443   .bss.keyboard_idle:0000000000000000 keyboard_idle
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1216   .text.sendchar:0000000000000000 sendchar
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1238   .text.startup.main:0000000000000000 main
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1417   .data.lufa_driver:0000000000000000 lufa_driver
/var/folders/3d/n9bt7hnj55x7z_fzmyrbdqym0000gp/T//cctOkB51.s:1396   .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_DeviceState
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
rgblight_task
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
get_usb_descriptor
__do_copy_data
__do_clear_bss
